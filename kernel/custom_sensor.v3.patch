diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index 4ca0cdfa6b33..d8c0093d9338 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -1084,21 +1084,6 @@ config HID_SENSOR_HUB
 	  for events and handle data streams. Each sensor driver can format
 	  data and present to user mode using input or IIO interface.
 
-config HID_SENSOR_CUSTOM_SENSOR
-	tristate "HID Sensors hub custom sensor support"
-	depends on HID_SENSOR_HUB
-	default n
-	---help---
-	  HID Sensor hub specification allows definition of some custom and
-	  generic sensors. Unlike other HID sensors, they can't be exported
-	  via Linux IIO because of custom fields. This is up to the manufacturer
-	  to decide how to interpret these special sensor ids and process in
-	  the user space. Currently some manufacturers are using these ids for
-	  sensor calibration and debugging other sensors. Manufacturers
-	  should't use these special custom sensor ids to export any of the
-	  standard sensors.
-	  Select this config option for custom/generic sensor support.
-
 config HID_ALPS
 	tristate "Alps HID device support"
 	depends on HID
diff --git a/drivers/hid/Makefile b/drivers/hid/Makefile
index 170163b41303..334335534741 100644
--- a/drivers/hid/Makefile
+++ b/drivers/hid/Makefile
@@ -125,7 +125,6 @@ obj-$(CONFIG_HID_WACOM)		+= wacom.o
 obj-$(CONFIG_HID_WALTOP)	+= hid-waltop.o
 obj-$(CONFIG_HID_WIIMOTE)	+= hid-wiimote.o
 obj-$(CONFIG_HID_SENSOR_HUB)	+= hid-sensor-hub.o
-obj-$(CONFIG_HID_SENSOR_CUSTOM_SENSOR)	+= hid-sensor-custom.o
 
 obj-$(CONFIG_USB_HID)		+= usbhid/
 obj-$(CONFIG_USB_MOUSE)		+= usbhid/
diff --git a/drivers/iio/custom/Kconfig b/drivers/iio/custom/Kconfig
new file mode 100644
index 000000000000..ead95dc70eeb
--- /dev/null
+++ b/drivers/iio/custom/Kconfig
@@ -0,0 +1,22 @@
+#
+# Custom sensor drivers
+#
+# When adding new entries keep the list in alphabetical order
+
+menu "Custom sensors"
+
+config HID_SENSOR_CUSTOM_SENSOR
+	tristate "HID Sensors hub custom sensor support"
+	depends on HID_SENSOR_HUB
+	default n
+	---help---
+	  HID Sensor hub specification allows definition of some custom and
+	  generic sensors. This is up to the manufacturer to decide how to
+	  interpret these special sensor ids and process in the user space.
+	  Currently some manufacturers are using these ids for virtual sensor,
+	  sensor calibration and debugging other sensors. Manufacturers
+	  should't use these special custom sensor ids to export any of the
+	  standard sensors.
+	  Select this config option for hid custom/generic sensor support.
+
+endmenu
diff --git a/drivers/iio/custom/Makefile b/drivers/iio/custom/Makefile
new file mode 100644
index 000000000000..318fa5f4f413
--- /dev/null
+++ b/drivers/iio/custom/Makefile
@@ -0,0 +1,7 @@
+# SPDX-License-Identifier: GPL-2.0
+#
+# Makefile for industrial I/O custom sensor drivers
+#
+
+# When adding new entries keep the list in alphabetical order
+obj-$(CONFIG_HID_SENSOR_CUSTOM_SENSOR) += hid-sensor-custom.o
diff --git a/drivers/hid/hid-sensor-custom.c b/drivers/iio/custom/hid-sensor-custom.c
similarity index 62%
rename from drivers/hid/hid-sensor-custom.c
rename to drivers/iio/custom/hid-sensor-custom.c
index bb012bc032e0..f8ecb95f3c55 100644
--- a/drivers/hid/hid-sensor-custom.c
+++ b/drivers/iio/custom/hid-sensor-custom.c
@@ -23,6 +23,12 @@
 #include <linux/bsearch.h>
 #include <linux/platform_device.h>
 #include <linux/hid-sensor-hub.h>
+#include <linux/iio/iio.h>
+#include <linux/iio/sysfs.h>
+#include <linux/iio/buffer.h>
+#include <linux/iio/trigger_consumer.h>
+#include <linux/iio/triggered_buffer.h>
+#include "../common/hid-sensors/hid-sensor-trigger.h"
 
 #define HID_CUSTOM_NAME_LENGTH		64
 #define HID_CUSTOM_MAX_CORE_ATTRS	10
@@ -30,6 +36,11 @@
 #define HID_CUSTOM_FIFO_SIZE		4096
 #define HID_CUSTOM_MAX_FEATURE_BYTES	64
 
+#define HID_CUSTOM_VAL_MAX		26
+#define SENSOR_NAME_INFO_LEN		512
+
+#define leo_info(fmt, ...) pr_info("xxxx:" fmt, ## __VA_ARGS__)
+
 struct hid_sensor_custom_field {
 	int report_id;
 	char group_name[HID_CUSTOM_NAME_LENGTH];
@@ -40,11 +51,18 @@ struct hid_sensor_custom_field {
 	struct attribute_group hid_custom_attribute_group;
 };
 
+/* Header for each sample to user space via dev interface */
+struct hid_sensor_sample {
+	u32 usage_id;
+	u64 timestamp;
+	u32 raw_len;
+	u8 data[0];
+} __packed;
+
 struct hid_sensor_custom {
 	struct mutex mutex;
-	struct platform_device *pdev;
-	struct hid_sensor_hub_device *hsdev;
 	struct hid_sensor_hub_callbacks callbacks;
+	struct hid_sensor_common common_attrib;
 	int sensor_field_count;
 	struct hid_sensor_custom_field *fields;
 	int input_field_count;
@@ -58,14 +76,18 @@ struct hid_sensor_custom {
 	struct kfifo data_fifo;
 	unsigned long misc_opened;
 	wait_queue_head_t wait;
+
+	char name_info[SENSOR_NAME_INFO_LEN];
+	struct hid_sensor_sample *sample;
+	struct iio_dev *indio_dev;
+	struct iio_chan_spec *iio_channs;
+	int iio_channs_index[HID_CUSTOM_VAL_MAX + 1];
+	int iio_channs_nr;
 };
 
-/* Header for each sample to user space via dev interface */
-struct hid_sensor_sample {
-	u32 usage_id;
-	u64 timestamp;
-	u32 raw_len;
-} __packed;
+struct custom_sensor_indio {
+	struct hid_sensor_custom *sensor_inst;
+};
 
 static struct attribute hid_custom_attrs[] = {
 	{.name = "name", .mode = S_IRUGO},
@@ -143,6 +165,11 @@ static const struct hid_custom_usage_desc {
 	{0x20055F,	"data-field-custom-value_28"},
 };
 
+#define HID_USAGE_SENSOR_FRIENDLY_NAME	0x200301
+#define HID_USAGE_SENSOR_SERIAL_NUM 	0x200307
+#define HID_USAGE_CUSTOM_VALUE_START	0x200544
+#define HID_USAGE_CUSTOM_VALUE_END	0x20055D
+
 static int usage_id_cmp(const void *p1, const void *p2)
 {
 	if (*(int *)p1 < *(int *)p2)
@@ -190,12 +217,14 @@ static int set_power_report_state(struct hid_sensor_custom *sensor_inst,
 	}
 
 	if (sensor_inst->power_state)
-		power_val = hid_sensor_get_usage_index(sensor_inst->hsdev,
+		power_val = hid_sensor_get_usage_index(
+				sensor_inst->common_attrib.hsdev,
 				sensor_inst->power_state->attribute.report_id,
 				sensor_inst->power_state->attribute.index,
 				power_state_usage_id);
 	if (sensor_inst->report_state)
-		report_val = hid_sensor_get_usage_index(sensor_inst->hsdev,
+		report_val = hid_sensor_get_usage_index(
+				sensor_inst->common_attrib.hsdev,
 				sensor_inst->report_state->attribute.report_id,
 				sensor_inst->report_state->attribute.index,
 				report_state_usage_id);
@@ -203,13 +232,13 @@ static int set_power_report_state(struct hid_sensor_custom *sensor_inst,
 	if (power_val >= 0) {
 		power_val +=
 			sensor_inst->power_state->attribute.logical_minimum;
-		ret = sensor_hub_set_feature(sensor_inst->hsdev,
+		ret = sensor_hub_set_feature(sensor_inst->common_attrib.hsdev,
 				sensor_inst->power_state->attribute.report_id,
 				sensor_inst->power_state->attribute.index,
 				sizeof(power_val),
 				&power_val);
 		if (ret) {
-			hid_err(sensor_inst->hsdev->hdev,
+			hid_err(sensor_inst->common_attrib.hsdev->hdev,
 				"Set power state failed\n");
 			return ret;
 		}
@@ -218,13 +247,13 @@ static int set_power_report_state(struct hid_sensor_custom *sensor_inst,
 	if (report_val >= 0) {
 		report_val +=
 			sensor_inst->report_state->attribute.logical_minimum;
-		ret = sensor_hub_set_feature(sensor_inst->hsdev,
+		ret = sensor_hub_set_feature(sensor_inst->common_attrib.hsdev,
 				sensor_inst->report_state->attribute.report_id,
 				sensor_inst->report_state->attribute.index,
 				sizeof(report_val),
 				&report_val);
 		if (ret) {
-			hid_err(sensor_inst->hsdev->hdev,
+			hid_err(sensor_inst->common_attrib.hsdev->hdev,
 				"Set report state failed\n");
 			return ret;
 		}
@@ -247,19 +276,20 @@ static ssize_t enable_sensor_store(struct device *dev,
 
 	mutex_lock(&sensor_inst->mutex);
 	if (value && !sensor_inst->enable) {
-		ret = sensor_hub_device_open(sensor_inst->hsdev);
+		ret = sensor_hub_device_open(sensor_inst->common_attrib.hsdev);
 		if (ret)
 			goto unlock_state;
 
 		ret = set_power_report_state(sensor_inst, true);
 		if (ret) {
-			sensor_hub_device_close(sensor_inst->hsdev);
+			sensor_hub_device_close(
+					sensor_inst->common_attrib.hsdev);
 			goto unlock_state;
 		}
 		sensor_inst->enable = true;
 	} else if (!value && sensor_inst->enable) {
 		ret = set_power_report_state(sensor_inst, false);
-		sensor_hub_device_close(sensor_inst->hsdev);
+		sensor_hub_device_close(sensor_inst->common_attrib.hsdev);
 		sensor_inst->enable = false;
 	}
 unlock_state:
@@ -315,10 +345,11 @@ static ssize_t show_value(struct device *dev, struct device_attribute *attr,
 			u64 value = 0;
 			int i = 0;
 
-			ret = sensor_hub_get_feature(sensor_inst->hsdev,
-						     report_id,
-						     index,
-						     sizeof(values), values);
+			ret = sensor_hub_get_feature(
+					sensor_inst->common_attrib.hsdev,
+					report_id,
+					index,
+					sizeof(values), values);
 			if (ret < 0)
 				return ret;
 
@@ -355,10 +386,10 @@ static ssize_t show_value(struct device *dev, struct device_attribute *attr,
 			return len;
 		} else if (input)
 			value = sensor_hub_input_attr_get_raw_value(
-						sensor_inst->hsdev,
-						sensor_inst->hsdev->usage,
-						usage, report_id,
-						SENSOR_HUB_SYNC, false);
+					sensor_inst->common_attrib.hsdev,
+					sensor_inst->common_attrib.hsdev->usage,
+					usage, report_id,
+					SENSOR_HUB_SYNC, false);
 	} else if (!strncmp(name, "units", strlen("units")))
 		value = sensor_inst->fields[field_index].attribute.units;
 	else if (!strncmp(name, "unit-expo", strlen("unit-expo")))
@@ -413,8 +444,9 @@ static ssize_t store_value(struct device *dev, struct device_attribute *attr,
 
 		report_id = sensor_inst->fields[field_index].attribute.
 								report_id;
-		ret = sensor_hub_set_feature(sensor_inst->hsdev, report_id,
-					     index, sizeof(value), &value);
+		ret = sensor_hub_set_feature(sensor_inst->common_attrib.hsdev,
+				report_id,
+				index, sizeof(value), &value);
 	} else
 		return -EINVAL;
 
@@ -430,17 +462,16 @@ static int hid_sensor_capture_sample(struct hid_sensor_hub_device *hsdev,
 
 	/* If any error occurs in a sample, rest of the fields are ignored */
 	if (sensor_inst->input_skip_sample) {
-		hid_err(sensor_inst->hsdev->hdev, "Skipped remaining data\n");
+		hid_err(sensor_inst->common_attrib.hsdev->hdev,
+				"Skipped remaining data\n");
 		return 0;
 	}
 
-	hid_dbg(sensor_inst->hsdev->hdev, "%s received %d of %d\n", __func__,
+	hid_dbg(sensor_inst->common_attrib.hsdev->hdev,
+			"%s received %d of %d\n", __func__,
 		(int) (sensor_inst->input_report_recd_size + raw_len),
 		sensor_inst->input_report_size);
 
-	if (!test_bit(0, &sensor_inst->misc_opened))
-		return 0;
-
 	if (!sensor_inst->input_report_recd_size) {
 		int required_size = sizeof(struct hid_sensor_sample) +
 						sensor_inst->input_report_size;
@@ -467,14 +498,112 @@ static int hid_sensor_send_event(struct hid_sensor_hub_device *hsdev,
 				 unsigned usage_id, void *priv)
 {
 	struct hid_sensor_custom *sensor_inst = platform_get_drvdata(priv);
+	struct iio_dev *indio_dev = sensor_inst->indio_dev;
+	struct hid_sensor_sample *sample = sensor_inst->sample;
 
-	if (!test_bit(0, &sensor_inst->misc_opened))
-		return 0;
+	if (test_bit(0, &sensor_inst->misc_opened)) {
+		sensor_inst->input_report_recd_size = 0;
+		sensor_inst->input_skip_sample = false;
+		wake_up(&sensor_inst->wait);
+	}
 
-	sensor_inst->input_report_recd_size = 0;
-	sensor_inst->input_skip_sample = false;
+	if (atomic_read(&sensor_inst->common_attrib.data_ready) &&
+			(kfifo_avail(&sensor_inst->data_fifo) >=
+			sizeof(struct hid_sensor_sample) +
+			sensor_inst->input_report_size)) {
+		kfifo_out(&sensor_inst->data_fifo, sample, sizeof(*sample));
+		kfifo_out(&sensor_inst->data_fifo,
+				sample->data, sample->raw_len);
+
+		dev_dbg(&indio_dev->dev, "push %d bytes data to iio\n",
+				sample->raw_len);
+		iio_push_to_buffers_with_timestamp(indio_dev,
+				sample->data, sample->timestamp);
+	}
 
-	wake_up(&sensor_inst->wait);
+	return 0;
+}
+
+static void sensor_get_name_info(struct hid_sensor_custom *sensor_inst,
+		struct hid_sensor_hub_attribute_info *attrib,
+		const char *prefix)
+{
+	int i, j, len, report_size;
+	u8 values[HID_CUSTOM_MAX_FEATURE_BYTES];
+
+	report_size = sensor_hub_get_feature(sensor_inst->common_attrib.hsdev,
+			attrib->report_id,
+			attrib->index, sizeof(values), values);
+	if (report_size <= 0) {
+		dev_warn(&sensor_inst->common_attrib.pdev->dev,
+				"Failed to get name info\n");
+		return;
+	}
+
+	len = strlen(sensor_inst->name_info);
+	if (len > 0) {
+		sensor_inst->name_info[len] = ';';
+		len++;
+	}
+
+	if (prefix) {
+		strcpy(sensor_inst->name_info + len, prefix);
+		len += strlen(prefix);
+	}
+
+	i = j = 0;
+	while (i < report_size) {
+		snprintf(sensor_inst->name_info + len + j,
+				sizeof(sensor_inst->name_info) - len - j,
+				"%c", values[i]);
+		i += attrib->size;
+		j++;
+	}
+	leo_info("name_info: %s\n", sensor_inst->name_info);
+}
+
+static int sensor_add_iio_chan(struct hid_sensor_custom *sensor_inst,
+		struct hid_sensor_hub_attribute_info *attrib)
+{
+	int chan_index;
+	struct iio_chan_spec *iio_channs;
+	struct iio_chan_spec *new_chan;
+
+	iio_channs = krealloc(sensor_inst->iio_channs,
+			(sensor_inst->iio_channs_nr + 1) *
+			sizeof(struct iio_chan_spec),
+			GFP_KERNEL);
+	if (!iio_channs) {
+		kfree(sensor_inst->iio_channs);
+		return -ENOMEM;
+	}
+
+	chan_index = sensor_inst->iio_channs_nr;
+	new_chan = &iio_channs[chan_index];
+	memset(new_chan, 0, sizeof(*new_chan));
+
+	new_chan->scan_type.sign = 's';
+	new_chan->scan_type.realbits = attrib->size * 8;
+	new_chan->scan_type.storagebits = sizeof(u32) * 8;
+
+	new_chan->scan_index = chan_index;
+	if (attrib->attrib_id == HID_USAGE_SENSOR_TIME_TIMESTAMP) {
+		new_chan->type = IIO_TIMESTAMP;
+		new_chan->channel = -1;
+	} else {
+		new_chan->type = IIO_CUSTOM;
+		new_chan->indexed = 1;
+		new_chan->channel = chan_index;
+		new_chan->info_mask_separate = BIT(IIO_CHAN_INFO_RAW);
+		new_chan->info_mask_shared_by_type =
+			BIT(IIO_CHAN_INFO_SAMP_FREQ) |
+			BIT(IIO_CHAN_INFO_HYSTERESIS);
+	}
+
+	sensor_inst->iio_channs = iio_channs;
+	sensor_inst->iio_channs_index[chan_index] =
+		sensor_inst->sensor_field_count;
+	sensor_inst->iio_channs_nr++;
 
 	return 0;
 }
@@ -484,8 +613,10 @@ static int hid_sensor_custom_add_field(struct hid_sensor_custom *sensor_inst,
 				       struct hid_report *report,
 				       struct hid_field *field)
 {
+	int ret;
 	struct hid_sensor_custom_field *sensor_field;
 	void *fields;
+	unsigned int attrib_id;
 
 	fields = krealloc(sensor_inst->fields,
 			  (sensor_inst->sensor_field_count + 1) *
@@ -496,7 +627,8 @@ static int hid_sensor_custom_add_field(struct hid_sensor_custom *sensor_inst,
 	}
 	sensor_inst->fields = fields;
 	sensor_field = &sensor_inst->fields[sensor_inst->sensor_field_count];
-	sensor_field->attribute.usage_id = sensor_inst->hsdev->usage;
+	sensor_field->attribute.usage_id =
+		sensor_inst->common_attrib.hsdev->usage;
 	if (field->logical)
 		sensor_field->attribute.attrib_id = field->logical;
 	else
@@ -510,19 +642,57 @@ static int hid_sensor_custom_add_field(struct hid_sensor_custom *sensor_inst,
 	sensor_field->attribute.logical_minimum = field->logical_minimum;
 	sensor_field->attribute.logical_maximum = field->logical_maximum;
 
-	if (report_type == HID_FEATURE_REPORT)
+	leo_info("%s-field attrib: usage_id(0x%x), attrib_id(0x%x), index(0x%x), "
+			"report_id(0x%x), units(%d), unit_expo(%d), size(%d), "
+			"logical_minimum(%d), logical_maximum(%d)\n",
+			report_type == HID_FEATURE_REPORT ? "feature" : "input",
+			sensor_field->attribute.usage_id,
+			sensor_field->attribute.attrib_id,
+			sensor_field->attribute.index,
+			sensor_field->attribute.report_id,
+			sensor_field->attribute.units,
+			sensor_field->attribute.unit_expo,
+			sensor_field->attribute.size,
+			sensor_field->attribute.logical_minimum,
+			sensor_field->attribute.logical_maximum);
+
+	attrib_id = sensor_field->attribute.attrib_id;
+	if (report_type == HID_FEATURE_REPORT) {
 		snprintf(sensor_field->group_name,
 			 sizeof(sensor_field->group_name), "feature-%x-%x",
 			 sensor_field->attribute.index,
 			 sensor_field->attribute.attrib_id);
-	else if (report_type == HID_INPUT_REPORT) {
+
+		switch (attrib_id) {
+		case HID_USAGE_SENSOR_SERIAL_NUM:
+			sensor_get_name_info(sensor_inst,
+					&sensor_field->attribute, NULL);
+			break;
+		case HID_USAGE_SENSOR_FRIENDLY_NAME:
+			sensor_get_name_info(sensor_inst,
+					&sensor_field->attribute,
+					"Friendly name:");
+			break;
+		default:
+			break;
+		}
+	} else if (report_type == HID_INPUT_REPORT) {
 		snprintf(sensor_field->group_name,
 			 sizeof(sensor_field->group_name),
 			 "input-%x-%x", sensor_field->attribute.index,
-			 sensor_field->attribute.attrib_id);
-		sensor_inst->input_field_count++;
+			 attrib_id);
 		sensor_inst->input_report_size += (field->report_size *
 						   field->report_count) / 8;
+
+		if (attrib_id == HID_USAGE_SENSOR_TIME_TIMESTAMP ||
+				(attrib_id >= HID_USAGE_CUSTOM_VALUE_START &&
+				attrib_id <= HID_USAGE_CUSTOM_VALUE_END)) {
+			ret = sensor_add_iio_chan(sensor_inst,
+					&sensor_field->attribute);
+			if (ret)
+				return ret;
+		}
+		sensor_inst->input_field_count++;
 	}
 
 	memset(&sensor_field->hid_custom_attribute_group, 0,
@@ -540,7 +710,7 @@ static int hid_sensor_custom_add_fields(struct hid_sensor_custom *sensor_inst,
 	int ret;
 	struct hid_report *report;
 	struct hid_field *field;
-	struct hid_sensor_hub_device *hsdev = sensor_inst->hsdev;
+	struct hid_sensor_hub_device *hsdev = sensor_inst->common_attrib.hsdev;
 
 	list_for_each_entry(report, &report_enum->report_list, list) {
 		for (i = 0; i < report->maxfield; ++i) {
@@ -552,10 +722,10 @@ static int hid_sensor_custom_add_fields(struct hid_sensor_custom *sensor_inst,
 			       hsdev->end_collection_index))) {
 
 				ret = hid_sensor_custom_add_field(sensor_inst,
-								  i,
-								  report_type,
-								  report,
-								  field);
+							i,
+							report_type,
+							report,
+							field);
 				if (ret)
 					return ret;
 
@@ -566,25 +736,32 @@ static int hid_sensor_custom_add_fields(struct hid_sensor_custom *sensor_inst,
 	return 0;
 }
 
-static int hid_sensor_custom_add_attributes(struct hid_sensor_custom
-								*sensor_inst)
+static int hid_sensor_custom_add_attributes(
+		struct hid_sensor_custom *sensor_inst)
 {
-	struct hid_sensor_hub_device *hsdev = sensor_inst->hsdev;
+	struct hid_sensor_hub_device *hsdev = sensor_inst->common_attrib.hsdev;
 	struct hid_device *hdev = hsdev->hdev;
 	int ret = -1;
-	int i, j;
+	int j;
 
 	for (j = 0; j < HID_REPORT_TYPES; ++j) {
 		if (j == HID_OUTPUT_REPORT)
 			continue;
 
-		ret = hid_sensor_custom_add_fields(sensor_inst,
-						   &hdev->report_enum[j], j);
+		ret = hid_sensor_custom_add_fields(
+				sensor_inst, &hdev->report_enum[j], j);
 		if (ret)
 			return ret;
 
 	}
 
+	return 0;
+}
+
+static int sensor_add_attr_groups(struct hid_sensor_custom *sensor_inst)
+{
+	int i, j, ret = 0;
+
 	/* Create sysfs attributes */
 	for (i = 0; i < sensor_inst->sensor_field_count; ++i) {
 		j = 0;
@@ -613,9 +790,9 @@ static int hid_sensor_custom_add_attributes(struct hid_sensor_custom
 						sensor_inst->fields[i].attrs;
 		sensor_inst->fields[i].hid_custom_attribute_group.name =
 					sensor_inst->fields[i].group_name;
-		ret = sysfs_create_group(&sensor_inst->pdev->dev.kobj,
-					 &sensor_inst->fields[i].
-					 hid_custom_attribute_group);
+		ret = sysfs_create_group(&sensor_inst->indio_dev->dev.kobj,
+				 &sensor_inst->fields[i].
+				 hid_custom_attribute_group);
 		if (ret)
 			break;
 
@@ -637,11 +814,12 @@ static void hid_sensor_custom_remove_attributes(struct hid_sensor_custom *
 	int i;
 
 	for (i = 0; i < sensor_inst->sensor_field_count; ++i)
-		sysfs_remove_group(&sensor_inst->pdev->dev.kobj,
+		sysfs_remove_group(&sensor_inst->indio_dev->dev.kobj,
 				   &sensor_inst->fields[i].
 				   hid_custom_attribute_group);
 
 	kfree(sensor_inst->fields);
+	kfree(sensor_inst->iio_channs);
 }
 
 static ssize_t hid_sensor_custom_read(struct file *file, char __user *buf,
@@ -739,7 +917,8 @@ static int hid_sensor_custom_dev_if_add(struct hid_sensor_custom *sensor_inst)
 	init_waitqueue_head(&sensor_inst->wait);
 
 	sensor_inst->custom_dev.minor = MISC_DYNAMIC_MINOR;
-	sensor_inst->custom_dev.name = dev_name(&sensor_inst->pdev->dev);
+	sensor_inst->custom_dev.name =
+		dev_name(&sensor_inst->common_attrib.pdev->dev);
 	sensor_inst->custom_dev.fops = &hid_sensor_custom_fops,
 	ret = misc_register(&sensor_inst->custom_dev);
 	if (ret) {
@@ -755,54 +934,229 @@ static void hid_sensor_custom_dev_if_remove(struct hid_sensor_custom
 	wake_up(&sensor_inst->wait);
 	misc_deregister(&sensor_inst->custom_dev);
 	kfifo_free(&sensor_inst->data_fifo);
+}
+
+static int sensor_custom_read_raw(struct iio_dev *indio_dev,
+		struct iio_chan_spec const *chan,
+		int *val, int *val2, long mask)
+{
+	int ret_type = IIO_VAL_INT;
+	struct custom_sensor_indio *indio_data = iio_priv(indio_dev);
+	struct hid_sensor_custom *sensor_inst = indio_data->sensor_inst;
+	struct hid_sensor_hub_device *hsdev = sensor_inst->common_attrib.hsdev;
+	int field_index = sensor_inst->iio_channs_index[chan->scan_index];
+	struct hid_sensor_hub_attribute_info *attrib =
+		&sensor_inst->fields[field_index].attribute;
+
+	*val = 0;
+	*val2 = 0;
+	switch (mask) {
+	case IIO_CHAN_INFO_RAW:
+		leo_info("%s: IIO_CHAN_INFO_RAW, attrib_id(%d), report_id(%d)\n",
+				__func__, attrib->attrib_id, attrib->report_id);
+		hid_sensor_power_state(&sensor_inst->common_attrib, true);
+		if (attrib->report_id >= 0)
+			*val = sensor_hub_input_attr_get_raw_value(
+					hsdev, hsdev->usage,
+					attrib->attrib_id, attrib->report_id,
+					SENSOR_HUB_SYNC,
+					attrib->logical_minimum < 0);
+		else {
+			hid_sensor_power_state(
+					&sensor_inst->common_attrib, false);
+			return -EINVAL;
+		}
+		hid_sensor_power_state(&sensor_inst->common_attrib, false);
+		break;
+	case IIO_CHAN_INFO_SAMP_FREQ:
+		leo_info("%s: IIO_CHAN_SAMP_FREQ\n", __func__);
+		ret_type = hid_sensor_read_samp_freq_value(
+			&sensor_inst->common_attrib, val, val2);
+		break;
+	case IIO_CHAN_INFO_HYSTERESIS:
+		leo_info("%s: IIO_CHAN_INFO_HYSTERESIS\n", __func__);
+		ret_type = hid_sensor_read_raw_hyst_value(
+			&sensor_inst->common_attrib, val, val2);
+		break;
+	default:
+		ret_type = -EINVAL;
+		break;
+	}
 
+	return ret_type;
 }
 
+static int sensor_custom_write_raw(struct iio_dev *indio_dev,
+		struct iio_chan_spec const *chan, int val, int val2, long mask)
+{
+	int ret = 0;
+	struct custom_sensor_indio *indio_data = iio_priv(indio_dev);
+	struct hid_sensor_custom *sensor_inst = indio_data->sensor_inst;
+
+	switch (mask) {
+	case IIO_CHAN_INFO_SAMP_FREQ:
+		leo_info("%s: SAMP_FREQ %d, %d\n", __func__, val, val2);
+		ret = hid_sensor_write_samp_freq_value(
+				&sensor_inst->common_attrib, val, val2);
+		break;
+	case IIO_CHAN_INFO_HYSTERESIS:
+		leo_info("%s: HYSTERESIS %d, %d\n", __func__, val, val2);
+		ret = hid_sensor_write_raw_hyst_value(
+				&sensor_inst->common_attrib, val, val2);
+		break;
+	default:
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+static const struct iio_info sensor_custom_info = {
+	.read_raw = &sensor_custom_read_raw,
+	.write_raw = &sensor_custom_write_raw,
+};
+
 static int hid_sensor_custom_probe(struct platform_device *pdev)
 {
+	int ret;
+	struct iio_dev *indio_dev;
 	struct hid_sensor_custom *sensor_inst;
+	struct custom_sensor_indio *indio_data;
 	struct hid_sensor_hub_device *hsdev = pdev->dev.platform_data;
-	int ret;
+	static const char *name = "iio_hid_custom_sensor";
 
 	sensor_inst = devm_kzalloc(&pdev->dev, sizeof(*sensor_inst),
-				   GFP_KERNEL);
-	if (!sensor_inst)
+			GFP_KERNEL);
+	if (!sensor_inst) {
+		dev_err(&pdev->dev, "Failed to alloc mem for sensor inst\n");
 		return -ENOMEM;
+	}
+
+	indio_dev = devm_iio_device_alloc(&pdev->dev,
+			sizeof(struct custom_sensor_indio));
+	if (!indio_dev) {
+		dev_err(&pdev->dev, "failed to alloc mem for iio dev\n");
+		return -ENOMEM;
+	}
+	sensor_inst->indio_dev = indio_dev;
 
 	sensor_inst->callbacks.capture_sample = hid_sensor_capture_sample;
 	sensor_inst->callbacks.send_event = hid_sensor_send_event;
 	sensor_inst->callbacks.pdev = pdev;
-	sensor_inst->hsdev = hsdev;
-	sensor_inst->pdev = pdev;
+	sensor_inst->common_attrib.hsdev = hsdev;
+	sensor_inst->common_attrib.pdev = pdev;
 	mutex_init(&sensor_inst->mutex);
 	platform_set_drvdata(pdev, sensor_inst);
+
+	ret = hid_sensor_parse_common_attributes(hsdev, hsdev->usage,
+					&sensor_inst->common_attrib);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to setup common attributes\n");
+		return ret;
+	}
+	if (sensor_inst->common_attrib.sensitivity.index < 0) {
+		sensor_hub_input_get_attribute_info(hsdev,
+			HID_FEATURE_REPORT, hsdev->usage,
+			HID_USAGE_SENSOR_DATA_MOD_CHANGE_SENSITIVITY_ABS |
+			HID_USAGE_CUSTOM_VALUE_START,
+			&sensor_inst->common_attrib.sensitivity);
+		dev_info(&pdev->dev, "Sensitivity index:report %d:%d\n",
+			sensor_inst->common_attrib.sensitivity.index,
+			sensor_inst->common_attrib.sensitivity.report_id);
+	}
+
 	ret = sensor_hub_register_callback(hsdev, hsdev->usage,
 					   &sensor_inst->callbacks);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "callback reg failed\n");
 		return ret;
 	}
-
-	ret = sysfs_create_group(&sensor_inst->pdev->dev.kobj,
-				 &enable_sensor_attr_group);
-	if (ret)
-		goto err_remove_callback;
-
 	ret = hid_sensor_custom_add_attributes(sensor_inst);
 	if (ret)
-		goto err_remove_group;
+		goto err_remove_callback;
 
 	ret = hid_sensor_custom_dev_if_add(sensor_inst);
 	if (ret)
-		goto err_remove_attributes;
+		goto err_remove_attr_group;
+
+	sensor_inst->sample = devm_kmalloc(&pdev->dev,
+			sizeof(struct hid_sensor_sample) +
+			sensor_inst->input_report_size, GFP_KERNEL);
+	if (!sensor_inst->sample) {
+		dev_err(&pdev->dev, "failed to alloc mem for sensor sample\n");
+		ret = -ENOMEM;
+		goto err_remove_if;
+	}
+
+	indio_data = iio_priv(indio_dev);
+	indio_data->sensor_inst = sensor_inst;
+	indio_dev->num_channels = sensor_inst->iio_channs_nr;
+
+	indio_dev->channels = devm_kmemdup(&pdev->dev, sensor_inst->iio_channs,
+			sensor_inst->iio_channs_nr *
+			sizeof(struct iio_chan_spec),
+			GFP_KERNEL);
+	if (!indio_dev->channels) {
+		dev_err(&pdev->dev, "Failed to duplicate channels\n");
+		ret = -ENOMEM;
+		goto err_remove_if;
+	}
+	if (strlen(sensor_inst->name_info) > 0)
+		indio_dev->name = sensor_inst->name_info;
+	else
+		indio_dev->name = name;
+	indio_dev->dev.parent = &pdev->dev;
+	indio_dev->info = &sensor_custom_info;
+	indio_dev->modes = INDIO_DIRECT_MODE;
+
+	ret = iio_triggered_buffer_setup(indio_dev,
+			&iio_pollfunc_store_time, NULL, NULL);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to initialize trigger buffer\n");
+		goto err_remove_if;
+	}
+	atomic_set(&sensor_inst->common_attrib.data_ready, 0);
+	ret = hid_sensor_setup_trigger(indio_dev,
+			name, &sensor_inst->common_attrib);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "Trigger setup failed\n");
+		goto err_unreg_buffer_func;
+	}
+
+	ret = iio_device_register(indio_dev);
+	if (ret) {
+		dev_err(&pdev->dev, "iio device register failed\n");
+		goto err_remove_trigger;
+	}
+
+	ret = sysfs_create_group(&sensor_inst->indio_dev->dev.kobj,
+				 &enable_sensor_attr_group);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to create sysfs group\n");
+		goto err_unreg_iio;
+	}
+
+	ret = sensor_add_attr_groups(sensor_inst);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to add sysfs group\n");
+		goto err_remove_sys_group;
+	}
 
 	return 0;
 
-err_remove_attributes:
-	hid_sensor_custom_remove_attributes(sensor_inst);
-err_remove_group:
-	sysfs_remove_group(&sensor_inst->pdev->dev.kobj,
+err_remove_sys_group:
+	sysfs_remove_group(&sensor_inst->indio_dev->dev.kobj,
 			   &enable_sensor_attr_group);
+err_unreg_iio:
+	iio_device_unregister(indio_dev);
+err_remove_trigger:
+	hid_sensor_remove_trigger(&sensor_inst->common_attrib);
+err_unreg_buffer_func:
+	iio_triggered_buffer_cleanup(indio_dev);
+err_remove_if:
+	hid_sensor_custom_dev_if_remove(sensor_inst);
+err_remove_attr_group:
+	hid_sensor_custom_remove_attributes(sensor_inst);
 err_remove_callback:
 	sensor_hub_remove_callback(hsdev, hsdev->usage);
 
@@ -812,12 +1166,16 @@ static int hid_sensor_custom_probe(struct platform_device *pdev)
 static int hid_sensor_custom_remove(struct platform_device *pdev)
 {
 	struct hid_sensor_custom *sensor_inst = platform_get_drvdata(pdev);
+	struct iio_dev *indio_dev = sensor_inst->indio_dev;
 	struct hid_sensor_hub_device *hsdev = pdev->dev.platform_data;
 
-	hid_sensor_custom_dev_if_remove(sensor_inst);
 	hid_sensor_custom_remove_attributes(sensor_inst);
-	sysfs_remove_group(&sensor_inst->pdev->dev.kobj,
+	sysfs_remove_group(&sensor_inst->indio_dev->dev.kobj,
 			   &enable_sensor_attr_group);
+	iio_device_unregister(indio_dev);
+	hid_sensor_remove_trigger(&sensor_inst->common_attrib);
+	iio_triggered_buffer_cleanup(indio_dev);
+	hid_sensor_custom_dev_if_remove(sensor_inst);
 	sensor_hub_remove_callback(hsdev, hsdev->usage);
 
 	return 0;
diff --git a/drivers/iio/industrialio-core.c b/drivers/iio/industrialio-core.c
index 9c4d92115504..a63209831b84 100644
--- a/drivers/iio/industrialio-core.c
+++ b/drivers/iio/industrialio-core.c
@@ -88,6 +88,7 @@ static const char * const iio_chan_type_name_spec[] = {
 	[IIO_POSITIONRELATIVE]  = "positionrelative",
 	[IIO_PHASE] = "phase",
 	[IIO_MASSCONCENTRATION] = "massconcentration",
+	[IIO_CUSTOM] = "custom",
 };
 
 static const char * const iio_modifier_names[] = {
diff --git a/include/uapi/linux/iio/types.h b/include/uapi/linux/iio/types.h
index fdd81affca4b..44ba114b3ce8 100644
--- a/include/uapi/linux/iio/types.h
+++ b/include/uapi/linux/iio/types.h
@@ -47,6 +47,7 @@ enum iio_chan_type {
 	IIO_POSITIONRELATIVE,
 	IIO_PHASE,
 	IIO_MASSCONCENTRATION,
+	IIO_CUSTOM,
 };
 
 enum iio_modifier {
