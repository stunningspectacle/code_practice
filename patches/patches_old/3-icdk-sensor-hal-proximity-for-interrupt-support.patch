commit 28c1880e718e1137c6feb87d7348a8b5b16a7626
Author: Hong Liu <hong.liu@intel.com>
Date:   Wed May 4 16:43:28 2011 +0800

    iCDK sensor HAL: use the new /dev/apds9802ps to report proximity data
    
    This new interface will only report data when there are changes in
    the proximity device. Thus we can avoid the poll in android framework
    when voice call is active.
    
    With this change, we can iCDK can enter into S0i3 when voice call is
    active, which is important to power saving for our platform.
    
    Change-Id: I64b344119a87a45c76a486a3a40a3f4a6c075c88
    Signed-off-by: Hong Liu <hong.liu@intel.com>

diff --git a/sensors_gaid.c b/sensors_gaid.c
index 2f88645..c3722fb 100644
--- a/sensors_gaid.c
+++ b/sensors_gaid.c
@@ -250,6 +250,8 @@ icdk_sensor_activate(struct sensors_poll_device_t *dev, int handle, int enabled)
         if (_sensorIds[i].ops->sensor_list.handle != handle)
             continue;
 
+        if (_sensorIds[i].ops->sensor_activate)
+            _sensorIds[i].ops->sensor_activate(enabled);
         polldev->active[i] = enabled;
     }
 
diff --git a/sensors_gaid.h b/sensors_gaid.h
index 5c46f0f..a0858d4 100644
--- a/sensors_gaid.h
+++ b/sensors_gaid.h
@@ -54,6 +54,7 @@ typedef struct {
     int (*sensor_is_fd)(fd_set *fds);
     int (*sensor_read)(sensors_event_t *data);
     void (*sensor_data_close)(void);
+    int (*sensor_activate)(int enabled);
     struct sensor_t sensor_list;
 } sensors_ops_t;
 
diff --git a/sensors_gaid_proximity.c b/sensors_gaid_proximity.c
index ad5022b..b28cc67 100644
--- a/sensors_gaid_proximity.c
+++ b/sensors_gaid_proximity.c
@@ -26,32 +26,17 @@
 
 #define PROXIMITY_SYSFS_DIR "/sys/class/i2c-adapter/i2c-5/5-0055/apds9802ps/"
 #define PROXIMITY_OUTPUT "proximity_output"
-
-#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
+#define PROXIMITY_POWERON "poweron"
+#define PROXIMITY_DEV "/dev/apds9802ps"
 
 static int fd_proximity = -1;
-static int old_proximity;
-
-struct range {
-    int cstart, clen;   /* count range */
-    float dstart, dlen; /* distance range mapped */
-};
-
-/* mannually measured coarse mapping table, need to tune */
-static struct range mapping_tbl[] = {
-    { 500, 500, 15.75, 10.5 },
-    { 1000, 1000, 5.25, 2.625 },
-    { 2000, 2000, 2.625, 2.0 }
-};
 
 static int gaid_proximity_data_open(void)
 {
-    old_proximity = -100;
-
     if (fd_proximity < 0) {
-        fd_proximity = open(PROXIMITY_SYSFS_DIR PROXIMITY_OUTPUT, O_RDONLY);
+        fd_proximity = open(PROXIMITY_DEV, O_RDONLY);
         if (fd_proximity < 0) {
-            E("%s dev file open failed\n", __func__);
+            E("%s dev file open failed: %s\n", __func__, strerror(errno));
         }
     }
 
@@ -76,58 +61,32 @@ static int gaid_proximity_is_fd(fd_set *fds)
     return FD_ISSET(fd_proximity, fds);
 }
 
-static int valid_data(int new, int old)
-{
-    if (new >= old + 100 || new <= old - 100)
-        return 1;
-
-    return 0;
-}
-
-static float count_to_distance(int proximity)
-{
-    int i;
-    float distance;
+#define OBJ_STATE_AWAY 1
+#define OBJ_STATE_NEAR 2
 
-    if (proximity < 500) {
-        /* no object detected, return maxRange */
-        return 20.0;
-    }
-    if (proximity >= 4000) {
-        /* object is very close, from 2mm to 10 mm */
-        return 0.5;
-    }
-
-    for (i = 0; i < (int)ARRAY_SIZE(mapping_tbl); i++) {
-        if (proximity >= mapping_tbl[i].cstart &&
-            proximity < mapping_tbl[i].cstart + mapping_tbl[i].clen) {
-            float prop = proximity - mapping_tbl[i].cstart;
-
-            distance = mapping_tbl[i].dstart + prop / mapping_tbl[i].clen;
-        }
-    }
-
-    return distance;
-}
-
-#define BUFSIZE    32
 static int gaid_proximity_data_read(sensors_event_t *data)
 {
     struct timespec t;
-    char buf[BUFSIZE];
+    unsigned char state;
     int ret;
     int proximity;
+    float distance;
 
-    ret = pread(fd_proximity, buf, sizeof(buf), 0);
+    ret = pread(fd_proximity, &state, sizeof(state), 0);
     if (ret < 0) {
         E("%s read error\n", __func__);
         return ret;
     }
 
-    proximity = atoi(buf);
-
-    if (!valid_data(proximity, old_proximity))
-        return -1;
+    if (state == OBJ_STATE_AWAY)
+        distance = 20.0;
+    else if (state == OBJ_STATE_NEAR)
+        distance = 2.0;
+    else {
+        E("%s read invalide data %d\n", __func__, state);
+        return -EINVAL;
+    }
+    E("%s state %d\n", __func__, state);
 
     clock_gettime(CLOCK_REALTIME, &t);
 
@@ -135,10 +94,31 @@ static int gaid_proximity_data_read(sensors_event_t *data)
     data->sensor = S_HANDLE_PROXIMITY;
     data->type = SENSOR_TYPE_PROXIMITY;
     data->version = sizeof(sensors_event_t);
-    data->distance = count_to_distance(proximity);
+    data->distance = distance;
     D("proximity = %d, distance = %f", proximity, data->distance);
 
-    old_proximity = proximity;
+    return 0;
+}
+
+static int gaid_proximity_activate(int enabled)
+{
+    int fd;
+    int ret;
+    char str[4];
+
+    fd = open(PROXIMITY_SYSFS_DIR PROXIMITY_POWERON, O_WRONLY);
+    if (fd < 0) {
+        E("%s error open poweron: %s\n", __func__, strerror(errno));
+        return -EINVAL;
+    }
+
+    str[0] = enabled ? '1' : '0';
+    str[1] = '\0';
+    ret = pwrite(fd, str, sizeof(str), 0);
+    if (ret < 0) {
+        E("%s error poweron PROXIMITY dev: %s\n", __func__, strerror(errno));
+        return -EINVAL;
+    }
 
     return 0;
 }
@@ -149,6 +129,7 @@ sensors_ops_t gaid_sensors_proximity = {
     .sensor_is_fd       = gaid_proximity_is_fd,
     .sensor_read        = gaid_proximity_data_read,
     .sensor_data_close  = gaid_proximity_data_close,
+    .sensor_activate    = gaid_proximity_activate,
     .sensor_list        = {
         .name       = "APDS9802 Proximity Sensor",
         .vendor     = "Intel",
diff --git a/sensors_gaid_thermal.c b/sensors_gaid_thermal.c
index d6b27c2..f1981f1 100644
--- a/sensors_gaid_thermal.c
+++ b/sensors_gaid_thermal.c
@@ -26,7 +26,7 @@
 
 #include "sensors_gaid.h"
 
-#define THERMAL_SYSFS_DIR "/sys/devices/virtual/thermal/thermal_zone3"
+#define THERMAL_SYSFS_DIR "/sys/devices/virtual/thermal/thermal_zone3/"
 #define THERMAL_DEV "temp"
 
 static int fd_temp = -1;
