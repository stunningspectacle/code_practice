diff --git a/arch/x86/kernel/apic/io_apic.c b/arch/x86/kernel/apic/io_apic.c
index 0339583..375dd59 100644
--- a/arch/x86/kernel/apic/io_apic.c
+++ b/arch/x86/kernel/apic/io_apic.c
@@ -20,6 +20,7 @@
  *	Paul Diefenbaugh	:	Added full ACPI support
  */
 
+#define DEBUG 1
 #include <linux/mm.h>
 #include <linux/interrupt.h>
 #include <linux/init.h>
@@ -1233,21 +1234,26 @@ static void ioapic_register_intr(unsigned int irq, struct irq_cfg *cfg,
 	irq_flow_handler_t hdl;
 	bool fasteoi;
 
+	pr_info("xxxxx %s 0!trigger=0x%x", __func__, trigger);
 	if ((trigger == IOAPIC_AUTO && IO_APIC_irq_trigger(irq)) ||
 	    trigger == IOAPIC_LEVEL) {
+		pr_info("xxxxx %s 1!", __func__);
 		irq_set_status_flags(irq, IRQ_LEVEL);
 		fasteoi = true;
 	} else {
+		pr_info("xxxxx %s 2!", __func__);
 		irq_clear_status_flags(irq, IRQ_LEVEL);
 		fasteoi = false;
 	}
 
 	if (irq_remapped(cfg)) {
+		pr_info("xxxxx %s 3!", __func__);
 		irq_set_status_flags(irq, IRQ_MOVE_PCNTXT);
 		chip = &ir_ioapic_chip;
 		fasteoi = trigger != 0;
 	}
 
+	pr_info("xxxxx %s 4!fasteoi=%d", __func__, fasteoi);
 	hdl = fasteoi ? handle_fasteoi_irq : handle_edge_irq;
 	irq_set_chip_and_handler_name(irq, chip, hdl,
 				      fasteoi ? "fasteoi" : "edge");
@@ -1338,6 +1344,10 @@ static void setup_ioapic_irq(int apic_id, int pin, unsigned int irq,
 		    "IRQ %d Mode:%i Active:%i)\n",
 		    apic_id, mpc_ioapic_id(apic_id), pin, cfg->vector,
 		    irq, trigger, polarity);
+	pr_info("IOAPIC[%d]: Set routing entry (%d-%d -> 0x%x -> "
+			"IRQ %d Mode:%i Active:%i)\n",
+			apic_id, mpc_ioapic_id(apic_id), pin, cfg->vector,
+			irq, trigger, polarity);
 
 
 	if (setup_ioapic_entry(mpc_ioapic_id(apic_id), irq, &entry,
diff --git a/kernel/irq/chip.c b/kernel/irq/chip.c
index dc5114b..fd50db1 100644
--- a/kernel/irq/chip.c
+++ b/kernel/irq/chip.c
@@ -374,6 +374,7 @@ static inline void preflow_handler(struct irq_desc *desc) { }
 void
 handle_fasteoi_irq(unsigned int irq, struct irq_desc *desc)
 {
+	pr_info("xxxxx %s 1!", __func__);
 	raw_spin_lock(&desc->lock);
 
 	if (unlikely(irqd_irq_inprogress(&desc->irq_data)))
@@ -388,6 +389,7 @@ handle_fasteoi_irq(unsigned int irq, struct irq_desc *desc)
 	 * then mask it and get out of here:
 	 */
 	if (unlikely(!desc->action || irqd_irq_disabled(&desc->irq_data))) {
+		pr_info("xxxxx %s 2!", __func__);
 		desc->istate |= IRQS_PENDING;
 		mask_irq(desc);
 		goto out;
@@ -429,6 +431,7 @@ out:
 void
 handle_edge_irq(unsigned int irq, struct irq_desc *desc)
 {
+	pr_info("xxxxx %s 1!", __func__);
 	raw_spin_lock(&desc->lock);
 
 	desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
@@ -439,7 +442,9 @@ handle_edge_irq(unsigned int irq, struct irq_desc *desc)
 	 */
 	if (unlikely(irqd_irq_disabled(&desc->irq_data) ||
 		     irqd_irq_inprogress(&desc->irq_data) || !desc->action)) {
+		pr_info("xxxxx %s 2!", __func__);
 		if (!irq_check_poll(desc)) {
+			pr_info("xxxxx %s 3!", __func__);
 			desc->istate |= IRQS_PENDING;
 			mask_ack_irq(desc);
 			goto out_unlock;
diff --git a/kernel/irq/irqdesc.c b/kernel/irq/irqdesc.c
index 4c60a50..6df7c86 100644
--- a/kernel/irq/irqdesc.c
+++ b/kernel/irq/irqdesc.c
@@ -341,6 +341,7 @@ irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node)
 {
 	int start, ret;
 
+	pr_info("xxxxxx %s: irq:%d, from:%d, cnt:%d, node:%d\n", irq, from, cnt, node);
 	if (!cnt)
 		return -EINVAL;
 
@@ -366,6 +367,8 @@ irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node)
 
 	bitmap_set(allocated_irqs, start, cnt);
 	mutex_unlock(&sparse_irq_lock);
+
+	pr_info("xxxxxx %s: start:%d, cnt:%d, node:%d\n", start, cnt, node);
 	return alloc_descs(start, cnt, node);
 
 err:
