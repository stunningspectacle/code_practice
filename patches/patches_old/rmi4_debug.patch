diff --git a/drivers/staging/ste_rmi4/synaptics_i2c_rmi4.c b/drivers/staging/ste_rmi4/synaptics_i2c_rmi4.c
index cf5f035..89e958e 100644
--- a/drivers/staging/ste_rmi4/synaptics_i2c_rmi4.c
+++ b/drivers/staging/ste_rmi4/synaptics_i2c_rmi4.c
@@ -753,7 +753,7 @@ rmi4_process_func(struct rmi4_data *pdata, struct rmi4_fn_desc *rmi_fd,
 	struct rmi4_fn *rfi = NULL;
 	struct rmi4_fn_ops *fn_ops = NULL;
 
-	dev_dbg(&client->dev, "fn 0x%x detected: query=0x%x, "
+	dev_info(&client->dev, "fn 0x%x detected: query=0x%x, "
 			"cmd=0x%x, ctrl=0x%x, data=0x%x, intr=0x%x\n",
 			rmi_fd->fn_number, rmi_fd->query_base_addr,
 			rmi_fd->cmd_base_addr, rmi_fd->ctrl_base_addr,
@@ -1021,6 +1021,109 @@ err_out:
 	return ret;
 }
 
+/* PAY ATTENTION: These DEBUG funtions don't manage resume_state */
+static ssize_t attr_ctrl_reg_set(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	unsigned long val;
+	struct rmi4_fn *rfi;
+	struct list_head *fn_list;
+	struct rmi4_data *rmi4_data = dev_get_drvdata(dev);
+
+	if (strict_strtoul(buf, 10, &val))
+		return -EINVAL;
+	fn_list = &(rmi4_data->rmi4_mod_info.support_fn_list);
+	list_for_each_entry(rfi, fn_list, link) {
+		if (rfi->ops->fn_number == rmi4_data->dbg_fn_num) {
+			rmi4_i2c_byte_write(rmi4_data,
+			rfi->ctrl_base_addr + rmi4_data->dbg_ctrl_reg_addr,
+					(unsigned char)val);
+			return size;
+		}
+	}
+	return -EINVAL;
+}
+
+static ssize_t attr_ctrl_reg_get(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	unsigned char val;
+	struct rmi4_fn *rfi;
+	struct list_head *fn_list;
+	struct rmi4_data *rmi4_data = dev_get_drvdata(dev);
+
+	fn_list = &(rmi4_data->rmi4_mod_info.support_fn_list);
+	list_for_each_entry(rfi, fn_list, link) {
+		if (rfi->ops->fn_number == rmi4_data->dbg_fn_num) {
+			rmi4_i2c_byte_read(rmi4_data,
+			rfi->ctrl_base_addr + rmi4_data->dbg_ctrl_reg_addr,
+			&val);
+			return sprintf(buf, "%d\n", val);
+		}
+	}
+	return -EINVAL;
+}
+static DEVICE_ATTR(ctrl_reg_value, S_IRUGO | S_IWUSR,
+		attr_ctrl_reg_get, attr_ctrl_reg_set);
+
+static ssize_t attr_ctrl_addr_set(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	unsigned long val;
+	struct rmi4_data *rmi4_data = dev_get_drvdata(dev);
+
+	if (strict_strtoul(buf, 10, &val))
+		return -EINVAL;
+	rmi4_data->dbg_ctrl_reg_addr = val;
+
+	return size;
+}
+
+static ssize_t attr_ctrl_addr_get(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct rmi4_data *rmi4_data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", rmi4_data->dbg_ctrl_reg_addr);
+}
+static DEVICE_ATTR(ctrl_reg_addr, S_IRUGO | S_IWUSR,
+		attr_ctrl_addr_get, attr_ctrl_addr_set);
+
+static ssize_t attr_fn_num_set(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	unsigned long val;
+	struct rmi4_data *rmi4_data = dev_get_drvdata(dev);
+
+	if (strict_strtoul(buf, 16, &val))
+		return -EINVAL;
+	rmi4_data->dbg_fn_num = val;
+
+	return size;
+}
+
+static ssize_t attr_fn_num_get(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct rmi4_data *rmi4_data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "0x%x\n", rmi4_data->dbg_fn_num);
+}
+static DEVICE_ATTR(fn_num, S_IRUGO | S_IWUSR,
+		attr_fn_num_get, attr_fn_num_set);
+
+static struct attribute *rmi4_attrs[] = {
+	&dev_attr_ctrl_reg_value.attr,
+	&dev_attr_ctrl_reg_addr.attr,
+	&dev_attr_fn_num.attr,
+	NULL
+}
+
+static struct attribute_group rmi4_attr_group = {
+	.name = "rmi4",
+	.attrs = rmi4_attrs
+};
+
 /**
  * rmi4_probe() - Initialze the i2c-client touchscreen driver
  * @client: i2c client structure pointer
@@ -1047,7 +1150,7 @@ static int __devinit rmi4_probe(struct i2c_client *client,
 	}
 
 	/* Allocate and initialize the instance data for this client */
-	rmi4_data = kzalloc(sizeof(struct rmi4_data) * 2, GFP_KERNEL);
+	rmi4_data = kzalloc(sizeof(struct rmi4_data), GFP_KERNEL);
 	if (!rmi4_data) {
 		dev_err(&client->dev, "%s: no memory allocated\n", __func__);
 		return -ENOMEM;
@@ -1148,6 +1251,12 @@ static int __devinit rmi4_probe(struct i2c_client *client,
 		goto err_reg_input;
 	}
 
+	retval = sysfs_create_group(&client->dev.kobj, &rmi4_attr_group);
+	if (retval < 0) {
+		dev_err(&client->dev, "rmi4 sysfs register failed\n");
+		goto err_reg_input;
+	}
+
 #ifdef CONFIG_HAS_EARLYSUSPEND
 	rmi4_data->es.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
 	rmi4_data->es.suspend = rmi4_early_suspend;
diff --git a/drivers/staging/ste_rmi4/synaptics_i2c_rmi4.h b/drivers/staging/ste_rmi4/synaptics_i2c_rmi4.h
index 4f0422b..f4c884a 100644
--- a/drivers/staging/ste_rmi4/synaptics_i2c_rmi4.h
+++ b/drivers/staging/ste_rmi4/synaptics_i2c_rmi4.h
@@ -147,6 +147,8 @@ struct rmi4_data {
 	struct regulator	*regulator;
 	int			irq;
 	struct early_suspend	es;
+	u8			dbg_fn_num;
+	u8			dbg_ctrl_reg_addr;
 };
 
 /**
