From c5fc07c5c38a94ea276b3095085f101bec92a8a1 Mon Sep 17 00:00:00 2001
From: Morten Koch <morten.koch@intel.com>
Date: Tue, 9 Dec 2014 14:55:01 +0100
Subject: [PATCH 02/10] Fixed range check if interger overflow in control
 bits.

BZ: 553

[PATCH 17/26]Fixed range check if interger overflow in control bits.  Ensure only
STM timer is used for duration check. Enhance quality of random number.
removed workaround if first number is 0 then using counter as random
number (introduced because of hosttesting).

Change-Id: I5adb7323ba1d0f21a587293b42a0536d7e628a93
UTP-Id: SMS06046970
Reviewed-on: https://opticm6.rds.intel.com/r/45533
Reviewed-by: Chee Leong Ng <chee.leong.ng@intel.com>
Reviewed-by: Thomas D Rasmussen <thomas.d.rasmussen@intel.com>
Reviewed-by: UTP Service
Tested-by: Vishwanath Manvi <vishwanath.manvi@intel.com>
---
 external/drm/oemcrypto_engine_mock.cpp |   28 +---------------------------
 external/drm/oemcrypto_mock.cpp        |    1 +
 2 files changed, 2 insertions(+), 27 deletions(-)

diff --git a/external/drm/oemcrypto_engine_mock.cpp b/external/drm/oemcrypto_engine_mock.cpp
index 5fb9e29..3bfc3ff 100644
--- a/external/drm/oemcrypto_engine_mock.cpp
+++ b/external/drm/oemcrypto_engine_mock.cpp
@@ -36,8 +36,6 @@
 #if defined(IMC_UTA_SEC)
   #include "uta_security.h"
   extern UtaInt32 UtaSecHandle_mock;
-  //REMOVE THIS WHEN THINGS ARE WORKING
-  UtaUInt8 nonce_mock_count = 0;
   #define RAND_bytes(a,b) imc_random_bytes(a,b)
   #define IMC_AES_ECB
   #define IMC_AES_CBC
@@ -120,26 +118,12 @@ UtaInt32 imc_random_bytes(UtaUInt8 *randomData, UtaUInt32 dataLength)
   UtaSecGetRandomNum_mock = UtaSecGetRandomNum(UtaSecHandle_mock, //Get this handle from session!
                                               randomData,
                                               dataLength,
-                                              UTA_SEC_RNG_QUAL_NORM );
-
-// The randomData is hardcoded because UtaSecGetRandomNum() is not fully implemented (it does not return any valid data!)
-//  nonce_mock_count = 0xaa;
-  if(0x0 == (UtaInt32)randomData[0] )
-  {
-    for(i=0; i<dataLength; i++)
-    {
-      randomData[i] = 0x12+i+nonce_mock_count;
-    }
-    nonce_mock_count++;
-  }
-
-/* ALGO is not supported.
+                                              UTA_SEC_RNG_QUAL_HIGH);
   if(UTA_SUCCESS != UtaSecGetRandomNum_mock)
   {
     printf("-- imc_random_bytes failed err:%d in function: OEMCrypto_GenerateNonce(OEMCrypto_SESSION session\n",UtaSecGetRandomNum_mock );
     return false;
   }
-*/
 
   return true;
 }
@@ -2314,21 +2298,11 @@ extern "C" unsigned long long stm_get_timestamp_ms();
 extern "C" unsigned long long stm_get_timestamp();
 
 void SessionContext::StartTimer() {
-  #ifdef ENABLE_TX
-//  timer_start_ = tx_time_get()/TIME_SCALE_TO_SEC;
   timer_start_ = ((uint32_t)stm_get_timestamp_ms()/TIME_SCALE_MS_TO_SEC);
-  #else
-  timer_start_ = time(NULL);
-  #endif
 }
 
 uint32_t SessionContext::CurrentTimer() {
-  #ifdef ENABLE_TX
-//  uint32_t now = tx_time_get()/TIME_SCALE_TO_SEC;
   uint32_t now = ((uint32_t)stm_get_timestamp_ms()/TIME_SCALE_MS_TO_SEC);
-  #else
-  time_t now = time(NULL);
-  #endif
   return now - timer_start_;
 }
 
diff --git a/external/drm/oemcrypto_mock.cpp b/external/drm/oemcrypto_mock.cpp
index 89af88a..a7bafe6 100644
--- a/external/drm/oemcrypto_mock.cpp
+++ b/external/drm/oemcrypto_mock.cpp
@@ -401,6 +401,7 @@ bool RangeCheck(const uint8_t* message,
                 uint32_t field_length,
                 bool allow_null) {
   if (field == NULL) return allow_null;
+  if (field + field_length < message) return false;
   if (field < message) return false;
   if (field + field_length > message + message_length) return false;
   return true;
-- 
1.7.9.5

