From 6fe6a92ffb91ea33189bd8c2f523de066b066f36 Mon Sep 17 00:00:00 2001
From: wzq <wzq@rock-chips.com>
Date: Wed, 6 May 2015 15:55:45 +0800
Subject: [PATCH] Add an thread for repaint when static screen

---
 .../surfaceflinger/DisplayHardware/HWComposer.cpp  |   55 ++++++++++++++------
 .../surfaceflinger/DisplayHardware/HWComposer.h    |   15 +++++-
 services/surfaceflinger/SurfaceFlinger.h           |   11 ++--
 3 files changed, 59 insertions(+), 22 deletions(-)

diff --git a/services/surfaceflinger/DisplayHardware/HWComposer.cpp b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
index 47c6d4b..a814d68 100755
--- a/services/surfaceflinger/DisplayHardware/HWComposer.cpp
+++ b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
@@ -197,6 +197,8 @@ HWComposer::HWComposer(
         // we don't have VSYNC support, we need to fake it
         mVSyncThread = new VSyncThread(*this);
     }
+
+    mRepaintThread  = new RepaintThread(*this);
 }
 
 HWComposer::~HWComposer() {
@@ -206,6 +208,9 @@ HWComposer::~HWComposer() {
     if (mVSyncThread != NULL) {
         mVSyncThread->requestExitAndWait();
     }
+    if (mRepaintThread != NULL) {
+        mRepaintThread->requestExitAndWait();
+    }
     if (mHwc) {
         hwc_close_1(mHwc);
     }
@@ -642,9 +647,10 @@ bool gTimeIsUp = false;
 sp<SurfaceFlinger> gFlinger = NULL;
 void timer_handler(int sig) {
     if(sig == SIGALRM) {
-        gFlinger->repaintEverything();
+        const HWComposer& hwc = gFlinger->getHwComposer();
+        hwc.mRepaintThread->setRepaint(true);
         gTimeIsUp = true;
-        ALOGV("  time up, send a refresh msg!");
+        ALOGV("new:time up, send a refresh msg!");
     }
 }
 status_t HWComposer::prepare() {
@@ -690,7 +696,6 @@ status_t HWComposer::prepare() {
         if (disp.list) {
             bool NeedRepaint = false;
             unsigned int TotalSize = 0;
-            int OnlyTopUpdate = 0;
             const DisplayConfig& currentConfig = disp.configs[disp.currentConfig];
             struct itimerval tv = {0};
 
@@ -712,16 +717,6 @@ status_t HWComposer::prepare() {
                 {
                     NeedRepaint = true;
                 }
-                if (l.bufferUpdate) {
-                    l.bufferUpdate = 0;
-                    bool IsSmallTop = !strcmp("StatusBar", l.LayerName);
-                    if(IsSmallTop) {
-
-                        unsigned int size = (rt->right - rt->left) * (rt->bottom - rt->top);
-                        IsSmallTop = (size < ((currentConfig.width * currentConfig.height)/4));
-                    }
-                    OnlyTopUpdate = (IsSmallTop && 0==OnlyTopUpdate) ? 1 : -1;
-                }
             }
             if (NeedRepaint) {
                 if(TotalSize < ((currentConfig.width * currentConfig.height * 5)/4)) {
@@ -729,8 +724,9 @@ status_t HWComposer::prepare() {
                 }
             }
             if (NeedRepaint) {
-                if (gTimeIsUp || 1==OnlyTopUpdate) {
-                    if (gTimeIsUp)   gTimeIsUp = false;
+                if (gTimeIsUp) {
+                    gTimeIsUp = false;
+                    mRepaintThread->setRepaint(false);
                     ALOGV("close timer & go gpu composer!");
                     tv.it_value.tv_usec = 0;
                     setitimer(ITIMER_REAL, &tv, NULL);
@@ -1467,6 +1463,35 @@ bool HWComposer::VSyncThread::threadLoop() {
     return true;
 }
 
+void HWComposer::RepaintThread::onFirstRef() {
+    run("RepaintThread", PRIORITY_URGENT_DISPLAY + PRIORITY_MORE_FAVORABLE);
+}
+
+HWComposer::RepaintThread::RepaintThread(HWComposer& hwc)
+    : mRHwc(hwc), mRepaint(false)
+{
+}
+
+void HWComposer::RepaintThread::setRepaint(bool isRep) {
+    Mutex::Autolock _l(mRLock);
+    if (mRepaint != isRep) {
+        mRepaint = isRep;
+        mRtCondition.signal();
+    }
+}
+
+bool HWComposer::RepaintThread::threadLoop() {
+    { // scope for lock
+        Mutex::Autolock _l(mRLock);
+        while (!mRepaint) {
+            mRtCondition.wait(mRLock);
+        }
+    }
+    gFlinger->repaintEverything();
+    usleep(50000);
+    return true;
+}
+
 HWComposer::DisplayData::DisplayData()
 :   configs(),
     currentConfig(0),
diff --git a/services/surfaceflinger/DisplayHardware/HWComposer.h b/services/surfaceflinger/DisplayHardware/HWComposer.h
index 2708ea7..8c9ea7f 100755
--- a/services/surfaceflinger/DisplayHardware/HWComposer.h
+++ b/services/surfaceflinger/DisplayHardware/HWComposer.h
@@ -308,11 +308,24 @@ public:
         void setEnabled(bool enabled);
     };
 
+    class RepaintThread : public Thread {
+        HWComposer& mRHwc;
+        mutable Mutex mRLock;
+        Condition mRtCondition;
+        bool mRepaint;
+        virtual void onFirstRef();
+        virtual bool threadLoop();   // virtual bool RepaintLoop();
+    public:
+        RepaintThread(HWComposer& hwc);
+        void setRepaint(bool isRep);
+    };
+    
     friend class VSyncThread;
 
     // for debugging ----------------------------------------------------------
     void dump(String8& out) const;
-
+    sp<RepaintThread>                 mRepaintThread;
+    
 private:
     void loadHwcModule();
     int loadFbHalModule();
diff --git a/services/surfaceflinger/SurfaceFlinger.h b/services/surfaceflinger/SurfaceFlinger.h
index b29597f..42a256a 100755
--- a/services/surfaceflinger/SurfaceFlinger.h
+++ b/services/surfaceflinger/SurfaceFlinger.h
@@ -160,6 +160,11 @@ public:
 	Mutex  mCaptureScreenLock;
     bool ReleaseOldBuffer(void);    //rk : for lcdc composer
 
+    /* ------------------------------------------------------------------------
+    * H/W composer
+    */
+    HWComposer& getHwComposer() const { return *mHwc; }
+
 private:
     friend class Client;
     friend class DisplayEventConnection;
@@ -388,12 +393,6 @@ private:
     int32_t allocateHwcDisplayId(DisplayDevice::DisplayType type);
 
     /* ------------------------------------------------------------------------
-     * H/W composer
-     */
-
-    HWComposer& getHwComposer() const { return *mHwc; }
-
-    /* ------------------------------------------------------------------------
      * Compositing
      */
     void invalidateHwcGeometry();
-- 
1.7.9.5

