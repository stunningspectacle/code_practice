From 2630695e518c5986cd1d1f674469851988ee06bc Mon Sep 17 00:00:00 2001
From: Wenlong Zhuang <daisen.zhuang@rock-chips.com>
Date: Mon, 4 May 2015 17:59:19 +0800
Subject: [PATCH] video: rockchip: screen: add backlight control function

The function rockchip_screen_get_backlight() gets the backlight
device of pwm or leds type by a given device tree node.
the function rockchip_screen_backlight_control() control the
different type backlight to close or open.

Signed-off-by: Wenlong Zhuang <daisen.zhuang@rock-chips.com>
---
 drivers/video/rockchip/rockchip_screen.c |   81 +++++++++++++++++++++++++++++-
 include/linux/rockchip_screen.h          |   17 ++++++-
 2 files changed, 96 insertions(+), 2 deletions(-)

diff --git a/drivers/video/rockchip/rockchip_screen.c b/drivers/video/rockchip/rockchip_screen.c
index ed4a554..ff2d280 100644
--- a/drivers/video/rockchip/rockchip_screen.c
+++ b/drivers/video/rockchip/rockchip_screen.c
@@ -19,7 +19,7 @@
 #include <linux/sizes.h>
 #include <linux/delay.h>
 #include <linux/regulator/consumer.h>
-
+#include <linux/leds.h>
 #include <linux/of_gpio.h>
 #include <linux/rockchip_screen.h>
 #include <linux/rockchip_fb.h>
@@ -280,6 +280,84 @@ static int rockchip_screen_parse_gpio(struct rockchip_screen *screen)
 	return 0;
 }
 
+static struct of_device_id backlight_dt_match[] = {
+	{	.compatible = "pwm-backlight",
+		.data = (void *)PWM_BACKLIGHT,
+	},
+	{	.compatible = "intel,agold620-led",
+		.data = (void *)LED_BACKLIGHT,
+	},
+	{},
+};
+
+static struct display_backlight *
+rockchip_screen_get_backlight(struct rockchip_screen *screen)
+{
+	struct device_node *backlight_node;
+	struct display_backlight *backlight = NULL;
+
+	backlight_node =
+		of_parse_phandle(screen->dev->of_node, "backlight", 0);
+
+	if (backlight_node) {
+		const struct of_device_id *match;
+
+		match = of_match_node(backlight_dt_match, backlight_node);
+		backlight = devm_kzalloc(screen->dev, sizeof(*backlight),
+					 GFP_KERNEL);
+		if (!backlight)
+			return 0;
+
+		backlight->type = (int)match->data;
+
+		if (backlight->type == PWM_BACKLIGHT)
+			backlight->u.pwm_bl =
+				of_find_backlight_by_node(backlight_node);
+		else if (backlight->type == LED_BACKLIGHT)
+			backlight->u.led_bl =
+				of_find_led_classdev_by_node(backlight_node);
+
+		of_node_put(backlight_node);
+
+		if (!backlight->u.pwm_bl && !backlight->u.led_bl) {
+			devm_kfree(screen->dev, backlight);
+			backlight = NULL;
+			dev_info(screen->dev, "No find screen backlight device\n");
+		}
+	} else {
+		dev_info(screen->dev, "No find screen backlight device node\n");
+	}
+
+	return backlight;
+}
+
+static int
+rockchip_screen_backlight_control(struct rockchip_screen *screen, bool enable)
+{
+	struct backlight_device *pwm_bl;
+	struct led_classdev *led_bl;
+
+	if (!screen->backlight) {
+		screen->backlight = rockchip_screen_get_backlight(screen);
+		if (unlikely(!screen->backlight))
+			return -ENODEV;
+	}
+
+	if (screen->backlight->type == PWM_BACKLIGHT) {
+		pwm_bl = screen->backlight->u.pwm_bl;
+		pwm_bl->props.fb_blank =
+			enable ? FB_BLANK_UNBLANK : FB_BLANK_POWERDOWN;
+
+		backlight_update_status(screen->backlight->u.pwm_bl);
+	} else if (screen->backlight->type == LED_BACKLIGHT) {
+		led_bl = screen->backlight->u.led_bl;
+
+		led_set_brightness(led_bl, enable ? LED_HALF : LED_OFF);
+	}
+
+	return 0;
+}
+
 static int rockchip_disp_pwr_ctr_parse_dt(struct device_node *np,
 					  struct rockchip_screen *screen)
 {
@@ -456,6 +534,7 @@ static int rockchip_screen_probe(struct platform_device *pdev)
 
 	sfa_screen->power_on = rockchip_screen_power_on;
 	sfa_screen->power_off = rockchip_screen_power_off;
+	sfa_screen->backlight_ctrl = rockchip_screen_backlight_control;
 
 #ifdef CONFIG_PLATFORM_DEVICE_PM
 	if (sfa_screen->pm_platdata) {
diff --git a/include/linux/rockchip_screen.h b/include/linux/rockchip_screen.h
index a73d3cf..a07cdb8 100644
--- a/include/linux/rockchip_screen.h
+++ b/include/linux/rockchip_screen.h
@@ -27,6 +27,11 @@
 #define ALIGN_ODD_TIMES(x, align)	\
 	(((x) % ((align) * 2) == 0) ? ((x) + (align)) : (x))
 
+enum display_backlight_t {
+	PWM_BACKLIGHT = 0,
+	LED_BACKLIGHT,
+};
+
 enum display_gpio_t {
 	DISPLAY_GPIO_VHIGH = 0,
 	DISPLAY_GPIO_VLOW = 1,
@@ -41,6 +46,14 @@ struct display_pwr_gpio {
 	int delay;		/* in ms */
 };
 
+struct display_backlight {
+	enum display_backlight_t type;
+	union {
+		struct backlight_device *pwm_bl;
+		struct led_classdev *led_bl;
+	} u;
+};
+
 /*
  * rockchip_screen description
  * type: LVDS,RGB,MIPI,MCU
@@ -106,12 +119,15 @@ struct rockchip_screen {
 	struct display_pwr_gpio *gpios_power_off;
 
 	struct rockchip_screen *ext_screen;
+	struct display_backlight *backlight;
+
 	/* Operation function */
 	int (*init)(void);
 	int (*standby)(u8 enable);
 	int (*refresh)(u8 arg);
 	void (*power_on)(struct rockchip_screen *screen);
 	void (*power_off)(struct rockchip_screen *screen);
+	int (*backlight_ctrl)(struct rockchip_screen *screen, bool enable);
 };
 
 size_t get_fb_size(void);
@@ -119,5 +135,4 @@ int rockchip_get_prmry_screen(struct rockchip_screen *screen);
 int rockchip_set_prmry_screen(struct rockchip_screen *screen);
 int rockchip_disp_pwr_enable(struct rockchip_screen *screen);
 int rockchip_disp_pwr_disable(struct rockchip_screen *screen);
-int rockchip_screen_of_parse_dsi(void *dsi_disp);
 #endif
-- 
1.7.9.5

