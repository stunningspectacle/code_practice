From 535a267e959cf6f4fab9b97e6060ac1eff7b3013 Mon Sep 17 00:00:00 2001
From: Xavier Roumegue <xavier.roumegue@intel.com>
Date: Mon, 20 Jul 2015 23:09:40 +0200
Subject: [PATCH] x86: mm: Optimize set_memory_* depending on cpu self snoop
 capability

This patch takes benefit of the exported cpu feature (cpu_has_ss)
to bypass some precautions to deal with cache type aliasing, such as the one
introduced by commit 3869c4aa18835c8c61b44bd0f3ace36e9d3b5bd0 ,
"x86, PAT: Changing memtype to WC ensuring no WB alias".

This patch avoid to set the memory to UC-, prior to request WC memory type.
This is especially a performance boost while dealing with graphics/GPU
drivers allocating/freeing their write combine graphics buffer at runtime.

Signed-off-by: Xavier Roumegue <xavier.roumegue@intel.com>

UTP-Id: SMS07792991
Change-Id: Ica658c98a8ac53342b2f74d903217d5c232c3055
---
 arch/x86/mm/pageattr.c |   36 +++++++++++++++++++++++-------------
 1 file changed, 23 insertions(+), 13 deletions(-)

diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index ffdccfd..02ee3eb 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -1477,12 +1477,15 @@ static int _set_memory_array(unsigned long *addr, int addrinarray,
 			goto out_free;
 	}
 
-	ret = change_page_attr_set(addr, addrinarray,
+	if (!cpu_has_ss && (new_type == _PAGE_CACHE_WC)) {
+		ret = change_page_attr_set(addr, addrinarray,
 				    __pgprot(_PAGE_CACHE_UC_MINUS), 1);
+		if (ret)
+			goto out_free;
+	}
 
-	if (!ret && new_type == _PAGE_CACHE_WC)
-		ret = change_page_attr_set_clr(addr, addrinarray,
-					       __pgprot(_PAGE_CACHE_WC),
+	ret = change_page_attr_set_clr(addr, addrinarray,
+					       __pgprot(new_type),
 					       __pgprot(_PAGE_CACHE_MASK),
 					       0, CPA_ARRAY, NULL);
 	if (ret)
@@ -1514,14 +1517,17 @@ int _set_memory_wc(unsigned long addr, int numpages)
 	int ret;
 	unsigned long addr_copy = addr;
 
-	ret = change_page_attr_set(&addr, numpages,
+	if (!cpu_has_ss) {
+		ret = change_page_attr_set(&addr, numpages,
 				    __pgprot(_PAGE_CACHE_UC_MINUS), 0);
-	if (!ret) {
-		ret = change_page_attr_set_clr(&addr_copy, numpages,
+		if (ret)
+			return ret;
+	}
+
+	ret = change_page_attr_set_clr(&addr_copy, numpages,
 					       __pgprot(_PAGE_CACHE_WC),
 					       __pgprot(_PAGE_CACHE_MASK),
 					       0, 0, NULL);
-	}
 	return ret;
 }
 
@@ -1661,11 +1667,15 @@ static int _set_pages_array(struct page **pages, int addrinarray,
 			goto err_out;
 	}
 
-	ret = cpa_set_pages_array(pages, addrinarray,
-			__pgprot(_PAGE_CACHE_UC_MINUS));
-	if (!ret && new_type == _PAGE_CACHE_WC)
-		ret = change_page_attr_set_clr(NULL, addrinarray,
-					       __pgprot(_PAGE_CACHE_WC),
+	if (!cpu_has_ss && (new_type == _PAGE_CACHE_WC)) {
+		ret = cpa_set_pages_array(pages, addrinarray,
+				__pgprot(_PAGE_CACHE_UC_MINUS));
+		if (ret)
+			goto err_out;
+	}
+
+	ret = change_page_attr_set_clr(NULL, addrinarray,
+					       __pgprot(new_type),
 					       __pgprot(_PAGE_CACHE_MASK),
 					       0, CPA_PAGES_ARRAY, pages);
 	if (ret)
-- 
1.7.9.5

