commit c51d1067aaa9b5e9f836af38ee50ad371a0fdac6
Author: Vivek Veenam <vivek.veenam@intel.com>
Date:   Mon Apr 13 14:40:51 2015 +0200

    video, xgold, dcc: Enable DCC writeback feature.
    
    Signed-off-by: Vivek Veenam <vivek.veenam@intel.com>
    Change-Id: Ifa287511a1b000cc2cb5221d00198fe08966a7a6
    Reviewed-on: https://opticm6.rds.intel.com/r/84556
    Tested-by: TCloud Jenkins
    Reviewed-by: Binu R S <binu.r.s@intel.com>
    Reviewed-by: Gregoire Etienne <gregoire.etienne@intel.com>

diff --git a/drivers/video/xgold/dcc/dcc-core.h b/drivers/video/xgold/dcc/dcc-core.h
index c16c444..fa23696 100644
--- a/drivers/video/xgold/dcc/dcc-core.h
+++ b/drivers/video/xgold/dcc/dcc-core.h
@@ -331,6 +331,7 @@ struct dcc_acq_fence_work {
 	struct dcc_update_layers update;
 	struct dcc_drvdata *drv;
 	int update_pt;
+	struct dcc_layer_writeback writeback;
 #if defined(CONFIG_SYNC)
 	struct sync_fence *acquire_fence[DCC_OVERLAY_NUM + 2];
 #endif
diff --git a/drivers/video/xgold/dcc/dcc-gra.c b/drivers/video/xgold/dcc/dcc-gra.c
index 53dc744..4229e9e 100644
--- a/drivers/video/xgold/dcc/dcc-gra.c
+++ b/drivers/video/xgold/dcc/dcc-gra.c
@@ -40,6 +40,13 @@ static int dcc_set_framebuffer(struct dcc_drvdata *p,
 	return 0;
 }
 
+static int dcc_set_writeback_buffer(struct dcc_drvdata *p,
+			unsigned int base)
+{
+	gra_write_field(p, INR_GRA_STENCILBASE, base);
+	return 0;
+}
+
 enum {
 	ALPHA_NONE,
 	ALPHA_PLANE,
@@ -822,34 +829,37 @@ static void dcc_update(struct dcc_drvdata *p, struct x_rect_t *r,
 		DCC_UPDATE_MODE_SET(r->flags, DCC_UPDATE_CONTINOUS);
 
 	if (DCC_UPDATE_MODE_GET(r->flags) == DCC_UPDATE_ONESHOT_SYNC) {
-		uint32_t paramssc[7] = {
-				alpha, 0x5, r->x, r->y, X2(r), Y2(r), 0 };
+		uint32_t paramssc[8] = {
+				alpha, 0x5, r->x, r->y, X2(r), Y2(r), 0,
+				DCC_UPDATE_WB_GET(r->flags) };
 
 		if (p->display.frame_prepare)
 			p->display.frame_prepare(&p->display,
 					(dcc_get_display_w(p) * 3) / 2,
 					2 * dcc_get_display_h(p));
 
-		gra_sendcmd(p, GRACMD_SCHEDULE_UPDATE, 0, paramssc, 7);
+		gra_sendcmd(p, GRACMD_SCHEDULE_UPDATE, 0, paramssc, 8);
 		if (p->display.frame_wfe)
 			p->display.frame_wfe(&p->display);
 
 	} else if (DCC_UPDATE_MODE_GET(r->flags) == DCC_UPDATE_ONESHOT_ASYNC) {
-		uint32_t paramssc[7] = {
-				alpha, 0x5, r->x, r->y, X2(r), Y2(r), 0 };
+		uint32_t paramssc[8] = {
+				alpha, 0x5, r->x, r->y, X2(r), Y2(r), 0,
+				DCC_UPDATE_WB_GET(r->flags) };
 
 		if (p->display.frame_prepare)
 			p->display.frame_prepare(&p->display,
 					(dcc_get_display_w(p) * 3) / 2,
 					2 * dcc_get_display_h(p));
 
-		gra_sendcmd(p, GRACMD_SCHEDULE_UPDATE, 0, paramssc, 7);
+		gra_sendcmd(p, GRACMD_SCHEDULE_UPDATE, 0, paramssc, 8);
 
 	} else if (DCC_UPDATE_MODE_GET(r->flags) == DCC_UPDATE_CONTINOUS) {
-		uint32_t paramssc[7] = {
-			alpha, 0x6, r->x, r->y, X2(r), Y2(r), pbase_yuv };
+		uint32_t paramssc[8] = {
+			alpha, 0x6, r->x, r->y, X2(r), Y2(r), pbase_yuv,
+				DCC_UPDATE_WB_GET(r->flags) };
 
-		gra_sendcmd(p, GRACMD_SCHEDULE_UPDATE, 0, paramssc, 7);
+		gra_sendcmd(p, GRACMD_SCHEDULE_UPDATE, 0, paramssc, 8);
 		dcc_dsi_start_video(&p->display);/* TEMP PATCH SMS05120496 */
 	}
 }
@@ -1303,7 +1313,7 @@ int dcc_rq_convert(struct dcc_drvdata *p,
 }
 
 int dcc_rq_update(struct dcc_drvdata *p, struct dcc_rect_t *ru,
-		unsigned int pbase_yuv)
+		struct dcc_rect_t *rwb, unsigned int pbase_yuv)
 {
 	struct x_rect_t rk;
 
@@ -1318,6 +1328,8 @@ int dcc_rq_update(struct dcc_drvdata *p, struct dcc_rect_t *ru,
 			ru->phys, rk.x, rk.y, rk.w, rk.h,
 			dcc_format_name(ru->fmt), rk.flags);
 		dcc_set_framebuffer(p, ru->phys, ru->fbwidth);
+		if (rwb && DCC_UPDATE_WB_GET(rwb->flags))
+			dcc_set_writeback_buffer(p, rwb->phys);
 		dcc_update(p, &rk, (ru->color >> 24) & 0xFF,
 				pbase_yuv);
 	} else {
@@ -1385,9 +1397,11 @@ static void dcc_clr_overlay(struct dcc_sprite_t *spr, int spr_id)
 }
 
 static int dcc_rq_compose(struct dcc_drvdata *p,
-		struct dcc_update_layers *updt, int update_pt)
+		struct dcc_update_layers *updt,
+		struct dcc_layer_writeback *writeback, int update_pt)
 {
 	struct dcc_rect_t ru;
+	struct dcc_rect_t rwb;
 	struct dcc_sprite_t spr;
 	unsigned int pbase_yuv = 0;
 	int ret = 0, global_ovl_status = 0, l_id = 0, ovl_id;
@@ -1467,7 +1481,10 @@ static int dcc_rq_compose(struct dcc_drvdata *p,
 			updt->back.src.w, updt->back.src.h,
 			updt->back.fmt,	0, updt->flags);
 
-	ret = dcc_rq_update(p, &ru, pbase_yuv);
+	/* set up Write back buffer */
+	DCC_INIT_RECT(rwb, writeback->phys, 0, 0, 0, 0,
+				0, 0, 0, updt->flags);
+	ret = dcc_rq_update(p, &ru, &rwb, pbase_yuv);
 
 	down(&p->update_sem);
 	p->update_pt_curr = update_pt;
@@ -1497,7 +1514,7 @@ static void acq_fence_wq(struct work_struct *ws)
 		}
 	}
 #endif
-	dcc_rq_compose(w->drv, &w->update, w->update_pt);
+	dcc_rq_compose(w->drv, &w->update, &w->writeback, w->update_pt);
 	kfree(ws);
 }
 
@@ -1532,7 +1549,8 @@ leave_err:
 
 
 int dcc_rq_acquire_and_compose(struct dcc_drvdata *p,
-		struct dcc_update_layers *updt, int updt_pt)
+		struct dcc_update_layers *updt, struct dcc_layer_writeback *wb,
+		int updt_pt)
 {
 	struct dcc_acq_fence_work *work;
 	unsigned int i;
@@ -1550,6 +1568,12 @@ int dcc_rq_acquire_and_compose(struct dcc_drvdata *p,
 	work->drv = p;
 	work->update = *updt;
 	work->update_pt = updt_pt;
+
+	if (DCC_UPDATE_WB_GET(updt->flags) && wb)
+		work->writeback = *wb;
+	else
+		memset(&work->writeback, 0, sizeof(work->writeback));
+
 #if defined(CONFIG_SYNC)
 	if (p->use_fences) {
 		fence = updt->back.fence_acquire;
diff --git a/drivers/video/xgold/dcc/dcc-gra.h b/drivers/video/xgold/dcc/dcc-gra.h
index 378c6f2..1c00210 100644
--- a/drivers/video/xgold/dcc/dcc-gra.h
+++ b/drivers/video/xgold/dcc/dcc-gra.h
@@ -37,10 +37,11 @@ enum {
 /* RQ Processing */
 void dcc_config_reset(struct dcc_drvdata *p);
 int dcc_rq_convert(struct dcc_drvdata *p, struct dcc_rq_t *rq);
-int dcc_rq_update(struct dcc_drvdata *p, struct dcc_rect_t *r,
-		unsigned int pbase_yuv);
+int dcc_rq_update(struct dcc_drvdata *p, struct dcc_rect_t *ru,
+		struct dcc_rect_t *rwb, unsigned int pbase_yuv);
 int dcc_rq_acquire_and_compose(struct dcc_drvdata *p,
-		struct dcc_update_layers *updt, int updt_pt);
+		struct dcc_update_layers *updt,
+		struct dcc_layer_writeback *writeback, int updt_pt);
 int dcc_rq_fillrectangle(struct dcc_drvdata *p, struct dcc_rect_t *r);
 int dcc_rq_setpixel(struct dcc_drvdata *p, struct dcc_point_t *pu);
 int dcc_rq_drawline(struct dcc_drvdata *p, struct dcc_rect_t *ru);
diff --git a/drivers/video/xgold/dcc/dcc-hwregs.c b/drivers/video/xgold/dcc/dcc-hwregs.c
index 9c0c76e..c946d72 100644
--- a/drivers/video/xgold/dcc/dcc-hwregs.c
+++ b/drivers/video/xgold/dcc/dcc-hwregs.c
@@ -1239,10 +1239,11 @@ int gra_sendcmd(struct dcc_drvdata *p, unsigned int opcode,
 
 	case GRACMD_SCHEDULE_UPDATE: /* Schedule update command opcode */
 		cmdbuf[0] =
-		    ((!!params[6]) << 19) |
-		    ((params[1] & 0x7) << 16) |
-		    ((params[0] & 0xFF) << 8) |
-		    CMDHEADER(iten, opcode);
+			((!!params[6]) << 19) |
+			((params[1] & 0x7) << 16) |
+			((params[0] & 0xFF) << 8) |
+			((params[7] & 0x1) << 20) | /* Write back */
+			CMDHEADER(iten, opcode);
 		cmdbuf[1] = COORDINATES(params[3], params[2]);
 		cmdbuf[2] = COORDINATES(params[5], params[4]);
 		if (params[6]) {
diff --git a/drivers/video/xgold/dcc/dcc-main.c b/drivers/video/xgold/dcc/dcc-main.c
index 6752395..e89d44f 100644
--- a/drivers/video/xgold/dcc/dcc-main.c
+++ b/drivers/video/xgold/dcc/dcc-main.c
@@ -373,7 +373,7 @@ static int dcc_fb_pan_display(struct fb_var_screeninfo *var,
 			dcc_get_fb_fmt(gradata),/* format */
 			0, DCC_UPDATE_ONESHOT_SYNC);
 		wmb();
-		ret = dcc_rq_update(gradata, &r, 0);
+		ret = dcc_rq_update(gradata, &r, NULL, 0);
 	}
 	up(&gradata->sem);
 	return ret;
@@ -403,7 +403,7 @@ static int dcc_fb_blank(int blank, struct fb_info *info)
 	sprite_confx |= BITFLDS(INR_DIF_CONF_BACK, !!blank);
 	gra_write_field(gradata, INR_DIF_CONF, sprite_confx);
 
-	ret = dcc_rq_update(gradata, &r, 0);
+	ret = dcc_rq_update(gradata, &r, NULL, 0);
 
 	up(&gradata->sem);
 	return ret;
@@ -603,17 +603,19 @@ static int dcc_fence_init(struct dcc_drvdata *pdata)
 }
 
 static int dcc_fence_create(struct dcc_drvdata *pdata,
-		unsigned int timeline_value, const char *name)
+			struct sw_sync_timeline *pobj,
+			unsigned int timeline_value,
+			const char *name)
 {
 	struct sync_pt *point;
 	struct sync_fence *fence = NULL;
 	int fd = -1;
 
-	if (!pdata->timeline)
+	if (!pobj)
 		return fd;
 
 	/* Create sync point */
-	point = sw_sync_pt_create(pdata->timeline,
+	point = sw_sync_pt_create(pobj,
 			timeline_value);
 	if (point == NULL)
 		return -EINVAL;
@@ -709,7 +711,7 @@ long dcc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			if (copy_from_user(&r, (void __user *)arg, sizeof(r)))
 				return -EFAULT;
 
-			err = dcc_rq_update(pdata, &r, 0);
+			err = dcc_rq_update(pdata, &r, NULL, 0);
 		}
 		break;
 
@@ -817,12 +819,14 @@ long dcc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			if (pdata->use_fences) {
 				updt.fence_retire =
 					dcc_fence_create(pdata,
+						pdata->timeline,
 						pdata->timeline_current,
 						"dcc-updt-retire-fence");
 				if (updt.back.phys &&
 					(!DCC_UPDATE_NOBG_GET(updt.flags)))
 					updt.back.fence_release =
 						dcc_fence_create(pdata,
+						pdata->timeline,
 						pdata->timeline_current,
 						"dcc-updt-release-fence");
 				for (ovl_id = 0;
@@ -832,12 +836,13 @@ long dcc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 					if (l->phys)
 						l->fence_release =
 							dcc_fence_create(pdata,
+						pdata->timeline,
 						pdata->timeline_current,
 						"dcc-ovl-release-fence");
 				}
 			}
 #endif
-			err = dcc_rq_acquire_and_compose(pdata, &updt,
+			err = dcc_rq_acquire_and_compose(pdata, &updt, NULL,
 				pdata->timeline_current);
 			if (err == 0)
 				pdata->timeline_current++;
@@ -850,6 +855,67 @@ long dcc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		}
 		break;
 
+	case DCC_IOW_COMPOSE_WITH_WB: {
+		struct dcc_update_layers_wb updt_wb;
+		int ovl_id;
+
+		if (copy_from_user(&updt_wb, (void __user *)arg,
+			sizeof(updt_wb)))
+				return -EFAULT;
+
+		updt_wb.updt.fence_retire = -1;
+		updt_wb.updt.back.fence_release = -1;
+		for (ovl_id = 0; ovl_id < DCC_OVERLAY_NUM; ovl_id++)
+			updt_wb.updt.ovls[ovl_id].fence_release = -1;
+
+		if (err == 0) {
+#ifdef CONFIG_SW_SYNC_USER
+			if (pdata->use_fences) {
+				updt_wb.updt.fence_retire =
+				dcc_fence_create(pdata,
+					pdata->timeline,
+					pdata->timeline_current,
+					"dcc-updt-retire-fence");
+				if (updt_wb.updt.back.phys &&
+				(!DCC_UPDATE_NOBG_GET(updt_wb.updt.flags)))
+					updt_wb.updt.back.fence_release =
+					dcc_fence_create(pdata,
+						pdata->timeline,
+						pdata->timeline_current,
+						"dcc-updt-release-fence");
+				for (ovl_id = 0;
+					ovl_id < DCC_OVERLAY_NUM; ovl_id++) {
+					struct dcc_layer_ovl *l =
+						&updt_wb.updt.ovls[ovl_id];
+					if (l->phys)
+						l->fence_release =
+						dcc_fence_create(pdata,
+						pdata->timeline,
+						pdata->timeline_current,
+						"dcc-ovl-release-fence");
+				}
+				if (DCC_UPDATE_WB_GET(updt_wb.updt.flags) &&
+					updt_wb.wb.phys)
+					updt_wb.wb.fence_release =
+						dcc_fence_create(pdata,
+						pdata->updt_done_tl,
+						pdata->timeline_current,
+						"dcc-writeback-done-fence");
+			}
+#endif
+			err = dcc_rq_acquire_and_compose(pdata, &updt_wb.updt,
+					&updt_wb.wb, pdata->timeline_current);
+			if (err == 0)
+				pdata->timeline_current++;
+		} else
+			err = 0;
+
+		/* return to user space */
+		if (copy_to_user((void __user *)arg, &updt_wb, sizeof(updt_wb)))
+			return -EFAULT;
+	}
+	break;
+
 	default:
 		dcc_err("unknown ioctl cmd!\n");
 		return -ENOTTY;
diff --git a/include/video/xgold-dcc.h b/include/video/xgold-dcc.h
index f1a03c6..cc7fdf9 100644
--- a/include/video/xgold-dcc.h
+++ b/include/video/xgold-dcc.h
@@ -65,11 +65,11 @@ enum {
 };
 
 /* DCC update flags */
-#define	DCC_UPDATE_MODE_GET(_f_)	(_f_ & DCC_UPDATE_MODE_MASK)
-#define	DCC_UPDATE_MODE_SET(_f_, _m_) \
-	(_f_ = (_f_ & !DCC_UPDATE_MODE_MASK) | _m_)
 #define	DCC_UPDATE_MODE_BITS		(3)
 #define	DCC_UPDATE_MODE_MASK		((1<<DCC_UPDATE_MODE_BITS)-1)
+#define	DCC_UPDATE_MODE_GET(_f_)	(_f_ & DCC_UPDATE_MODE_MASK)
+#define	DCC_UPDATE_MODE_SET(_f_, _m_) \
+	(_f_ = (_f_ & ~DCC_UPDATE_MODE_MASK) | _m_)
 enum {
 	DCC_UPDATE_ONESHOT_SYNC = 0,
 	DCC_UPDATE_ONESHOT_ASYNC,
@@ -79,7 +79,14 @@ enum {
 #define DCC_UPDATE_NOBG_MASK		(1<<DCC_UPDATE_MODE_BITS)
 #define DCC_UPDATE_NOBG_GET(_f_)	((_f_>>DCC_UPDATE_MODE_BITS)&0x1)
 #define DCC_UPDATE_NOBG_SET(_f_, _v_)	\
-	(_f_ = (_f_ & !DCC_UPDATE_NOBG_MASK) | (_v_<<DCC_UPDATE_MODE_BITS))
+	(_f_ = (_f_ & ~DCC_UPDATE_NOBG_MASK) | (_v_<<DCC_UPDATE_MODE_BITS))
+
+/* DCC update flags for write back*/
+#define DCC_UPDATE_WB_BITPOS		(DCC_UPDATE_MODE_BITS + 1)
+#define DCC_UPDATE_WB_MASK		(1 << DCC_UPDATE_WB_BITPOS)
+#define DCC_UPDATE_WB_GET(_f_)		((_f_ >> DCC_UPDATE_WB_BITPOS) & 0x1)
+#define DCC_UPDATE_WB_SET(_f_, _v_)	\
+	(_f_ = (_f_ & ~DCC_UPDATE_WB_MASK) | (_v_ << DCC_UPDATE_WB_BITPOS))
 
 
 #define DCC_FMT_VIDEO_SPRITE	0xFF /* specific format for sprites */
@@ -357,6 +364,16 @@ struct dcc_layer_ovl {
 
 #define DCC_OVERLAY_NUM 4
 
+struct dcc_layer_writeback {
+	unsigned int phys;
+	int fence_release;
+};
+
+#define dcc_layer_writeback_conf(_o_, _p_) \
+			_o_.phys = _p_;
+
+#define dcc_layer_writeback_disable(_o_) _o_.phys = 0
+
 struct dcc_update_layers {
 	struct dcc_layer_back back;
 	struct dcc_layer_ovl ovls[DCC_OVERLAY_NUM];
@@ -364,6 +381,11 @@ struct dcc_update_layers {
 	unsigned int flags;
 };
 
+struct dcc_update_layers_wb {
+	struct dcc_update_layers updt;
+	struct dcc_layer_writeback wb;
+};
+
 /* IO CONTROL DEFINES */
 
 #define DCC_IOC_MAGIC 'x' /* ioctl: Magic number */
@@ -383,6 +405,8 @@ struct dcc_update_layers {
 #define DCC_IOW_SETPIXEL		_IOWR('x', 20, struct dcc_point_t)
 #define DCC_IOW_CONVERT			_IOWR('x', 21, struct dcc_rq_t)
 #define DCC_IOW_UPDATE			_IOWR('x', 22, struct dcc_rect_t)
+#define DCC_IOW_COMPOSE_WITH_WB		_IOWR('x', 23, \
+						struct dcc_update_layers_wb)
 
 #define DCC_IOC_MAXNR (27)
 
