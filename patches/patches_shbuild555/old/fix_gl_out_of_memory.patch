From 1ee3502822b5e5aeeab24fc268191f0f5805e357 Mon Sep 17 00:00:00 2001
From: Leo Yan <leo.yan@intel.com>
Date: Tue, 5 May 2015 15:24:14 +0800
Subject: [PATCH] Mali: Wait to allocate new page if we are out of memory

Change-Id: I8d84dc423fbd90eef5115b81c198d45ea62f8499
Tracked-On: https://jira01.devtools.intel.com/browse/CTEAN-737
Signed-off-by: Leo Yan <leo.yan@intel.com>
---
 drivers/gpu/arm/mali/linux/mali_memory_os_alloc.c |    6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/drivers/gpu/arm/mali/linux/mali_memory_os_alloc.c b/drivers/gpu/arm/mali/linux/mali_memory_os_alloc.c
index a1dc8cc..00f9974 100644
--- a/drivers/gpu/arm/mali/linux/mali_memory_os_alloc.c
+++ b/drivers/gpu/arm/mali/linux/mali_memory_os_alloc.c
@@ -171,8 +171,14 @@ static int mali_mem_os_alloc_pages(mali_mem_allocation *descriptor, u32 size)
 #endif
 
 		new_page = alloc_page(flags);
+		if (unlikely(NULL == new_page)) {
+			MALI_PRINT(("Fail to alloc new page, try it again.\n"));
+			flags |= __GFP_WAIT;
+			new_page = alloc_page(flags);
+		}
 
 		if (unlikely(NULL == new_page)) {
+			MALI_PRINT(("Error! Fail to alloc new page.\n"));
 			/* Calculate the number of pages actually allocated, and free them. */
 			descriptor->os_mem.count = (page_count - remaining) + i;
 			atomic_add(descriptor->os_mem.count, &mali_mem_os_allocator.allocated_pages);
-- 
1.7.9.5

