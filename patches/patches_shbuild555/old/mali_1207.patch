diff --git a/driver/include/base/mali_memory.h b/driver/include/base/mali_memory.h
index 6ca1cde..7fd32e3 100644
--- a/driver/include/base/mali_memory.h
+++ b/driver/include/base/mali_memory.h
@@ -636,8 +636,11 @@ MALI_STATIC_FORCE_INLINE void _mali_mem_ptr_unmap_area(mali_mem_handle memh)
 
 	if (0 == ref)
 	{
+                MALI_DEBUG_PRINT(2, ("%s: xxxxx do real unmap\n", __func__));
 		_mali_base_arch_mem_unmap(mem);
-	}
+	} else {
+                MALI_DEBUG_PRINT(2, ("%s: xxxxxjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj no real unmap\n", __func__));
+        }
 
 	return;
 }
diff --git a/driver/src/base/arch/arch_011_udd/base_arch_mem.c b/driver/src/base/arch/arch_011_udd/base_arch_mem.c
index 91a5e5e..919c8a5 100644
--- a/driver/src/base/arch/arch_011_udd/base_arch_mem.c
+++ b/driver/src/base/arch/arch_011_udd/base_arch_mem.c
@@ -230,7 +230,6 @@ mali_bool _mali_base_arch_mem_map(mali_mem *base_mem, u32 offset_in_mem, u32 siz
 	if (NULL == mem->mapping)
 	{
 		MALI_DEBUG_PRINT(3, ("Memory not mapped, direct not available\n"));
-
 		switch (base_mem->memory_subtype)
 		{
 #if MALI_USE_DMA_BUF
@@ -509,6 +508,21 @@ mali_err_code _mali_base_arch_mem_dma_buf_get_size(u32 *size, u32 mem_fd)
 	MALI_SUCCESS;
 }
 
+mali_err_code _mali_base_arch_mem_dma_buf_sync_cpu(u32 mem_fd)
+{
+	_mali_uk_dma_buf_sync_cpu_s call_arguments;
+
+	call_arguments.ctx = mali_uk_ctx;
+	call_arguments.mem_fd = mem_fd;
+
+	if (_MALI_OSK_ERR_OK != _mali_uku_dma_buf_sync_cpu(&call_arguments))
+	{
+		MALI_ERROR(MALI_ERR_FUNCTION_FAILED);
+	}
+
+	MALI_SUCCESS;
+}
+
 mali_err_code _mali_base_arch_mem_dma_buf_attach(mali_mem *descriptor, u32 mem_fd)
 {
 	arch_mem *mem = arch_mem_from_mali_mem(descriptor);
@@ -547,6 +561,7 @@ mali_err_code _mali_base_arch_mem_dma_buf_attach(mali_mem *descriptor, u32 mem_f
 #endif
 	call_arguments.cookie       = 0; /* return DD-cookie */
 
+	MALI_DEBUG_PRINT(1, ("xxxxxxxxxxx %s: mem_fd:%d\n", __func__, mem_fd));
 	if (_MALI_OSK_ERR_OK != _mali_uku_attach_dma_buf(&call_arguments))
 	{
 		mali_mmu_virtual_address_range_free(mem);
@@ -588,11 +603,17 @@ void _mali_base_arch_mem_dma_buf_release(mali_mem *descriptor)
 
 mali_err_code _mali_base_arch_mem_dma_buf_map(mali_mem *descriptor)
 {
+
 	arch_mem *mem = arch_mem_from_mali_mem(descriptor);
 	int mem_fd = descriptor->relationship.dma_buf_fd;
 
+	//ioctl(mem_fd, ION_IOC_SYNC);
+	
 	mem->mapping = mmap(0, mem->mapping_size, PROT_READ | PROT_WRITE, MAP_SHARED, mem_fd, 0);
 
+	MALI_DEBUG_PRINT(1, ("xxxxxxxx %s: pid=%d, type: %d, mem->mapping:%p, mem_fd=%d\n",
+				__func__, _mali_sys_get_pid(), descriptor->memory_subtype, mem->mapping, mem_fd));
+
 	if (MAP_FAILED == mem->mapping)
 	{
 		MALI_DEBUG_ERROR(("failed to map dma-buf memory\n"));
@@ -606,8 +627,12 @@ void _mali_base_arch_mem_dma_buf_unmap(mali_mem *descriptor)
 {
 	arch_mem *mem = arch_mem_from_mali_mem(descriptor);
 
+	u32 mem_fd = descriptor->relationship.dma_buf_fd;
+	_mali_base_arch_mem_dma_buf_sync_cpu(mem_fd);
+
 	descriptor->cached_addr_info.cpu_address = NULL;
 
+	MALI_DEBUG_PRINT(1, ("xxxxxxxxxxx %s: type: %d, mem->mapping:%p\n", __func__, descriptor->memory_subtype, mem->mapping));
 	munmap(mem->mapping, mem->mapping_size);
 	mem->mapping = NULL;
 }
diff --git a/driver/src/base/common/pp/mali_pp_job.c b/driver/src/base/common/pp/mali_pp_job.c
index ca9b21c..72044ba 100644
--- a/driver/src/base/common/pp/mali_pp_job.c
+++ b/driver/src/base/common/pp/mali_pp_job.c
@@ -47,6 +47,7 @@ MALI_STATIC_INLINE void _mali_pp_job_start_instrumented(mali_pp_job_handle job_h
 
 MALI_STATIC mali_bool m200_check_version(void)
 {
+	return MALI_TRUE;
 	u32 hwversion = _mali_arch_pp_get_core_version();
 
 #if defined(USING_MALI400) && (MALI_HWVER == 0x0101)
diff --git a/driver/src/base/os/linux/mali_uku.c b/driver/src/base/os/linux/mali_uku.c
index 4426113..74cdc08 100644
--- a/driver/src/base/os/linux/mali_uku.c
+++ b/driver/src/base/os/linux/mali_uku.c
@@ -219,6 +219,11 @@ _mali_osk_errcode_t _mali_uku_dma_buf_get_size(_mali_uk_dma_buf_get_size_s *args
 	return mali_driver_ioctl(args->ctx, MALI_IOC_MEM_DMA_BUF_GET_SIZE, args);
 }
 
+_mali_osk_errcode_t _mali_uku_dma_buf_sync_cpu(_mali_uk_dma_buf_sync_cpu_s *args)
+{
+	return mali_driver_ioctl(args->ctx, MALI_IOC_MEM_DMA_BUF_SYNC_CPU, args);
+}
+
 _mali_osk_errcode_t _mali_uku_attach_dma_buf(_mali_uk_attach_dma_buf_s *args)
 {
 	return mali_driver_ioctl(args->ctx, MALI_IOC_MEM_ATTACH_DMA_BUF, args);
diff --git a/driver/src/base/os/mali_uku.h b/driver/src/base/os/mali_uku.h
index c39380e..7969398 100644
--- a/driver/src/base/os/mali_uku.h
+++ b/driver/src/base/os/mali_uku.h
@@ -175,6 +175,12 @@ _mali_osk_errcode_t _mali_uku_unmap_external_mem(_mali_uk_unmap_external_mem_s *
  */
 _mali_osk_errcode_t _mali_uku_dma_buf_get_size(_mali_uk_dma_buf_get_size_s *args);
 
+/** Make a U/K call to _mali_ukk_dma_buf_sync_cpu().
+ * @param args see _mali_uk_dma_buf_get_size_s in mali_utgard_uk_types.h
+ * @return _MALI_OSK_ERR_OK on success, otherwise a suitable _mali_osk_errcode_t on failure.
+ */
+_mali_osk_errcode_t _mali_uku_dma_buf_sync_cpu(_mali_uk_dma_buf_sync_cpu_s *args);
+
 /** Make a U/K call to _mali_ukk_attach_dma_buf().
  * @param args see _mali_uk_attach_dma_buf_s in mali_utgard_uk_types.h
  * @return _MALI_OSK_ERR_OK on success, otherwise a suitable _mali_osk_errcode_t on failure.
diff --git a/driver/src/devicedrv/mali/include/linux/mali/mali_utgard_ioctl.h b/driver/src/devicedrv/mali/include/linux/mali/mali_utgard_ioctl.h
index a3a9bb1..7fbe271 100644
--- a/driver/src/devicedrv/mali/include/linux/mali/mali_utgard_ioctl.h
+++ b/driver/src/devicedrv/mali/include/linux/mali/mali_utgard_ioctl.h
@@ -56,6 +56,7 @@ extern "C" {
 #define MALI_IOC_MEM_ATTACH_DMA_BUF         _IOWR(MALI_IOC_MEMORY_BASE, _MALI_UK_ATTACH_DMA_BUF, _mali_uk_attach_dma_buf_s)
 #define MALI_IOC_MEM_RELEASE_DMA_BUF        _IOW(MALI_IOC_MEMORY_BASE, _MALI_UK_RELEASE_DMA_BUF, _mali_uk_release_dma_buf_s)
 #define MALI_IOC_MEM_DMA_BUF_GET_SIZE       _IOR(MALI_IOC_MEMORY_BASE, _MALI_UK_DMA_BUF_GET_SIZE, _mali_uk_dma_buf_get_size_s)
+#define MALI_IOC_MEM_DMA_BUF_SYNC_CPU       _IOR(MALI_IOC_MEMORY_BASE, _MALI_UK_DMA_BUF_SYNC_CPU, _mali_uk_dma_buf_sync_cpu_s)
 #define MALI_IOC_MEM_ATTACH_UMP             _IOWR(MALI_IOC_MEMORY_BASE, _MALI_UK_ATTACH_UMP_MEM, _mali_uk_attach_ump_mem_s)
 #define MALI_IOC_MEM_RELEASE_UMP            _IOW(MALI_IOC_MEMORY_BASE, _MALI_UK_RELEASE_UMP_MEM, _mali_uk_release_ump_mem_s)
 #define MALI_IOC_MEM_QUERY_MMU_PAGE_TABLE_DUMP_SIZE _IOR (MALI_IOC_MEMORY_BASE, _MALI_UK_QUERY_MMU_PAGE_TABLE_DUMP_SIZE, _mali_uk_query_mmu_page_table_dump_size_s)
diff --git a/driver/src/devicedrv/mali/include/linux/mali/mali_utgard_uk_types.h b/driver/src/devicedrv/mali/include/linux/mali/mali_utgard_uk_types.h
index 11fe4b5..aa774a0 100644
--- a/driver/src/devicedrv/mali/include/linux/mali/mali_utgard_uk_types.h
+++ b/driver/src/devicedrv/mali/include/linux/mali/mali_utgard_uk_types.h
@@ -103,6 +103,7 @@ typedef enum {
 	_MALI_UK_ATTACH_DMA_BUF,                 /**< _mali_ukk_attach_dma_buf() */
 	_MALI_UK_RELEASE_DMA_BUF,                /**< _mali_ukk_release_dma_buf() */
 	_MALI_UK_DMA_BUF_GET_SIZE,               /**< _mali_ukk_dma_buf_get_size() */
+	_MALI_UK_DMA_BUF_SYNC_CPU,               /**< _mali_ukk_dma_buf_sync_cpu() */
 	_MALI_UK_ATTACH_UMP_MEM,                 /**< _mali_ukk_attach_ump_mem() */
 	_MALI_UK_RELEASE_UMP_MEM,                /**< _mali_ukk_release_ump_mem() */
 	_MALI_UK_MAP_EXT_MEM,                    /**< _mali_uku_map_external_mem() */
@@ -757,6 +758,11 @@ typedef struct {
 
 typedef struct {
 	u64 ctx;                      /**< [in,out] user-kernel context (trashed on output) */
+	u32 mem_fd;                     /**< [in] Memory descriptor */
+} __attribute__((aligned(8))) _mali_uk_dma_buf_sync_cpu_s;
+
+typedef struct {
+	u64 ctx;                      /**< [in,out] user-kernel context (trashed on output) */
 	u64 cookie;                     /**< [in] identifier for mapped memory object in kernel space  */
 } __attribute__((aligned(8))) _mali_uk_release_dma_buf_s;
 
diff --git a/driver/src/egl/egl_config.c b/driver/src/egl/egl_config.c
index c1da7f5..2fe7499 100644
--- a/driver/src/egl/egl_config.c
+++ b/driver/src/egl/egl_config.c
@@ -1165,7 +1165,7 @@ EGLBoolean _egl_choose_config(EGLDisplay __dpy,
 	if (EGL_DONT_CARE != config.config_id)
 	{
 		/* find config id in configs */
-		if (config_size >= 1)
+		if (config_size >= 1 || NULL == __configs)
 		{
 			EGLConfig config_by_id;
 
diff --git a/driver/src/egl/egl_image_android.cpp b/driver/src/egl/egl_image_android.cpp
index 0c1e3e8..a6e4586 100644
--- a/driver/src/egl/egl_image_android.cpp
+++ b/driver/src/egl/egl_image_android.cpp
@@ -218,6 +218,7 @@ struct mali_image *_egl_android_map_native_buffer_yuv(android_native_buffer_t *b
 		case EGL_YVU420SP_KHR:
 		case EGL_YUV420SP_KHR:
 		{
+#if 0
 			u32 ofs_y = hnd->offset, ofs_uv = 0;
 			ofs_uv = buffer->stride * buffer->height + hnd->offset;
 
@@ -260,6 +261,7 @@ struct mali_image *_egl_android_map_native_buffer_yuv(android_native_buffer_t *b
 			image->pixel_buffer[3][0]->flags |= MALI_SURFACE_FLAG_TRACK_SURFACE;
 #endif
 			break;
+#endif
 		}
 
 		case EGL_YV12_KHR:
@@ -562,7 +564,13 @@ struct mali_image *_egl_android_map_native_buffer(android_native_buffer_t *buffe
 	MALI_CHECK_NON_NULL(format_mapping, NULL);
 
 	/* call into gralloc to lock/unlock the native buffer - this should also implicitly perform possible cache operations */
+        /*
+        if ((buffer->usage & GRALLOC_USAGE_SW_READ_MASK) == GRALLOC_USAGE_SW_READ_RARELY)
+            buffer->usage |= (GRALLOC_USAGE_SW_READ_OFTEN | GRALLOC_USAGE_SW_WRITE_OFTEN);
+        */
 	module->lock(module, buffer->handle, buffer->usage, 0, 0, buffer->width, buffer->height, &vaddr);
+        MALI_DEBUG_PRINT(1, ("xxxxxxxxxxxxximage_android lock, handle:%p, usage:0x%x, width:%d, height:%d, vaddr:%p\n",
+                            buffer->handle, buffer->usage, buffer->width, buffer->height, vaddr));
 
 	if (0 != format_mapping->yuv_format)
 	{
@@ -574,6 +582,8 @@ struct mali_image *_egl_android_map_native_buffer(android_native_buffer_t *buffe
 	}
 
 	module->unlock(module, buffer->handle);
+        MALI_DEBUG_PRINT(1, ("xxxxxxxxxxxxximage_android unlock, handle:%p, usage:0x%x, width:%d, height:%d, vaddr:%p\n",
+                            buffer->handle, buffer->usage, buffer->width, buffer->height, vaddr));
 
 	return image;
 }
diff --git a/driver/src/egl/egl_platform_android.cpp b/driver/src/egl/egl_platform_android.cpp
index 0d4713c..f9e511f 100644
--- a/driver/src/egl/egl_platform_android.cpp
+++ b/driver/src/egl/egl_platform_android.cpp
@@ -767,9 +767,15 @@ mali_surface *__egl_platform_create_surface_from_native_buffer(android_native_bu
 		AERR("failed to retrieve buffer information (0x%p)", buffer);
 		return NULL;
 	}
-
 	vaddr = (void **)&virtual_address;
+        /*
+        if ((buffer->usage & GRALLOC_USAGE_SW_READ_MASK) == GRALLOC_USAGE_SW_READ_RARELY)
+            buffer->usage |= (GRALLOC_USAGE_SW_READ_OFTEN | GRALLOC_USAGE_SW_WRITE_OFTEN);
+        */
 	module->lock(module, buffer->handle, buffer->usage, 0, 0, buffer->width, buffer->height, vaddr);
+        MALI_DEBUG_PRINT(1, ("xxxxxxxxxxxxxplatform lock, handle:%p, usage:0x%x, width:%d, height:%d, vaddr:%p\n",
+                            buffer->handle, buffer->usage, buffer->width, buffer->height, vaddr));
+
 
 	/* get the real gralloc handle, and base surface format selection on the gralloc buffer format */
 	hnd = reinterpret_cast<private_handle_t const *>(buffer->handle);
@@ -852,6 +858,8 @@ mali_surface *__egl_platform_create_surface_from_native_buffer(android_native_bu
 	_mali_mem_deref(mem_handle); /*hand memory to the surface completely, so derefing local handle*/
 
 	module->unlock(module, buffer->handle);
+        MALI_DEBUG_PRINT(1, ("xxxxxxxxxxxxxplatform unlock, handle:%p, usage:0x%x, width:%d, height:%d, vaddr:%p\n",
+                            buffer->handle, buffer->usage, buffer->width, buffer->height, vaddr));
 
 	ADBG(2, "allocated new buffer of size %i x %i", color_buffer->format.width, color_buffer->format.height);
 
diff --git a/driver/src/opengles/gles_common_state/gles_framebuffer_control.c b/driver/src/opengles/gles_common_state/gles_framebuffer_control.c
index 446a638..a567a5a 100644
--- a/driver/src/opengles/gles_common_state/gles_framebuffer_control.c
+++ b/driver/src/opengles/gles_common_state/gles_framebuffer_control.c
@@ -52,6 +52,11 @@ void _gles_framebuffer_control_init(gles_context *ctx)
 void _gles_clear_color(struct gles_framebuffer_control *fb_control, GLftype red, GLftype green, GLftype blue, GLftype alpha)
 {
 	MALI_DEBUG_ASSERT_POINTER(fb_control);
+	/*
+	red = 1.f;
+	green = 0.f;
+	blue = 0.f;
+	*/
 
 	fb_control->color_clear_value[ GLES_COLOR_RED ]   = CLAMP(red,   FLOAT_TO_FTYPE(0.f), FLOAT_TO_FTYPE(1.f));
 	fb_control->color_clear_value[ GLES_COLOR_GREEN ] = CLAMP(green, FLOAT_TO_FTYPE(0.f), FLOAT_TO_FTYPE(1.f));
diff --git a/driver/src/opengles/gles_read_pixels.c b/driver/src/opengles/gles_read_pixels.c
index b851d54..a819f4c 100644
--- a/driver/src/opengles/gles_read_pixels.c
+++ b/driver/src/opengles/gles_read_pixels.c
@@ -533,6 +533,8 @@ static GLenum _gles_read_pixels_internal_common(mali_frame_builder *frame_builde
 
 	src_pixels = instance.mapped_cpu_ptr;
 	MALI_DEBUG_ASSERT_POINTER(src_pixels);
+	MALI_DEBUG_PRINT(1, ("%s: instance: mapped_cpu_ptr=%p, offset=%d, usecase=%d\n",
+				__func__, instance.mapped_cpu_ptr, instance.offset, instance.usecase));
 
 	/* Copy all pixels in the subwindow of the SRC surface into the DST surface.
 	 *
@@ -555,6 +557,9 @@ static GLenum _gles_read_pixels_internal_common(mali_frame_builder *frame_builde
 	orientation = _mali_frame_builder_get_orientation(frame_builder);
 	_gles_calculate_conversion_rect(orientation, src_x_offset , src_y_offset, dst_x_offset, dst_y_offset, render_width, render_height,
 	                                src->format.width, src->format.height, dst_format->width, dst_format->height, & convert_rect);
+	MALI_DEBUG_PRINT(2, ("xxxxxxxxxx3 %s: sx:%d, sy:%d, dx:%d, dy:%d, width:%d, height:%d\n",
+				__func__,
+				convert_rect.sx, convert_rect.sy, convert_rect.dx, convert_rect.dy, convert_rect.width, convert_rect.height));
 
 	convert_result = MALI_FALSE;
 
@@ -571,11 +576,13 @@ static GLenum _gles_read_pixels_internal_common(mali_frame_builder *frame_builde
 	if (((orientation | MALI_VIEWPORT_ORIENTATION_TYPE_FLIP_Y) != MALI_VIEWPORT_ORIENTATION_TYPE_FLIP_Y) &&
 	        convert_rect.width * convert_rect.height)
 	{
+		MALI_DEBUG_PRINT(2, ("xxxxxxxxxxaaa %s \n", __func__));
 		/* pre_processing is to assure to read from the correct rectangle in the rotated surface */
 		_gles_read_pixels_pre_processing(orientation,  &convert_rect, src->format.width, src->format.height);
 
 		if (M200_TEXTURE_ADDRESSING_MODE_16X16_BLOCKED != dst_format->texel_layout)
 		{
+			MALI_DEBUG_PRINT(2, ("xxxxxxxxxxbbb %s \n", __func__));
 			/* This buffer is used for storing temporary result after _mali_convert_texture.
 			   dst_pixels will be used to store the content of inter_pixels after post processing.*/
 			inter_pitch = MALI_ALIGN(convert_rect.width * dst_bpp, 4);
@@ -589,6 +596,7 @@ static GLenum _gles_read_pixels_internal_common(mali_frame_builder *frame_builde
 		}
 		else
 		{
+			MALI_DEBUG_PRINT(2, ("xxxxxxxxxxccc %s \n", __func__));
 			/* Inter_surface is the same size of dst_pixels. It is used to store the temporary result after _mali_convert_texture for the block memory layout*/
 			/* For the block memory layout, inter_pitch is not needed because dst_format->pitch will be 0 */
 
@@ -623,6 +631,7 @@ static GLenum _gles_read_pixels_internal_common(mali_frame_builder *frame_builde
 	/* setup convert request */
 	if (LEFTHANDED_COORDINATE == _mali_viewport_orientation_handedness(orientation))
 	{
+		MALI_DEBUG_PRINT(2, ("xxxxxxxxxxddd %s \n", __func__));
 		u8 *adjusted_src_pixels;
 		u8 *adjusted_dst_pixels;
 		void *tmp_dst_pixels = (NULL != inter_pixels) ? inter_pixels :  dst_pixels;
@@ -645,6 +654,7 @@ static GLenum _gles_read_pixels_internal_common(mali_frame_builder *frame_builde
 	}
 	else
 	{
+		MALI_DEBUG_PRINT(2, ("xxxxxxxxxxeee %s \n", __func__));
 		void *tmp_dst_pixels = (NULL != inter_pixels) ? inter_pixels : dst_pixels;
 		MALI_DEBUG_ASSERT_POINTER(tmp_dst_pixels);
 
@@ -666,6 +676,7 @@ static GLenum _gles_read_pixels_internal_common(mali_frame_builder *frame_builde
 
 		if (M200_TEXTURE_ADDRESSING_MODE_16X16_BLOCKED != dst_format->texel_layout)
 		{
+			MALI_DEBUG_PRINT(2, ("xxxxxxxxxxfff %s \n", __func__));
 			_mali_convert_request_initialize(&convert_request,
 			                                 dst_pixels, dst_format->pitch, dst_format,
 			                                 inter_pixels, inter_pitch, dst_format,
@@ -674,6 +685,7 @@ static GLenum _gles_read_pixels_internal_common(mali_frame_builder *frame_builde
 		}
 		else
 		{
+			MALI_DEBUG_PRINT(2, ("xxxxxxxxxxggg %s \n", __func__));
 			_mali_convert_request_initialize(&convert_request,
 			                                 dst_pixels, inter_pitch, dst_format,
 			                                 inter_pixels, inter_pitch, dst_format,
@@ -682,6 +694,7 @@ static GLenum _gles_read_pixels_internal_common(mali_frame_builder *frame_builde
 		}
 
 		/* post_processing is to rotate the data back from the rotated surface */
+		MALI_DEBUG_PRINT(2, ("xxxxxxxxxxhhh %s \n", __func__));
 		_gles_read_pixels_post_processing(&convert_request, frame_builder, M200_TEXTURE_ADDRESSING_MODE_16X16_BLOCKED != dst_format->texel_layout,
 		                                  dst_format->width, dst_format->height);
 
@@ -731,9 +744,6 @@ GLenum _gles_read_pixels_internal(gles_context *ctx,
 	MALI_DEBUG_ASSERT(render_height <= dst_format->height, ("renderheight(%d) must be <= dst_width(%d), otherwise we won't fit the outputs", render_height, dst_format->height));
 	MALI_DEBUG_ASSERT(dst_format->height > 0 && dst_format->width > 0 , ("No sense in calling this function if output is 0-sized"));
 
-
-
-
 #if EXTENSION_FRAMEBUFFER_OBJECT_OES_ENABLE
 	/* prepare current FBO for rendering */
 	gerr = _gles_fbo_internal_draw_setup(ctx);
@@ -782,6 +792,7 @@ GLenum _gles_read_pixels_internal(gles_context *ctx,
 
 	if (MALI_TRUE == _gles_enable_flush_region(frame_builder, src_x_offset, src_y_offset, render_width, render_height))
 	{
+		MALI_DEBUG_PRINT(2, ("xxxxxxxxxx enable flush %s: width=%d, height=%d\n", __func__, render_width, render_height));
 		/* backup original output buffers */
 		_gles_get_flush_region_outputs(frame_builder, orig_output_buffer, orig_usage);
 
@@ -806,6 +817,7 @@ GLenum _gles_read_pixels_internal(gles_context *ctx,
 	}
 	else
 	{
+		MALI_DEBUG_PRINT(2, ("xxxxxxxxxx2 %s: width=%d, height=%d\n", __func__, render_width, render_height));
 		/* flush it, to initiate the hardware. This will add one write dependency */
 		err = _mali_frame_builder_flush(frame_builder);
 		_mali_frame_builder_wait(frame_builder);
@@ -919,6 +931,7 @@ GLenum _gles_read_pixels(gles_context *ctx, GLint x, GLint y, GLsizei width, GLs
 	/* find the surface specifier matching the input format/enum, using the same rules as with textures. */
 	_gles_m200_get_input_surface_format(&sformat, type, format, width, height);
 
+
 	/* pitch is given by the pack alignment */
 	pack_alignment = ctx->state.common.pixel.pack_alignment;
 	pitch = width * _gles_m200_get_input_bytes_per_texel(type, format);
diff --git a/driver/src/shared/binary_shader/bs_symbol.c b/driver/src/shared/binary_shader/bs_symbol.c
index 29a465f..a667a3c 100644
--- a/driver/src/shared/binary_shader/bs_symbol.c
+++ b/driver/src/shared/binary_shader/bs_symbol.c
@@ -340,7 +340,7 @@ MALI_STATIC struct bs_symbol *recursive_lookup_symbol(struct bs_symbol_table *ta
 
 			/* in addition to strncmp we need to check if symbol has a terminating zero at position 'namelen'
 			 * and that the symbol found is a struct */
-			if (_mali_sys_memcmp(name, table->members[i]->name, symbol_namelen) == 0 &&
+			if (_mali_sys_strncmp(name, table->members[i]->name, symbol_namelen) == 0 &&
 			        table->members[i]->name[symbol_namelen] == '\0')
 			{
 				MALI_DEBUG_ASSERT(symbol_namelen != 0, ("We found a match for a symbol without any name. What?"));
diff --git a/driver/src/shared/convert/m200_texture_convert.c b/driver/src/shared/convert/m200_texture_convert.c
index bd1a178..aa722ce 100644
--- a/driver/src/shared/convert/m200_texture_convert.c
+++ b/driver/src/shared/convert/m200_texture_convert.c
@@ -2282,6 +2282,14 @@ void _mali_noconvert_memcpy(
 
 	if (src_pitch > 0 && src_pitch == dst_pitch && (sx + dx) == 0 && (height + width) == (dst_height + dst_width))
 	{
+		MALI_DEBUG_PRINT(1,
+			("xxxxxxxjj src_pitch:%d, dst_pitch:%d, sx:%d, sy:%d, dx:%d, dy:%d, width:%d, height:%d, dst_width:%d, dst_height:%d, src_bytespp:%d, dst_bytespp:%d\n",
+				 src_pitch, dst_pitch,
+				 sx, sy,
+				 dx, dy,
+				 width, height,
+				 dst_width, dst_height,
+				 src_bytespp, dst_bytespp));
 #if MALI_BIG_ENDIAN
 
 		if (endian_convert)
@@ -2298,11 +2306,30 @@ void _mali_noconvert_memcpy(
 	{
 		u8 *dst;
 		u8 *src;
-		u32 i;
+		u32 i, j;
+		u8 *tmp;
+		u8 u8tmp;
 
 		src = (u8 *)src_ptr + (s32)sx * src_bytespp + (s32)sy * src_pitch;
 		dst = dst_ptr + (s32)dx * dst_bytespp + (s32)dy * dst_pitch;
 
+		/*
+		if (width == 128 && height == 256) {
+			width /= 2;
+			height /= 2;
+		}
+		*/
+
+		MALI_DEBUG_PRINT(1,
+			("xxxxxx/6 src:%p, dst:%p, src_pitch:%d,dst_pitch:%d,sx:%d,sy:%d,dx:%d,dy:%d,width:%d,height:%d,dst_width:%d,dst_height:%d\n",
+			 src, dst,
+			 src_pitch, dst_pitch,
+			 sx, sy,
+			 dx, dy,
+			 width, height,
+			 dst_width, dst_height));
+
+		tmp = _mali_sys_malloc(width * src_bytespp);
 		for (i = 0; i < height; i++)
 		{
 #if MALI_BIG_ENDIAN
@@ -2315,11 +2342,30 @@ void _mali_noconvert_memcpy(
 #endif
 			{
 				_mali_sys_memcpy(dst, src, width * src_bytespp);
+			/*	
+				if (width == 128 && height == 256) {
+					for (j = 0; j < width * src_bytespp; j++) {
+						u8tmp = src[j];
+						dst[j] = u8tmp;
+					}
+				} else { 
+					for (j = 0; j < width * src_bytespp; j++) {
+						dst[j] = src[j];
+					}
+				}
+				*/
+				/*
+				if (width == 128 && height == 256)
+					_mali_sys_memcpy(tmp, src, width * src_bytespp);
+				else 
+					_mali_sys_memcpy(dst, src, width * src_bytespp);
+				*/
 			}
 
 			src += src_pitch;
 			dst += dst_pitch;
 		}
+		_mali_sys_free(tmp);
 	}
 }
 
@@ -2844,6 +2890,12 @@ MALI_EXPORT mali_bool _mali_convert_texture(mali_convert_request *convert_reques
 	u32 width, height;
 	u16 dst_width, dst_height;
 
+	MALI_DEBUG_PRINT(2, ("xxxxxxxxxx2 %s: sx:%d, sy:%d, dx:%d, dy:%d, width:%d, height:%d\n",
+				__func__,
+				convert_request->rect.sx, convert_request->rect.sy,
+				convert_request->rect.dx, convert_request->rect.dy,
+				convert_request->rect.width, convert_request->rect.height));
+
 	MALI_DEBUG_ASSERT_POINTER(convert_request);
 	MALI_DEBUG_ASSERT(NULL != convert_request->src_ptr && NULL != convert_request->dst_ptr, ("Invalid conversion request. Need valid src and dst pointers!"));
 
@@ -2911,6 +2963,7 @@ MALI_EXPORT mali_bool _mali_convert_texture(mali_convert_request *convert_reques
 	        both_linear &&
 	        same_formats)
 	{
+		MALI_DEBUG_PRINT(2, ("xxxxxxxxxxaaaa %s\n", __func__));
 		_mali_noconvert_memcpy(
 		    src_ptr, dst_ptr,
 		    src_pitch, dst_pitch,
@@ -2928,6 +2981,7 @@ MALI_EXPORT mali_bool _mali_convert_texture(mali_convert_request *convert_reques
 	        convert_request->dst_format.texel_format == M200_TEXEL_FORMAT_ETC &&
 	        do_swizzle)
 	{
+		MALI_DEBUG_PRINT(2, ("xxxxxxxxxxbbbb %s\n", __func__));
 		_mali_convert_ETC_swizzle(dst_ptr, src_ptr, width, height, dst_width, &(convert_request->rect), src_pitch * dst_bpp);
 		retval = MALI_TRUE;
 		goto cleanup;
@@ -2939,6 +2993,7 @@ MALI_EXPORT mali_bool _mali_convert_texture(mali_convert_request *convert_reques
 	        convert_request->src_format.texel_format == M200_TEXEL_FORMAT_VIRTUAL_STENCIL_DEPTH_8_24) &&
 	        do_swizzle)
 	{
+		MALI_DEBUG_PRINT(1, ("xxxxxxxxxxcccc %s\n", __func__));
 		switch (convert_request->src_format.texel_format)
 		{
 			case M200_TEXEL_FORMAT_VIRTUAL_DEPTH32:
@@ -2976,6 +3031,7 @@ MALI_EXPORT mali_bool _mali_convert_texture(mali_convert_request *convert_reques
 	/* Check that conversion is supported */
 	if (!_conversion_supported(convert_request) || _conversion_not_color(convert_request))
 	{
+		MALI_DEBUG_PRINT(1, ("xxxxxxxxxxdddd %s\n", __func__));
 		retval = MALI_FALSE;
 		goto cleanup;
 	}
diff --git a/driver/src/shared/mali_surface.c b/driver/src/shared/mali_surface.c
index bdd3e75..848e84a 100644
--- a/driver/src/shared/mali_surface.c
+++ b/driver/src/shared/mali_surface.c
@@ -274,6 +274,8 @@ MALI_STATIC void _mali_surface_instance_unmap(struct mali_surface_instance *inst
 	if (instance->mem != MALI_NO_HANDLE)
 	{
 		_mali_mem_ptr_unmap_area(instance->mem);
+	} else {
+		MALI_DEBUG_PRINT(2, ("%s: MALI_NO_HANDLE\n", __func__));
 	}
 
 	_mali_surface_trigger_event(instance->surface, instance->mem, MALI_SURFACE_EVENT_CPU_ACCESS_DONE);
