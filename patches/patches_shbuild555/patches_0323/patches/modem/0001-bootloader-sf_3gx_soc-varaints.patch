From 234bcdedb3690bad445f628da01f6547feafeca5 Mon Sep 17 00:00:00 2001
From: Bing Han <bing.han@intel.com>
Date: Wed, 24 Feb 2016 15:04:09 +0800
Subject: [PATCH 1/4] bootloader sf_3gx_soc varaints

create sf_3gx_soc varaints for bootloader build.

Change-Id: I9b1f120e4af877361ae496f0362a6f26d477a443
Signed-off-by: Bin Yang <bin.yang@intel.com>
Signed-off-by: Bing Han<bing.han@intel.com>
---
 .../inc/core_drivers/sf_3gx_soc/dma_driverif_cfg.h |    1 +
 .../inc/core_drivers/sf_3gx_soc/icu_vectors_cfg.h  |    1 +
 .../core_drivers/sf_3gx_soc/icu_vpic_vectors_cfg.h |    1 +
 .../sf_3gx_soc/noc_chip_specific_interface.h       |    1 +
 .../inc/core_drivers/sf_3gx_soc/pal_vectors_enum.h |    1 +
 .../inc/power_management/board_sf_3gx/omp_cfg.h    |    1 +
 .../inc/power_management/board_sf_3gx/prh_cfg.h    |    1 +
 .../inc/board_sf_3gx/pcl_driverif_cfg.h            | 1061 +++++
 .../storage/mmcsd/src/board_sf_3gx/mmcsd_cfg.h     |    1 +
 .../mmcsd/src/board_sf_3gx/mmcsd_variant_def.h     |    1 +
 .../storage/mmcsd/src/board_sf_3gx/sdmmc_reg.h     |    1 +
 mhw_drv_src/trace_debug/hal/sf_3gx_soc/debug_reg.c |    1 +
 mhw_drv_src/trace_debug/hal/sf_3gx_soc/debug_reg.h |    1 +
 .../trace_debug/hal/sf_3gx_soc/es_1_0/mtm_reg.c    |    1 +
 .../trace_debug/hal/sf_3gx_soc/es_1_0/mtm_reg.h    |    1 +
 .../hal/sf_3gx_soc/es_1_0/st_arbiter_reg.h         |    1 +
 .../trace_debug/hal/sf_3gx_soc/es_1_0/trcDbgCFG.h  |    1 +
 .../trace_debug/hal/sf_3gx_soc/es_2_1/mtm_reg.c    |    1 +
 .../trace_debug/hal/sf_3gx_soc/es_2_1/mtm_reg.h    |    1 +
 .../hal/sf_3gx_soc/es_2_1/st_arbiter_reg.h         |    1 +
 .../trace_debug/hal/sf_3gx_soc/funnel_reg.c        |    1 +
 .../trace_debug/hal/sf_3gx_soc/funnel_reg.h        |    1 +
 mhw_drv_src/trace_debug/hal/sf_3gx_soc/mtm_reg.h   |    1 +
 mhw_drv_src/trace_debug/hal/sf_3gx_soc/oct_reg.h   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_arbiter_reg.c    |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_arbiter_reg.h    |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_mon_reg.c        |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_mon_reg.h        |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc10_mon_reg.c  |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc10_mon_reg.h  |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc11_mon_reg.c  |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc11_mon_reg.h  |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc12_mon_reg.c  |   57 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc12_mon_reg.h  | 4522 ++++++++++++++++++++
 .../trace_debug/hal/sf_3gx_soc/st_sbc1_mon_reg.c   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc1_mon_reg.h   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc2_mon_reg.c   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc2_mon_reg.h   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc3_mon_reg.c   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc3_mon_reg.h   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc4_mon_reg.c   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc4_mon_reg.h   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc5_mon_reg.c   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc5_mon_reg.h   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc6_mon_reg.c   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc6_mon_reg.h   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc7_mon_reg.c   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc7_mon_reg.h   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc8_mon_reg.c   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc8_mon_reg.h   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc9_mon_reg.c   |    1 +
 .../trace_debug/hal/sf_3gx_soc/st_sbc9_mon_reg.h   |    1 +
 mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_hal.c  |    1 +
 mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_hal.h  |    1 +
 mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_reg.c  |    1 +
 mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_reg.h  |    1 +
 uta_inc/nvm/sf_3gx/uta_nvm_cfg.h                   |  538 +++
 57 files changed, 6231 insertions(+)
 create mode 100644 mhw_drv_inc/inc/core_drivers/sf_3gx_soc/dma_driverif_cfg.h
 create mode 100644 mhw_drv_inc/inc/core_drivers/sf_3gx_soc/icu_vectors_cfg.h
 create mode 100644 mhw_drv_inc/inc/core_drivers/sf_3gx_soc/icu_vpic_vectors_cfg.h
 create mode 100644 mhw_drv_inc/inc/core_drivers/sf_3gx_soc/noc_chip_specific_interface.h
 create mode 100644 mhw_drv_inc/inc/core_drivers/sf_3gx_soc/pal_vectors_enum.h
 create mode 100644 mhw_drv_inc/inc/power_management/board_sf_3gx/omp_cfg.h
 create mode 100644 mhw_drv_inc/inc/power_management/board_sf_3gx/prh_cfg.h
 create mode 100644 mhw_drv_src/core_drivers/inc/board_sf_3gx/pcl_driverif_cfg.h
 create mode 100644 mhw_drv_src/storage/mmcsd/src/board_sf_3gx/mmcsd_cfg.h
 create mode 100644 mhw_drv_src/storage/mmcsd/src/board_sf_3gx/mmcsd_variant_def.h
 create mode 100644 mhw_drv_src/storage/mmcsd/src/board_sf_3gx/sdmmc_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/debug_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/debug_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/mtm_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/mtm_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/st_arbiter_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/trcDbgCFG.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/mtm_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/mtm_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/st_arbiter_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/funnel_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/funnel_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/mtm_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/oct_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_arbiter_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_arbiter_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc10_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc10_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc11_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc11_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc12_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc12_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc1_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc1_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc2_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc2_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc3_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc3_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc4_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc4_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc5_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc5_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc6_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc6_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc7_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc7_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc8_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc8_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc9_mon_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc9_mon_reg.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_hal.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_hal.h
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_reg.c
 create mode 100644 mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_reg.h
 create mode 100644 uta_inc/nvm/sf_3gx/uta_nvm_cfg.h

diff --git a/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/dma_driverif_cfg.h b/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/dma_driverif_cfg.h
new file mode 100644
index 0000000..47a2bc0
--- /dev/null
+++ b/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/dma_driverif_cfg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/dma_driverif_cfg.h"
diff --git a/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/icu_vectors_cfg.h b/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/icu_vectors_cfg.h
new file mode 100644
index 0000000..a55ede1
--- /dev/null
+++ b/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/icu_vectors_cfg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/icu_vectors_cfg.h"
diff --git a/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/icu_vpic_vectors_cfg.h b/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/icu_vpic_vectors_cfg.h
new file mode 100644
index 0000000..45a48b6
--- /dev/null
+++ b/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/icu_vpic_vectors_cfg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/icu_vpic_vectors_cfg.h"
diff --git a/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/noc_chip_specific_interface.h b/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/noc_chip_specific_interface.h
new file mode 100644
index 0000000..3f1e161
--- /dev/null
+++ b/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/noc_chip_specific_interface.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/noc_chip_specific_interface.h"
diff --git a/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/pal_vectors_enum.h b/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/pal_vectors_enum.h
new file mode 100644
index 0000000..2b95b50
--- /dev/null
+++ b/mhw_drv_inc/inc/core_drivers/sf_3gx_soc/pal_vectors_enum.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/pal_vectors_enum.h"
diff --git a/mhw_drv_inc/inc/power_management/board_sf_3gx/omp_cfg.h b/mhw_drv_inc/inc/power_management/board_sf_3gx/omp_cfg.h
new file mode 100644
index 0000000..c3dbbcf
--- /dev/null
+++ b/mhw_drv_inc/inc/power_management/board_sf_3gx/omp_cfg.h
@@ -0,0 +1 @@
+#include "../board_sf_3g/omp_cfg.h"
diff --git a/mhw_drv_inc/inc/power_management/board_sf_3gx/prh_cfg.h b/mhw_drv_inc/inc/power_management/board_sf_3gx/prh_cfg.h
new file mode 100644
index 0000000..4aefe6c
--- /dev/null
+++ b/mhw_drv_inc/inc/power_management/board_sf_3gx/prh_cfg.h
@@ -0,0 +1 @@
+#include "../board_sf_3g/prh_cfg.h"
diff --git a/mhw_drv_src/core_drivers/inc/board_sf_3gx/pcl_driverif_cfg.h b/mhw_drv_src/core_drivers/inc/board_sf_3gx/pcl_driverif_cfg.h
new file mode 100644
index 0000000..294ef06
--- /dev/null
+++ b/mhw_drv_src/core_drivers/inc/board_sf_3gx/pcl_driverif_cfg.h
@@ -0,0 +1,1061 @@
+/* ----------------------------------------------------------------------
+ * Copyright (C) 2007 - 2008 Infineon Technologies AG.                   
+ * All rights reserved.                                                  
+ * ----------------------------------------------------------------------
+ * This document contains proprietary information belonging to Infineon  
+ * Technologies AG. Passing on and copying of this document, use and     
+ * communication of its contents is not permitted without prior written  
+ * authorization.                                                        
+ *                                                                       
+ * Revision Information:                                                 
+ *    File name:                                                         
+ *    Version:                                                           
+ *    Date:                                                              
+ * ----------------------------------------------------------------------
+ */                                                                      
+
+/*
+ * ----------------------------------------------------------------------
+ *  This file is automatically generated from the portlist (EXCEL-file). 
+ *                          Do NOT edit!!!
+ * ----------------------------------------------------------------------
+ */
+
+
+#if !defined(_PCL_DRIVERIF_CFG_H)
+#define _PCL_DRIVERIF_CFG_H
+
+/** @addtogroup ISPEC_DRV_PCL */
+/** @{ */
+
+/**
+   PAD identifiers for logical functions/signal names.
+*/
+typedef enum PCL_SYMBOLIC_PAD_NAMES {
+  PCL_PAD_3G_PA_DCDC_EN = 0,
+  PCL_PAD_ALERT_N = 1,
+  PCL_PAD_AUDIO_SYNC_OUT_AGOLD = 2,
+  PCL_PAD_BT_EXT_RESET_N_AGOLD = 3,
+  PCL_PAD_BT_FWDBG_TXD_AGOLD = 4,
+  PCL_PAD_BT_GPO0_AGOLD = 5,
+  PCL_PAD_BT_GPO1_AGOLD = 6,
+  PCL_PAD_BT_GPO2_AGOLD = 7,
+  PCL_PAD_BT_PCM_CLK_AGOLD = 8,
+  PCL_PAD_BT_PCM_FR_AGOLD = 9,
+  PCL_PAD_BT_PCM_IN_AGOLD = 10,
+  PCL_PAD_BT_PCM_OUT_AGOLD = 11,
+  PCL_PAD_BT_RF_ANA_0_AGOLD = 12,
+  PCL_PAD_BT_RF_ANA_1_AGOLD = 13,
+  PCL_PAD_BT_RF_ANA_2_AGOLD = 14,
+  PCL_PAD_BT_RF_ANA_3_AGOLD = 15,
+  PCL_PAD_BT_TST_IF3_AGOLD = 16,
+  PCL_PAD_BT_TST_IF4_AGOLD = 17,
+  PCL_PAD_BT_TST_IF5_AGOLD = 18,
+  PCL_PAD_BT_UART_CTS_AGOLD = 19,
+  PCL_PAD_BT_UART_RTS_AGOLD = 20,
+  PCL_PAD_BT_UART_RXD_AGOLD = 21,
+  PCL_PAD_BT_UART_TXD_AGOLD = 22,
+  PCL_PAD_BT_WAKEUP_HOST_AGOLD = 23,
+  PCL_PAD_BT_WLAN_ACTIVE_AGOLD = 24,
+  PCL_PAD_CABC_AGOLD = 25,
+  PCL_PAD_CC1_CLK = 26,
+  PCL_PAD_CC1_IN = 27,
+  PCL_PAD_CC1_IO = 28,
+  PCL_PAD_CC1_RST = 29,
+  PCL_PAD_CC2_CLK = 30,
+  PCL_PAD_CC2_IN = 31,
+  PCL_PAD_CC2_IO = 32,
+  PCL_PAD_CC2_RST = 33,
+  PCL_PAD_CHGRESET_AGOLD = 34,
+  PCL_PAD_CIF_FL_TRIG_OUT = 35,
+  PCL_PAD_CLK = 36,
+  PCL_PAD_CLKOUT2 = 37,
+  PCL_PAD_CMP_I2C_INT = 38,
+  PCL_PAD_CODEC_INT_n = 39,
+  PCL_PAD_DAP0_AGOLD = 40,
+  PCL_PAD_DAP1_AGOLD = 41,
+  PCL_PAD_DIF_D0 = 42,
+  PCL_PAD_DIF_D1 = 43,
+  PCL_PAD_DIF_D10 = 44,
+  PCL_PAD_DIF_D11 = 45,
+  PCL_PAD_DIF_D12 = 46,
+  PCL_PAD_DIF_D13 = 47,
+  PCL_PAD_DIF_D14 = 48,
+  PCL_PAD_DIF_D15 = 49,
+  PCL_PAD_DIF_D16 = 50,
+  PCL_PAD_DIF_D17 = 51,
+  PCL_PAD_DIF_D18 = 52,
+  PCL_PAD_DIF_D19 = 53,
+  PCL_PAD_DIF_D2 = 54,
+  PCL_PAD_DIF_D20 = 55,
+  PCL_PAD_DIF_D21 = 56,
+  PCL_PAD_DIF_D22 = 57,
+  PCL_PAD_DIF_D23 = 58,
+  PCL_PAD_DIF_D3 = 59,
+  PCL_PAD_DIF_D4 = 60,
+  PCL_PAD_DIF_D5 = 61,
+  PCL_PAD_DIF_D6 = 62,
+  PCL_PAD_DIF_D7 = 63,
+  PCL_PAD_DIF_D8 = 64,
+  PCL_PAD_DIF_D9 = 65,
+  PCL_PAD_DIF_DATA_EN = 66,
+  PCL_PAD_DIF_DCLK = 67,
+  PCL_PAD_DIF_HSYNC = 68,
+  PCL_PAD_DIF_KP_IN7 = 69,
+  PCL_PAD_DIF_PWM2 = 70,
+  PCL_PAD_DIF_VSYNC = 71,
+  PCL_PAD_DPLL_FP10_AGOLD = 72,
+  PCL_PAD_DPLL_FP5_AGOLD = 73,
+  PCL_PAD_DSPIN1 = 74,
+  PCL_PAD_EINT = 75,
+  PCL_PAD_EINT16 = 76,
+  PCL_PAD_EINT17 = 77,
+  PCL_PAD_EINT18 = 78,
+  PCL_PAD_EINT19 = 79,
+  PCL_PAD_EINT20 = 80,
+  PCL_PAD_EINT21 = 81,
+  PCL_PAD_EINT22 = 82,
+  PCL_PAD_EINT5 = 83,
+  PCL_PAD_EINT6 = 84,
+  PCL_PAD_EINT8 = 85,
+  PCL_PAD_EINT9 = 86,
+  PCL_PAD_EMMC_CLK = 87,
+  PCL_PAD_EMMC_CMD = 88,
+  PCL_PAD_EMMC_CMD_OPEN_DRAIN = 89,
+  PCL_PAD_EMMC_DAT0 = 90,
+  PCL_PAD_EMMC_DAT1 = 91,
+  PCL_PAD_EMMC_DAT2 = 92,
+  PCL_PAD_EMMC_DAT3 = 93,
+  PCL_PAD_EMMC_DAT4 = 94,
+  PCL_PAD_EMMC_DAT5 = 95,
+  PCL_PAD_EMMC_DAT6 = 96,
+  PCL_PAD_EMMC_DAT7 = 97,
+  PCL_PAD_EMMC_RESET = 98,
+  PCL_PAD_ETM7_PIPESTAT0 = 99,
+  PCL_PAD_ETM7_PIPESTAT1 = 100,
+  PCL_PAD_ETM7_PIPESTAT2 = 101,
+  PCL_PAD_ETM7_TRACECLK = 102,
+  PCL_PAD_ETM7_TRACEPKT0 = 103,
+  PCL_PAD_ETM7_TRACEPKT1 = 104,
+  PCL_PAD_ETM7_TRACEPKT2 = 105,
+  PCL_PAD_ETM7_TRACEPKT3 = 106,
+  PCL_PAD_ETM7_TRACEPKT4 = 107,
+  PCL_PAD_ETM7_TRACEPKT5 = 108,
+  PCL_PAD_ETM7_TRACEPKT6 = 109,
+  PCL_PAD_ETM7_TRACEPKT7 = 110,
+  PCL_PAD_ETM7_TRACESYNC = 111,
+  PCL_PAD_EVCO_AGOLD = 112,
+  PCL_PAD_EXT_LNA_CTRL_AGOLD = 113,
+  PCL_PAD_FMR_ANA_TO_BUMP_AGOLD = 114,
+  PCL_PAD_FSYS2_EN_AGOLD = 115,
+  PCL_PAD_GNSS_ANA_TEST_IO1_AGOLD = 116,
+  PCL_PAD_GNSS_ANA_TEST_IO2_AGOLD = 117,
+  PCL_PAD_GNSS_DSP_JTAG_TCK_AGOLD = 118,
+  PCL_PAD_GNSS_DSP_JTAG_TDI_AGOLD = 119,
+  PCL_PAD_GNSS_DSP_JTAG_TDO_AGOLD = 120,
+  PCL_PAD_GNSS_DSP_JTAG_TMS_AGOLD = 121,
+  PCL_PAD_GNSS_EXT_DUTY_CYCLE_AGOLD = 122,
+  PCL_PAD_GNSS_FTA_AGOLD = 123,
+  PCL_PAD_GNSS_GPIO0_AGOLD = 124,
+  PCL_PAD_GNSS_GPIO10_AGOLD = 125,
+  PCL_PAD_GNSS_GPIO11_AGOLD = 126,
+  PCL_PAD_GNSS_GPIO12_AGOLD = 127,
+  PCL_PAD_GNSS_GPIO13_AGOLD = 128,
+  PCL_PAD_GNSS_GPIO14_AGOLD = 129,
+  PCL_PAD_GNSS_GPIO15_AGOLD = 130,
+  PCL_PAD_GNSS_GPIO16_AGOLD = 131,
+  PCL_PAD_GNSS_GPIO17_AGOLD = 132,
+  PCL_PAD_GNSS_GPIO18_AGOLD = 133,
+  PCL_PAD_GNSS_GPIO19_AGOLD = 134,
+  PCL_PAD_GNSS_GPIO1_AGOLD = 135,
+  PCL_PAD_GNSS_GPIO2_AGOLD = 136,
+  PCL_PAD_GNSS_GPIO3_AGOLD = 137,
+  PCL_PAD_GNSS_GPIO4_AGOLD = 138,
+  PCL_PAD_GNSS_GPIO5_AGOLD = 139,
+  PCL_PAD_GNSS_GPIO6_AGOLD = 140,
+  PCL_PAD_GNSS_GPIO7_AGOLD = 141,
+  PCL_PAD_GNSS_GPIO8_AGOLD = 142,
+  PCL_PAD_GNSS_GPIO9_AGOLD = 143,
+  PCL_PAD_GNSS_UART1_TXD_AGOLD = 144,
+  PCL_PAD_GPIO1_3GRF_AGOLD = 145,
+  PCL_PAD_GPIO2_3GRF_AGOLD = 146,
+  PCL_PAD_GPIO3_3GRF_AGOLD = 147,
+  PCL_PAD_GPIO4_3GRF_AGOLD = 148,
+  PCL_PAD_GPIO5_3GRF_AGOLD = 149,
+  PCL_PAD_GPIO6_3GRF_AGOLD = 150,
+  PCL_PAD_GPIO_BL = 151,
+  PCL_PAD_GPIO_BL_EN = 152,
+  PCL_PAD_GPIO_CAM0_ID0 = 153,
+  PCL_PAD_GPIO_CAM_ISP_1P2_EN = 154,
+  PCL_PAD_GPIO_CHG_OTG_EN_SOC = 155,
+  PCL_PAD_GPIO_CHG_lLIM_AGOLD = 156,
+  PCL_PAD_GPIO_DM_CLK_AGOLD = 157,
+  PCL_PAD_GPIO_DM_DAT1_AGOLD = 158,
+  PCL_PAD_GPIO_DM_DAT2_AGOLD = 159,
+  PCL_PAD_GPIO_FM_LNA_CTRL_AGOLD = 160,
+  PCL_PAD_GPIO_HW_ID0 = 161,
+  PCL_PAD_GPIO_HW_ID1 = 162,
+  PCL_PAD_GPIO_ISP_RST_N = 163,
+  PCL_PAD_GPIO_ISP_SUSPEND = 164,
+  PCL_PAD_GPIO_LCM_EN = 165,
+  PCL_PAD_GPIO_LCM_RST_N = 166,
+  PCL_PAD_GPIO_MAIN_VCM_PD_N = 167,
+  PCL_PAD_GPIO_PANEL_ID0 = 168,
+  PCL_PAD_GPIO_PJ_ID0 = 169,
+  PCL_PAD_GPIO_PJ_ID1 = 170,
+  PCL_PAD_GPIO_PJ_ID2 = 171,
+  PCL_PAD_GPIO_RF_ID0 = 172,
+  PCL_PAD_GPIO_RF_ID2 = 173,
+  PCL_PAD_GPIO_SD_PWR_EN = 174,
+  PCL_PAD_GPIO_SD_ext_LDO = 175,
+  PCL_PAD_GPIO_SPK_AMP_EN = 176,
+  PCL_PAD_GPIO_SUB_CAM_MFG_ID0 = 177,
+  PCL_PAD_GPIO_TOUCH_RST = 178,
+  PCL_PAD_GPIO_TP_ID0 = 179,
+  PCL_PAD_GPIO_TP_ID1 = 180,
+  PCL_PAD_GPIO_VHIGH_EN_CPU = 181,
+  PCL_PAD_GPIO_VHIGH_EN_GPU = 182,
+  PCL_PAD_GPIO_XDRV_0 = 183,
+  PCL_PAD_GPS_CLK = 184,
+  PCL_PAD_HSIC_USB_DATA = 185,
+  PCL_PAD_HW_MON1 = 186,
+  PCL_PAD_HW_MON10 = 187,
+  PCL_PAD_HW_MON11 = 188,
+  PCL_PAD_HW_MON12 = 189,
+  PCL_PAD_HW_MON13 = 190,
+  PCL_PAD_HW_MON14 = 191,
+  PCL_PAD_HW_MON15 = 192,
+  PCL_PAD_HW_MON16 = 193,
+  PCL_PAD_HW_MON2 = 194,
+  PCL_PAD_HW_MON3 = 195,
+  PCL_PAD_HW_MON4 = 196,
+  PCL_PAD_HW_MON5 = 197,
+  PCL_PAD_HW_MON6 = 198,
+  PCL_PAD_HW_MON7 = 199,
+  PCL_PAD_HW_MON8 = 200,
+  PCL_PAD_HW_MON9 = 201,
+  PCL_PAD_I2C1_SCL = 202,
+  PCL_PAD_I2C1_SDA = 203,
+  PCL_PAD_I2C2_SCL = 204,
+  PCL_PAD_I2C2_SDA = 205,
+  PCL_PAD_I2C3_SCL = 206,
+  PCL_PAD_I2C3_SDA = 207,
+  PCL_PAD_I2C4_SCL = 208,
+  PCL_PAD_I2C4_SDA = 209,
+  PCL_PAD_I2C5_SCL_AGOLD = 210,
+  PCL_PAD_I2C5_SDA_AGOLD = 211,
+  PCL_PAD_I2S1_CLK0 = 212,
+  PCL_PAD_I2S1_RX = 213,
+  PCL_PAD_I2S1_TX = 214,
+  PCL_PAD_I2S1_WA0 = 215,
+  PCL_PAD_I2S1_WA1_MASTER = 216,
+  PCL_PAD_I2S2 = 217,
+  PCL_PAD_IPC = 218,
+  PCL_PAD_IPC_HOST_WAKEUP = 219,
+  PCL_PAD_KP_IN0 = 220,
+  PCL_PAD_KP_IN1 = 221,
+  PCL_PAD_KP_IN2 = 222,
+  PCL_PAD_KP_IN5 = 223,
+  PCL_PAD_KP_IN6 = 224,
+  PCL_PAD_KP_IN7 = 225,
+  PCL_PAD_KP_OUT0 = 226,
+  PCL_PAD_KP_OUT1 = 227,
+  PCL_PAD_KP_OUT2 = 228,
+  PCL_PAD_KP_OUT4 = 229,
+  PCL_PAD_KP_OUT5 = 230,
+  PCL_PAD_KP_OUT6 = 231,
+  PCL_PAD_KP_OUT7 = 232,
+  PCL_PAD_LOG_4KHZ_LOW_PREC_TIMER = 233,
+  PCL_PAD_LOG_4KHZ_PERF_MON_TIMER = 234,
+  PCL_PAD_LOG_4KHZ_SYS_TIMER = 235,
+  PCL_PAD_LOG_CAPCOM_TIMER_0_WORKAROUND = 236,
+  PCL_PAD_LOG_STMPSVWA_SYS_TIMER = 237,
+  PCL_PAD_LVDS_TA1N = 238,
+  PCL_PAD_LVDS_TA1P = 239,
+  PCL_PAD_LVDS_TB1N = 240,
+  PCL_PAD_LVDS_TB1P = 241,
+  PCL_PAD_LVDS_TC1N = 242,
+  PCL_PAD_LVDS_TC1P = 243,
+  PCL_PAD_LVDS_TCLK1N = 244,
+  PCL_PAD_LVDS_TCLK1P = 245,
+  PCL_PAD_LVDS_TD1N = 246,
+  PCL_PAD_LVDS_TD1P = 247,
+  PCL_PAD_MIPI2_TRACE_CLK_AGOLD = 248,
+  PCL_PAD_MIPI2_TRACE_DATA0_AGOLD = 249,
+  PCL_PAD_MIPI2_TRACE_DATA1_AGOLD = 250,
+  PCL_PAD_MIPI2_TRACE_DATA2_AGOLD = 251,
+  PCL_PAD_MIPI2_TRACE_DATA3_AGOLD = 252,
+  PCL_PAD_MIPI_HSI_ACDATA_AGOLD = 253,
+  PCL_PAD_MIPI_HSI_ACFLAG_AGOLD = 254,
+  PCL_PAD_MIPI_HSI_ACREADY_AGOLD = 255,
+  PCL_PAD_MIPI_HSI_CADATA_AGOLD = 256,
+  PCL_PAD_MIPI_HSI_CAFLAG_AGOLD = 257,
+  PCL_PAD_MIPI_HSI_CAREADY_AGOLD = 258,
+  PCL_PAD_MIPI_TRACE_CLK = 259,
+  PCL_PAD_MIPI_TRACE_CLK_SECONDARY = 260,
+  PCL_PAD_MIPI_TRACE_DATA0 = 261,
+  PCL_PAD_MIPI_TRACE_DATA0_SECONDARY = 262,
+  PCL_PAD_MIPI_TRACE_DATA1 = 263,
+  PCL_PAD_MIPI_TRACE_DATA10 = 264,
+  PCL_PAD_MIPI_TRACE_DATA11 = 265,
+  PCL_PAD_MIPI_TRACE_DATA12 = 266,
+  PCL_PAD_MIPI_TRACE_DATA13 = 267,
+  PCL_PAD_MIPI_TRACE_DATA14 = 268,
+  PCL_PAD_MIPI_TRACE_DATA15 = 269,
+  PCL_PAD_MIPI_TRACE_DATA1_SECONDARY = 270,
+  PCL_PAD_MIPI_TRACE_DATA2 = 271,
+  PCL_PAD_MIPI_TRACE_DATA2_SECONDARY = 272,
+  PCL_PAD_MIPI_TRACE_DATA3 = 273,
+  PCL_PAD_MIPI_TRACE_DATA3_SECONDARY = 274,
+  PCL_PAD_MIPI_TRACE_DATA4 = 275,
+  PCL_PAD_MIPI_TRACE_DATA5 = 276,
+  PCL_PAD_MIPI_TRACE_DATA6 = 277,
+  PCL_PAD_MIPI_TRACE_DATA7 = 278,
+  PCL_PAD_MIPI_TRACE_DATA8 = 279,
+  PCL_PAD_MIPI_TRACE_DATA9 = 280,
+  PCL_PAD_NAND_ALE = 281,
+  PCL_PAD_NAND_CLE = 282,
+  PCL_PAD_NAND_CS0 = 283,
+  PCL_PAD_NAND_CS1 = 284,
+  PCL_PAD_NAND_DQS = 285,
+  PCL_PAD_NAND_IO0 = 286,
+  PCL_PAD_NAND_IO1 = 287,
+  PCL_PAD_NAND_IO2 = 288,
+  PCL_PAD_NAND_IO3 = 289,
+  PCL_PAD_NAND_IO4 = 290,
+  PCL_PAD_NAND_IO5 = 291,
+  PCL_PAD_NAND_IO6 = 292,
+  PCL_PAD_NAND_IO7 = 293,
+  PCL_PAD_NAND_RDN = 294,
+  PCL_PAD_NAND_RY_BY = 295,
+  PCL_PAD_NAND_WP = 296,
+  PCL_PAD_NAND_WRN = 297,
+  PCL_PAD_PA_BIAS_AGOLD = 298,
+  PCL_PAD_PA_RAMP_AGOLD = 299,
+  PCL_PAD_PMU = 300,
+  PCL_PAD_PMU_CTRL_0 = 301,
+  PCL_PAD_PMU_CTRL_0_AGOLD = 302,
+  PCL_PAD_PMU_CTRL_1 = 303,
+  PCL_PAD_PMU_CTRL_1_AGOLD = 304,
+  PCL_PAD_PMU_CTRL_2 = 305,
+  PCL_PAD_PMU_CTRL_2_AGOLD = 306,
+  PCL_PAD_PMU_CTRL_3_AGOLD = 307,
+  PCL_PAD_PMU_DIGIN = 308,
+  PCL_PAD_PMU_DIGOUT = 309,
+  PCL_PAD_PMU_SLEEP = 310,
+  PCL_PAD_POS_FTA_FTR = 311,
+  PCL_PAD_PROLIFIC1_SHTDn = 312,
+  PCL_PAD_PWM3 = 313,
+  PCL_PAD_RESET_3GRF_N_AGOLD = 314,
+  PCL_PAD_RTCK = 315,
+  PCL_PAD_SDMMC_CARD_DETECT = 316,
+  PCL_PAD_SDMMC_CLK = 317,
+  PCL_PAD_SDMMC_CMD = 318,
+  PCL_PAD_SDMMC_CMD_OPEN_DRAIN = 319,
+  PCL_PAD_SDMMC_DAT0 = 320,
+  PCL_PAD_SDMMC_DAT1 = 321,
+  PCL_PAD_SDMMC_DAT2 = 322,
+  PCL_PAD_SDMMC_DAT3 = 323,
+  PCL_PAD_SIGMON0_AGOLD = 324,
+  PCL_PAD_SIGMON1_AGOLD = 325,
+  PCL_PAD_SIGMON2_AGOLD = 326,
+  PCL_PAD_SIGMON3_AGOLD = 327,
+  PCL_PAD_SIGMON4_AGOLD = 328,
+  PCL_PAD_SIM_DETECT = 329,
+  PCL_PAD_SPI_CLK_AGOLD = 330,
+  PCL_PAD_SPI_DRW_AGOLD = 331,
+  PCL_PAD_SPI_SS_AGOLD = 332,
+  PCL_PAD_SSC = 333,
+  PCL_PAD_SYSCLKEN = 334,
+  PCL_PAD_SYS_CLK_EN = 335,
+  PCL_PAD_SYS_CLK_EN_AGOLD = 336,
+  PCL_PAD_TCXO_REQ_AGOLD = 337,
+  PCL_PAD_TDI = 338,
+  PCL_PAD_TDI_AGOLD = 339,
+  PCL_PAD_TDO = 340,
+  PCL_PAD_TDO_AGOLD = 341,
+  PCL_PAD_TOUCH_INT_N = 342,
+  PCL_PAD_TPIU = 343,
+  PCL_PAD_TRIG_OUT_SECONDARY = 344,
+  PCL_PAD_UE2 = 345,
+  PCL_PAD_USB_ID_DET = 346,
+  PCL_PAD_USIF1_CTS_N = 347,
+  PCL_PAD_USIF1_RTS_N = 348,
+  PCL_PAD_USIF1_RXD_MRST = 349,
+  PCL_PAD_USIF1_SCLK = 350,
+  PCL_PAD_USIF1_TXD_MTSR = 351,
+  PCL_PAD_USIF2_CSO0 = 352,
+  PCL_PAD_USIF2_CTS_N = 353,
+  PCL_PAD_USIF2_MODEM_RDY = 354,
+  PCL_PAD_USIF2_RTS_N = 355,
+  PCL_PAD_USIF2_RXD_MRST = 356,
+  PCL_PAD_USIF2_SCLK = 357,
+  PCL_PAD_USIF2_TXD_MTSR = 358,
+  PCL_PAD_USIF3_MODEM_RDY = 359,
+  PCL_PAD_USIF5_RXD_MRST = 360,
+  PCL_PAD_VBUS_DETECT = 361,
+  PCL_PAD_VIB_AGOLD = 362,
+  PCL_PAD_VSPI_AGOLD = 363,
+  PCL_PAD_WLAN_ANA_TEST_IO0_AGOLD = 364,
+  PCL_PAD_WLAN_ANA_TEST_IO1_AGOLD = 365,
+  PCL_PAD_WLAN_ANA_TEST_IO2_AGOLD = 366,
+  PCL_PAD_WLAN_ANA_TEST_IO3_AGOLD = 367,
+  PCL_PAD_WLAN_ANA_TEST_IO4_AGOLD = 368,
+  PCL_PAD_WLAN_GPIO0_AGOLD = 369,
+  PCL_PAD_WLAN_GPIO1_AGOLD = 370,
+  PCL_PAD_WLAN_GPIO2_AGOLD = 371,
+  PCL_PAD_WLAN_GPIO3_AGOLD = 372,
+  PCL_PAD_WLAN_GPIO4_AGOLD = 373,
+  PCL_PAD_WLAN_GPIO5_AGOLD = 374,
+  PCL_PAD_WLAN_test_bus_10_AGOLD = 375,
+  PCL_PAD_WLAN_test_bus_11_AGOLD = 376,
+  PCL_PAD_WLAN_test_bus_12_AGOLD = 377,
+  PCL_PAD_WLAN_test_bus_1_AGOLD = 378,
+  PCL_PAD_WLAN_test_bus_2_AGOLD = 379,
+  PCL_PAD_WLAN_test_bus_3_AGOLD = 380,
+  PCL_PAD_WLAN_test_bus_4_AGOLD = 381,
+  PCL_PAD_WLAN_test_bus_5_AGOLD = 382,
+  PCL_PAD_WLAN_test_bus_6_AGOLD = 383,
+  PCL_PAD_WLAN_test_bus_7_AGOLD = 384,
+  PCL_PAD_WLAN_test_bus_8_AGOLD = 385,
+  PCL_PAD_WLAN_test_bus_9_AGOLD = 386,
+  PCL_PAD_WUP_DBB_AGOLD = 387,
+  PCL_PAD_supply = 388,
+  PCL_PAD_CLKOUT0 = PCL_PAD_CLK,
+  PCL_PAD_CC_CLK = PCL_PAD_CC1_CLK,
+  PCL_PAD_CC_IO = PCL_PAD_CC1_IO,
+  PCL_PAD_CC_RST = PCL_PAD_CC1_RST,
+  PCL_PAD_CHRG_EN = PCL_PAD_CMP_I2C_INT,
+  PCL_PAD_CLKOUT1 = PCL_PAD_CLK,
+  PCL_PAD_CMP_EN = PCL_PAD_CMP_I2C_INT,
+  PCL_PAD_COMP_INT = PCL_PAD_EINT5,
+  PCL_PAD_EINT3 = PCL_PAD_EINT,
+  PCL_PAD_EMMC_CMD_PUSH_PULL = PCL_PAD_EMMC_CMD,
+  PCL_PAD_GPIO_CAM_TORCH = PCL_PAD_CIF_FL_TRIG_OUT,
+  PCL_PAD_GPIO_CODEC_RSTn = PCL_PAD_CODEC_INT_n,
+  PCL_PAD_GPIO_DIF_RESET = PCL_PAD_GPIO_LCM_RST_N,
+  PCL_PAD_GPIO_GPS_EVCO_TRIG = PCL_PAD_GPS_CLK,
+  PCL_PAD_GPIO_GPS_POWER_ON = PCL_PAD_GPS_CLK,
+  PCL_PAD_GPIO_IPC_HOST_WAKEUP = PCL_PAD_IPC,
+  PCL_PAD_GPIO_IPC_TRIG_OUT = PCL_PAD_IPC,
+  PCL_PAD_GPIO_MMC_IO_supply = PCL_PAD_supply,
+  PCL_PAD_GPIO_PMU_DIGOUT_I_10 = PCL_PAD_PMU_DIGOUT,
+  PCL_PAD_GPIO_PMU_DIGOUT_I_2 = PCL_PAD_PMU_DIGOUT,
+  PCL_PAD_GPIO_PMU_DIGOUT_I_3 = PCL_PAD_PMU_DIGOUT,
+  PCL_PAD_GPIO_PMU_DIGOUT_I_4 = PCL_PAD_PMU_DIGOUT,
+  PCL_PAD_GPIO_PMU_DIGOUT_I_5 = PCL_PAD_PMU_DIGOUT,
+  PCL_PAD_GPIO_PMU_DIGOUT_I_6 = PCL_PAD_PMU_DIGOUT,
+  PCL_PAD_GPIO_PMU_DIGOUT_I_7 = PCL_PAD_PMU_DIGOUT,
+  PCL_PAD_GPIO_PMU_DIGOUT_I_8 = PCL_PAD_PMU_DIGOUT,
+  PCL_PAD_GPIO_PMU_DIGOUT_I_9 = PCL_PAD_PMU_DIGOUT,
+  PCL_PAD_GPIO_SD_LDO_EN = PCL_PAD_supply,
+  PCL_PAD_GPIO_SD_LDO_EN_XG636 = PCL_PAD_supply,
+  PCL_PAD_GPIO_SSC_RSTN = PCL_PAD_SSC,
+  PCL_PAD_GPIO_USIF2_SRDY = PCL_PAD_USIF2_MODEM_RDY,
+  PCL_PAD_GPIO_VA_1V8_PWD_n = PCL_PAD_supply,
+  PCL_PAD_GPIO_XDRV_1 = PCL_PAD_GPIO_XDRV_0,
+  PCL_PAD_GPIO_XDRV_2 = PCL_PAD_GPIO_XDRV_0,
+  PCL_PAD_GPIO_XDRV_3 = PCL_PAD_GPIO_XDRV_0,
+  PCL_PAD_GPS_TIMESTAMP = PCL_PAD_POS_FTA_FTR,
+  PCL_PAD_HSIC_USB_STRB = PCL_PAD_HSIC_USB_DATA,
+  PCL_PAD_I2S0_LRCK_TX = PCL_PAD_I2S1_WA0,
+  PCL_PAD_I2S0_SCLK = PCL_PAD_I2S1_CLK0,
+  PCL_PAD_I2S0_SDO0 = PCL_PAD_I2S1_TX,
+  PCL_PAD_I2S1_CLK0_MASTER = PCL_PAD_I2S1_WA1_MASTER,
+  PCL_PAD_I2S1_CLK0_SLAVE = PCL_PAD_I2S1_WA1_MASTER,
+  PCL_PAD_I2S1_CLK1_MASTER = PCL_PAD_I2S1_WA1_MASTER,
+  PCL_PAD_I2S1_CLK1_SLAVE = PCL_PAD_I2S1_WA1_MASTER,
+  PCL_PAD_I2S1_WA0_MASTER = PCL_PAD_I2S1_WA1_MASTER,
+  PCL_PAD_I2S1_WA0_SLAVE = PCL_PAD_I2S1_WA1_MASTER,
+  PCL_PAD_I2S1_WA1_SLAVE = PCL_PAD_I2S1_WA1_MASTER,
+  PCL_PAD_I2S2_CLK0_MASTER = PCL_PAD_I2S2,
+  PCL_PAD_I2S2_CLK0_SLAVE = PCL_PAD_I2S2,
+  PCL_PAD_I2S2_CLK1_MASTER = PCL_PAD_I2S2,
+  PCL_PAD_I2S2_CLK1_SLAVE = PCL_PAD_I2S2,
+  PCL_PAD_I2S2_RX = PCL_PAD_I2S2,
+  PCL_PAD_I2S2_TX = PCL_PAD_I2S2,
+  PCL_PAD_I2S2_WA0_MASTER = PCL_PAD_I2S2,
+  PCL_PAD_I2S2_WA0_SLAVE = PCL_PAD_I2S2,
+  PCL_PAD_I2S2_WA1_MASTER = PCL_PAD_I2S2,
+  PCL_PAD_I2S2_WA1_SLAVE = PCL_PAD_I2S2,
+  PCL_PAD_IPC_SLAVE_WAKEUP = PCL_PAD_IPC,
+  PCL_PAD_IPC_TRIG_IN = PCL_PAD_IPC,
+  PCL_PAD_MAIN_CAM_RESET = PCL_PAD_GPIO_ISP_RST_N,
+  PCL_PAD_MAIN_VCM_PD_N = PCL_PAD_GPIO_MAIN_VCM_PD_N,
+  PCL_PAD_MIPI1_TRACE_CLK = PCL_PAD_MIPI_TRACE_CLK,
+  PCL_PAD_MIPI1_TRACE_DATA0 = PCL_PAD_MIPI_TRACE_DATA0,
+  PCL_PAD_MIPI1_TRACE_DATA1 = PCL_PAD_MIPI_TRACE_DATA1,
+  PCL_PAD_MIPI1_TRACE_DATA2 = PCL_PAD_MIPI_TRACE_DATA2,
+  PCL_PAD_MIPI1_TRACE_DATA3 = PCL_PAD_MIPI_TRACE_DATA3,
+  PCL_PAD_MIPI1_TRACE_DATA4 = PCL_PAD_MIPI_TRACE_DATA4,
+  PCL_PAD_MIPI1_TRACE_DATA5 = PCL_PAD_MIPI_TRACE_DATA5,
+  PCL_PAD_MIPI1_TRACE_DATA6 = PCL_PAD_MIPI_TRACE_DATA6,
+  PCL_PAD_MIPI1_TRACE_DATA7 = PCL_PAD_MIPI_TRACE_DATA7,
+  PCL_PAD_MIPI2_TRACE_CLK = PCL_PAD_MIPI_TRACE_CLK,
+  PCL_PAD_MIPI2_TRACE_DATA0 = PCL_PAD_MIPI_TRACE_DATA0,
+  PCL_PAD_MIPI2_TRACE_DATA1 = PCL_PAD_MIPI_TRACE_DATA1,
+  PCL_PAD_MIPI2_TRACE_DATA2 = PCL_PAD_MIPI_TRACE_DATA2,
+  PCL_PAD_MIPI2_TRACE_DATA3 = PCL_PAD_MIPI_TRACE_DATA3,
+  PCL_PAD_MMCI2_DAT0 = PCL_PAD_EMMC_DAT0,
+  PCL_PAD_MMCI2_DAT1 = PCL_PAD_EMMC_DAT1,
+  PCL_PAD_MMCI2_DAT2 = PCL_PAD_EMMC_DAT2,
+  PCL_PAD_MMCI2_DAT3 = PCL_PAD_EMMC_DAT3,
+  PCL_PAD_MMCI2_DAT4 = PCL_PAD_EMMC_DAT4,
+  PCL_PAD_MMCI2_DAT5 = PCL_PAD_EMMC_DAT5,
+  PCL_PAD_MMCI2_DAT6 = PCL_PAD_EMMC_DAT6,
+  PCL_PAD_MMCI2_DAT7 = PCL_PAD_EMMC_DAT7,
+  PCL_PAD_PMU_CTRL_3 = PCL_PAD_PMU,
+  PCL_PAD_PMU_DIGIN_O_8 = PCL_PAD_PMU_DIGIN,
+  PCL_PAD_PMU_DIGIN_O_8_SECONDARY = PCL_PAD_TRIG_OUT_SECONDARY,
+  PCL_PAD_PMU_DIGIN_O_9 = PCL_PAD_PMU_DIGIN,
+  PCL_PAD_TPIU_TRACECLK = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACECTL = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT0 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT1 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT10 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT11 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT12 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT13 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT14 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT15 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT2 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT3 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT4 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT5 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT6 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT7 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT8 = PCL_PAD_TPIU,
+  PCL_PAD_TPIU_TRACEPKT9 = PCL_PAD_TPIU,
+  PCL_PAD_USIF1_IPC_IN = PCL_PAD_IPC_HOST_WAKEUP,
+  PCL_PAD_USIF1_MODEM_RDY = PCL_PAD_IPC_HOST_WAKEUP,
+  PCL_PAD_USIF1_MRDY = PCL_PAD_IPC_HOST_WAKEUP,
+  PCL_PAD_USIF1_RXD_MRST_MASTER = PCL_PAD_USIF1_RXD_MRST,
+  PCL_PAD_USIF1_RXD_MRST_SLAVE = PCL_PAD_USIF1_RXD_MRST,
+  PCL_PAD_USIF1_SCLK_MASTER = PCL_PAD_USIF1_SCLK,
+  PCL_PAD_USIF1_SCLK_SLAVE = PCL_PAD_USIF1_SCLK,
+  PCL_PAD_USIF1_SRDY = PCL_PAD_IPC_HOST_WAKEUP,
+  PCL_PAD_USIF1_TXD_MTSR_MASTER = PCL_PAD_USIF1_TXD_MTSR,
+  PCL_PAD_USIF1_TXD_MTSR_SLAVE = PCL_PAD_USIF1_TXD_MTSR,
+  PCL_PAD_USIF2_MRDY = PCL_PAD_USIF2_MODEM_RDY,
+  PCL_PAD_USIF2_RXD_MRST_MASTER = PCL_PAD_USIF2_RXD_MRST,
+  PCL_PAD_USIF2_RXD_MRST_SLAVE = PCL_PAD_USIF2_RXD_MRST,
+  PCL_PAD_USIF2_SCLK_MASTER = PCL_PAD_USIF2_SCLK,
+  PCL_PAD_USIF2_SCLK_SLAVE = PCL_PAD_USIF2_SCLK,
+  PCL_PAD_USIF2_TXD_MTSR_MASTER = PCL_PAD_USIF2_TXD_MTSR,
+  PCL_PAD_USIF2_TXD_MTSR_SLAVE = PCL_PAD_USIF2_TXD_MTSR,
+  PCL_PAD_USIF3_CTS_N = PCL_PAD_USIF3_MODEM_RDY,
+  PCL_PAD_USIF3_IPC_IN = PCL_PAD_IPC,
+  PCL_PAD_USIF3_IPC_OUT = PCL_PAD_IPC,
+  PCL_PAD_USIF3_RTS_N = PCL_PAD_USIF3_MODEM_RDY,
+  PCL_PAD_USIF3_RXD_MRST = PCL_PAD_USIF3_MODEM_RDY,
+  PCL_PAD_USIF3_RXD_MRST_MASTER = PCL_PAD_USIF3_MODEM_RDY,
+  PCL_PAD_USIF3_RXD_MRST_SLAVE = PCL_PAD_USIF3_MODEM_RDY,
+  PCL_PAD_USIF3_SCLK_MASTER = PCL_PAD_IPC,
+  PCL_PAD_USIF3_SCLK_SLAVE = PCL_PAD_IPC,
+  PCL_PAD_USIF3_TXD_MTSR = PCL_PAD_USIF3_MODEM_RDY,
+  PCL_PAD_USIF3_TXD_MTSR_MASTER = PCL_PAD_USIF3_MODEM_RDY,
+  PCL_PAD_USIF3_TXD_MTSR_SLAVE = PCL_PAD_USIF3_MODEM_RDY,
+  PCL_PAD_USIF5_TXD_MTSR = PCL_PAD_USIF5_RXD_MRST,
+  PCL_PAD_VSP_LRCLK = PCL_PAD_CODEC_INT_n,
+  PCL_PAD_VSP_SCLK = PCL_PAD_CODEC_INT_n,
+  PCL_PAD_VSP_SDIN = PCL_PAD_CODEC_INT_n,
+  PCL_PAD_VSP_SDOUT = PCL_PAD_CODEC_INT_n,
+  PCL_PAD_WP_DET_SW = PCL_PAD_TRIG_OUT_SECONDARY,
+  PCL_PAD_XRESET = PCL_PAD_UE2,
+  PCL_SYMBOLIC_NAMES_LAST_ELEMENT = 389,    /* do not use, always last element, internally used to verify PCL setup */
+  PCL_PAD_UNKNOWN = 0xFFFF    /* do not use, ID for unknown pad, internally used for debug purpose */
+} T_PCL_SYMBOLIC_PAD_NAMES;
+
+/**
+   Physical HW block/signal used for logical function.
+*/
+typedef enum PCL_HW_FUNCTIONS {
+  PCL_HW_NONE = 0,
+  PCL_HW_GPIO = 1,
+  PCL_HW_AUDIO_SYNC_OUT = 2,
+  PCL_HW_BREAK_IN = 3,
+  PCL_HW_BREAK_OUT = 4,
+  PCL_HW_BT_EXT_RESET_N = 5,
+  PCL_HW_BT_FWDBG_TXD = 6,
+  PCL_HW_BT_GPO0 = 7,
+  PCL_HW_BT_GPO1 = 8,
+  PCL_HW_BT_GPO2 = 9,
+  PCL_HW_BT_PCM_CLK = 10,
+  PCL_HW_BT_PCM_FR = 11,
+  PCL_HW_BT_PCM_IN = 12,
+  PCL_HW_BT_PCM_OUT = 13,
+  PCL_HW_BT_RF_ANA_0 = 14,
+  PCL_HW_BT_RF_ANA_1 = 15,
+  PCL_HW_BT_RF_ANA_2 = 16,
+  PCL_HW_BT_RF_ANA_3 = 17,
+  PCL_HW_BT_TST_IF0 = 18,
+  PCL_HW_BT_TST_IF1 = 19,
+  PCL_HW_BT_TST_IF2 = 20,
+  PCL_HW_BT_TST_IF3 = 21,
+  PCL_HW_BT_TST_IF4 = 22,
+  PCL_HW_BT_TST_IF5 = 23,
+  PCL_HW_BT_UART_CTS = 24,
+  PCL_HW_BT_UART_RTS = 25,
+  PCL_HW_BT_UART_RXD = 26,
+  PCL_HW_BT_UART_TXD = 27,
+  PCL_HW_BT_WAKEUP_BT = 28,
+  PCL_HW_BT_WAKEUP_HOST = 29,
+  PCL_HW_BT_WLAN_ACTIVE = 30,
+  PCL_HW_CABC = 31,
+  PCL_HW_CC0CC0IO = 32,
+  PCL_HW_CC0CC1IO = 33,
+  PCL_HW_CC0CC2IO = 34,
+  PCL_HW_CC0CC3IO = 35,
+  PCL_HW_CC0CC4IO = 36,
+  PCL_HW_CC0CC5IO = 37,
+  PCL_HW_CC0CC6IO = 38,
+  PCL_HW_CC0CC7IO = 39,
+  PCL_HW_CC0T0IN = 40,
+  PCL_HW_CC0T1IN = 41,
+  PCL_HW_CC1CC0IO = 42,
+  PCL_HW_CC1CC1IO = 43,
+  PCL_HW_CC1CC2IO = 44,
+  PCL_HW_CC1CC3IO = 45,
+  PCL_HW_CC1CC4IO = 46,
+  PCL_HW_CC1CC5IO = 47,
+  PCL_HW_CC1CC6IO = 48,
+  PCL_HW_CC1CC7IO = 49,
+  PCL_HW_CC1T0IN = 50,
+  PCL_HW_CC1T1IN = 51,
+  PCL_HW_CC1_CLK = 52,
+  PCL_HW_CC1_IN = 53,
+  PCL_HW_CC1_IO = 54,
+  PCL_HW_CC1_RST = 55,
+  PCL_HW_CC2_CLK = 56,
+  PCL_HW_CC2_IN = 57,
+  PCL_HW_CC2_IO = 58,
+  PCL_HW_CC2_RST = 59,
+  PCL_HW_CHGRESET = 60,
+  PCL_HW_CIF_D0 = 61,
+  PCL_HW_CIF_D1 = 62,
+  PCL_HW_CIF_D2 = 63,
+  PCL_HW_CIF_D3 = 64,
+  PCL_HW_CIF_D4 = 65,
+  PCL_HW_CIF_D5 = 66,
+  PCL_HW_CIF_D6 = 67,
+  PCL_HW_CIF_D7 = 68,
+  PCL_HW_CIF_FL_TRIG_IN = 69,
+  PCL_HW_CIF_FL_TRIG_OUT = 70,
+  PCL_HW_CIF_HSYNC = 71,
+  PCL_HW_CIF_PCLK = 72,
+  PCL_HW_CIF_PRELIGHT_TRIG = 73,
+  PCL_HW_CIF_SHUTTER_OPEN = 74,
+  PCL_HW_CIF_SHUTTER_TRIG = 75,
+  PCL_HW_CIF_VSYNC = 76,
+  PCL_HW_CLKOUT0 = 77,
+  PCL_HW_CLKOUT2 = 78,
+  PCL_HW_CLK_ON = 79,
+  PCL_HW_DAP0 = 80,
+  PCL_HW_DAP1 = 81,
+  PCL_HW_DIF_D0 = 82,
+  PCL_HW_DIF_D1 = 83,
+  PCL_HW_DIF_D10 = 84,
+  PCL_HW_DIF_D11 = 85,
+  PCL_HW_DIF_D12 = 86,
+  PCL_HW_DIF_D13 = 87,
+  PCL_HW_DIF_D14 = 88,
+  PCL_HW_DIF_D15 = 89,
+  PCL_HW_DIF_D16 = 90,
+  PCL_HW_DIF_D17 = 91,
+  PCL_HW_DIF_D18 = 92,
+  PCL_HW_DIF_D19 = 93,
+  PCL_HW_DIF_D2 = 94,
+  PCL_HW_DIF_D20 = 95,
+  PCL_HW_DIF_D21 = 96,
+  PCL_HW_DIF_D22 = 97,
+  PCL_HW_DIF_D23 = 98,
+  PCL_HW_DIF_D3 = 99,
+  PCL_HW_DIF_D4 = 100,
+  PCL_HW_DIF_D5 = 101,
+  PCL_HW_DIF_D6 = 102,
+  PCL_HW_DIF_D7 = 103,
+  PCL_HW_DIF_D8 = 104,
+  PCL_HW_DIF_D9 = 105,
+  PCL_HW_DIF_DATA_EN = 106,
+  PCL_HW_DIF_DCLK = 107,
+  PCL_HW_DIF_HSYNC = 108,
+  PCL_HW_DIF_KP_IN7 = 109,
+  PCL_HW_DIF_PWM2 = 110,
+  PCL_HW_DIF_VSYNC = 111,
+  PCL_HW_DM_CLK = 112,
+  PCL_HW_DM_DAT1 = 113,
+  PCL_HW_DM_DAT2 = 114,
+  PCL_HW_DPLL_FP10 = 115,
+  PCL_HW_DPLL_FP5 = 116,
+  PCL_HW_DSP_2G_IN0 = 117,
+  PCL_HW_DSP_2G_IN1 = 118,
+  PCL_HW_DSP_2G_OUT0 = 119,
+  PCL_HW_DSP_2G_OUT1 = 120,
+  PCL_HW_DSP_2G_OUT2 = 121,
+  PCL_HW_DSP_AUDIO_IN0 = 122,
+  PCL_HW_DSP_AUDIO_IN1 = 123,
+  PCL_HW_DSP_AUDIO_OUT0 = 124,
+  PCL_HW_DSP_AUDIO_OUT1 = 125,
+  PCL_HW_DSP_AUDIO_OUT2 = 126,
+  PCL_HW_DUMMY_INOUT1 = 127,
+  PCL_HW_DUMMY_INOUT2 = 128,
+  PCL_HW_DUMMY_INOUT3 = 129,
+  PCL_HW_DUMMY_INOUT4 = 130,
+  PCL_HW_DUMMY_INOUT5 = 131,
+  PCL_HW_DUMMY_INOUT6 = 132,
+  PCL_HW_DUMMY_INOUT7 = 133,
+  PCL_HW_DUMMY_INOUT8 = 134,
+  PCL_HW_EINT0 = 135,
+  PCL_HW_EINT1 = 136,
+  PCL_HW_EINT10 = 137,
+  PCL_HW_EINT11 = 138,
+  PCL_HW_EINT12 = 139,
+  PCL_HW_EINT13 = 140,
+  PCL_HW_EINT14 = 141,
+  PCL_HW_EINT15 = 142,
+  PCL_HW_EINT16 = 143,
+  PCL_HW_EINT17 = 144,
+  PCL_HW_EINT18 = 145,
+  PCL_HW_EINT19 = 146,
+  PCL_HW_EINT2 = 147,
+  PCL_HW_EINT20 = 148,
+  PCL_HW_EINT21 = 149,
+  PCL_HW_EINT22 = 150,
+  PCL_HW_EINT3 = 151,
+  PCL_HW_EINT4 = 152,
+  PCL_HW_EINT5 = 153,
+  PCL_HW_EINT6 = 154,
+  PCL_HW_EINT7 = 155,
+  PCL_HW_EINT8 = 156,
+  PCL_HW_EINT9 = 157,
+  PCL_HW_EMMC_CLK = 158,
+  PCL_HW_EMMC_CMD = 159,
+  PCL_HW_EMMC_DAT0 = 160,
+  PCL_HW_EMMC_DAT1 = 161,
+  PCL_HW_EMMC_DAT2 = 162,
+  PCL_HW_EMMC_DAT3 = 163,
+  PCL_HW_EMMC_DAT4 = 164,
+  PCL_HW_EMMC_DAT5 = 165,
+  PCL_HW_EMMC_DAT6 = 166,
+  PCL_HW_EMMC_DAT7 = 167,
+  PCL_HW_EMMC_RESET = 168,
+  PCL_HW_ETM7_PIPESTAT0 = 169,
+  PCL_HW_ETM7_PIPESTAT1 = 170,
+  PCL_HW_ETM7_PIPESTAT2 = 171,
+  PCL_HW_ETM7_TRACECLK = 172,
+  PCL_HW_ETM7_TRACEPKT0 = 173,
+  PCL_HW_ETM7_TRACEPKT1 = 174,
+  PCL_HW_ETM7_TRACEPKT2 = 175,
+  PCL_HW_ETM7_TRACEPKT3 = 176,
+  PCL_HW_ETM7_TRACEPKT4 = 177,
+  PCL_HW_ETM7_TRACEPKT5 = 178,
+  PCL_HW_ETM7_TRACEPKT6 = 179,
+  PCL_HW_ETM7_TRACEPKT7 = 180,
+  PCL_HW_ETM7_TRACESYNC = 181,
+  PCL_HW_EVCO = 182,
+  PCL_HW_EXT_LNA_CTRL = 183,
+  PCL_HW_FMR_ANA_TO_BUMP = 184,
+  PCL_HW_FSYS2_EN = 185,
+  PCL_HW_GNSS_ANA_TEST_IO1 = 186,
+  PCL_HW_GNSS_ANA_TEST_IO2 = 187,
+  PCL_HW_GNSS_DSP_JTAG_TCK = 188,
+  PCL_HW_GNSS_DSP_JTAG_TDI = 189,
+  PCL_HW_GNSS_DSP_JTAG_TDO = 190,
+  PCL_HW_GNSS_DSP_JTAG_TMS = 191,
+  PCL_HW_GNSS_EXT_DUTY_CYCLE = 192,
+  PCL_HW_GNSS_FTA = 193,
+  PCL_HW_GNSS_GPIO0 = 194,
+  PCL_HW_GNSS_GPIO1 = 195,
+  PCL_HW_GNSS_GPIO10 = 196,
+  PCL_HW_GNSS_GPIO11 = 197,
+  PCL_HW_GNSS_GPIO12 = 198,
+  PCL_HW_GNSS_GPIO13 = 199,
+  PCL_HW_GNSS_GPIO14 = 200,
+  PCL_HW_GNSS_GPIO15 = 201,
+  PCL_HW_GNSS_GPIO16 = 202,
+  PCL_HW_GNSS_GPIO17 = 203,
+  PCL_HW_GNSS_GPIO18 = 204,
+  PCL_HW_GNSS_GPIO19 = 205,
+  PCL_HW_GNSS_GPIO2 = 206,
+  PCL_HW_GNSS_GPIO3 = 207,
+  PCL_HW_GNSS_GPIO4 = 208,
+  PCL_HW_GNSS_GPIO5 = 209,
+  PCL_HW_GNSS_GPIO6 = 210,
+  PCL_HW_GNSS_GPIO7 = 211,
+  PCL_HW_GNSS_GPIO8 = 212,
+  PCL_HW_GNSS_GPIO9 = 213,
+  PCL_HW_GNSS_UART1_TXD = 214,
+  PCL_HW_GPIO1_3GRF = 215,
+  PCL_HW_GPIO2_3GRF = 216,
+  PCL_HW_GPIO3_3GRF = 217,
+  PCL_HW_GPIO4_3GRF = 218,
+  PCL_HW_GPIO5_3GRF = 219,
+  PCL_HW_GPIO6_3GRF = 220,
+  PCL_HW_GPI_3G_0 = 221,
+  PCL_HW_GPI_3G_1 = 222,
+  PCL_HW_GPI_3G_2 = 223,
+  PCL_HW_GPI_3G_3 = 224,
+  PCL_HW_GPO_3G_0 = 225,
+  PCL_HW_GPO_3G_1 = 226,
+  PCL_HW_GPO_3G_2 = 227,
+  PCL_HW_GPO_3G_3 = 228,
+  PCL_HW_GSICTRL0 = 229,
+  PCL_HW_GSICTRL1 = 230,
+  PCL_HW_HW_MON1 = 231,
+  PCL_HW_HW_MON10 = 232,
+  PCL_HW_HW_MON11 = 233,
+  PCL_HW_HW_MON12 = 234,
+  PCL_HW_HW_MON13 = 235,
+  PCL_HW_HW_MON14 = 236,
+  PCL_HW_HW_MON15 = 237,
+  PCL_HW_HW_MON16 = 238,
+  PCL_HW_HW_MON2 = 239,
+  PCL_HW_HW_MON3 = 240,
+  PCL_HW_HW_MON4 = 241,
+  PCL_HW_HW_MON5 = 242,
+  PCL_HW_HW_MON6 = 243,
+  PCL_HW_HW_MON7 = 244,
+  PCL_HW_HW_MON8 = 245,
+  PCL_HW_HW_MON9 = 246,
+  PCL_HW_I2C1_SCL = 247,
+  PCL_HW_I2C1_SDA = 248,
+  PCL_HW_I2C2_SCL = 249,
+  PCL_HW_I2C2_SDA = 250,
+  PCL_HW_I2C3_SCL = 251,
+  PCL_HW_I2C3_SDA = 252,
+  PCL_HW_I2C4_SCL = 253,
+  PCL_HW_I2C4_SDA = 254,
+  PCL_HW_I2C5_SCL = 255,
+  PCL_HW_I2C5_SDA = 256,
+  PCL_HW_I2S1_CLK0 = 257,
+  PCL_HW_I2S1_CLK1 = 258,
+  PCL_HW_I2S1_RX = 259,
+  PCL_HW_I2S1_TX = 260,
+  PCL_HW_I2S1_WA0 = 261,
+  PCL_HW_I2S1_WA1 = 262,
+  PCL_HW_KP_IN0 = 263,
+  PCL_HW_KP_IN1 = 264,
+  PCL_HW_KP_IN2 = 265,
+  PCL_HW_KP_IN3 = 266,
+  PCL_HW_KP_IN4 = 267,
+  PCL_HW_KP_IN5 = 268,
+  PCL_HW_KP_IN6 = 269,
+  PCL_HW_KP_IN7 = 270,
+  PCL_HW_KP_OUT0 = 271,
+  PCL_HW_KP_OUT1 = 272,
+  PCL_HW_KP_OUT2 = 273,
+  PCL_HW_KP_OUT3 = 274,
+  PCL_HW_KP_OUT4 = 275,
+  PCL_HW_KP_OUT5 = 276,
+  PCL_HW_KP_OUT6 = 277,
+  PCL_HW_KP_OUT7 = 278,
+  PCL_HW_LVDS_TA1N = 279,
+  PCL_HW_LVDS_TA1P = 280,
+  PCL_HW_LVDS_TB1N = 281,
+  PCL_HW_LVDS_TB1P = 282,
+  PCL_HW_LVDS_TC1N = 283,
+  PCL_HW_LVDS_TC1P = 284,
+  PCL_HW_LVDS_TCLK1N = 285,
+  PCL_HW_LVDS_TCLK1P = 286,
+  PCL_HW_LVDS_TD1N = 287,
+  PCL_HW_LVDS_TD1P = 288,
+  PCL_HW_MIPI2_TRACE_CLK = 289,
+  PCL_HW_MIPI2_TRACE_DATA0 = 290,
+  PCL_HW_MIPI2_TRACE_DATA1 = 291,
+  PCL_HW_MIPI2_TRACE_DATA2 = 292,
+  PCL_HW_MIPI2_TRACE_DATA3 = 293,
+  PCL_HW_MIPI_HSI_ACDATA = 294,
+  PCL_HW_MIPI_HSI_ACFLAG = 295,
+  PCL_HW_MIPI_HSI_ACREADY = 296,
+  PCL_HW_MIPI_HSI_CADATA = 297,
+  PCL_HW_MIPI_HSI_CAFLAG = 298,
+  PCL_HW_MIPI_HSI_CAREADY = 299,
+  PCL_HW_MIPI_TRACE_CLK = 300,
+  PCL_HW_MIPI_TRACE_DATA0 = 301,
+  PCL_HW_MIPI_TRACE_DATA1 = 302,
+  PCL_HW_MIPI_TRACE_DATA10 = 303,
+  PCL_HW_MIPI_TRACE_DATA11 = 304,
+  PCL_HW_MIPI_TRACE_DATA12 = 305,
+  PCL_HW_MIPI_TRACE_DATA13 = 306,
+  PCL_HW_MIPI_TRACE_DATA14 = 307,
+  PCL_HW_MIPI_TRACE_DATA15 = 308,
+  PCL_HW_MIPI_TRACE_DATA2 = 309,
+  PCL_HW_MIPI_TRACE_DATA3 = 310,
+  PCL_HW_MIPI_TRACE_DATA4 = 311,
+  PCL_HW_MIPI_TRACE_DATA5 = 312,
+  PCL_HW_MIPI_TRACE_DATA6 = 313,
+  PCL_HW_MIPI_TRACE_DATA7 = 314,
+  PCL_HW_MIPI_TRACE_DATA8 = 315,
+  PCL_HW_MIPI_TRACE_DATA9 = 316,
+  PCL_HW_NAND_ALE = 317,
+  PCL_HW_NAND_CLE = 318,
+  PCL_HW_NAND_CS0 = 319,
+  PCL_HW_NAND_CS1 = 320,
+  PCL_HW_NAND_DQS = 321,
+  PCL_HW_NAND_IO0 = 322,
+  PCL_HW_NAND_IO1 = 323,
+  PCL_HW_NAND_IO2 = 324,
+  PCL_HW_NAND_IO3 = 325,
+  PCL_HW_NAND_IO4 = 326,
+  PCL_HW_NAND_IO5 = 327,
+  PCL_HW_NAND_IO6 = 328,
+  PCL_HW_NAND_IO7 = 329,
+  PCL_HW_NAND_RDN = 330,
+  PCL_HW_NAND_RY_BY = 331,
+  PCL_HW_NAND_WP = 332,
+  PCL_HW_NAND_WRN = 333,
+  PCL_HW_PA_BIAS = 334,
+  PCL_HW_PA_RAMP = 335,
+  PCL_HW_PMU_CTRL_0 = 336,
+  PCL_HW_PMU_CTRL_1 = 337,
+  PCL_HW_PMU_CTRL_2 = 338,
+  PCL_HW_PMU_CTRL_3 = 339,
+  PCL_HW_PMU_SLEEP = 340,
+  PCL_HW_POS_FTA_FTR = 341,
+  PCL_HW_PWM0 = 342,
+  PCL_HW_PWM1 = 343,
+  PCL_HW_PWM3 = 344,
+  PCL_HW_REF_CLK_EN = 345,
+  PCL_HW_RESET_3GRF_N = 346,
+  PCL_HW_RTCK = 347,
+  PCL_HW_RXD_TESTMUX_ANA_IO0 = 348,
+  PCL_HW_RXD_TESTMUX_ANA_IO1 = 349,
+  PCL_HW_RXD_TESTMUX_ANA_IO2 = 350,
+  PCL_HW_RXD_TESTMUX_ANA_IO3 = 351,
+  PCL_HW_RXD_TESTMUX_ANA_IO4 = 352,
+  PCL_HW_RXD_TESTMUX_ANA_IO5 = 353,
+  PCL_HW_RXD_TESTMUX_ANA_IO6 = 354,
+  PCL_HW_RXD_TESTMUX_ANA_IO7 = 355,
+  PCL_HW_RXD_TESTMUX_ANA_IO8 = 356,
+  PCL_HW_RXD_TESTMUX_ANA_IO9 = 357,
+  PCL_HW_SDIO_CLK = 358,
+  PCL_HW_SDIO_CMD = 359,
+  PCL_HW_SDIO_DAT0 = 360,
+  PCL_HW_SDIO_DAT1 = 361,
+  PCL_HW_SDIO_DAT2 = 362,
+  PCL_HW_SDIO_DAT3 = 363,
+  PCL_HW_SDIO_RESET = 364,
+  PCL_HW_SDMMC_CARD_DETECT = 365,
+  PCL_HW_SDMMC_CLK = 366,
+  PCL_HW_SDMMC_CMD = 367,
+  PCL_HW_SDMMC_DAT0 = 368,
+  PCL_HW_SDMMC_DAT1 = 369,
+  PCL_HW_SDMMC_DAT2 = 370,
+  PCL_HW_SDMMC_DAT3 = 371,
+  PCL_HW_SDMMC_RESET = 372,
+  PCL_HW_SIGMON0 = 373,
+  PCL_HW_SIGMON1 = 374,
+  PCL_HW_SIGMON2 = 375,
+  PCL_HW_SIGMON3 = 376,
+  PCL_HW_SIGMON4 = 377,
+  PCL_HW_SPI_CLK = 378,
+  PCL_HW_SPI_DRW = 379,
+  PCL_HW_SPI_SS = 380,
+  PCL_HW_SYS_CLK_EN = 381,
+  PCL_HW_TCXO_REQ = 382,
+  PCL_HW_TDI = 383,
+  PCL_HW_TDO = 384,
+  PCL_HW_TESTSIG1 = 385,
+  PCL_HW_TESTSIG2 = 386,
+  PCL_HW_TESTSIG3 = 387,
+  PCL_HW_TESTSIG4 = 388,
+  PCL_HW_TESTSIG5 = 389,
+  PCL_HW_TEST_RXTXPATH0 = 390,
+  PCL_HW_TEST_RXTXPATH1 = 391,
+  PCL_HW_TEST_RXTXPATH10 = 392,
+  PCL_HW_TEST_RXTXPATH11 = 393,
+  PCL_HW_TEST_RXTXPATH12 = 394,
+  PCL_HW_TEST_RXTXPATH13 = 395,
+  PCL_HW_TEST_RXTXPATH14 = 396,
+  PCL_HW_TEST_RXTXPATH15 = 397,
+  PCL_HW_TEST_RXTXPATH2 = 398,
+  PCL_HW_TEST_RXTXPATH3 = 399,
+  PCL_HW_TEST_RXTXPATH4 = 400,
+  PCL_HW_TEST_RXTXPATH5 = 401,
+  PCL_HW_TEST_RXTXPATH6 = 402,
+  PCL_HW_TEST_RXTXPATH7 = 403,
+  PCL_HW_TEST_RXTXPATH8 = 404,
+  PCL_HW_TEST_RXTXPATH9 = 405,
+  PCL_HW_TEST_RXTXPATH_CLK = 406,
+  PCL_HW_TEST_RXTXPATH_CTL = 407,
+  PCL_HW_TRACE_ACDATA = 408,
+  PCL_HW_TRACE_ACFLAG = 409,
+  PCL_HW_TRACE_ACREADY = 410,
+  PCL_HW_TRACE_CADATA = 411,
+  PCL_HW_TRACE_CAFLAG = 412,
+  PCL_HW_TRACE_CAREADY = 413,
+  PCL_HW_T_OUT0 = 414,
+  PCL_HW_T_OUT1 = 415,
+  PCL_HW_T_OUT2 = 416,
+  PCL_HW_T_OUT4 = 417,
+  PCL_HW_T_OUT5 = 418,
+  PCL_HW_USIF1_CSI_N = 419,
+  PCL_HW_USIF1_CSO0 = 420,
+  PCL_HW_USIF1_CSO1 = 421,
+  PCL_HW_USIF1_CTS_N = 422,
+  PCL_HW_USIF1_RTS_N = 423,
+  PCL_HW_USIF1_RXD_MRST = 424,
+  PCL_HW_USIF1_SCLK = 425,
+  PCL_HW_USIF1_TXD_MTSR = 426,
+  PCL_HW_USIF2_CSI_N = 427,
+  PCL_HW_USIF2_CSO0 = 428,
+  PCL_HW_USIF2_CSO1 = 429,
+  PCL_HW_USIF2_CTS_N = 430,
+  PCL_HW_USIF2_RTS_N = 431,
+  PCL_HW_USIF2_RXD_MRST = 432,
+  PCL_HW_USIF2_SCLK = 433,
+  PCL_HW_USIF2_TXD_MTSR = 434,
+  PCL_HW_USIF5_RXD_MRST = 435,
+  PCL_HW_USIF5_TXD_MTSR = 436,
+  PCL_HW_USIRFSEQGP0_3G = 437,
+  PCL_HW_USIRFSEQGP1_3G = 438,
+  PCL_HW_USIRFSEQGP2_3G = 439,
+  PCL_HW_USIRFSEQGP3_3G = 440,
+  PCL_HW_USI_T_IN_TIME_EXT = 441,
+  PCL_HW_VSPI = 442,
+  PCL_HW_WLAN_ANA_TEST_IO0 = 443,
+  PCL_HW_WLAN_ANA_TEST_IO1 = 444,
+  PCL_HW_WLAN_ANA_TEST_IO2 = 445,
+  PCL_HW_WLAN_ANA_TEST_IO3 = 446,
+  PCL_HW_WLAN_ANA_TEST_IO4 = 447,
+  PCL_HW_WLAN_GPIO0 = 448,
+  PCL_HW_WLAN_GPIO1 = 449,
+  PCL_HW_WLAN_GPIO2 = 450,
+  PCL_HW_WLAN_GPIO3 = 451,
+  PCL_HW_WLAN_GPIO4 = 452,
+  PCL_HW_WLAN_GPIO5 = 453,
+  PCL_HW_WLAN_test_bus_1 = 454,
+  PCL_HW_WLAN_test_bus_10 = 455,
+  PCL_HW_WLAN_test_bus_11 = 456,
+  PCL_HW_WLAN_test_bus_12 = 457,
+  PCL_HW_WLAN_test_bus_2 = 458,
+  PCL_HW_WLAN_test_bus_3 = 459,
+  PCL_HW_WLAN_test_bus_4 = 460,
+  PCL_HW_WLAN_test_bus_5 = 461,
+  PCL_HW_WLAN_test_bus_6 = 462,
+  PCL_HW_WLAN_test_bus_7 = 463,
+  PCL_HW_WLAN_test_bus_8 = 464,
+  PCL_HW_WLAN_test_bus_9 = 465,
+  PCL_HW_WUP_DBB = 466,
+  PCL_HW_FUNCTIONS_LAST_ELEMENT   /* do not use, always last element, internally used to verify PCL setup */
+} T_PCL_HW_FUNCTIONS;
+
+#ifndef DOXYGEN_SKIP
+
+/** The total number of physical PCLs. */
+#define PCL_TOTAL_NUMBER_OF_PHYSICAL_PCL 106
+
+#define PCL_TOTAL_NUMBER_OF_PHYSICAL_PCL_AGOLD 45
+
+/** The total number of allocated PCLs. */
+#define PCL_TOTAL_NUMBER_OF_ALLOCATE_PCL 212
+
+/** The PCL cfg file generation time stamp. */
+#define PCL_GENERATION_TIME_STAMP 1427167017 /* Tue Mar 24 11:16:57 2015 */
+
+#endif /* DOXYGEN_SKIP */
+
+/** @} */
+
+
+#endif // _PCL_DRIVERIF_CFG_H
diff --git a/mhw_drv_src/storage/mmcsd/src/board_sf_3gx/mmcsd_cfg.h b/mhw_drv_src/storage/mmcsd/src/board_sf_3gx/mmcsd_cfg.h
new file mode 100644
index 0000000..ec40f8f
--- /dev/null
+++ b/mhw_drv_src/storage/mmcsd/src/board_sf_3gx/mmcsd_cfg.h
@@ -0,0 +1 @@
+#include "../board_sf_3gr/mmcsd_cfg.h"
diff --git a/mhw_drv_src/storage/mmcsd/src/board_sf_3gx/mmcsd_variant_def.h b/mhw_drv_src/storage/mmcsd/src/board_sf_3gx/mmcsd_variant_def.h
new file mode 100644
index 0000000..c3e3e70
--- /dev/null
+++ b/mhw_drv_src/storage/mmcsd/src/board_sf_3gx/mmcsd_variant_def.h
@@ -0,0 +1 @@
+#include "../board_sf_3gr/mmcsd_variant_def.h"
diff --git a/mhw_drv_src/storage/mmcsd/src/board_sf_3gx/sdmmc_reg.h b/mhw_drv_src/storage/mmcsd/src/board_sf_3gx/sdmmc_reg.h
new file mode 100644
index 0000000..48a063c
--- /dev/null
+++ b/mhw_drv_src/storage/mmcsd/src/board_sf_3gx/sdmmc_reg.h
@@ -0,0 +1 @@
+#include "../board_sf_3gr/sdmmc_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/debug_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/debug_reg.c
new file mode 100644
index 0000000..b55546b
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/debug_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/debug_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/debug_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/debug_reg.h
new file mode 100644
index 0000000..9eaf4a7
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/debug_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/debug_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/mtm_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/mtm_reg.c
new file mode 100644
index 0000000..19222dc
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/mtm_reg.c
@@ -0,0 +1 @@
+#include "../../sf_3g_soc/es_2_1/mtm_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/mtm_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/mtm_reg.h
new file mode 100644
index 0000000..59310c5
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/mtm_reg.h
@@ -0,0 +1 @@
+#include "../../sf_3g_soc/es_2_1/mtm_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/st_arbiter_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/st_arbiter_reg.h
new file mode 100644
index 0000000..7f4703a
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/st_arbiter_reg.h
@@ -0,0 +1 @@
+#include "../../sf_3g_soc/es_2_1/st_arbiter_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/trcDbgCFG.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/trcDbgCFG.h
new file mode 100644
index 0000000..033ff23
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_1_0/trcDbgCFG.h
@@ -0,0 +1 @@
+#include "../../sf_3g_soc/es_2_1/trcDbgCFG.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/mtm_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/mtm_reg.c
new file mode 100644
index 0000000..19222dc
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/mtm_reg.c
@@ -0,0 +1 @@
+#include "../../sf_3g_soc/es_2_1/mtm_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/mtm_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/mtm_reg.h
new file mode 100644
index 0000000..59310c5
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/mtm_reg.h
@@ -0,0 +1 @@
+#include "../../sf_3g_soc/es_2_1/mtm_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/st_arbiter_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/st_arbiter_reg.h
new file mode 100644
index 0000000..7f4703a
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/es_2_1/st_arbiter_reg.h
@@ -0,0 +1 @@
+#include "../../sf_3g_soc/es_2_1/st_arbiter_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/funnel_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/funnel_reg.c
new file mode 100644
index 0000000..54c991d
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/funnel_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/funnel_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/funnel_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/funnel_reg.h
new file mode 100644
index 0000000..d4a0bcb
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/funnel_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/funnel_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/mtm_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/mtm_reg.h
new file mode 100644
index 0000000..067c5dc
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/mtm_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/es_2_0/mtm_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/oct_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/oct_reg.h
new file mode 100644
index 0000000..070db88
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/oct_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/oct_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_arbiter_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_arbiter_reg.c
new file mode 100644
index 0000000..da69da4
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_arbiter_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_arbiter_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_arbiter_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_arbiter_reg.h
new file mode 100644
index 0000000..4aac679
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_arbiter_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_arbiter_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_mon_reg.c
new file mode 100644
index 0000000..071218d
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_mon_reg.h
new file mode 100644
index 0000000..ca72494
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc10_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc10_mon_reg.c
new file mode 100644
index 0000000..50009cc
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc10_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc10_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc10_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc10_mon_reg.h
new file mode 100644
index 0000000..477088f
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc10_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc10_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc11_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc11_mon_reg.c
new file mode 100644
index 0000000..abc04e0
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc11_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc11_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc11_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc11_mon_reg.h
new file mode 100644
index 0000000..4369fde
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc11_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc11_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc12_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc12_mon_reg.c
new file mode 100644
index 0000000..36bd39c
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc12_mon_reg.c
@@ -0,0 +1,57 @@
+/*  -------------------------------------------------------------------------
+    Copyright (C) 2013-2014 Intel Mobile Communications GmbH
+
+         Sec Class: Intel Confidential (IC)
+
+    All rights reserved.
+    -------------------------------------------------------------------------
+    This document contains proprietary information belonging to IMC.
+    Passing on and copying of this document,use and communication of its
+    contents is not permitted without prior written authorisation.
+    -------------------------------------------------------------------------
+    Revision Information:
+       $File name:  /mhw_drv_src/trace_debug/hal/xgold632/st_sbc12_mon_reg.c $
+    ------------------------------------------------------------------------- */
+//
+// =============================================================================
+// Revision Information :
+//   File name:   st_sbc12_mon_granite_reg.c
+//   Version:     ES1
+//   Date:        2015-04-20
+//   Responsible: 
+//   This file has been automatically generated from
+//       /vobs/granite-sys-prj/doc_vob/06_Design_Verification/04_Chip_development/19_Essence/xml/stsbc12mon.xml@@/main/4
+//
+//   essemplate command line:
+//       essemplate -i /vobs/granite-sys-prj/doc_vob/06_Design_Verification/04_Chip_development/19_Essence/xml/stsbc12mon.xml -t sg3hs_main.mako -o fwout/st_sbc12_mon_granite_reg.log -DREGRESSION=false -Dfileext=CC -DWORKAROUND=true -d ERROR -y DEBUG -DSEQFILTER=true -Dextpragma=true -Dclassified=confidential -x /opt/essence/2.1.17/../common -D forcemodulename=ST_SBC12MON -D arch=X86 -Dversion=ES1
+//   essemplate tool directory:
+//       /opt/essence/2.1.17/bin
+//
+//   Essence Version : 2.1.17
+//   Checksum 2D914FA0
+//
+// =============================================================================
+//
+// This file contains the register access for st_sbc12mon
+//
+// =============================================================================
+//
+
+
+/*This file is automatically generated. Do not edit!!*/
+
+#define __ST_SBC12MON_HW_REG_C__
+
+#include "st_sbc12_mon_reg.h"
+
+
+#if defined (__ICC) && ! defined (LINT)
+volatile struct _sSt_sbc12mon st_sbc12mon __attribute__((section("ST_SBC12MON_REG")));
+#elif defined (__arm) && ! defined (LINT)
+#pragma arm section zidata = "ST_SBC12MON_REG"
+volatile struct _sSt_sbc12mon st_sbc12mon;
+#pragma arm section zidata
+#else
+volatile struct _sSt_sbc12mon st_sbc12mon;
+#endif
+
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc12_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc12_mon_reg.h
new file mode 100644
index 0000000..b82afb4
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc12_mon_reg.h
@@ -0,0 +1,4522 @@
+/*  -------------------------------------------------------------------------
+    Copyright (C) 2013 Intel Mobile Communications GmbH
+
+         Sec Class: Intel Confidential (IC)
+
+    All rights reserved.
+    -------------------------------------------------------------------------
+    This document contains proprietary information belonging to IMC.
+    Passing on and copying of this document,use and communication of its
+    contents is not permitted without prior written authorisation.
+    -------------------------------------------------------------------------
+    Revision Information:
+       $File name:  /mhw_drv_src/trace_debug/reg_stmon/xgold632/st_sbc12_mon_reg.h $
+    ------------------------------------------------------------------------- */
+//
+// =============================================================================
+// Revision Information :
+//   File name:   st_sbc12_mon_granite_reg.h
+//   Version:     ES1
+//   Date:        2015-04-20
+//   Responsible: 
+//   This file has been automatically generated from
+//       /vobs/granite-sys-prj/doc_vob/06_Design_Verification/04_Chip_development/19_Essence/xml/stsbc12mon.xml@@/main/4
+//
+//   essemplate command line:
+//       essemplate -i /vobs/granite-sys-prj/doc_vob/06_Design_Verification/04_Chip_development/19_Essence/xml/stsbc12mon.xml -t sg3hs_main.mako -o fwout/st_sbc12_mon_granite_reg.log -DREGRESSION=false -Dfileext=CC -DWORKAROUND=true -d ERROR -y DEBUG -DSEQFILTER=true -Dextpragma=true -Dclassified=confidential -x /opt/essence/2.1.17/../common -D forcemodulename=ST_SBC12MON -D arch=X86 -Dversion=ES1
+//   essemplate tool directory:
+//       /opt/essence/2.1.17/bin
+//
+//   Essence Version : 2.1.17
+//   Checksum 2D914FA0
+//
+// =============================================================================
+//
+// This file contains the register access for st_sbc12mon
+//
+// =============================================================================
+//
+
+
+/*This file is automatically generated. Do not edit!!*/
+/*lint -e46 -e528 */
+
+#ifndef __ST_SBC12MON_HW_REG_H__
+#define __ST_SBC12MON_HW_REG_H__
+
+#include<st_mon_common_def.h>
+#ifdef ST_SBC12MON_REG_INLINE_DISABLED
+  #undef __HWREG_INLINE__
+  #define __HWREG_INLINE__ /*no inline*/
+#elif !defined(__HWREG_INLINE__)
+  #ifdef __GNUC__
+    #define __HWREG_INLINE__ static __inline
+  #else
+    #define __HWREG_INLINE__ static __forceinline
+  #endif
+#endif
+
+/*****************************************************************************/ 
+/* FUNCTION PROTOTYPES needed by include file st_sbc12_mon_granite_reg.h     */ 
+/*                                                                           */
+/* Example code follows                                                      */
+/*                                                                           */
+/*****************************************************************************/ 
+/* Function:... St_sbc12mon_hwreg_assert                                        */
+/* Description: assert function, which is called by register access library  */
+/* functions.                                                                */
+/*****************************************************************************/ 
+
+/*********************** Example code start
+
+void St_sbc12mon_hwreg_assert(void)
+{
+  st_sbc12mon_error(ST_SBC12MON_ERROR_REG_IDX_OUT_OF_RANGE, __LINE__, __FILE__);
+}
+
+************************ Example code end */
+
+/*****************************************************************************/ 
+/* Function:... st_sbc12mon_error                      */
+/* Description: causes a trap with the trap number error_code.               */
+/*****************************************************************************/ 
+
+/*********************** Example code start
+
+void st_sbc12mon_error(T_ST_SBC12MON_ERROR error_code, U32 line, S8* filename)
+{
+  U16 size;
+
+  if (error_code >= sizeof(st_sbc12mon_error_name)/sizeof(char*))
+  {
+    size = strlen(st_sbc12mon_error_name[0]);
+    trap_generate_sw_trap((U16)error_code, size + 1, (void*) st_sbc12mon_error_name[0], line, filename );
+  }
+
+  st_sbc12mon.error_code = error_code;
+  size = strlen(st_sbc12mon_error_name[error_code]);
+  trap_generate_sw_trap((U16)error_code, size + 1, (void*) st_sbc12mon_error_name[error_code], line, filename );
+}
+
+************************ Example code end */
+
+/*****************************************************************************/ 
+
+void St_sbc12mon_hwreg_assert(void);
+
+
+typedef struct _sSt_sbc12mon sSt_sbc12mon;
+
+
+#if defined (__arm) && ! defined (LINT)
+#pragma arm section zidata = "ST_SBC12MON_REG"
+extern volatile struct _sSt_sbc12mon st_sbc12mon;
+#pragma arm section zidata
+#else
+extern volatile struct _sSt_sbc12mon st_sbc12mon;
+#endif
+
+
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_ID(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register ID */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_ID_REV(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element REV of register ID */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_ID_MOD32(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MOD32 of register ID */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_ID_MOD(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MOD of register ID */
+
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register CLC */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_CLC(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register CLC */
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_DISR(volatile sSt_sbc12mon *_st_sbc12mon_, eCLC_DISR value); /**< Set element DISR of register CLC */
+__HWREG_INLINE__ eCLC_DISR getSt_sbc12mon_CLC_DISR(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DISR of register CLC */
+__HWREG_INLINE__ eCLC_DISS getSt_sbc12mon_CLC_DISS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DISS of register CLC */
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_SPEN(volatile sSt_sbc12mon *_st_sbc12mon_, eCLC_SPEN value); /**< Set element SPEN of register CLC */
+__HWREG_INLINE__ eCLC_SPEN getSt_sbc12mon_CLC_SPEN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SPEN of register CLC */
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_EDIS(volatile sSt_sbc12mon *_st_sbc12mon_, eCLC_EDIS value); /**< Set element EDIS of register CLC */
+__HWREG_INLINE__ eCLC_EDIS getSt_sbc12mon_CLC_EDIS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element EDIS of register CLC */
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_SBWE(volatile sSt_sbc12mon *_st_sbc12mon_, eCLC_SBWE value); /**< Set element SBWE of register CLC */
+__HWREG_INLINE__ eCLC_SBWE getSt_sbc12mon_CLC_SBWE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SBWE of register CLC */
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_FSOE(volatile sSt_sbc12mon *_st_sbc12mon_, eCLC_FSOE value); /**< Set element FSOE of register CLC */
+__HWREG_INLINE__ eCLC_FSOE getSt_sbc12mon_CLC_FSOE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element FSOE of register CLC */
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_RES1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element RES1 of register CLC */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_CLC_RES1(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element RES1 of register CLC */
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_RMC(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element RMC of register CLC */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_CLC_RMC(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element RMC of register CLC */
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_ORMC(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element ORMC of register CLC */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_CLC_ORMC(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element ORMC of register CLC */
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_RES2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element RES2 of register CLC */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_CLC_RES2(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element RES2 of register CLC */
+
+
+
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_HWAPIVERS(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register HWAPIVERS */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_HWAPIVERS_CHKSUM(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element CHKSUM of register HWAPIVERS */
+
+
+/** @brief MON_SBC12_signals0 register description at address offset 0x1c
+  *
+  *  SBC12 Signal Selection
+  */
+typedef struct
+{
+    HWREG_U32 SIG_0 :8; /**<  */
+    HWREG_U32 SIG_1 :8; /**<  */
+    HWREG_U32 SIG_2 :8; /**<  */
+    HWREG_U32 SIG_3 :8; /**<  */
+} sMON_SBC12_signals0Structure;
+
+
+/** @brief MON_SBC12_SIGNALS0 Bitfield widths 
+*/
+#define lenMON_SBC12_SIGNALS0_SIG_0 8
+#define lenMON_SBC12_SIGNALS0_SIG_1 8
+#define lenMON_SBC12_SIGNALS0_SIG_2 8
+#define lenMON_SBC12_SIGNALS0_SIG_3 8
+
+typedef enum
+{
+    MON_SBC12_SIGNALS0_LSB_SIG_0 = 0,
+    MON_SBC12_SIGNALS0_LSB_SIG_1 = 8,
+    MON_SBC12_SIGNALS0_LSB_SIG_2 = 16,
+    MON_SBC12_SIGNALS0_LSB_SIG_3 = 24
+} eMON_SBC12_signals0Lsb;
+
+typedef union
+{
+    HWREG_U32 MON_SBC12_signals0_Content;
+    sMON_SBC12_signals0Structure MON_SBC12_signals0_Structure;
+} uMON_SBC12_signals0;
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals0(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register MON_SBC12_signals0 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals0(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register MON_SBC12_signals0 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals0_SIG_0(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_0 of register MON_SBC12_signals0 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals0_SIG_0(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_0 of register MON_SBC12_signals0 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals0_SIG_1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_1 of register MON_SBC12_signals0 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals0_SIG_1(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_1 of register MON_SBC12_signals0 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals0_SIG_2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_2 of register MON_SBC12_signals0 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals0_SIG_2(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_2 of register MON_SBC12_signals0 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals0_SIG_3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_3 of register MON_SBC12_signals0 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals0_SIG_3(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_3 of register MON_SBC12_signals0 */
+
+
+/** @brief MON_SBC12_signals1 register description at address offset 0x20
+  *
+  *  SBC12 Signal Selection
+  */
+typedef struct
+{
+    HWREG_U32 SIG_4 :8; /**<  */
+    HWREG_U32 SIG_5 :8; /**<  */
+    HWREG_U32 SIG_6 :8; /**<  */
+    HWREG_U32 SIG_7 :8; /**<  */
+} sMON_SBC12_signals1Structure;
+
+
+/** @brief MON_SBC12_SIGNALS1 Bitfield widths 
+*/
+#define lenMON_SBC12_SIGNALS1_SIG_4 8
+#define lenMON_SBC12_SIGNALS1_SIG_5 8
+#define lenMON_SBC12_SIGNALS1_SIG_6 8
+#define lenMON_SBC12_SIGNALS1_SIG_7 8
+
+typedef enum
+{
+    MON_SBC12_SIGNALS1_LSB_SIG_4 = 0,
+    MON_SBC12_SIGNALS1_LSB_SIG_5 = 8,
+    MON_SBC12_SIGNALS1_LSB_SIG_6 = 16,
+    MON_SBC12_SIGNALS1_LSB_SIG_7 = 24
+} eMON_SBC12_signals1Lsb;
+
+typedef union
+{
+    HWREG_U32 MON_SBC12_signals1_Content;
+    sMON_SBC12_signals1Structure MON_SBC12_signals1_Structure;
+} uMON_SBC12_signals1;
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register MON_SBC12_signals1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals1(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register MON_SBC12_signals1 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals1_SIG_4(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_4 of register MON_SBC12_signals1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals1_SIG_4(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_4 of register MON_SBC12_signals1 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals1_SIG_5(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_5 of register MON_SBC12_signals1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals1_SIG_5(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_5 of register MON_SBC12_signals1 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals1_SIG_6(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_6 of register MON_SBC12_signals1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals1_SIG_6(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_6 of register MON_SBC12_signals1 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals1_SIG_7(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_7 of register MON_SBC12_signals1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals1_SIG_7(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_7 of register MON_SBC12_signals1 */
+
+
+/** @brief MON_SBC12_signals2 register description at address offset 0x24
+  *
+  *  SBC12 Signal Selection
+  */
+typedef struct
+{
+    HWREG_U32 SIG_8 :8; /**<  */
+    HWREG_U32 SIG_9 :8; /**<  */
+    HWREG_U32 SIG_10 :8; /**<  */
+    HWREG_U32 SIG_11 :8; /**<  */
+} sMON_SBC12_signals2Structure;
+
+
+/** @brief MON_SBC12_SIGNALS2 Bitfield widths 
+*/
+#define lenMON_SBC12_SIGNALS2_SIG_8 8
+#define lenMON_SBC12_SIGNALS2_SIG_9 8
+#define lenMON_SBC12_SIGNALS2_SIG_10 8
+#define lenMON_SBC12_SIGNALS2_SIG_11 8
+
+typedef enum
+{
+    MON_SBC12_SIGNALS2_LSB_SIG_8 = 0,
+    MON_SBC12_SIGNALS2_LSB_SIG_9 = 8,
+    MON_SBC12_SIGNALS2_LSB_SIG_10 = 16,
+    MON_SBC12_SIGNALS2_LSB_SIG_11 = 24
+} eMON_SBC12_signals2Lsb;
+
+typedef union
+{
+    HWREG_U32 MON_SBC12_signals2_Content;
+    sMON_SBC12_signals2Structure MON_SBC12_signals2_Structure;
+} uMON_SBC12_signals2;
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register MON_SBC12_signals2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals2(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register MON_SBC12_signals2 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals2_SIG_8(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_8 of register MON_SBC12_signals2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals2_SIG_8(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_8 of register MON_SBC12_signals2 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals2_SIG_9(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_9 of register MON_SBC12_signals2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals2_SIG_9(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_9 of register MON_SBC12_signals2 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals2_SIG_10(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_10 of register MON_SBC12_signals2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals2_SIG_10(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_10 of register MON_SBC12_signals2 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals2_SIG_11(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_11 of register MON_SBC12_signals2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals2_SIG_11(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_11 of register MON_SBC12_signals2 */
+
+
+/** @brief MON_SBC12_signals3 register description at address offset 0x28
+  *
+  *  SBC12 Signal Selection
+  */
+typedef struct
+{
+    HWREG_U32 SIG_12 :8; /**<  */
+    HWREG_U32 SIG_13 :8; /**<  */
+    HWREG_U32 SIG_14 :8; /**<  */
+    HWREG_U32 SIG_15 :8; /**<  */
+} sMON_SBC12_signals3Structure;
+
+
+/** @brief MON_SBC12_SIGNALS3 Bitfield widths 
+*/
+#define lenMON_SBC12_SIGNALS3_SIG_12 8
+#define lenMON_SBC12_SIGNALS3_SIG_13 8
+#define lenMON_SBC12_SIGNALS3_SIG_14 8
+#define lenMON_SBC12_SIGNALS3_SIG_15 8
+
+typedef enum
+{
+    MON_SBC12_SIGNALS3_LSB_SIG_12 = 0,
+    MON_SBC12_SIGNALS3_LSB_SIG_13 = 8,
+    MON_SBC12_SIGNALS3_LSB_SIG_14 = 16,
+    MON_SBC12_SIGNALS3_LSB_SIG_15 = 24
+} eMON_SBC12_signals3Lsb;
+
+typedef union
+{
+    HWREG_U32 MON_SBC12_signals3_Content;
+    sMON_SBC12_signals3Structure MON_SBC12_signals3_Structure;
+} uMON_SBC12_signals3;
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register MON_SBC12_signals3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals3(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register MON_SBC12_signals3 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals3_SIG_12(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_12 of register MON_SBC12_signals3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals3_SIG_12(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_12 of register MON_SBC12_signals3 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals3_SIG_13(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_13 of register MON_SBC12_signals3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals3_SIG_13(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_13 of register MON_SBC12_signals3 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals3_SIG_14(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_14 of register MON_SBC12_signals3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals3_SIG_14(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_14 of register MON_SBC12_signals3 */
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals3_SIG_15(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SIG_15 of register MON_SBC12_signals3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals3_SIG_15(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SIG_15 of register MON_SBC12_signals3 */
+
+
+/** @brief sm1_sel_0 register description at address offset 0x2c
+  *
+  *  SBC12 sub-mux1 selection 0
+  */
+typedef struct
+{
+    HWREG_U32 signal_sel0 :8; /**<  */
+    HWREG_U32 signal_sel1 :8; /**<  */
+    HWREG_U32 signal_sel2 :8; /**<  */
+    HWREG_U32 signal_sel3 :8; /**<  */
+} ssm1_sel_0Structure;
+
+
+/** @brief SM1_SEL_0 Bitfield widths 
+*/
+#define lenSM1_SEL_0_SIGNAL_SEL0 8
+#define lenSM1_SEL_0_SIGNAL_SEL1 8
+#define lenSM1_SEL_0_SIGNAL_SEL2 8
+#define lenSM1_SEL_0_SIGNAL_SEL3 8
+
+typedef enum
+{
+    SM1_SEL_0_LSB_SIGNAL_SEL0 = 0,
+    SM1_SEL_0_LSB_SIGNAL_SEL1 = 8,
+    SM1_SEL_0_LSB_SIGNAL_SEL2 = 16,
+    SM1_SEL_0_LSB_SIGNAL_SEL3 = 24
+} esm1_sel_0Lsb;
+
+typedef union
+{
+    HWREG_U32 sm1_sel_0_Content;
+    ssm1_sel_0Structure sm1_sel_0_Structure;
+} usm1_sel_0;
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_0(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register sm1_sel_0 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_0(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register sm1_sel_0 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_0_signal_sel0(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel0 of register sm1_sel_0 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_0_signal_sel0(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel0 of register sm1_sel_0 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_0_signal_sel1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel1 of register sm1_sel_0 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_0_signal_sel1(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel1 of register sm1_sel_0 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_0_signal_sel2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel2 of register sm1_sel_0 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_0_signal_sel2(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel2 of register sm1_sel_0 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_0_signal_sel3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel3 of register sm1_sel_0 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_0_signal_sel3(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel3 of register sm1_sel_0 */
+
+
+/** @brief sm1_sel_1 register description at address offset 0x30
+  *
+  *  SBC12 sub-mux1 selection 1
+  */
+typedef struct
+{
+    HWREG_U32 signal_sel4 :8; /**<  */
+    HWREG_U32 signal_sel5 :8; /**<  */
+    HWREG_U32 signal_sel6 :8; /**<  */
+    HWREG_U32 signal_sel7 :8; /**<  */
+} ssm1_sel_1Structure;
+
+
+/** @brief SM1_SEL_1 Bitfield widths 
+*/
+#define lenSM1_SEL_1_SIGNAL_SEL4 8
+#define lenSM1_SEL_1_SIGNAL_SEL5 8
+#define lenSM1_SEL_1_SIGNAL_SEL6 8
+#define lenSM1_SEL_1_SIGNAL_SEL7 8
+
+typedef enum
+{
+    SM1_SEL_1_LSB_SIGNAL_SEL4 = 0,
+    SM1_SEL_1_LSB_SIGNAL_SEL5 = 8,
+    SM1_SEL_1_LSB_SIGNAL_SEL6 = 16,
+    SM1_SEL_1_LSB_SIGNAL_SEL7 = 24
+} esm1_sel_1Lsb;
+
+typedef union
+{
+    HWREG_U32 sm1_sel_1_Content;
+    ssm1_sel_1Structure sm1_sel_1_Structure;
+} usm1_sel_1;
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register sm1_sel_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_1(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register sm1_sel_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_1_signal_sel4(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel4 of register sm1_sel_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_1_signal_sel4(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel4 of register sm1_sel_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_1_signal_sel5(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel5 of register sm1_sel_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_1_signal_sel5(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel5 of register sm1_sel_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_1_signal_sel6(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel6 of register sm1_sel_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_1_signal_sel6(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel6 of register sm1_sel_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_1_signal_sel7(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel7 of register sm1_sel_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_1_signal_sel7(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel7 of register sm1_sel_1 */
+
+
+/** @brief sm1_sel_2 register description at address offset 0x34
+  *
+  *  SBC12 sub-mux1 selection 2
+  */
+typedef struct
+{
+    HWREG_U32 signal_sel8 :8; /**<  */
+    HWREG_U32 signal_sel9 :8; /**<  */
+    HWREG_U32 signal_sel10 :8; /**<  */
+    HWREG_U32 signal_sel11 :8; /**<  */
+} ssm1_sel_2Structure;
+
+
+/** @brief SM1_SEL_2 Bitfield widths 
+*/
+#define lenSM1_SEL_2_SIGNAL_SEL8 8
+#define lenSM1_SEL_2_SIGNAL_SEL9 8
+#define lenSM1_SEL_2_SIGNAL_SEL10 8
+#define lenSM1_SEL_2_SIGNAL_SEL11 8
+
+typedef enum
+{
+    SM1_SEL_2_LSB_SIGNAL_SEL8 = 0,
+    SM1_SEL_2_LSB_SIGNAL_SEL9 = 8,
+    SM1_SEL_2_LSB_SIGNAL_SEL10 = 16,
+    SM1_SEL_2_LSB_SIGNAL_SEL11 = 24
+} esm1_sel_2Lsb;
+
+typedef union
+{
+    HWREG_U32 sm1_sel_2_Content;
+    ssm1_sel_2Structure sm1_sel_2_Structure;
+} usm1_sel_2;
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register sm1_sel_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_2(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register sm1_sel_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_2_signal_sel8(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel8 of register sm1_sel_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_2_signal_sel8(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel8 of register sm1_sel_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_2_signal_sel9(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel9 of register sm1_sel_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_2_signal_sel9(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel9 of register sm1_sel_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_2_signal_sel10(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel10 of register sm1_sel_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_2_signal_sel10(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel10 of register sm1_sel_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_2_signal_sel11(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel11 of register sm1_sel_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_2_signal_sel11(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel11 of register sm1_sel_2 */
+
+
+/** @brief sm1_sel_3 register description at address offset 0x38
+  *
+  *  SBC12 sub-mux1  selection 3
+  */
+typedef struct
+{
+    HWREG_U32 signal_sel12 :8; /**<  */
+    HWREG_U32 signal_sel13 :8; /**<  */
+    HWREG_U32 signal_sel14 :8; /**<  */
+    HWREG_U32 signal_sel15 :8; /**<  */
+} ssm1_sel_3Structure;
+
+
+/** @brief SM1_SEL_3 Bitfield widths 
+*/
+#define lenSM1_SEL_3_SIGNAL_SEL12 8
+#define lenSM1_SEL_3_SIGNAL_SEL13 8
+#define lenSM1_SEL_3_SIGNAL_SEL14 8
+#define lenSM1_SEL_3_SIGNAL_SEL15 8
+
+typedef enum
+{
+    SM1_SEL_3_LSB_SIGNAL_SEL12 = 0,
+    SM1_SEL_3_LSB_SIGNAL_SEL13 = 8,
+    SM1_SEL_3_LSB_SIGNAL_SEL14 = 16,
+    SM1_SEL_3_LSB_SIGNAL_SEL15 = 24
+} esm1_sel_3Lsb;
+
+typedef union
+{
+    HWREG_U32 sm1_sel_3_Content;
+    ssm1_sel_3Structure sm1_sel_3_Structure;
+} usm1_sel_3;
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register sm1_sel_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_3(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register sm1_sel_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_3_signal_sel12(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel12 of register sm1_sel_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_3_signal_sel12(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel12 of register sm1_sel_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_3_signal_sel13(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel13 of register sm1_sel_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_3_signal_sel13(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel13 of register sm1_sel_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_3_signal_sel14(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel14 of register sm1_sel_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_3_signal_sel14(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel14 of register sm1_sel_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_3_signal_sel15(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element signal_sel15 of register sm1_sel_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_3_signal_sel15(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element signal_sel15 of register sm1_sel_3 */
+
+
+/** @brief eMMC_TAP_CTL register description at address offset 0x100
+  *
+  *  eMMC_TAP_CTL
+  */
+typedef struct
+{
+    HWREG_U32 IP_TAP_EN :1; /**<  */
+    HWREG_U32 IP_TAP_CHGWIN :1; /**<  */
+    const HWREG_U32 :2; /**< Unused bitfield */
+    HWREG_U32 IP_DELAY_CTRL :3; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 IP_TAP_DELAY :5; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 OP_TAP_EN :1; /**<  */
+    HWREG_U32 OP_DELAY_CTRL :3; /**<  */
+    HWREG_U32 OP_TAP_DELAY :4; /**<  */
+    const HWREG_U32 :8; /**< Unused bitfield */
+} seMMC_TAP_CTLStructure;
+
+
+/** @brief EMMC_TAP_CTL Bitfield widths 
+*/
+#define lenEMMC_TAP_CTL_IP_TAP_EN 1
+#define lenEMMC_TAP_CTL_IP_TAP_CHGWIN 1
+#define lenEMMC_TAP_CTL_IP_DELAY_CTRL 3
+#define lenEMMC_TAP_CTL_IP_TAP_DELAY 5
+#define lenEMMC_TAP_CTL_OP_TAP_EN 1
+#define lenEMMC_TAP_CTL_OP_DELAY_CTRL 3
+#define lenEMMC_TAP_CTL_OP_TAP_DELAY 4
+
+typedef enum
+{
+    EMMC_TAP_CTL_LSB_IP_TAP_EN = 0,
+    EMMC_TAP_CTL_LSB_IP_TAP_CHGWIN = 1,
+    EMMC_TAP_CTL_LSB_IP_DELAY_CTRL = 4,
+    EMMC_TAP_CTL_LSB_IP_TAP_DELAY = 8,
+    EMMC_TAP_CTL_LSB_OP_TAP_EN = 16,
+    EMMC_TAP_CTL_LSB_OP_DELAY_CTRL = 17,
+    EMMC_TAP_CTL_LSB_OP_TAP_DELAY = 20
+} eeMMC_TAP_CTLLsb;
+
+typedef union
+{
+    HWREG_U32 eMMC_TAP_CTL_Content;
+    seMMC_TAP_CTLStructure eMMC_TAP_CTL_Structure;
+} ueMMC_TAP_CTL;
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register eMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register eMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_TAP_EN of register eMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_TAP_EN of register eMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_TAP_CHGWIN of register eMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_TAP_CHGWIN of register eMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_DELAY_CTRL of register eMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_DELAY_CTRL of register eMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_TAP_DELAY of register eMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_TAP_DELAY of register eMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element OP_TAP_EN of register eMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element OP_TAP_EN of register eMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element OP_DELAY_CTRL of register eMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element OP_DELAY_CTRL of register eMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element OP_TAP_DELAY of register eMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element OP_TAP_DELAY of register eMMC_TAP_CTL */
+
+
+/** @brief eMMC_CORECFG_1 register description at address offset 0x104
+  *
+  *  eMMC_CORECFG_1
+  */
+typedef struct
+{
+    HWREG_U32 TUNING_COUNT :6; /**<  */
+    HWREG_U32 MAX_BLOCK_LENGTH :2; /**<  */
+    HWREG_U32 TIMEOUT_CLK_FREQ :6; /**<  */
+    HWREG_U32 TIMEOUT_CLK_UNIT :1; /**<  */
+    HWREG_U32 ASYNC_WAKEUP_EN :1; /**<  */
+    HWREG_U32 BASE_CLK_FREQ :8; /**<  */
+    HWREG_U32 SUPPORT_8_BITS :1; /**<  */
+    HWREG_U32 ADMA2_SUPPORT :1; /**<  */
+    HWREG_U32 HIGH_SPEED_SUPPORT :1; /**<  */
+    HWREG_U32 SDMA_SUPPORT :1; /**<  */
+    HWREG_U32 SUPPRESS_SUPPORT :1; /**<  */
+    HWREG_U32 SUPPORT_3P3_VOLTS :1; /**<  */
+    HWREG_U32 SUPPORT_3P0_VOLTS :1; /**<  */
+    HWREG_U32 SUPPORT_1P8_VOLTS :1; /**<  */
+} seMMC_CORECFG_1Structure;
+
+
+/** @brief EMMC_CORECFG_1 Bitfield widths 
+*/
+#define lenEMMC_CORECFG_1_TUNING_COUNT 6
+#define lenEMMC_CORECFG_1_MAX_BLOCK_LENGTH 2
+#define lenEMMC_CORECFG_1_TIMEOUT_CLK_FREQ 6
+#define lenEMMC_CORECFG_1_TIMEOUT_CLK_UNIT 1
+#define lenEMMC_CORECFG_1_ASYNC_WAKEUP_EN 1
+#define lenEMMC_CORECFG_1_BASE_CLK_FREQ 8
+#define lenEMMC_CORECFG_1_SUPPORT_8_BITS 1
+#define lenEMMC_CORECFG_1_ADMA2_SUPPORT 1
+#define lenEMMC_CORECFG_1_HIGH_SPEED_SUPPORT 1
+#define lenEMMC_CORECFG_1_SDMA_SUPPORT 1
+#define lenEMMC_CORECFG_1_SUPPRESS_SUPPORT 1
+#define lenEMMC_CORECFG_1_SUPPORT_3P3_VOLTS 1
+#define lenEMMC_CORECFG_1_SUPPORT_3P0_VOLTS 1
+#define lenEMMC_CORECFG_1_SUPPORT_1P8_VOLTS 1
+
+typedef enum
+{
+    EMMC_CORECFG_1_LSB_TUNING_COUNT = 0,
+    EMMC_CORECFG_1_LSB_MAX_BLOCK_LENGTH = 6,
+    EMMC_CORECFG_1_LSB_TIMEOUT_CLK_FREQ = 8,
+    EMMC_CORECFG_1_LSB_TIMEOUT_CLK_UNIT = 14,
+    EMMC_CORECFG_1_LSB_ASYNC_WAKEUP_EN = 15,
+    EMMC_CORECFG_1_LSB_BASE_CLK_FREQ = 16,
+    EMMC_CORECFG_1_LSB_SUPPORT_8_BITS = 24,
+    EMMC_CORECFG_1_LSB_ADMA2_SUPPORT = 25,
+    EMMC_CORECFG_1_LSB_HIGH_SPEED_SUPPORT = 26,
+    EMMC_CORECFG_1_LSB_SDMA_SUPPORT = 27,
+    EMMC_CORECFG_1_LSB_SUPPRESS_SUPPORT = 28,
+    EMMC_CORECFG_1_LSB_SUPPORT_3P3_VOLTS = 29,
+    EMMC_CORECFG_1_LSB_SUPPORT_3P0_VOLTS = 30,
+    EMMC_CORECFG_1_LSB_SUPPORT_1P8_VOLTS = 31
+} eeMMC_CORECFG_1Lsb;
+
+typedef union
+{
+    HWREG_U32 eMMC_CORECFG_1_Content;
+    seMMC_CORECFG_1Structure eMMC_CORECFG_1_Structure;
+} ueMMC_CORECFG_1;
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TUNING_COUNT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TUNING_COUNT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_BLOCK_LENGTH of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_BLOCK_LENGTH of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TIMEOUT_CLK_FREQ of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TIMEOUT_CLK_FREQ of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TIMEOUT_CLK_UNIT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TIMEOUT_CLK_UNIT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element ASYNC_WAKEUP_EN of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element ASYNC_WAKEUP_EN of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element BASE_CLK_FREQ of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element BASE_CLK_FREQ of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_8_BITS of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_8_BITS of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element ADMA2_SUPPORT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element ADMA2_SUPPORT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element HIGH_SPEED_SUPPORT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element HIGH_SPEED_SUPPORT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDMA_SUPPORT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDMA_SUPPORT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPRESS_SUPPORT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPRESS_SUPPORT of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_3P3_VOLTS of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_3P3_VOLTS of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_3P0_VOLTS of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_3P0_VOLTS of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_1P8_VOLTS of register eMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_1P8_VOLTS of register eMMC_CORECFG_1 */
+
+
+/** @brief eMMC_CORECFG_2 register description at address offset 0x108
+  *
+  *  eMMC_CORECFG_2
+  */
+typedef struct
+{
+    HWREG_U32 SUPPORT_64_BITS :1; /**<  */
+    HWREG_U32 ASYNC_INT_SUPPORT :1; /**<  */
+    HWREG_U32 SLOT_TYPE :2; /**<  */
+    HWREG_U32 SDR_50_SUPPORT :1; /**<  */
+    HWREG_U32 SDR_104_SUPPORT :1; /**<  */
+    HWREG_U32 DDR_50_SUPPORT :1; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 RETUNING_TIMER_COUNT :4; /**<  */
+    HWREG_U32 RETUNING_MODE :2; /**<  */
+    HWREG_U32 TUNING_FOR_SDR50 :1; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 A_DRIVER_SUPPORT :1; /**<  */
+    HWREG_U32 C_DRIVER_SUPPORT :1; /**<  */
+    HWREG_U32 D_DRIVER_SUPPORT :1; /**<  */
+    HWREG_U32 SPI_SUPPORT :1; /**<  */
+    HWREG_U32 SPI_BLOCK_MODE :1; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 CLOCK_MULTIPLIER :8; /**<  */
+} seMMC_CORECFG_2Structure;
+
+
+/** @brief EMMC_CORECFG_2 Bitfield widths 
+*/
+#define lenEMMC_CORECFG_2_SUPPORT_64_BITS 1
+#define lenEMMC_CORECFG_2_ASYNC_INT_SUPPORT 1
+#define lenEMMC_CORECFG_2_SLOT_TYPE 2
+#define lenEMMC_CORECFG_2_SDR_50_SUPPORT 1
+#define lenEMMC_CORECFG_2_SDR_104_SUPPORT 1
+#define lenEMMC_CORECFG_2_DDR_50_SUPPORT 1
+#define lenEMMC_CORECFG_2_RETUNING_TIMER_COUNT 4
+#define lenEMMC_CORECFG_2_RETUNING_MODE 2
+#define lenEMMC_CORECFG_2_TUNING_FOR_SDR50 1
+#define lenEMMC_CORECFG_2_A_DRIVER_SUPPORT 1
+#define lenEMMC_CORECFG_2_C_DRIVER_SUPPORT 1
+#define lenEMMC_CORECFG_2_D_DRIVER_SUPPORT 1
+#define lenEMMC_CORECFG_2_SPI_SUPPORT 1
+#define lenEMMC_CORECFG_2_SPI_BLOCK_MODE 1
+#define lenEMMC_CORECFG_2_CLOCK_MULTIPLIER 8
+
+typedef enum
+{
+    EMMC_CORECFG_2_LSB_SUPPORT_64_BITS = 0,
+    EMMC_CORECFG_2_LSB_ASYNC_INT_SUPPORT = 1,
+    EMMC_CORECFG_2_LSB_SLOT_TYPE = 2,
+    EMMC_CORECFG_2_LSB_SDR_50_SUPPORT = 4,
+    EMMC_CORECFG_2_LSB_SDR_104_SUPPORT = 5,
+    EMMC_CORECFG_2_LSB_DDR_50_SUPPORT = 6,
+    EMMC_CORECFG_2_LSB_RETUNING_TIMER_COUNT = 8,
+    EMMC_CORECFG_2_LSB_RETUNING_MODE = 12,
+    EMMC_CORECFG_2_LSB_TUNING_FOR_SDR50 = 14,
+    EMMC_CORECFG_2_LSB_A_DRIVER_SUPPORT = 16,
+    EMMC_CORECFG_2_LSB_C_DRIVER_SUPPORT = 17,
+    EMMC_CORECFG_2_LSB_D_DRIVER_SUPPORT = 18,
+    EMMC_CORECFG_2_LSB_SPI_SUPPORT = 19,
+    EMMC_CORECFG_2_LSB_SPI_BLOCK_MODE = 20,
+    EMMC_CORECFG_2_LSB_CLOCK_MULTIPLIER = 24
+} eeMMC_CORECFG_2Lsb;
+
+typedef union
+{
+    HWREG_U32 eMMC_CORECFG_2_Content;
+    seMMC_CORECFG_2Structure eMMC_CORECFG_2_Structure;
+} ueMMC_CORECFG_2;
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_64_BITS of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_64_BITS of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element ASYNC_INT_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element ASYNC_INT_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SLOT_TYPE of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SLOT_TYPE of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR_50_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR_50_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR_104_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR_104_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element DDR_50_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DDR_50_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element RETUNING_TIMER_COUNT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element RETUNING_TIMER_COUNT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element RETUNING_MODE of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element RETUNING_MODE of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TUNING_FOR_SDR50 of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TUNING_FOR_SDR50 of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element A_DRIVER_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element A_DRIVER_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element C_DRIVER_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element C_DRIVER_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element D_DRIVER_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element D_DRIVER_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SPI_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SPI_SUPPORT of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SPI_BLOCK_MODE of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SPI_BLOCK_MODE of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element CLOCK_MULTIPLIER of register eMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element CLOCK_MULTIPLIER of register eMMC_CORECFG_2 */
+
+
+/** @brief eMMC_CORECFG_3 register description at address offset 0x10c
+  *
+  *  eMMC_CORECFG_3
+  */
+typedef struct
+{
+    HWREG_U32 MAX_CURRENT_1P8V :8; /**<  */
+    HWREG_U32 MAX_CURRENT_3P0V :8; /**<  */
+    HWREG_U32 MAX_CURRENT_3P3V :8; /**<  */
+    const HWREG_U32 :8; /**< Unused bitfield */
+} seMMC_CORECFG_3Structure;
+
+
+/** @brief EMMC_CORECFG_3 Bitfield widths 
+*/
+#define lenEMMC_CORECFG_3_MAX_CURRENT_1P8V 8
+#define lenEMMC_CORECFG_3_MAX_CURRENT_3P0V 8
+#define lenEMMC_CORECFG_3_MAX_CURRENT_3P3V 8
+
+typedef enum
+{
+    EMMC_CORECFG_3_LSB_MAX_CURRENT_1P8V = 0,
+    EMMC_CORECFG_3_LSB_MAX_CURRENT_3P0V = 8,
+    EMMC_CORECFG_3_LSB_MAX_CURRENT_3P3V = 16
+} eeMMC_CORECFG_3Lsb;
+
+typedef union
+{
+    HWREG_U32 eMMC_CORECFG_3_Content;
+    seMMC_CORECFG_3Structure eMMC_CORECFG_3_Structure;
+} ueMMC_CORECFG_3;
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register eMMC_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register eMMC_CORECFG_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_CURRENT_1P8V of register eMMC_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_CURRENT_1P8V of register eMMC_CORECFG_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_CURRENT_3P0V of register eMMC_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_CURRENT_3P0V of register eMMC_CORECFG_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_CURRENT_3P3V of register eMMC_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_CURRENT_3P3V of register eMMC_CORECFG_3 */
+
+
+/** @brief eMMC_CORECFG_4 register description at address offset 0x110
+  *
+  *  eMMC_CORECFG_4
+  */
+typedef struct
+{
+    HWREG_U32 INIT_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 DSPD_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} seMMC_CORECFG_4Structure;
+
+
+/** @brief EMMC_CORECFG_4 Bitfield widths 
+*/
+#define lenEMMC_CORECFG_4_INIT_PRESET_VALUE 13
+#define lenEMMC_CORECFG_4_DSPD_PRESET_VALUE 13
+
+typedef enum
+{
+    EMMC_CORECFG_4_LSB_INIT_PRESET_VALUE = 0,
+    EMMC_CORECFG_4_LSB_DSPD_PRESET_VALUE = 16
+} eeMMC_CORECFG_4Lsb;
+
+typedef union
+{
+    HWREG_U32 eMMC_CORECFG_4_Content;
+    seMMC_CORECFG_4Structure eMMC_CORECFG_4_Structure;
+} ueMMC_CORECFG_4;
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register eMMC_CORECFG_4 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register eMMC_CORECFG_4 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element INIT_PRESET_VALUE of register eMMC_CORECFG_4 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element INIT_PRESET_VALUE of register eMMC_CORECFG_4 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element DSPD_PRESET_VALUE of register eMMC_CORECFG_4 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DSPD_PRESET_VALUE of register eMMC_CORECFG_4 */
+
+
+/** @brief eMMC_CORECFG_5 register description at address offset 0x114
+  *
+  *  eMMC_CORECFG_5
+  */
+typedef struct
+{
+    HWREG_U32 HSPD_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 SDR12_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} seMMC_CORECFG_5Structure;
+
+
+/** @brief EMMC_CORECFG_5 Bitfield widths 
+*/
+#define lenEMMC_CORECFG_5_HSPD_PRESET_VALUE 13
+#define lenEMMC_CORECFG_5_SDR12_PRESET_VALUE 13
+
+typedef enum
+{
+    EMMC_CORECFG_5_LSB_HSPD_PRESET_VALUE = 0,
+    EMMC_CORECFG_5_LSB_SDR12_PRESET_VALUE = 16
+} eeMMC_CORECFG_5Lsb;
+
+typedef union
+{
+    HWREG_U32 eMMC_CORECFG_5_Content;
+    seMMC_CORECFG_5Structure eMMC_CORECFG_5_Structure;
+} ueMMC_CORECFG_5;
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register eMMC_CORECFG_5 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register eMMC_CORECFG_5 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element HSPD_PRESET_VALUE of register eMMC_CORECFG_5 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element HSPD_PRESET_VALUE of register eMMC_CORECFG_5 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR12_PRESET_VALUE of register eMMC_CORECFG_5 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR12_PRESET_VALUE of register eMMC_CORECFG_5 */
+
+
+/** @brief eMMC_CORECFG_6 register description at address offset 0x118
+  *
+  *  eMMC_CORECFG_6
+  */
+typedef struct
+{
+    HWREG_U32 SDR25_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 SDR50_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} seMMC_CORECFG_6Structure;
+
+
+/** @brief EMMC_CORECFG_6 Bitfield widths 
+*/
+#define lenEMMC_CORECFG_6_SDR25_PRESET_VALUE 13
+#define lenEMMC_CORECFG_6_SDR50_PRESET_VALUE 13
+
+typedef enum
+{
+    EMMC_CORECFG_6_LSB_SDR25_PRESET_VALUE = 0,
+    EMMC_CORECFG_6_LSB_SDR50_PRESET_VALUE = 16
+} eeMMC_CORECFG_6Lsb;
+
+typedef union
+{
+    HWREG_U32 eMMC_CORECFG_6_Content;
+    seMMC_CORECFG_6Structure eMMC_CORECFG_6_Structure;
+} ueMMC_CORECFG_6;
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register eMMC_CORECFG_6 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register eMMC_CORECFG_6 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR25_PRESET_VALUE of register eMMC_CORECFG_6 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR25_PRESET_VALUE of register eMMC_CORECFG_6 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR50_PRESET_VALUE of register eMMC_CORECFG_6 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR50_PRESET_VALUE of register eMMC_CORECFG_6 */
+
+
+/** @brief eMMC_CORECFG_7 register description at address offset 0x11c
+  *
+  *  eMMC_CORECFG_7
+  */
+typedef struct
+{
+    HWREG_U32 SDR104_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 DDR50_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} seMMC_CORECFG_7Structure;
+
+
+/** @brief EMMC_CORECFG_7 Bitfield widths 
+*/
+#define lenEMMC_CORECFG_7_SDR104_PRESET_VALUE 13
+#define lenEMMC_CORECFG_7_DDR50_PRESET_VALUE 13
+
+typedef enum
+{
+    EMMC_CORECFG_7_LSB_SDR104_PRESET_VALUE = 0,
+    EMMC_CORECFG_7_LSB_DDR50_PRESET_VALUE = 16
+} eeMMC_CORECFG_7Lsb;
+
+typedef union
+{
+    HWREG_U32 eMMC_CORECFG_7_Content;
+    seMMC_CORECFG_7Structure eMMC_CORECFG_7_Structure;
+} ueMMC_CORECFG_7;
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register eMMC_CORECFG_7 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register eMMC_CORECFG_7 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR104_PRESET_VALUE of register eMMC_CORECFG_7 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR104_PRESET_VALUE of register eMMC_CORECFG_7 */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element DDR50_PRESET_VALUE of register eMMC_CORECFG_7 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DDR50_PRESET_VALUE of register eMMC_CORECFG_7 */
+
+
+/** @brief eMMC_PAD_DRV register description at address offset 0x120
+  *
+  *  eMMC_PAD_DRV
+  */
+typedef struct
+{
+    HWREG_U32 B_DRIVE :2; /**<  */
+    HWREG_U32 A_DRIVE :2; /**<  */
+    HWREG_U32 C_DRIVE :2; /**<  */
+    HWREG_U32 D_DRIVE :2; /**<  */
+    const HWREG_U32 :24; /**< Unused bitfield */
+} seMMC_PAD_DRVStructure;
+
+
+/** @brief EMMC_PAD_DRV Bitfield widths 
+*/
+#define lenEMMC_PAD_DRV_B_DRIVE 2
+#define lenEMMC_PAD_DRV_A_DRIVE 2
+#define lenEMMC_PAD_DRV_C_DRIVE 2
+#define lenEMMC_PAD_DRV_D_DRIVE 2
+
+typedef enum
+{
+    EMMC_PAD_DRV_LSB_B_DRIVE = 0,
+    EMMC_PAD_DRV_LSB_A_DRIVE = 2,
+    EMMC_PAD_DRV_LSB_C_DRIVE = 4,
+    EMMC_PAD_DRV_LSB_D_DRIVE = 6
+} eeMMC_PAD_DRVLsb;
+
+typedef union
+{
+    HWREG_U32 eMMC_PAD_DRV_Content;
+    seMMC_PAD_DRVStructure eMMC_PAD_DRV_Structure;
+} ueMMC_PAD_DRV;
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register eMMC_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register eMMC_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element B_DRIVE of register eMMC_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element B_DRIVE of register eMMC_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element A_DRIVE of register eMMC_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element A_DRIVE of register eMMC_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element C_DRIVE of register eMMC_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element C_DRIVE of register eMMC_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element D_DRIVE of register eMMC_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element D_DRIVE of register eMMC_PAD_DRV */
+
+
+/** @brief SDMMC_TAP_CTL register description at address offset 0x200
+  *
+  *  SDMMC_TAP_CTL
+  */
+typedef struct
+{
+    HWREG_U32 IP_TAP_EN :1; /**<  */
+    HWREG_U32 IP_TAP_CHGWIN :1; /**<  */
+    const HWREG_U32 :2; /**< Unused bitfield */
+    HWREG_U32 IP_DELAY_CTRL :3; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 IP_TAP_DELAY :5; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 OP_TAP_EN :1; /**<  */
+    HWREG_U32 OP_DELAY_CTRL :3; /**<  */
+    HWREG_U32 OP_TAP_DELAY :4; /**<  */
+    const HWREG_U32 :8; /**< Unused bitfield */
+} sSDMMC_TAP_CTLStructure;
+
+
+/** @brief SDMMC_TAP_CTL Bitfield widths 
+*/
+#define lenSDMMC_TAP_CTL_IP_TAP_EN 1
+#define lenSDMMC_TAP_CTL_IP_TAP_CHGWIN 1
+#define lenSDMMC_TAP_CTL_IP_DELAY_CTRL 3
+#define lenSDMMC_TAP_CTL_IP_TAP_DELAY 5
+#define lenSDMMC_TAP_CTL_OP_TAP_EN 1
+#define lenSDMMC_TAP_CTL_OP_DELAY_CTRL 3
+#define lenSDMMC_TAP_CTL_OP_TAP_DELAY 4
+
+typedef enum
+{
+    SDMMC_TAP_CTL_LSB_IP_TAP_EN = 0,
+    SDMMC_TAP_CTL_LSB_IP_TAP_CHGWIN = 1,
+    SDMMC_TAP_CTL_LSB_IP_DELAY_CTRL = 4,
+    SDMMC_TAP_CTL_LSB_IP_TAP_DELAY = 8,
+    SDMMC_TAP_CTL_LSB_OP_TAP_EN = 16,
+    SDMMC_TAP_CTL_LSB_OP_DELAY_CTRL = 17,
+    SDMMC_TAP_CTL_LSB_OP_TAP_DELAY = 20
+} eSDMMC_TAP_CTLLsb;
+
+typedef union
+{
+    HWREG_U32 SDMMC_TAP_CTL_Content;
+    sSDMMC_TAP_CTLStructure SDMMC_TAP_CTL_Structure;
+} uSDMMC_TAP_CTL;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_TAP_EN of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_TAP_EN of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_TAP_CHGWIN of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_TAP_CHGWIN of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_DELAY_CTRL of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_DELAY_CTRL of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_TAP_DELAY of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_TAP_DELAY of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element OP_TAP_EN of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element OP_TAP_EN of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element OP_DELAY_CTRL of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element OP_DELAY_CTRL of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element OP_TAP_DELAY of register SDMMC_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element OP_TAP_DELAY of register SDMMC_TAP_CTL */
+
+
+/** @brief SDMMC_CORECFG_1 register description at address offset 0x204
+  *
+  *  SDMMC_CORECFG_1
+  */
+typedef struct
+{
+    HWREG_U32 TUNING_COUNT :6; /**<  */
+    HWREG_U32 MAX_BLOCK_LENGTH :2; /**<  */
+    HWREG_U32 TIMEOUT_CLK_FREQ :6; /**<  */
+    HWREG_U32 TIMEOUT_CLK_UNIT :1; /**<  */
+    HWREG_U32 ASYNC_WAKEUP_EN :1; /**<  */
+    HWREG_U32 BASE_CLK_FREQ :8; /**<  */
+    HWREG_U32 SUPPORT_8_BITS :1; /**<  */
+    HWREG_U32 ADMA2_SUPPORT :1; /**<  */
+    HWREG_U32 HIGH_SPEED_SUPPORT :1; /**<  */
+    HWREG_U32 SDMA_SUPPORT :1; /**<  */
+    HWREG_U32 SUPPRESS_SUPPORT :1; /**<  */
+    HWREG_U32 SUPPORT_3P3_VOLTS :1; /**<  */
+    HWREG_U32 SUPPORT_3P0_VOLTS :1; /**<  */
+    HWREG_U32 SUPPORT_1P8_VOLTS :1; /**<  */
+} sSDMMC_CORECFG_1Structure;
+
+
+/** @brief SDMMC_CORECFG_1 Bitfield widths 
+*/
+#define lenSDMMC_CORECFG_1_TUNING_COUNT 6
+#define lenSDMMC_CORECFG_1_MAX_BLOCK_LENGTH 2
+#define lenSDMMC_CORECFG_1_TIMEOUT_CLK_FREQ 6
+#define lenSDMMC_CORECFG_1_TIMEOUT_CLK_UNIT 1
+#define lenSDMMC_CORECFG_1_ASYNC_WAKEUP_EN 1
+#define lenSDMMC_CORECFG_1_BASE_CLK_FREQ 8
+#define lenSDMMC_CORECFG_1_SUPPORT_8_BITS 1
+#define lenSDMMC_CORECFG_1_ADMA2_SUPPORT 1
+#define lenSDMMC_CORECFG_1_HIGH_SPEED_SUPPORT 1
+#define lenSDMMC_CORECFG_1_SDMA_SUPPORT 1
+#define lenSDMMC_CORECFG_1_SUPPRESS_SUPPORT 1
+#define lenSDMMC_CORECFG_1_SUPPORT_3P3_VOLTS 1
+#define lenSDMMC_CORECFG_1_SUPPORT_3P0_VOLTS 1
+#define lenSDMMC_CORECFG_1_SUPPORT_1P8_VOLTS 1
+
+typedef enum
+{
+    SDMMC_CORECFG_1_LSB_TUNING_COUNT = 0,
+    SDMMC_CORECFG_1_LSB_MAX_BLOCK_LENGTH = 6,
+    SDMMC_CORECFG_1_LSB_TIMEOUT_CLK_FREQ = 8,
+    SDMMC_CORECFG_1_LSB_TIMEOUT_CLK_UNIT = 14,
+    SDMMC_CORECFG_1_LSB_ASYNC_WAKEUP_EN = 15,
+    SDMMC_CORECFG_1_LSB_BASE_CLK_FREQ = 16,
+    SDMMC_CORECFG_1_LSB_SUPPORT_8_BITS = 24,
+    SDMMC_CORECFG_1_LSB_ADMA2_SUPPORT = 25,
+    SDMMC_CORECFG_1_LSB_HIGH_SPEED_SUPPORT = 26,
+    SDMMC_CORECFG_1_LSB_SDMA_SUPPORT = 27,
+    SDMMC_CORECFG_1_LSB_SUPPRESS_SUPPORT = 28,
+    SDMMC_CORECFG_1_LSB_SUPPORT_3P3_VOLTS = 29,
+    SDMMC_CORECFG_1_LSB_SUPPORT_3P0_VOLTS = 30,
+    SDMMC_CORECFG_1_LSB_SUPPORT_1P8_VOLTS = 31
+} eSDMMC_CORECFG_1Lsb;
+
+typedef union
+{
+    HWREG_U32 SDMMC_CORECFG_1_Content;
+    sSDMMC_CORECFG_1Structure SDMMC_CORECFG_1_Structure;
+} uSDMMC_CORECFG_1;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TUNING_COUNT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TUNING_COUNT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_BLOCK_LENGTH of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_BLOCK_LENGTH of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TIMEOUT_CLK_FREQ of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TIMEOUT_CLK_FREQ of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TIMEOUT_CLK_UNIT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TIMEOUT_CLK_UNIT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element ASYNC_WAKEUP_EN of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element ASYNC_WAKEUP_EN of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element BASE_CLK_FREQ of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element BASE_CLK_FREQ of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_8_BITS of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_8_BITS of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element ADMA2_SUPPORT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element ADMA2_SUPPORT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element HIGH_SPEED_SUPPORT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element HIGH_SPEED_SUPPORT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDMA_SUPPORT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDMA_SUPPORT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPRESS_SUPPORT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPRESS_SUPPORT of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_3P3_VOLTS of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_3P3_VOLTS of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_3P0_VOLTS of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_3P0_VOLTS of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_1P8_VOLTS of register SDMMC_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_1P8_VOLTS of register SDMMC_CORECFG_1 */
+
+
+/** @brief SDMMC_CORECFG_2 register description at address offset 0x208
+  *
+  *  SDMMC_CORECFG_2
+  */
+typedef struct
+{
+    HWREG_U32 SUPPORT_64_BITS :1; /**<  */
+    HWREG_U32 ASYNC_INT_SUPPORT :1; /**<  */
+    HWREG_U32 SLOT_TYPE :2; /**<  */
+    HWREG_U32 SDR_50_SUPPORT :1; /**<  */
+    HWREG_U32 SDR_104_SUPPORT :1; /**<  */
+    HWREG_U32 DDR_50_SUPPORT :1; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 RETUNING_TIMER_COUNT :4; /**<  */
+    HWREG_U32 RETUNING_MODE :2; /**<  */
+    HWREG_U32 TUNING_FOR_SDR50 :1; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 A_DRIVER_SUPPORT :1; /**<  */
+    HWREG_U32 C_DRIVER_SUPPORT :1; /**<  */
+    HWREG_U32 D_DRIVER_SUPPORT :1; /**<  */
+    HWREG_U32 SPI_SUPPORT :1; /**<  */
+    HWREG_U32 SPI_BLOCK_MODE :1; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 CLOCK_MULTIPLIER :8; /**<  */
+} sSDMMC_CORECFG_2Structure;
+
+
+/** @brief SDMMC_CORECFG_2 Bitfield widths 
+*/
+#define lenSDMMC_CORECFG_2_SUPPORT_64_BITS 1
+#define lenSDMMC_CORECFG_2_ASYNC_INT_SUPPORT 1
+#define lenSDMMC_CORECFG_2_SLOT_TYPE 2
+#define lenSDMMC_CORECFG_2_SDR_50_SUPPORT 1
+#define lenSDMMC_CORECFG_2_SDR_104_SUPPORT 1
+#define lenSDMMC_CORECFG_2_DDR_50_SUPPORT 1
+#define lenSDMMC_CORECFG_2_RETUNING_TIMER_COUNT 4
+#define lenSDMMC_CORECFG_2_RETUNING_MODE 2
+#define lenSDMMC_CORECFG_2_TUNING_FOR_SDR50 1
+#define lenSDMMC_CORECFG_2_A_DRIVER_SUPPORT 1
+#define lenSDMMC_CORECFG_2_C_DRIVER_SUPPORT 1
+#define lenSDMMC_CORECFG_2_D_DRIVER_SUPPORT 1
+#define lenSDMMC_CORECFG_2_SPI_SUPPORT 1
+#define lenSDMMC_CORECFG_2_SPI_BLOCK_MODE 1
+#define lenSDMMC_CORECFG_2_CLOCK_MULTIPLIER 8
+
+typedef enum
+{
+    SDMMC_CORECFG_2_LSB_SUPPORT_64_BITS = 0,
+    SDMMC_CORECFG_2_LSB_ASYNC_INT_SUPPORT = 1,
+    SDMMC_CORECFG_2_LSB_SLOT_TYPE = 2,
+    SDMMC_CORECFG_2_LSB_SDR_50_SUPPORT = 4,
+    SDMMC_CORECFG_2_LSB_SDR_104_SUPPORT = 5,
+    SDMMC_CORECFG_2_LSB_DDR_50_SUPPORT = 6,
+    SDMMC_CORECFG_2_LSB_RETUNING_TIMER_COUNT = 8,
+    SDMMC_CORECFG_2_LSB_RETUNING_MODE = 12,
+    SDMMC_CORECFG_2_LSB_TUNING_FOR_SDR50 = 14,
+    SDMMC_CORECFG_2_LSB_A_DRIVER_SUPPORT = 16,
+    SDMMC_CORECFG_2_LSB_C_DRIVER_SUPPORT = 17,
+    SDMMC_CORECFG_2_LSB_D_DRIVER_SUPPORT = 18,
+    SDMMC_CORECFG_2_LSB_SPI_SUPPORT = 19,
+    SDMMC_CORECFG_2_LSB_SPI_BLOCK_MODE = 20,
+    SDMMC_CORECFG_2_LSB_CLOCK_MULTIPLIER = 24
+} eSDMMC_CORECFG_2Lsb;
+
+typedef union
+{
+    HWREG_U32 SDMMC_CORECFG_2_Content;
+    sSDMMC_CORECFG_2Structure SDMMC_CORECFG_2_Structure;
+} uSDMMC_CORECFG_2;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_64_BITS of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_64_BITS of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element ASYNC_INT_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element ASYNC_INT_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SLOT_TYPE of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SLOT_TYPE of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR_50_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR_50_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR_104_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR_104_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element DDR_50_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DDR_50_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element RETUNING_TIMER_COUNT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element RETUNING_TIMER_COUNT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element RETUNING_MODE of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element RETUNING_MODE of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TUNING_FOR_SDR50 of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TUNING_FOR_SDR50 of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element A_DRIVER_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element A_DRIVER_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element C_DRIVER_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element C_DRIVER_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element D_DRIVER_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element D_DRIVER_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SPI_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SPI_SUPPORT of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SPI_BLOCK_MODE of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SPI_BLOCK_MODE of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element CLOCK_MULTIPLIER of register SDMMC_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element CLOCK_MULTIPLIER of register SDMMC_CORECFG_2 */
+
+
+/** @brief SDMMC_CORECFG_3 register description at address offset 0x20c
+  *
+  *  SDMMC_CORECFG_3
+  */
+typedef struct
+{
+    HWREG_U32 MAX_CURRENT_1P8V :8; /**<  */
+    HWREG_U32 MAX_CURRENT_3P0V :8; /**<  */
+    HWREG_U32 MAX_CURRENT_3P3V :8; /**<  */
+    const HWREG_U32 :8; /**< Unused bitfield */
+} sSDMMC_CORECFG_3Structure;
+
+
+/** @brief SDMMC_CORECFG_3 Bitfield widths 
+*/
+#define lenSDMMC_CORECFG_3_MAX_CURRENT_1P8V 8
+#define lenSDMMC_CORECFG_3_MAX_CURRENT_3P0V 8
+#define lenSDMMC_CORECFG_3_MAX_CURRENT_3P3V 8
+
+typedef enum
+{
+    SDMMC_CORECFG_3_LSB_MAX_CURRENT_1P8V = 0,
+    SDMMC_CORECFG_3_LSB_MAX_CURRENT_3P0V = 8,
+    SDMMC_CORECFG_3_LSB_MAX_CURRENT_3P3V = 16
+} eSDMMC_CORECFG_3Lsb;
+
+typedef union
+{
+    HWREG_U32 SDMMC_CORECFG_3_Content;
+    sSDMMC_CORECFG_3Structure SDMMC_CORECFG_3_Structure;
+} uSDMMC_CORECFG_3;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDMMC_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDMMC_CORECFG_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_CURRENT_1P8V of register SDMMC_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_CURRENT_1P8V of register SDMMC_CORECFG_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_CURRENT_3P0V of register SDMMC_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_CURRENT_3P0V of register SDMMC_CORECFG_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_CURRENT_3P3V of register SDMMC_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_CURRENT_3P3V of register SDMMC_CORECFG_3 */
+
+
+/** @brief SDMMC_CORECFG_4 register description at address offset 0x210
+  *
+  *  SDMMC_CORECFG_4
+  */
+typedef struct
+{
+    HWREG_U32 INIT_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 DSPD_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} sSDMMC_CORECFG_4Structure;
+
+
+/** @brief SDMMC_CORECFG_4 Bitfield widths 
+*/
+#define lenSDMMC_CORECFG_4_INIT_PRESET_VALUE 13
+#define lenSDMMC_CORECFG_4_DSPD_PRESET_VALUE 13
+
+typedef enum
+{
+    SDMMC_CORECFG_4_LSB_INIT_PRESET_VALUE = 0,
+    SDMMC_CORECFG_4_LSB_DSPD_PRESET_VALUE = 16
+} eSDMMC_CORECFG_4Lsb;
+
+typedef union
+{
+    HWREG_U32 SDMMC_CORECFG_4_Content;
+    sSDMMC_CORECFG_4Structure SDMMC_CORECFG_4_Structure;
+} uSDMMC_CORECFG_4;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDMMC_CORECFG_4 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDMMC_CORECFG_4 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element INIT_PRESET_VALUE of register SDMMC_CORECFG_4 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element INIT_PRESET_VALUE of register SDMMC_CORECFG_4 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element DSPD_PRESET_VALUE of register SDMMC_CORECFG_4 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DSPD_PRESET_VALUE of register SDMMC_CORECFG_4 */
+
+
+/** @brief SDMMC_CORECFG_5 register description at address offset 0x214
+  *
+  *  SDMMC_CORECFG_5
+  */
+typedef struct
+{
+    HWREG_U32 HSPD_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 SDR12_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} sSDMMC_CORECFG_5Structure;
+
+
+/** @brief SDMMC_CORECFG_5 Bitfield widths 
+*/
+#define lenSDMMC_CORECFG_5_HSPD_PRESET_VALUE 13
+#define lenSDMMC_CORECFG_5_SDR12_PRESET_VALUE 13
+
+typedef enum
+{
+    SDMMC_CORECFG_5_LSB_HSPD_PRESET_VALUE = 0,
+    SDMMC_CORECFG_5_LSB_SDR12_PRESET_VALUE = 16
+} eSDMMC_CORECFG_5Lsb;
+
+typedef union
+{
+    HWREG_U32 SDMMC_CORECFG_5_Content;
+    sSDMMC_CORECFG_5Structure SDMMC_CORECFG_5_Structure;
+} uSDMMC_CORECFG_5;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDMMC_CORECFG_5 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDMMC_CORECFG_5 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element HSPD_PRESET_VALUE of register SDMMC_CORECFG_5 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element HSPD_PRESET_VALUE of register SDMMC_CORECFG_5 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR12_PRESET_VALUE of register SDMMC_CORECFG_5 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR12_PRESET_VALUE of register SDMMC_CORECFG_5 */
+
+
+/** @brief SDMMC_CORECFG_6 register description at address offset 0x218
+  *
+  *  SDMMC_CORECFG_6
+  */
+typedef struct
+{
+    HWREG_U32 SDR25_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 SDR50_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} sSDMMC_CORECFG_6Structure;
+
+
+/** @brief SDMMC_CORECFG_6 Bitfield widths 
+*/
+#define lenSDMMC_CORECFG_6_SDR25_PRESET_VALUE 13
+#define lenSDMMC_CORECFG_6_SDR50_PRESET_VALUE 13
+
+typedef enum
+{
+    SDMMC_CORECFG_6_LSB_SDR25_PRESET_VALUE = 0,
+    SDMMC_CORECFG_6_LSB_SDR50_PRESET_VALUE = 16
+} eSDMMC_CORECFG_6Lsb;
+
+typedef union
+{
+    HWREG_U32 SDMMC_CORECFG_6_Content;
+    sSDMMC_CORECFG_6Structure SDMMC_CORECFG_6_Structure;
+} uSDMMC_CORECFG_6;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDMMC_CORECFG_6 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDMMC_CORECFG_6 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR25_PRESET_VALUE of register SDMMC_CORECFG_6 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR25_PRESET_VALUE of register SDMMC_CORECFG_6 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR50_PRESET_VALUE of register SDMMC_CORECFG_6 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR50_PRESET_VALUE of register SDMMC_CORECFG_6 */
+
+
+/** @brief SDMMC_CORECFG_7 register description at address offset 0x21c
+  *
+  *  SDMMC_CORECFG_7
+  */
+typedef struct
+{
+    HWREG_U32 SDR104_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 DDR50_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} sSDMMC_CORECFG_7Structure;
+
+
+/** @brief SDMMC_CORECFG_7 Bitfield widths 
+*/
+#define lenSDMMC_CORECFG_7_SDR104_PRESET_VALUE 13
+#define lenSDMMC_CORECFG_7_DDR50_PRESET_VALUE 13
+
+typedef enum
+{
+    SDMMC_CORECFG_7_LSB_SDR104_PRESET_VALUE = 0,
+    SDMMC_CORECFG_7_LSB_DDR50_PRESET_VALUE = 16
+} eSDMMC_CORECFG_7Lsb;
+
+typedef union
+{
+    HWREG_U32 SDMMC_CORECFG_7_Content;
+    sSDMMC_CORECFG_7Structure SDMMC_CORECFG_7_Structure;
+} uSDMMC_CORECFG_7;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDMMC_CORECFG_7 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDMMC_CORECFG_7 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR104_PRESET_VALUE of register SDMMC_CORECFG_7 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR104_PRESET_VALUE of register SDMMC_CORECFG_7 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element DDR50_PRESET_VALUE of register SDMMC_CORECFG_7 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DDR50_PRESET_VALUE of register SDMMC_CORECFG_7 */
+
+
+/** @brief SDMMC_PAD_DRV register description at address offset 0x220
+  *
+  *  SDMMC_PAD_DRV
+  */
+typedef struct
+{
+    HWREG_U32 B_DRIVE :3; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 A_DRIVE :3; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 C_DRIVE :3; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 D_DRIVE :3; /**<  */
+    const HWREG_U32 :17; /**< Unused bitfield */
+} sSDMMC_PAD_DRVStructure;
+
+
+/** @brief SDMMC_PAD_DRV Bitfield widths 
+*/
+#define lenSDMMC_PAD_DRV_B_DRIVE 3
+#define lenSDMMC_PAD_DRV_A_DRIVE 3
+#define lenSDMMC_PAD_DRV_C_DRIVE 3
+#define lenSDMMC_PAD_DRV_D_DRIVE 3
+
+typedef enum
+{
+    SDMMC_PAD_DRV_LSB_B_DRIVE = 0,
+    SDMMC_PAD_DRV_LSB_A_DRIVE = 4,
+    SDMMC_PAD_DRV_LSB_C_DRIVE = 8,
+    SDMMC_PAD_DRV_LSB_D_DRIVE = 12
+} eSDMMC_PAD_DRVLsb;
+
+typedef union
+{
+    HWREG_U32 SDMMC_PAD_DRV_Content;
+    sSDMMC_PAD_DRVStructure SDMMC_PAD_DRV_Structure;
+} uSDMMC_PAD_DRV;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDMMC_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDMMC_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element B_DRIVE of register SDMMC_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element B_DRIVE of register SDMMC_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element A_DRIVE of register SDMMC_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element A_DRIVE of register SDMMC_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element C_DRIVE of register SDMMC_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element C_DRIVE of register SDMMC_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element D_DRIVE of register SDMMC_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element D_DRIVE of register SDMMC_PAD_DRV */
+
+
+/** @brief SDIO_TAP_CTL register description at address offset 0x300
+  *
+  *  SDIO_TAP_CTL
+  */
+typedef struct
+{
+    HWREG_U32 IP_TAP_EN :1; /**<  */
+    HWREG_U32 IP_TAP_CHGWIN :1; /**<  */
+    const HWREG_U32 :2; /**< Unused bitfield */
+    HWREG_U32 IP_DELAY_CTRL :3; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 IP_TAP_DELAY :5; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 OP_TAP_EN :1; /**<  */
+    HWREG_U32 OP_DELAY_CTRL :3; /**<  */
+    HWREG_U32 OP_TAP_DELAY :4; /**<  */
+    const HWREG_U32 :8; /**< Unused bitfield */
+} sSDIO_TAP_CTLStructure;
+
+
+/** @brief SDIO_TAP_CTL Bitfield widths 
+*/
+#define lenSDIO_TAP_CTL_IP_TAP_EN 1
+#define lenSDIO_TAP_CTL_IP_TAP_CHGWIN 1
+#define lenSDIO_TAP_CTL_IP_DELAY_CTRL 3
+#define lenSDIO_TAP_CTL_IP_TAP_DELAY 5
+#define lenSDIO_TAP_CTL_OP_TAP_EN 1
+#define lenSDIO_TAP_CTL_OP_DELAY_CTRL 3
+#define lenSDIO_TAP_CTL_OP_TAP_DELAY 4
+
+typedef enum
+{
+    SDIO_TAP_CTL_LSB_IP_TAP_EN = 0,
+    SDIO_TAP_CTL_LSB_IP_TAP_CHGWIN = 1,
+    SDIO_TAP_CTL_LSB_IP_DELAY_CTRL = 4,
+    SDIO_TAP_CTL_LSB_IP_TAP_DELAY = 8,
+    SDIO_TAP_CTL_LSB_OP_TAP_EN = 16,
+    SDIO_TAP_CTL_LSB_OP_DELAY_CTRL = 17,
+    SDIO_TAP_CTL_LSB_OP_TAP_DELAY = 20
+} eSDIO_TAP_CTLLsb;
+
+typedef union
+{
+    HWREG_U32 SDIO_TAP_CTL_Content;
+    sSDIO_TAP_CTLStructure SDIO_TAP_CTL_Structure;
+} uSDIO_TAP_CTL;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDIO_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDIO_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_TAP_EN of register SDIO_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_TAP_EN of register SDIO_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_TAP_CHGWIN of register SDIO_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_TAP_CHGWIN of register SDIO_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_DELAY_CTRL of register SDIO_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_DELAY_CTRL of register SDIO_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element IP_TAP_DELAY of register SDIO_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element IP_TAP_DELAY of register SDIO_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element OP_TAP_EN of register SDIO_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element OP_TAP_EN of register SDIO_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element OP_DELAY_CTRL of register SDIO_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element OP_DELAY_CTRL of register SDIO_TAP_CTL */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element OP_TAP_DELAY of register SDIO_TAP_CTL */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element OP_TAP_DELAY of register SDIO_TAP_CTL */
+
+
+/** @brief SDIO_CORECFG_1 register description at address offset 0x304
+  *
+  *  SDIO_CORECFG_1
+  */
+typedef struct
+{
+    HWREG_U32 TUNING_COUNT :6; /**<  */
+    HWREG_U32 MAX_BLOCK_LENGTH :2; /**<  */
+    HWREG_U32 TIMEOUT_CLK_FREQ :6; /**<  */
+    HWREG_U32 TIMEOUT_CLK_UNIT :1; /**<  */
+    HWREG_U32 ASYNC_WAKEUP_EN :1; /**<  */
+    HWREG_U32 BASE_CLK_FREQ :8; /**<  */
+    HWREG_U32 SUPPORT_8_BITS :1; /**<  */
+    HWREG_U32 ADMA2_SUPPORT :1; /**<  */
+    HWREG_U32 HIGH_SPEED_SUPPORT :1; /**<  */
+    HWREG_U32 SDMA_SUPPORT :1; /**<  */
+    HWREG_U32 SUPPRESS_SUPPORT :1; /**<  */
+    HWREG_U32 SUPPORT_3P3_VOLTS :1; /**<  */
+    HWREG_U32 SUPPORT_3P0_VOLTS :1; /**<  */
+    HWREG_U32 SUPPORT_1P8_VOLTS :1; /**<  */
+} sSDIO_CORECFG_1Structure;
+
+
+/** @brief SDIO_CORECFG_1 Bitfield widths 
+*/
+#define lenSDIO_CORECFG_1_TUNING_COUNT 6
+#define lenSDIO_CORECFG_1_MAX_BLOCK_LENGTH 2
+#define lenSDIO_CORECFG_1_TIMEOUT_CLK_FREQ 6
+#define lenSDIO_CORECFG_1_TIMEOUT_CLK_UNIT 1
+#define lenSDIO_CORECFG_1_ASYNC_WAKEUP_EN 1
+#define lenSDIO_CORECFG_1_BASE_CLK_FREQ 8
+#define lenSDIO_CORECFG_1_SUPPORT_8_BITS 1
+#define lenSDIO_CORECFG_1_ADMA2_SUPPORT 1
+#define lenSDIO_CORECFG_1_HIGH_SPEED_SUPPORT 1
+#define lenSDIO_CORECFG_1_SDMA_SUPPORT 1
+#define lenSDIO_CORECFG_1_SUPPRESS_SUPPORT 1
+#define lenSDIO_CORECFG_1_SUPPORT_3P3_VOLTS 1
+#define lenSDIO_CORECFG_1_SUPPORT_3P0_VOLTS 1
+#define lenSDIO_CORECFG_1_SUPPORT_1P8_VOLTS 1
+
+typedef enum
+{
+    SDIO_CORECFG_1_LSB_TUNING_COUNT = 0,
+    SDIO_CORECFG_1_LSB_MAX_BLOCK_LENGTH = 6,
+    SDIO_CORECFG_1_LSB_TIMEOUT_CLK_FREQ = 8,
+    SDIO_CORECFG_1_LSB_TIMEOUT_CLK_UNIT = 14,
+    SDIO_CORECFG_1_LSB_ASYNC_WAKEUP_EN = 15,
+    SDIO_CORECFG_1_LSB_BASE_CLK_FREQ = 16,
+    SDIO_CORECFG_1_LSB_SUPPORT_8_BITS = 24,
+    SDIO_CORECFG_1_LSB_ADMA2_SUPPORT = 25,
+    SDIO_CORECFG_1_LSB_HIGH_SPEED_SUPPORT = 26,
+    SDIO_CORECFG_1_LSB_SDMA_SUPPORT = 27,
+    SDIO_CORECFG_1_LSB_SUPPRESS_SUPPORT = 28,
+    SDIO_CORECFG_1_LSB_SUPPORT_3P3_VOLTS = 29,
+    SDIO_CORECFG_1_LSB_SUPPORT_3P0_VOLTS = 30,
+    SDIO_CORECFG_1_LSB_SUPPORT_1P8_VOLTS = 31
+} eSDIO_CORECFG_1Lsb;
+
+typedef union
+{
+    HWREG_U32 SDIO_CORECFG_1_Content;
+    sSDIO_CORECFG_1Structure SDIO_CORECFG_1_Structure;
+} uSDIO_CORECFG_1;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TUNING_COUNT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TUNING_COUNT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_BLOCK_LENGTH of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_BLOCK_LENGTH of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TIMEOUT_CLK_FREQ of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TIMEOUT_CLK_FREQ of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TIMEOUT_CLK_UNIT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TIMEOUT_CLK_UNIT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element ASYNC_WAKEUP_EN of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element ASYNC_WAKEUP_EN of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element BASE_CLK_FREQ of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element BASE_CLK_FREQ of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_8_BITS of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_8_BITS of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element ADMA2_SUPPORT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element ADMA2_SUPPORT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element HIGH_SPEED_SUPPORT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element HIGH_SPEED_SUPPORT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDMA_SUPPORT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDMA_SUPPORT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPRESS_SUPPORT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPRESS_SUPPORT of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_3P3_VOLTS of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_3P3_VOLTS of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_3P0_VOLTS of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_3P0_VOLTS of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_1P8_VOLTS of register SDIO_CORECFG_1 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_1P8_VOLTS of register SDIO_CORECFG_1 */
+
+
+/** @brief SDIO_CORECFG_2 register description at address offset 0x308
+  *
+  *  SDIO_CORECFG_2
+  */
+typedef struct
+{
+    HWREG_U32 SUPPORT_64_BITS :1; /**<  */
+    HWREG_U32 ASYNC_INT_SUPPORT :1; /**<  */
+    HWREG_U32 SLOT_TYPE :2; /**<  */
+    HWREG_U32 SDR_50_SUPPORT :1; /**<  */
+    HWREG_U32 SDR_104_SUPPORT :1; /**<  */
+    HWREG_U32 DDR_50_SUPPORT :1; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 RETUNING_TIMER_COUNT :4; /**<  */
+    HWREG_U32 RETUNING_MODE :2; /**<  */
+    HWREG_U32 TUNING_FOR_SDR50 :1; /**<  */
+    const HWREG_U32 :1; /**< Unused bitfield */
+    HWREG_U32 A_DRIVER_SUPPORT :1; /**<  */
+    HWREG_U32 C_DRIVER_SUPPORT :1; /**<  */
+    HWREG_U32 D_DRIVER_SUPPORT :1; /**<  */
+    HWREG_U32 SPI_SUPPORT :1; /**<  */
+    HWREG_U32 SPI_BLOCK_MODE :1; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 CLOCK_MULTIPLIER :8; /**<  */
+} sSDIO_CORECFG_2Structure;
+
+
+/** @brief SDIO_CORECFG_2 Bitfield widths 
+*/
+#define lenSDIO_CORECFG_2_SUPPORT_64_BITS 1
+#define lenSDIO_CORECFG_2_ASYNC_INT_SUPPORT 1
+#define lenSDIO_CORECFG_2_SLOT_TYPE 2
+#define lenSDIO_CORECFG_2_SDR_50_SUPPORT 1
+#define lenSDIO_CORECFG_2_SDR_104_SUPPORT 1
+#define lenSDIO_CORECFG_2_DDR_50_SUPPORT 1
+#define lenSDIO_CORECFG_2_RETUNING_TIMER_COUNT 4
+#define lenSDIO_CORECFG_2_RETUNING_MODE 2
+#define lenSDIO_CORECFG_2_TUNING_FOR_SDR50 1
+#define lenSDIO_CORECFG_2_A_DRIVER_SUPPORT 1
+#define lenSDIO_CORECFG_2_C_DRIVER_SUPPORT 1
+#define lenSDIO_CORECFG_2_D_DRIVER_SUPPORT 1
+#define lenSDIO_CORECFG_2_SPI_SUPPORT 1
+#define lenSDIO_CORECFG_2_SPI_BLOCK_MODE 1
+#define lenSDIO_CORECFG_2_CLOCK_MULTIPLIER 8
+
+typedef enum
+{
+    SDIO_CORECFG_2_LSB_SUPPORT_64_BITS = 0,
+    SDIO_CORECFG_2_LSB_ASYNC_INT_SUPPORT = 1,
+    SDIO_CORECFG_2_LSB_SLOT_TYPE = 2,
+    SDIO_CORECFG_2_LSB_SDR_50_SUPPORT = 4,
+    SDIO_CORECFG_2_LSB_SDR_104_SUPPORT = 5,
+    SDIO_CORECFG_2_LSB_DDR_50_SUPPORT = 6,
+    SDIO_CORECFG_2_LSB_RETUNING_TIMER_COUNT = 8,
+    SDIO_CORECFG_2_LSB_RETUNING_MODE = 12,
+    SDIO_CORECFG_2_LSB_TUNING_FOR_SDR50 = 14,
+    SDIO_CORECFG_2_LSB_A_DRIVER_SUPPORT = 16,
+    SDIO_CORECFG_2_LSB_C_DRIVER_SUPPORT = 17,
+    SDIO_CORECFG_2_LSB_D_DRIVER_SUPPORT = 18,
+    SDIO_CORECFG_2_LSB_SPI_SUPPORT = 19,
+    SDIO_CORECFG_2_LSB_SPI_BLOCK_MODE = 20,
+    SDIO_CORECFG_2_LSB_CLOCK_MULTIPLIER = 24
+} eSDIO_CORECFG_2Lsb;
+
+typedef union
+{
+    HWREG_U32 SDIO_CORECFG_2_Content;
+    sSDIO_CORECFG_2Structure SDIO_CORECFG_2_Structure;
+} uSDIO_CORECFG_2;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SUPPORT_64_BITS of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SUPPORT_64_BITS of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element ASYNC_INT_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element ASYNC_INT_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SLOT_TYPE of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SLOT_TYPE of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR_50_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR_50_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR_104_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR_104_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element DDR_50_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DDR_50_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element RETUNING_TIMER_COUNT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element RETUNING_TIMER_COUNT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element RETUNING_MODE of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element RETUNING_MODE of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element TUNING_FOR_SDR50 of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element TUNING_FOR_SDR50 of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element A_DRIVER_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element A_DRIVER_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element C_DRIVER_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element C_DRIVER_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element D_DRIVER_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element D_DRIVER_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SPI_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SPI_SUPPORT of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SPI_BLOCK_MODE of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SPI_BLOCK_MODE of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element CLOCK_MULTIPLIER of register SDIO_CORECFG_2 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element CLOCK_MULTIPLIER of register SDIO_CORECFG_2 */
+
+
+/** @brief SDIO_CORECFG_3 register description at address offset 0x30c
+  *
+  *  SDIO_CORECFG_3
+  */
+typedef struct
+{
+    HWREG_U32 MAX_CURRENT_1P8V :8; /**<  */
+    HWREG_U32 MAX_CURRENT_3P0V :8; /**<  */
+    HWREG_U32 MAX_CURRENT_3P3V :8; /**<  */
+    const HWREG_U32 :8; /**< Unused bitfield */
+} sSDIO_CORECFG_3Structure;
+
+
+/** @brief SDIO_CORECFG_3 Bitfield widths 
+*/
+#define lenSDIO_CORECFG_3_MAX_CURRENT_1P8V 8
+#define lenSDIO_CORECFG_3_MAX_CURRENT_3P0V 8
+#define lenSDIO_CORECFG_3_MAX_CURRENT_3P3V 8
+
+typedef enum
+{
+    SDIO_CORECFG_3_LSB_MAX_CURRENT_1P8V = 0,
+    SDIO_CORECFG_3_LSB_MAX_CURRENT_3P0V = 8,
+    SDIO_CORECFG_3_LSB_MAX_CURRENT_3P3V = 16
+} eSDIO_CORECFG_3Lsb;
+
+typedef union
+{
+    HWREG_U32 SDIO_CORECFG_3_Content;
+    sSDIO_CORECFG_3Structure SDIO_CORECFG_3_Structure;
+} uSDIO_CORECFG_3;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDIO_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDIO_CORECFG_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_CURRENT_1P8V of register SDIO_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_CURRENT_1P8V of register SDIO_CORECFG_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_CURRENT_3P0V of register SDIO_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_CURRENT_3P0V of register SDIO_CORECFG_3 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element MAX_CURRENT_3P3V of register SDIO_CORECFG_3 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element MAX_CURRENT_3P3V of register SDIO_CORECFG_3 */
+
+
+/** @brief SDIO_CORECFG_4 register description at address offset 0x310
+  *
+  *  SDIO_CORECFG_4
+  */
+typedef struct
+{
+    HWREG_U32 INIT_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 DSPD_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} sSDIO_CORECFG_4Structure;
+
+
+/** @brief SDIO_CORECFG_4 Bitfield widths 
+*/
+#define lenSDIO_CORECFG_4_INIT_PRESET_VALUE 13
+#define lenSDIO_CORECFG_4_DSPD_PRESET_VALUE 13
+
+typedef enum
+{
+    SDIO_CORECFG_4_LSB_INIT_PRESET_VALUE = 0,
+    SDIO_CORECFG_4_LSB_DSPD_PRESET_VALUE = 16
+} eSDIO_CORECFG_4Lsb;
+
+typedef union
+{
+    HWREG_U32 SDIO_CORECFG_4_Content;
+    sSDIO_CORECFG_4Structure SDIO_CORECFG_4_Structure;
+} uSDIO_CORECFG_4;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDIO_CORECFG_4 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDIO_CORECFG_4 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element INIT_PRESET_VALUE of register SDIO_CORECFG_4 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element INIT_PRESET_VALUE of register SDIO_CORECFG_4 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element DSPD_PRESET_VALUE of register SDIO_CORECFG_4 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DSPD_PRESET_VALUE of register SDIO_CORECFG_4 */
+
+
+/** @brief SDIO_CORECFG_5 register description at address offset 0x314
+  *
+  *  SDIO_CORECFG_5
+  */
+typedef struct
+{
+    HWREG_U32 HSPD_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 SDR12_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} sSDIO_CORECFG_5Structure;
+
+
+/** @brief SDIO_CORECFG_5 Bitfield widths 
+*/
+#define lenSDIO_CORECFG_5_HSPD_PRESET_VALUE 13
+#define lenSDIO_CORECFG_5_SDR12_PRESET_VALUE 13
+
+typedef enum
+{
+    SDIO_CORECFG_5_LSB_HSPD_PRESET_VALUE = 0,
+    SDIO_CORECFG_5_LSB_SDR12_PRESET_VALUE = 16
+} eSDIO_CORECFG_5Lsb;
+
+typedef union
+{
+    HWREG_U32 SDIO_CORECFG_5_Content;
+    sSDIO_CORECFG_5Structure SDIO_CORECFG_5_Structure;
+} uSDIO_CORECFG_5;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDIO_CORECFG_5 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDIO_CORECFG_5 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element HSPD_PRESET_VALUE of register SDIO_CORECFG_5 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element HSPD_PRESET_VALUE of register SDIO_CORECFG_5 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR12_PRESET_VALUE of register SDIO_CORECFG_5 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR12_PRESET_VALUE of register SDIO_CORECFG_5 */
+
+
+/** @brief SDIO_CORECFG_6 register description at address offset 0x318
+  *
+  *  SDIO_CORECFG_6
+  */
+typedef struct
+{
+    HWREG_U32 SDR25_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 SDR50_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} sSDIO_CORECFG_6Structure;
+
+
+/** @brief SDIO_CORECFG_6 Bitfield widths 
+*/
+#define lenSDIO_CORECFG_6_SDR25_PRESET_VALUE 13
+#define lenSDIO_CORECFG_6_SDR50_PRESET_VALUE 13
+
+typedef enum
+{
+    SDIO_CORECFG_6_LSB_SDR25_PRESET_VALUE = 0,
+    SDIO_CORECFG_6_LSB_SDR50_PRESET_VALUE = 16
+} eSDIO_CORECFG_6Lsb;
+
+typedef union
+{
+    HWREG_U32 SDIO_CORECFG_6_Content;
+    sSDIO_CORECFG_6Structure SDIO_CORECFG_6_Structure;
+} uSDIO_CORECFG_6;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDIO_CORECFG_6 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDIO_CORECFG_6 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR25_PRESET_VALUE of register SDIO_CORECFG_6 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR25_PRESET_VALUE of register SDIO_CORECFG_6 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR50_PRESET_VALUE of register SDIO_CORECFG_6 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR50_PRESET_VALUE of register SDIO_CORECFG_6 */
+
+
+/** @brief SDIO_CORECFG_7 register description at address offset 0x31c
+  *
+  *  SDIO_CORECFG_7
+  */
+typedef struct
+{
+    HWREG_U32 SDR104_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+    HWREG_U32 DDR50_PRESET_VALUE :13; /**<  */
+    const HWREG_U32 :3; /**< Unused bitfield */
+} sSDIO_CORECFG_7Structure;
+
+
+/** @brief SDIO_CORECFG_7 Bitfield widths 
+*/
+#define lenSDIO_CORECFG_7_SDR104_PRESET_VALUE 13
+#define lenSDIO_CORECFG_7_DDR50_PRESET_VALUE 13
+
+typedef enum
+{
+    SDIO_CORECFG_7_LSB_SDR104_PRESET_VALUE = 0,
+    SDIO_CORECFG_7_LSB_DDR50_PRESET_VALUE = 16
+} eSDIO_CORECFG_7Lsb;
+
+typedef union
+{
+    HWREG_U32 SDIO_CORECFG_7_Content;
+    sSDIO_CORECFG_7Structure SDIO_CORECFG_7_Structure;
+} uSDIO_CORECFG_7;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDIO_CORECFG_7 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDIO_CORECFG_7 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element SDR104_PRESET_VALUE of register SDIO_CORECFG_7 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element SDR104_PRESET_VALUE of register SDIO_CORECFG_7 */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element DDR50_PRESET_VALUE of register SDIO_CORECFG_7 */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element DDR50_PRESET_VALUE of register SDIO_CORECFG_7 */
+
+
+/** @brief SDIO_PAD_DRV register description at address offset 0x320
+  *
+  *  SDIO_PAD_DRV
+  */
+typedef struct
+{
+    HWREG_U32 B_DRIVE :2; /**<  */
+    HWREG_U32 A_DRIVE :2; /**<  */
+    HWREG_U32 C_DRIVE :2; /**<  */
+    HWREG_U32 D_DRIVE :2; /**<  */
+    const HWREG_U32 :24; /**< Unused bitfield */
+} sSDIO_PAD_DRVStructure;
+
+
+/** @brief SDIO_PAD_DRV Bitfield widths 
+*/
+#define lenSDIO_PAD_DRV_B_DRIVE 2
+#define lenSDIO_PAD_DRV_A_DRIVE 2
+#define lenSDIO_PAD_DRV_C_DRIVE 2
+#define lenSDIO_PAD_DRV_D_DRIVE 2
+
+typedef enum
+{
+    SDIO_PAD_DRV_LSB_B_DRIVE = 0,
+    SDIO_PAD_DRV_LSB_A_DRIVE = 2,
+    SDIO_PAD_DRV_LSB_C_DRIVE = 4,
+    SDIO_PAD_DRV_LSB_D_DRIVE = 6
+} eSDIO_PAD_DRVLsb;
+
+typedef union
+{
+    HWREG_U32 SDIO_PAD_DRV_Content;
+    sSDIO_PAD_DRVStructure SDIO_PAD_DRV_Structure;
+} uSDIO_PAD_DRV;
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /** Set complete register SDIO_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_); /** Get complete register SDIO_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element B_DRIVE of register SDIO_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element B_DRIVE of register SDIO_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element A_DRIVE of register SDIO_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element A_DRIVE of register SDIO_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element C_DRIVE of register SDIO_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element C_DRIVE of register SDIO_PAD_DRV */
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value); /**< Set element D_DRIVE of register SDIO_PAD_DRV */
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_); /**< Get element D_DRIVE of register SDIO_PAD_DRV */
+
+
+struct _sSt_sbc12mon
+{
+    const HWREG_U8 reservedArea0 [12]; /*< Address offset = 0x0 */
+    uID ID; /*< Address offset = 0xc */
+    uCLC CLC; /*< Address offset = 0x10 */
+    uHWAPIVERS HWAPIVERS; /*< Address offset = 0x14 */
+    const HWREG_U8 reservedArea1 [4]; /*< Address offset = 0x18 */
+    uMON_SBC12_signals0 MON_SBC12_signals0; /*< Address offset = 0x1c */
+    uMON_SBC12_signals1 MON_SBC12_signals1; /*< Address offset = 0x20 */
+    uMON_SBC12_signals2 MON_SBC12_signals2; /*< Address offset = 0x24 */
+    uMON_SBC12_signals3 MON_SBC12_signals3; /*< Address offset = 0x28 */
+    usm1_sel_0 sm1_sel_0; /*< Address offset = 0x2c */
+    usm1_sel_1 sm1_sel_1; /*< Address offset = 0x30 */
+    usm1_sel_2 sm1_sel_2; /*< Address offset = 0x34 */
+    usm1_sel_3 sm1_sel_3; /*< Address offset = 0x38 */
+    const HWREG_U8 reservedArea2 [196]; /*< Address offset = 0x3c */
+    ueMMC_TAP_CTL eMMC_TAP_CTL; /*< Address offset = 0x100 */
+    ueMMC_CORECFG_1 eMMC_CORECFG_1; /*< Address offset = 0x104 */
+    ueMMC_CORECFG_2 eMMC_CORECFG_2; /*< Address offset = 0x108 */
+    ueMMC_CORECFG_3 eMMC_CORECFG_3; /*< Address offset = 0x10c */
+    ueMMC_CORECFG_4 eMMC_CORECFG_4; /*< Address offset = 0x110 */
+    ueMMC_CORECFG_5 eMMC_CORECFG_5; /*< Address offset = 0x114 */
+    ueMMC_CORECFG_6 eMMC_CORECFG_6; /*< Address offset = 0x118 */
+    ueMMC_CORECFG_7 eMMC_CORECFG_7; /*< Address offset = 0x11c */
+    ueMMC_PAD_DRV eMMC_PAD_DRV; /*< Address offset = 0x120 */
+    const HWREG_U8 reservedArea3 [220]; /*< Address offset = 0x124 */
+    uSDMMC_TAP_CTL SDMMC_TAP_CTL; /*< Address offset = 0x200 */
+    uSDMMC_CORECFG_1 SDMMC_CORECFG_1; /*< Address offset = 0x204 */
+    uSDMMC_CORECFG_2 SDMMC_CORECFG_2; /*< Address offset = 0x208 */
+    uSDMMC_CORECFG_3 SDMMC_CORECFG_3; /*< Address offset = 0x20c */
+    uSDMMC_CORECFG_4 SDMMC_CORECFG_4; /*< Address offset = 0x210 */
+    uSDMMC_CORECFG_5 SDMMC_CORECFG_5; /*< Address offset = 0x214 */
+    uSDMMC_CORECFG_6 SDMMC_CORECFG_6; /*< Address offset = 0x218 */
+    uSDMMC_CORECFG_7 SDMMC_CORECFG_7; /*< Address offset = 0x21c */
+    uSDMMC_PAD_DRV SDMMC_PAD_DRV; /*< Address offset = 0x220 */
+    const HWREG_U8 reservedArea4 [220]; /*< Address offset = 0x224 */
+    uSDIO_TAP_CTL SDIO_TAP_CTL; /*< Address offset = 0x300 */
+    uSDIO_CORECFG_1 SDIO_CORECFG_1; /*< Address offset = 0x304 */
+    uSDIO_CORECFG_2 SDIO_CORECFG_2; /*< Address offset = 0x308 */
+    uSDIO_CORECFG_3 SDIO_CORECFG_3; /*< Address offset = 0x30c */
+    uSDIO_CORECFG_4 SDIO_CORECFG_4; /*< Address offset = 0x310 */
+    uSDIO_CORECFG_5 SDIO_CORECFG_5; /*< Address offset = 0x314 */
+    uSDIO_CORECFG_6 SDIO_CORECFG_6; /*< Address offset = 0x318 */
+    uSDIO_CORECFG_7 SDIO_CORECFG_7; /*< Address offset = 0x31c */
+    uSDIO_PAD_DRV SDIO_PAD_DRV; /*< Address offset = 0x320 */
+};
+
+
+typedef enum _sSt_sbc12monResetValues
+{
+    MON_SBC12_ID_RESET_VALUE = (int)0xc001,
+    MON_SBC12_CLC_RESET_VALUE = (int)0x3,
+    MON_SBC12_HWAPIVERS_RESET_VALUE = (int)0x2d914fa0L,
+    MON_SBC12_SIGNALS0_RESET_VALUE = (int)0x0,
+    MON_SBC12_SIGNALS1_RESET_VALUE = (int)0x0,
+    MON_SBC12_SIGNALS2_RESET_VALUE = (int)0x0,
+    MON_SBC12_SIGNALS3_RESET_VALUE = (int)0x0,
+    SM1_SEL_0_RESET_VALUE = (int)0x0,
+    SM1_SEL_1_RESET_VALUE = (int)0x0,
+    SM1_SEL_2_RESET_VALUE = (int)0x0,
+    SM1_SEL_3_RESET_VALUE = (int)0x0,
+    EMMC_TAP_CTL_RESET_VALUE = (int)0xc51021,
+    EMMC_CORECFG_1_RESET_VALUE = (int)0xff1ada60L,
+    EMMC_CORECFG_2_RESET_VALUE = (int)0x74052,
+    EMMC_CORECFG_3_RESET_VALUE = (int)0x0,
+    EMMC_CORECFG_4_RESET_VALUE = (int)0x10001,
+    EMMC_CORECFG_5_RESET_VALUE = (int)0x10000,
+    EMMC_CORECFG_6_RESET_VALUE = (int)0x0,
+    EMMC_CORECFG_7_RESET_VALUE = (int)0x10000,
+    EMMC_PAD_DRV_RESET_VALUE = (int)0x1e,
+    SDMMC_TAP_CTL_RESET_VALUE = (int)0xc51021,
+    SDMMC_CORECFG_1_RESET_VALUE = (int)0xfe1ada20L,
+    SDMMC_CORECFG_2_RESET_VALUE = (int)0x74052,
+    SDMMC_CORECFG_3_RESET_VALUE = (int)0x0,
+    SDMMC_CORECFG_4_RESET_VALUE = (int)0x10001,
+    SDMMC_CORECFG_5_RESET_VALUE = (int)0x10000,
+    SDMMC_CORECFG_6_RESET_VALUE = (int)0x0,
+    SDMMC_CORECFG_7_RESET_VALUE = (int)0x10000,
+    SDMMC_PAD_DRV_RESET_VALUE = (int)0x475,
+    SDIO_TAP_CTL_RESET_VALUE = (int)0xc51021,
+    SDIO_CORECFG_1_RESET_VALUE = (int)0xfe1ada20L,
+    SDIO_CORECFG_2_RESET_VALUE = (int)0x74052,
+    SDIO_CORECFG_3_RESET_VALUE = (int)0x0,
+    SDIO_CORECFG_4_RESET_VALUE = (int)0x20002,
+    SDIO_CORECFG_5_RESET_VALUE = (int)0x20001,
+    SDIO_CORECFG_6_RESET_VALUE = (int)0x1,
+    SDIO_CORECFG_7_RESET_VALUE = (int)0x10000,
+    SDIO_PAD_DRV_RESET_VALUE = (int)0x1e
+} eSt_sbc12monResetValues;
+
+
+#if !defined(ST_SBC12MON_REG_INLINE_DISABLED) || defined(__ST_SBC12MON_HW_REG_C__)
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_ID(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->ID.ID_Content;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_ID_REV(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->ID.ID_Structure.REV;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_ID_MOD32(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->ID.ID_Structure.MOD32;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_ID_MOD(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->ID.ID_Structure.MOD;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->CLC.CLC_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_CLC(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->CLC.CLC_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_DISR(volatile sSt_sbc12mon *_st_sbc12mon_, eCLC_DISR value)
+{
+    /* Workaround for X-Bar synchronization problem in XG618 ES1 */
+    if(value == 1)
+        _st_sbc12mon_->CLC.CLC_Content = 0x1; /* Disable */
+    else
+        _st_sbc12mon_->CLC.CLC_Content = 0x100; /* Enable */
+}
+
+__HWREG_INLINE__ eCLC_DISR getSt_sbc12mon_CLC_DISR(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (eCLC_DISR)_st_sbc12mon_->CLC.CLC_Structure.DISR;
+}
+
+__HWREG_INLINE__ eCLC_DISS getSt_sbc12mon_CLC_DISS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (eCLC_DISS)_st_sbc12mon_->CLC.CLC_Structure.DISS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_SPEN(volatile sSt_sbc12mon *_st_sbc12mon_, eCLC_SPEN value)
+{
+    _st_sbc12mon_->CLC.CLC_Structure.SPEN = value;
+}
+
+__HWREG_INLINE__ eCLC_SPEN getSt_sbc12mon_CLC_SPEN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (eCLC_SPEN)_st_sbc12mon_->CLC.CLC_Structure.SPEN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_EDIS(volatile sSt_sbc12mon *_st_sbc12mon_, eCLC_EDIS value)
+{
+    _st_sbc12mon_->CLC.CLC_Structure.EDIS = value;
+}
+
+__HWREG_INLINE__ eCLC_EDIS getSt_sbc12mon_CLC_EDIS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (eCLC_EDIS)_st_sbc12mon_->CLC.CLC_Structure.EDIS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_SBWE(volatile sSt_sbc12mon *_st_sbc12mon_, eCLC_SBWE value)
+{
+    _st_sbc12mon_->CLC.CLC_Structure.SBWE = value;
+}
+
+__HWREG_INLINE__ eCLC_SBWE getSt_sbc12mon_CLC_SBWE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (eCLC_SBWE)_st_sbc12mon_->CLC.CLC_Structure.SBWE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_FSOE(volatile sSt_sbc12mon *_st_sbc12mon_, eCLC_FSOE value)
+{
+    _st_sbc12mon_->CLC.CLC_Structure.FSOE = value;
+}
+
+__HWREG_INLINE__ eCLC_FSOE getSt_sbc12mon_CLC_FSOE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (eCLC_FSOE)_st_sbc12mon_->CLC.CLC_Structure.FSOE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_RES1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->CLC.CLC_Structure.RES1 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_CLC_RES1(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->CLC.CLC_Structure.RES1;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_RMC(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    /* Workaround for X-Bar synchronization problem in XG618 ES1 */
+    /* Left out for ES1 */
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_CLC_RMC(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->CLC.CLC_Structure.RMC;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_ORMC(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->CLC.CLC_Structure.ORMC = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_CLC_ORMC(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->CLC.CLC_Structure.ORMC;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_CLC_RES2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->CLC.CLC_Structure.RES2 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_CLC_RES2(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->CLC.CLC_Structure.RES2;
+}
+
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_HWAPIVERS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->HWAPIVERS.HWAPIVERS_Content;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_HWAPIVERS_CHKSUM(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->HWAPIVERS.HWAPIVERS_Structure.CHKSUM;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals0(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals0.MON_SBC12_signals0_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals0(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->MON_SBC12_signals0.MON_SBC12_signals0_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals0_SIG_0(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals0.MON_SBC12_signals0_Structure.SIG_0 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals0_SIG_0(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals0.MON_SBC12_signals0_Structure.SIG_0;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals0_SIG_1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals0.MON_SBC12_signals0_Structure.SIG_1 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals0_SIG_1(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals0.MON_SBC12_signals0_Structure.SIG_1;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals0_SIG_2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals0.MON_SBC12_signals0_Structure.SIG_2 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals0_SIG_2(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals0.MON_SBC12_signals0_Structure.SIG_2;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals0_SIG_3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals0.MON_SBC12_signals0_Structure.SIG_3 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals0_SIG_3(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals0.MON_SBC12_signals0_Structure.SIG_3;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals1.MON_SBC12_signals1_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals1(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->MON_SBC12_signals1.MON_SBC12_signals1_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals1_SIG_4(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals1.MON_SBC12_signals1_Structure.SIG_4 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals1_SIG_4(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals1.MON_SBC12_signals1_Structure.SIG_4;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals1_SIG_5(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals1.MON_SBC12_signals1_Structure.SIG_5 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals1_SIG_5(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals1.MON_SBC12_signals1_Structure.SIG_5;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals1_SIG_6(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals1.MON_SBC12_signals1_Structure.SIG_6 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals1_SIG_6(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals1.MON_SBC12_signals1_Structure.SIG_6;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals1_SIG_7(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals1.MON_SBC12_signals1_Structure.SIG_7 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals1_SIG_7(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals1.MON_SBC12_signals1_Structure.SIG_7;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals2.MON_SBC12_signals2_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals2(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->MON_SBC12_signals2.MON_SBC12_signals2_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals2_SIG_8(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals2.MON_SBC12_signals2_Structure.SIG_8 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals2_SIG_8(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals2.MON_SBC12_signals2_Structure.SIG_8;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals2_SIG_9(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals2.MON_SBC12_signals2_Structure.SIG_9 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals2_SIG_9(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals2.MON_SBC12_signals2_Structure.SIG_9;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals2_SIG_10(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals2.MON_SBC12_signals2_Structure.SIG_10 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals2_SIG_10(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals2.MON_SBC12_signals2_Structure.SIG_10;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals2_SIG_11(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals2.MON_SBC12_signals2_Structure.SIG_11 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals2_SIG_11(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals2.MON_SBC12_signals2_Structure.SIG_11;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals3.MON_SBC12_signals3_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals3(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->MON_SBC12_signals3.MON_SBC12_signals3_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals3_SIG_12(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals3.MON_SBC12_signals3_Structure.SIG_12 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals3_SIG_12(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals3.MON_SBC12_signals3_Structure.SIG_12;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals3_SIG_13(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals3.MON_SBC12_signals3_Structure.SIG_13 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals3_SIG_13(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals3.MON_SBC12_signals3_Structure.SIG_13;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals3_SIG_14(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals3.MON_SBC12_signals3_Structure.SIG_14 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals3_SIG_14(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals3.MON_SBC12_signals3_Structure.SIG_14;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_MON_SBC12_signals3_SIG_15(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->MON_SBC12_signals3.MON_SBC12_signals3_Structure.SIG_15 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_MON_SBC12_signals3_SIG_15(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->MON_SBC12_signals3.MON_SBC12_signals3_Structure.SIG_15;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_0(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_0.sm1_sel_0_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_0(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->sm1_sel_0.sm1_sel_0_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_0_signal_sel0(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_0.sm1_sel_0_Structure.signal_sel0 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_0_signal_sel0(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_0.sm1_sel_0_Structure.signal_sel0;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_0_signal_sel1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_0.sm1_sel_0_Structure.signal_sel1 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_0_signal_sel1(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_0.sm1_sel_0_Structure.signal_sel1;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_0_signal_sel2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_0.sm1_sel_0_Structure.signal_sel2 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_0_signal_sel2(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_0.sm1_sel_0_Structure.signal_sel2;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_0_signal_sel3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_0.sm1_sel_0_Structure.signal_sel3 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_0_signal_sel3(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_0.sm1_sel_0_Structure.signal_sel3;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_1.sm1_sel_1_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_1(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->sm1_sel_1.sm1_sel_1_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_1_signal_sel4(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_1.sm1_sel_1_Structure.signal_sel4 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_1_signal_sel4(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_1.sm1_sel_1_Structure.signal_sel4;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_1_signal_sel5(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_1.sm1_sel_1_Structure.signal_sel5 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_1_signal_sel5(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_1.sm1_sel_1_Structure.signal_sel5;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_1_signal_sel6(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_1.sm1_sel_1_Structure.signal_sel6 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_1_signal_sel6(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_1.sm1_sel_1_Structure.signal_sel6;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_1_signal_sel7(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_1.sm1_sel_1_Structure.signal_sel7 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_1_signal_sel7(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_1.sm1_sel_1_Structure.signal_sel7;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_2.sm1_sel_2_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_2(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->sm1_sel_2.sm1_sel_2_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_2_signal_sel8(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_2.sm1_sel_2_Structure.signal_sel8 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_2_signal_sel8(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_2.sm1_sel_2_Structure.signal_sel8;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_2_signal_sel9(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_2.sm1_sel_2_Structure.signal_sel9 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_2_signal_sel9(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_2.sm1_sel_2_Structure.signal_sel9;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_2_signal_sel10(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_2.sm1_sel_2_Structure.signal_sel10 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_2_signal_sel10(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_2.sm1_sel_2_Structure.signal_sel10;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_2_signal_sel11(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_2.sm1_sel_2_Structure.signal_sel11 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_2_signal_sel11(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_2.sm1_sel_2_Structure.signal_sel11;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_3.sm1_sel_3_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_3(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->sm1_sel_3.sm1_sel_3_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_3_signal_sel12(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_3.sm1_sel_3_Structure.signal_sel12 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_3_signal_sel12(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_3.sm1_sel_3_Structure.signal_sel12;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_3_signal_sel13(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_3.sm1_sel_3_Structure.signal_sel13 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_3_signal_sel13(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_3.sm1_sel_3_Structure.signal_sel13;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_3_signal_sel14(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_3.sm1_sel_3_Structure.signal_sel14 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_3_signal_sel14(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_3.sm1_sel_3_Structure.signal_sel14;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_sm1_sel_3_signal_sel15(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->sm1_sel_3.sm1_sel_3_Structure.signal_sel15 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_sm1_sel_3_signal_sel15(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->sm1_sel_3.sm1_sel_3_Structure.signal_sel15;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.IP_TAP_EN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.IP_TAP_EN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.IP_TAP_CHGWIN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.IP_TAP_CHGWIN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.IP_DELAY_CTRL = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.IP_DELAY_CTRL;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.IP_TAP_DELAY = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.IP_TAP_DELAY;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.OP_TAP_EN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.OP_TAP_EN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.OP_DELAY_CTRL = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.OP_DELAY_CTRL;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.OP_TAP_DELAY = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_TAP_CTL.eMMC_TAP_CTL_Structure.OP_TAP_DELAY;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.TUNING_COUNT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.TUNING_COUNT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.MAX_BLOCK_LENGTH = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.MAX_BLOCK_LENGTH;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.TIMEOUT_CLK_FREQ = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.TIMEOUT_CLK_FREQ;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.TIMEOUT_CLK_UNIT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.TIMEOUT_CLK_UNIT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.ASYNC_WAKEUP_EN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.ASYNC_WAKEUP_EN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.BASE_CLK_FREQ = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.BASE_CLK_FREQ;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SUPPORT_8_BITS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SUPPORT_8_BITS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.ADMA2_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.ADMA2_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.HIGH_SPEED_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.HIGH_SPEED_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SDMA_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SDMA_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SUPPRESS_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SUPPRESS_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SUPPORT_3P3_VOLTS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SUPPORT_3P3_VOLTS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SUPPORT_3P0_VOLTS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SUPPORT_3P0_VOLTS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SUPPORT_1P8_VOLTS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_1.eMMC_CORECFG_1_Structure.SUPPORT_1P8_VOLTS;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SUPPORT_64_BITS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SUPPORT_64_BITS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.ASYNC_INT_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.ASYNC_INT_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SLOT_TYPE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SLOT_TYPE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SDR_50_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SDR_50_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SDR_104_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SDR_104_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.DDR_50_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.DDR_50_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.RETUNING_TIMER_COUNT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.RETUNING_TIMER_COUNT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.RETUNING_MODE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.RETUNING_MODE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.TUNING_FOR_SDR50 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.TUNING_FOR_SDR50;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.A_DRIVER_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.A_DRIVER_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.C_DRIVER_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.C_DRIVER_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.D_DRIVER_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.D_DRIVER_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SPI_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SPI_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SPI_BLOCK_MODE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.SPI_BLOCK_MODE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.CLOCK_MULTIPLIER = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_2.eMMC_CORECFG_2_Structure.CLOCK_MULTIPLIER;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_3.eMMC_CORECFG_3_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->eMMC_CORECFG_3.eMMC_CORECFG_3_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_3.eMMC_CORECFG_3_Structure.MAX_CURRENT_1P8V = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_3.eMMC_CORECFG_3_Structure.MAX_CURRENT_1P8V;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_3.eMMC_CORECFG_3_Structure.MAX_CURRENT_3P0V = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_3.eMMC_CORECFG_3_Structure.MAX_CURRENT_3P0V;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_3.eMMC_CORECFG_3_Structure.MAX_CURRENT_3P3V = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_3.eMMC_CORECFG_3_Structure.MAX_CURRENT_3P3V;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_4.eMMC_CORECFG_4_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->eMMC_CORECFG_4.eMMC_CORECFG_4_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_4.eMMC_CORECFG_4_Structure.INIT_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_4.eMMC_CORECFG_4_Structure.INIT_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_4.eMMC_CORECFG_4_Structure.DSPD_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_4.eMMC_CORECFG_4_Structure.DSPD_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_5.eMMC_CORECFG_5_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->eMMC_CORECFG_5.eMMC_CORECFG_5_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_5.eMMC_CORECFG_5_Structure.HSPD_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_5.eMMC_CORECFG_5_Structure.HSPD_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_5.eMMC_CORECFG_5_Structure.SDR12_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_5.eMMC_CORECFG_5_Structure.SDR12_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_6.eMMC_CORECFG_6_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->eMMC_CORECFG_6.eMMC_CORECFG_6_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_6.eMMC_CORECFG_6_Structure.SDR25_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_6.eMMC_CORECFG_6_Structure.SDR25_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_6.eMMC_CORECFG_6_Structure.SDR50_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_6.eMMC_CORECFG_6_Structure.SDR50_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_7.eMMC_CORECFG_7_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->eMMC_CORECFG_7.eMMC_CORECFG_7_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_7.eMMC_CORECFG_7_Structure.SDR104_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_7.eMMC_CORECFG_7_Structure.SDR104_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_CORECFG_7.eMMC_CORECFG_7_Structure.DDR50_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_CORECFG_7.eMMC_CORECFG_7_Structure.DDR50_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_PAD_DRV.eMMC_PAD_DRV_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->eMMC_PAD_DRV.eMMC_PAD_DRV_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_PAD_DRV.eMMC_PAD_DRV_Structure.B_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_PAD_DRV.eMMC_PAD_DRV_Structure.B_DRIVE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_PAD_DRV.eMMC_PAD_DRV_Structure.A_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_PAD_DRV.eMMC_PAD_DRV_Structure.A_DRIVE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_PAD_DRV.eMMC_PAD_DRV_Structure.C_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_PAD_DRV.eMMC_PAD_DRV_Structure.C_DRIVE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_eMMC_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->eMMC_PAD_DRV.eMMC_PAD_DRV_Structure.D_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_eMMC_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->eMMC_PAD_DRV.eMMC_PAD_DRV_Structure.D_DRIVE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.IP_TAP_EN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.IP_TAP_EN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.IP_TAP_CHGWIN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.IP_TAP_CHGWIN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.IP_DELAY_CTRL = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.IP_DELAY_CTRL;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.IP_TAP_DELAY = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.IP_TAP_DELAY;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.OP_TAP_EN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.OP_TAP_EN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.OP_DELAY_CTRL = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.OP_DELAY_CTRL;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.OP_TAP_DELAY = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_TAP_CTL.SDMMC_TAP_CTL_Structure.OP_TAP_DELAY;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.TUNING_COUNT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.TUNING_COUNT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.MAX_BLOCK_LENGTH = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.MAX_BLOCK_LENGTH;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.TIMEOUT_CLK_FREQ = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.TIMEOUT_CLK_FREQ;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.TIMEOUT_CLK_UNIT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.TIMEOUT_CLK_UNIT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.ASYNC_WAKEUP_EN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.ASYNC_WAKEUP_EN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.BASE_CLK_FREQ = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.BASE_CLK_FREQ;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SUPPORT_8_BITS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SUPPORT_8_BITS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.ADMA2_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.ADMA2_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.HIGH_SPEED_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.HIGH_SPEED_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SDMA_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SDMA_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SUPPRESS_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SUPPRESS_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SUPPORT_3P3_VOLTS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SUPPORT_3P3_VOLTS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SUPPORT_3P0_VOLTS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SUPPORT_3P0_VOLTS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SUPPORT_1P8_VOLTS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_1.SDMMC_CORECFG_1_Structure.SUPPORT_1P8_VOLTS;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SUPPORT_64_BITS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SUPPORT_64_BITS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.ASYNC_INT_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.ASYNC_INT_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SLOT_TYPE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SLOT_TYPE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SDR_50_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SDR_50_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SDR_104_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SDR_104_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.DDR_50_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.DDR_50_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.RETUNING_TIMER_COUNT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.RETUNING_TIMER_COUNT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.RETUNING_MODE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.RETUNING_MODE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.TUNING_FOR_SDR50 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.TUNING_FOR_SDR50;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.A_DRIVER_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.A_DRIVER_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.C_DRIVER_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.C_DRIVER_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.D_DRIVER_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.D_DRIVER_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SPI_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SPI_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SPI_BLOCK_MODE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.SPI_BLOCK_MODE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.CLOCK_MULTIPLIER = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_2.SDMMC_CORECFG_2_Structure.CLOCK_MULTIPLIER;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_3.SDMMC_CORECFG_3_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDMMC_CORECFG_3.SDMMC_CORECFG_3_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_3.SDMMC_CORECFG_3_Structure.MAX_CURRENT_1P8V = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_3.SDMMC_CORECFG_3_Structure.MAX_CURRENT_1P8V;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_3.SDMMC_CORECFG_3_Structure.MAX_CURRENT_3P0V = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_3.SDMMC_CORECFG_3_Structure.MAX_CURRENT_3P0V;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_3.SDMMC_CORECFG_3_Structure.MAX_CURRENT_3P3V = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_3.SDMMC_CORECFG_3_Structure.MAX_CURRENT_3P3V;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_4.SDMMC_CORECFG_4_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDMMC_CORECFG_4.SDMMC_CORECFG_4_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_4.SDMMC_CORECFG_4_Structure.INIT_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_4.SDMMC_CORECFG_4_Structure.INIT_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_4.SDMMC_CORECFG_4_Structure.DSPD_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_4.SDMMC_CORECFG_4_Structure.DSPD_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_5.SDMMC_CORECFG_5_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDMMC_CORECFG_5.SDMMC_CORECFG_5_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_5.SDMMC_CORECFG_5_Structure.HSPD_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_5.SDMMC_CORECFG_5_Structure.HSPD_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_5.SDMMC_CORECFG_5_Structure.SDR12_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_5.SDMMC_CORECFG_5_Structure.SDR12_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_6.SDMMC_CORECFG_6_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDMMC_CORECFG_6.SDMMC_CORECFG_6_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_6.SDMMC_CORECFG_6_Structure.SDR25_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_6.SDMMC_CORECFG_6_Structure.SDR25_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_6.SDMMC_CORECFG_6_Structure.SDR50_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_6.SDMMC_CORECFG_6_Structure.SDR50_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_7.SDMMC_CORECFG_7_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDMMC_CORECFG_7.SDMMC_CORECFG_7_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_7.SDMMC_CORECFG_7_Structure.SDR104_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_7.SDMMC_CORECFG_7_Structure.SDR104_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_CORECFG_7.SDMMC_CORECFG_7_Structure.DDR50_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_CORECFG_7.SDMMC_CORECFG_7_Structure.DDR50_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_PAD_DRV.SDMMC_PAD_DRV_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDMMC_PAD_DRV.SDMMC_PAD_DRV_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_PAD_DRV.SDMMC_PAD_DRV_Structure.B_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_PAD_DRV.SDMMC_PAD_DRV_Structure.B_DRIVE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_PAD_DRV.SDMMC_PAD_DRV_Structure.A_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_PAD_DRV.SDMMC_PAD_DRV_Structure.A_DRIVE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_PAD_DRV.SDMMC_PAD_DRV_Structure.C_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_PAD_DRV.SDMMC_PAD_DRV_Structure.C_DRIVE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDMMC_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDMMC_PAD_DRV.SDMMC_PAD_DRV_Structure.D_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDMMC_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDMMC_PAD_DRV.SDMMC_PAD_DRV_Structure.D_DRIVE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.IP_TAP_EN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.IP_TAP_EN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.IP_TAP_CHGWIN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_CHGWIN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.IP_TAP_CHGWIN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.IP_DELAY_CTRL = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_IP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.IP_DELAY_CTRL;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.IP_TAP_DELAY = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_IP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.IP_TAP_DELAY;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.OP_TAP_EN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_OP_TAP_EN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.OP_TAP_EN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.OP_DELAY_CTRL = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_OP_DELAY_CTRL(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.OP_DELAY_CTRL;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.OP_TAP_DELAY = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_TAP_CTL_OP_TAP_DELAY(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_TAP_CTL.SDIO_TAP_CTL_Structure.OP_TAP_DELAY;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.TUNING_COUNT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_TUNING_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.TUNING_COUNT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.MAX_BLOCK_LENGTH = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_MAX_BLOCK_LENGTH(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.MAX_BLOCK_LENGTH;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.TIMEOUT_CLK_FREQ = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_TIMEOUT_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.TIMEOUT_CLK_FREQ;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.TIMEOUT_CLK_UNIT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_TIMEOUT_CLK_UNIT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.TIMEOUT_CLK_UNIT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.ASYNC_WAKEUP_EN = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_ASYNC_WAKEUP_EN(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.ASYNC_WAKEUP_EN;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.BASE_CLK_FREQ = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_BASE_CLK_FREQ(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.BASE_CLK_FREQ;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SUPPORT_8_BITS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_8_BITS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SUPPORT_8_BITS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.ADMA2_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_ADMA2_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.ADMA2_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.HIGH_SPEED_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_HIGH_SPEED_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.HIGH_SPEED_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SDMA_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SDMA_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SDMA_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SUPPRESS_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SUPPRESS_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SUPPRESS_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SUPPORT_3P3_VOLTS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_3P3_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SUPPORT_3P3_VOLTS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SUPPORT_3P0_VOLTS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_3P0_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SUPPORT_3P0_VOLTS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SUPPORT_1P8_VOLTS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_1_SUPPORT_1P8_VOLTS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_1.SDIO_CORECFG_1_Structure.SUPPORT_1P8_VOLTS;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SUPPORT_64_BITS = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SUPPORT_64_BITS(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SUPPORT_64_BITS;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.ASYNC_INT_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_ASYNC_INT_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.ASYNC_INT_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SLOT_TYPE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SLOT_TYPE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SLOT_TYPE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SDR_50_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SDR_50_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SDR_104_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SDR_104_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SDR_104_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.DDR_50_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_DDR_50_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.DDR_50_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.RETUNING_TIMER_COUNT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_RETUNING_TIMER_COUNT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.RETUNING_TIMER_COUNT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.RETUNING_MODE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_RETUNING_MODE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.RETUNING_MODE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.TUNING_FOR_SDR50 = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_TUNING_FOR_SDR50(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.TUNING_FOR_SDR50;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.A_DRIVER_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_A_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.A_DRIVER_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.C_DRIVER_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_C_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.C_DRIVER_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.D_DRIVER_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_D_DRIVER_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.D_DRIVER_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SPI_SUPPORT = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SPI_SUPPORT(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SPI_SUPPORT;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SPI_BLOCK_MODE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_SPI_BLOCK_MODE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.SPI_BLOCK_MODE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.CLOCK_MULTIPLIER = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_2_CLOCK_MULTIPLIER(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_2.SDIO_CORECFG_2_Structure.CLOCK_MULTIPLIER;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_3.SDIO_CORECFG_3_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_3(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDIO_CORECFG_3.SDIO_CORECFG_3_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_3.SDIO_CORECFG_3_Structure.MAX_CURRENT_1P8V = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_1P8V(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_3.SDIO_CORECFG_3_Structure.MAX_CURRENT_1P8V;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_3.SDIO_CORECFG_3_Structure.MAX_CURRENT_3P0V = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_3P0V(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_3.SDIO_CORECFG_3_Structure.MAX_CURRENT_3P0V;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_3.SDIO_CORECFG_3_Structure.MAX_CURRENT_3P3V = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_3_MAX_CURRENT_3P3V(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_3.SDIO_CORECFG_3_Structure.MAX_CURRENT_3P3V;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_4.SDIO_CORECFG_4_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_4(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDIO_CORECFG_4.SDIO_CORECFG_4_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_4.SDIO_CORECFG_4_Structure.INIT_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_4_INIT_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_4.SDIO_CORECFG_4_Structure.INIT_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_4.SDIO_CORECFG_4_Structure.DSPD_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_4_DSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_4.SDIO_CORECFG_4_Structure.DSPD_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_5.SDIO_CORECFG_5_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_5(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDIO_CORECFG_5.SDIO_CORECFG_5_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_5.SDIO_CORECFG_5_Structure.HSPD_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_5_HSPD_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_5.SDIO_CORECFG_5_Structure.HSPD_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_5.SDIO_CORECFG_5_Structure.SDR12_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_5_SDR12_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_5.SDIO_CORECFG_5_Structure.SDR12_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_6.SDIO_CORECFG_6_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_6(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDIO_CORECFG_6.SDIO_CORECFG_6_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_6.SDIO_CORECFG_6_Structure.SDR25_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_6_SDR25_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_6.SDIO_CORECFG_6_Structure.SDR25_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_6.SDIO_CORECFG_6_Structure.SDR50_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_6_SDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_6.SDIO_CORECFG_6_Structure.SDR50_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_7.SDIO_CORECFG_7_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_7(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDIO_CORECFG_7.SDIO_CORECFG_7_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_7.SDIO_CORECFG_7_Structure.SDR104_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_7_SDR104_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_7.SDIO_CORECFG_7_Structure.SDR104_PRESET_VALUE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_CORECFG_7.SDIO_CORECFG_7_Structure.DDR50_PRESET_VALUE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_CORECFG_7_DDR50_PRESET_VALUE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_CORECFG_7.SDIO_CORECFG_7_Structure.DDR50_PRESET_VALUE;
+}
+
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_PAD_DRV.SDIO_PAD_DRV_Content = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_PAD_DRV(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return _st_sbc12mon_->SDIO_PAD_DRV.SDIO_PAD_DRV_Content;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_PAD_DRV.SDIO_PAD_DRV_Structure.B_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_PAD_DRV_B_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_PAD_DRV.SDIO_PAD_DRV_Structure.B_DRIVE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_PAD_DRV.SDIO_PAD_DRV_Structure.A_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_PAD_DRV_A_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_PAD_DRV.SDIO_PAD_DRV_Structure.A_DRIVE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_PAD_DRV.SDIO_PAD_DRV_Structure.C_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_PAD_DRV_C_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_PAD_DRV.SDIO_PAD_DRV_Structure.C_DRIVE;
+}
+
+__HWREG_INLINE__ void setSt_sbc12mon_SDIO_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_, HWREG_U32 value)
+{
+    _st_sbc12mon_->SDIO_PAD_DRV.SDIO_PAD_DRV_Structure.D_DRIVE = value;
+}
+
+__HWREG_INLINE__ HWREG_U32 getSt_sbc12mon_SDIO_PAD_DRV_D_DRIVE(volatile sSt_sbc12mon *_st_sbc12mon_)
+{
+    return (HWREG_U32)_st_sbc12mon_->SDIO_PAD_DRV.SDIO_PAD_DRV_Structure.D_DRIVE;
+}
+
+
+
+#endif
+
+
+#endif
+
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc1_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc1_mon_reg.c
new file mode 100644
index 0000000..3a473f2
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc1_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc1_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc1_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc1_mon_reg.h
new file mode 100644
index 0000000..ee803a5
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc1_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc1_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc2_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc2_mon_reg.c
new file mode 100644
index 0000000..65621b1
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc2_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc2_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc2_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc2_mon_reg.h
new file mode 100644
index 0000000..2601968
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc2_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc2_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc3_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc3_mon_reg.c
new file mode 100644
index 0000000..5a6f623
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc3_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc3_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc3_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc3_mon_reg.h
new file mode 100644
index 0000000..f449111
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc3_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc3_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc4_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc4_mon_reg.c
new file mode 100644
index 0000000..42dcf44
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc4_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc4_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc4_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc4_mon_reg.h
new file mode 100644
index 0000000..da96e7e
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc4_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc4_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc5_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc5_mon_reg.c
new file mode 100644
index 0000000..0f6d0d7
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc5_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc5_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc5_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc5_mon_reg.h
new file mode 100644
index 0000000..a50136c
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc5_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc5_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc6_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc6_mon_reg.c
new file mode 100644
index 0000000..a4bc11a
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc6_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc6_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc6_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc6_mon_reg.h
new file mode 100644
index 0000000..ead8b80
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc6_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc6_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc7_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc7_mon_reg.c
new file mode 100644
index 0000000..eb76820
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc7_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc7_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc7_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc7_mon_reg.h
new file mode 100644
index 0000000..52fddfd
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc7_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc7_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc8_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc8_mon_reg.c
new file mode 100644
index 0000000..f480ee2
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc8_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc8_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc8_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc8_mon_reg.h
new file mode 100644
index 0000000..f605136
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc8_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc8_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc9_mon_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc9_mon_reg.c
new file mode 100644
index 0000000..c0c0b2c
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc9_mon_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc9_mon_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc9_mon_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc9_mon_reg.h
new file mode 100644
index 0000000..98a2a42
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/st_sbc9_mon_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/st_sbc9_mon_reg.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_hal.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_hal.c
new file mode 100644
index 0000000..ebad96f
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_hal.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/tpiu_hal.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_hal.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_hal.h
new file mode 100644
index 0000000..e69d7fa
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_hal.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/tpiu_hal.h"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_reg.c b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_reg.c
new file mode 100644
index 0000000..df14189
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_reg.c
@@ -0,0 +1 @@
+#include "../sf_3g_soc/tpiu_reg.c"
diff --git a/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_reg.h b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_reg.h
new file mode 100644
index 0000000..52163f6
--- /dev/null
+++ b/mhw_drv_src/trace_debug/hal/sf_3gx_soc/tpiu_reg.h
@@ -0,0 +1 @@
+#include "../sf_3g_soc/tpiu_reg.h"
diff --git a/uta_inc/nvm/sf_3gx/uta_nvm_cfg.h b/uta_inc/nvm/sf_3gx/uta_nvm_cfg.h
new file mode 100644
index 0000000..895d581
--- /dev/null
+++ b/uta_inc/nvm/sf_3gx/uta_nvm_cfg.h
@@ -0,0 +1,538 @@
+/*  -------------------------------------------------------------------------
+    Copyright (C) 2011-2013 Intel Mobile Communications GmbH
+
+    Sec Class: Intel Confidential (IC)
+
+     ----------------------------------------------------------------------
+     Revision Information:
+     $$File name:  /uta_inc/nvm/sf_3gr/uta_nvm_cfg.h $
+
+     History:
+     2015/4/9: This is customized for garnet instead of using ../xmm6310/uta_nvm_cfg.h
+               because TLV version can't update after Write Protect is enabled.
+     ---------------------------------------------------------------------- */
+
+#if !defined(uta_nvm_cfg_h)
+#define uta_nvm_cfg_h
+
+/*
+** =============================================================================
+**
+**                              MODULE DESCRIPTION
+**
+** =============================================================================
+*/
+
+/** @addtogroup UTA_PLAT Platform Services
+    @ingroup UTA
+    @addtogroup UTA_NVM Non Volatile Memory Access [UtaNvm]
+    @ingroup UTA_PLAT
+ */
+/** @{
+*/
+
+/**
+  @file uta_nvm_cfg.h
+  This header file includes:
+  - Enums for Nvm types, to be used for identifying the specific UTA NVM groups
+    used by different users
+  - Structure definitions for the UTA NVM groups.
+  This header file is for project specific configuration
+*/
+
+/*
+** =============================================================================
+**
+**                              INCLUDE STATEMENTS
+**
+** =============================================================================
+*/
+
+#include "uta_types.h"
+#include "uta_nvm_ids.h"
+
+#ifdef __cplusplus
+    extern "C" {
+#endif /* __cplusplus */
+
+/*----------------------------------------------------------------------------*/
+/*                  ---  Enumerations  ---								      */
+/*----------------------------------------------------------------------------*/
+
+
+/*!
+ * \brief This enumeration contains the projects specific UTA NVM ID's for
+ * static-calib, static-fixed and dynamic.
+ * Each ID is mapped to a corresponding group ID in the UTA NVM system.
+ * Each of the enum names below could be changed to specific names.
+ * ID's defined but not written will not take up any physical memory space.
+ *
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+#if defined(CAT_XMM2231_SUPPORT)
+#define UTA_NVM_STA_USER_SETTING UTA_NVM_STA_CAL_USER_SETTING
+#endif
+
+typedef enum
+{
+   UTA_NVM_STA_CAL_CUST_1         = UTA_NVM_STA_CAL_1    /**< Static calib  1 for UTA */
+  ,UTA_NVM_STA_ECC_NO             = UTA_NVM_STA_CAL_2    /**< Static calib  2 for UTA */
+  ,UTA_NVM_STA_USER_SETTING       = UTA_NVM_STA_CAL_3    /**< Static calib  3 for UTA */
+  ,UTA_NVM_STA_CAL_CUST_SETTING   = UTA_NVM_STA_CAL_4    /**< Static calib  4 for UTA */
+  ,UTA_NVM_STA_CAL_CUST_5         = UTA_NVM_STA_CAL_5    /**< Static calib  5 for UTA */
+  ,UTA_NVM_STA_CAL_CUST_6         = UTA_NVM_STA_CAL_6    /**< Static calib  6 for UTA */
+  ,UTA_NVM_STA_CAL_CUST_7         = UTA_NVM_STA_CAL_7    /**< Static calib  7 for UTA */
+  ,UTA_NVM_STA_CAL_CUST_8         = UTA_NVM_STA_CAL_8    /**< Static calib  8 for UTA */
+  ,UTA_NVM_STA_CAL_CUST_9         = UTA_NVM_STA_CAL_9    /**< Static calib  9 for UTA */
+  ,UTA_NVM_STA_CAL_CUST_10        = UTA_NVM_STA_CAL_10    /**< Static calib 10 for UTA */
+
+  ,UTA_NVM_STA_FIX_CUST_1         = UTA_NVM_STA_FIX_1    /**< Static fixed  1 for UTA */
+  ,UTA_NVM_STA_FIX_CUST_2         = UTA_NVM_STA_FIX_2    /**< Static fixed  2 for UTA */
+  ,UTA_NVM_STA_FIX_CUST_3         = UTA_NVM_STA_FIX_3    /**< Static fixed  3 for UTA */
+  ,UTA_NVM_STA_FIX_CUST_4         = UTA_NVM_STA_FIX_4    /**< Static fixed  4 for UTA */
+  ,UTA_NVM_STA_FIX_CUST_5         = UTA_NVM_STA_FIX_5    /**< Static fixed  5 for UTA */
+  ,UTA_NVM_STA_FIX_CUST_6         = UTA_NVM_STA_FIX_6    /**< Static fixed  6 for UTA */
+  ,UTA_NVM_STA_FIX_CUST_7         = UTA_NVM_STA_FIX_7    /**< Static fixed  7 for UTA */
+  ,UTA_NVM_STA_FIX_CUST_8         = UTA_NVM_STA_FIX_8    /**< Static fixed  8 for UTA */
+  ,UTA_NVM_STA_FIX_CUST_9         = UTA_NVM_STA_FIX_9    /**< Static fixed  9 for UTA */
+  ,UTA_NVM_STA_FIX_CUST_10        = UTA_NVM_STA_FIX_10   /**< Static fixed 10 for UTA */
+
+  ,UTA_NVM_DYN_DAM_RTC            = UTA_NVM_DYN_1        /**< Dynamic  1 for UTA */
+  ,UTA_NVM_DYN_DAM_SCU            = UTA_NVM_DYN_2        /**< Dynamic  2 for UTA */
+  ,UTA_NVM_DYN_CAT_SETTING        = UTA_NVM_DYN_3        /**< Dynamic  3 for UTA */
+  ,UTA_NVM_DYN_CAT_CSI_SETTING    = UTA_NVM_DYN_4        /**< Dynamic  4 for UTA */
+  ,UTA_NVM_DYN_CUST_BOOT_INFO     = UTA_NVM_DYN_5        /**< Dynamic  5 for UTA */
+  ,UTA_NVM_DYN_CUST_6             = UTA_NVM_DYN_6        /**< Dynamic  6 for UTA */
+  ,UTA_NVM_DYN_CUST_7             = UTA_NVM_DYN_7        /**< Dynamic  7 for UTA */
+  ,UTA_NVM_DYN_CUST_8             = UTA_NVM_DYN_8        /**< Dynamic  8 for UTA */
+  ,UTA_NVM_DYN_CUST_9             = UTA_NVM_DYN_9        /**< Dynamic  9 for UTA */
+  ,UTA_NVM_DYN_CUST_10            = UTA_NVM_DYN_10       /**< Dynamic 10 for UTA */
+
+} UtaNvmIdType;
+
+
+/****************************************************************************************/
+/* DATA STRUCTURES                                                                BEGIN */
+/****************************************************************************************/
+
+/*
+ The structures can be declared as arrays, specific types or can be included via external header files.
+ The defined types will be included in the NVM configuration file which is used by the PC tools.
+ If tool support is not needed these structures can be left empty.
+*/
+
+/* Example for a structure definition for ID: UTA_NVM_STA_CAL: */
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data; /**<definition of group*/
+} T_UTA_1_NVM_STA_CAL;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt8 data[832];/**<definition of group*/
+} T_UTA_2_NVM_STA_CAL;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  ////<deprecated Static group definition, will be removed when dynamic group access is introduced.
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt8 data[32768]; /**<definition of group 32k bytes*/
+} T_UTA_3_NVM_STA_CAL;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt8 data[8192];/**<definition of group 8k bytes */
+} T_UTA_4_NVM_STA_CAL;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_5_NVM_STA_CAL;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_6_NVM_STA_CAL;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_7_NVM_STA_CAL;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_8_NVM_STA_CAL;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_9_NVM_STA_CAL;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_10_NVM_STA_CAL;
+
+
+/* Example for a structure definition for ID: UTA_NVM_STA_FIX: */
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaChar data[80];/**<definition of group*/
+} T_UTA_1_NVM_STA_FIX;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_2_NVM_STA_FIX;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_3_NVM_STA_FIX;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_4_NVM_STA_FIX;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_5_NVM_STA_FIX;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_6_NVM_STA_FIX;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_7_NVM_STA_FIX;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_8_NVM_STA_FIX;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_9_NVM_STA_FIX;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_10_NVM_STA_FIX;
+
+
+/* Example for a structure definition for ID: UTA_NVM_DYN: */
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt8 data[32];/**<definition of group*/
+} T_UTA_1_NVM_DYN;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt8 data[8];/**<definition of group*/
+} T_UTA_2_NVM_DYN;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt8 data[12288];/**<definition of group*/
+} T_UTA_3_NVM_DYN;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt8 data[1024];/**<definition of group*/
+} T_UTA_4_NVM_DYN;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt8 data[128];/**<definition of group*/
+} T_UTA_5_NVM_DYN;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_6_NVM_DYN;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_7_NVM_DYN;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_8_NVM_DYN;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_9_NVM_DYN;
+
+/*!
+ * \brief This structure contains static definition of a group.
+ * \deprecated Static defined groups are only a temporary solution. All users
+ * of this will need to change the code to use dynamic allocated groups
+ * when this becomes available.
+ */
+typedef struct
+{
+  //Fill in specific data structures (optional)
+  //Structures will be included in NVM CFG file
+  UtaUInt32 data;/**<definition of group*/
+} T_UTA_10_NVM_DYN;
+
+
+
+/****************************************************************************************/
+/* DATA STRUCTURES                                                                  END */
+/****************************************************************************************/
+
+
+#ifdef __cplusplus
+    }
+#endif  /* __cplusplus */
+
+#endif /* uta_nvm_cfg_h */
+
+/** @} */
+
+
-- 
1.9.1

