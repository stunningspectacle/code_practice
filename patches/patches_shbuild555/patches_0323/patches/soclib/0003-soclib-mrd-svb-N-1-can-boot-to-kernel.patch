From 4457754a56bd9e82ee97eb4860ca61589a4f2601 Mon Sep 17 00:00:00 2001
From: Jing Xiang <jing.xiang@intel.com>
Date: Mon, 21 Mar 2016 18:36:36 +0800
Subject: [PATCH 3/5] soclib: mrd/svb N-1 can boot to kernel

Change-Id: I12653cfbd9606a040325487ce393208c431c1ddb
Signed-off-by: Jing Xiang <jing.xiang@intel.com>
---
 devices/noc_firewall/src/sofia3gx                  |     1 +
 .../cgu/src/sf_3gr_soc_agold620/cgu_clk_src.h      |     2 +-
 .../cgu/src/sf_3gr_soc_agold620/cgu_muxcpu.c       |     4 +-
 .../cpu/src/board_sf_3gr/cpu_scaling_table.c       |     8 +-
 .../pmu/make/board_sf_3gx_ext_pmic/ext_pmic.mk     |     4 +-
 .../pmu/src/board_sf_3gx_ext_pmic/ltepmic.c        |  1006 +
 .../pmu/src/board_sf_3gx_ext_pmic/pmic.h           | 34220 +++++++++++++++++++
 .../pmu/src/board_sf_3gx_ext_pmic/pmu_bootcore.c   |   426 +
 .../pmu/src/board_sf_3gx_ext_pmic/pmu_bootcore.h   |   109 +
 .../pmu/src/board_sf_3gx_ext_pmic/pmu_domain_cfg.c |    23 +-
 .../src/board_sf_3gx_ext_pmic/pmu_domain_hal_cfg.c |    12 +-
 .../pmu/src/board_sf_3gx_ext_pmic/sy8827e.c        |   362 +
 .../pmu/src/board_sf_3gx_ext_pmic/sy8827e.h        |    44 +
 .../src/board_sf_3gx_ext_pmic/pow_volt_pmu_cfg.c   |     2 +-
 .../prh/src/board_sf_3gx/prh_cpu_drv_cfg.c         |   120 +-
 15 files changed, 36255 insertions(+), 88 deletions(-)
 create mode 120000 devices/noc_firewall/src/sofia3gx
 create mode 100644 devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/ltepmic.c
 create mode 100644 devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmic.h
 create mode 100644 devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_bootcore.c
 create mode 100644 devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_bootcore.h
 create mode 100644 devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/sy8827e.c
 create mode 100644 devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/sy8827e.h

diff --git a/devices/noc_firewall/src/sofia3gx b/devices/noc_firewall/src/sofia3gx
new file mode 120000
index 0000000..00d525b
--- /dev/null
+++ b/devices/noc_firewall/src/sofia3gx
@@ -0,0 +1 @@
+sofia3gr
\ No newline at end of file
diff --git a/devices/pm/power_control/cgu/src/sf_3gr_soc_agold620/cgu_clk_src.h b/devices/pm/power_control/cgu/src/sf_3gr_soc_agold620/cgu_clk_src.h
index a9a6877..8ac7820 100644
--- a/devices/pm/power_control/cgu/src/sf_3gr_soc_agold620/cgu_clk_src.h
+++ b/devices/pm/power_control/cgu/src/sf_3gr_soc_agold620/cgu_clk_src.h
@@ -63,7 +63,7 @@ typedef enum
     PLLA_N =  15, PLLA_M = 0, PLLA_Z = 0,   /*  416MHz */
 #endif
     PLLB_SD_728M = 0x1B0000,
-    PLLB_SD_754M = 0x1C0000,
+    PLLB_SD_754M = 0x1BD89D, //temp for 750M for 3gx
     PLLB_SD_800M = 0x1DC4EC,
     PLLB_SD_900M = 0x219D89,
     PLLB_SD_1000M = 0x257627,
diff --git a/devices/pm/power_control/cgu/src/sf_3gr_soc_agold620/cgu_muxcpu.c b/devices/pm/power_control/cgu/src/sf_3gr_soc_agold620/cgu_muxcpu.c
index 00d66a8..deee53e 100644
--- a/devices/pm/power_control/cgu/src/sf_3gr_soc_agold620/cgu_muxcpu.c
+++ b/devices/pm/power_control/cgu/src/sf_3gr_soc_agold620/cgu_muxcpu.c
@@ -117,8 +117,8 @@ static const mux_config_s muxcpu_config[MUXCPU_NUM_CONFIGS] = {
     /*MUXCPU_312MHZ*/  {CGU_CLK_OUTPUT_312M,  MUXCPU_MUX_B2_A_1_1, CLK_SRC_PSH1, PSH1_312MHZ},
     /*MUXCPU_416MHZ*/  {CGU_CLK_OUTPUT_416M,  MUXCPU_MUX_B2_A_0_1,  CLK_SRC_PLLA, PLLA_416MHZ},
     /*MUXCPU_728MHZ*/  {CGU_CLK_OUTPUT_728M,  MUXCPU_MUX_B3_B_0_1,  CLK_SRC_PLLB, PLLB_728MHZ},
-    /*MUXCPU_754MHZ*/  {CGU_CLK_OUTPUT_728M,  MUXCPU_MUX_B3_B_0_1,  CLK_SRC_PLLB, PLLB_728MHZ},
-    /*MUXCPU_800MHZ*/  {CGU_CLK_OUTPUT_728M,  MUXCPU_MUX_B3_B_0_1,  CLK_SRC_PLLB, PLLB_728MHZ},
+    /*MUXCPU_754MHZ*/  {CGU_CLK_OUTPUT_754M,  MUXCPU_MUX_B3_B_0_1,  CLK_SRC_PLLB, PLLB_754MHZ},
+    /*MUXCPU_800MHZ*/  {CGU_CLK_OUTPUT_800M,  MUXCPU_MUX_B3_B_0_1,  CLK_SRC_PLLB, PLLB_800MHZ},
     /*MUXCPU_900MHZ*/  {CGU_CLK_OUTPUT_900M,  MUXCPU_MUX_B3_B_0_1,  CLK_SRC_PLLB, PLLB_900MHZ},
     /*MUXCPU_1000MHZ*/ {CGU_CLK_OUTPUT_1000M,  MUXCPU_MUX_B3_B_0_1,  CLK_SRC_PLLB, PLLB_1000MHZ},
     /*MUXCPU_1040MHZ*/ {CGU_CLK_OUTPUT_1040M,  MUXCPU_MUX_B3_B_0_1,  CLK_SRC_PLLB, PLLB_1040MHZ},	
diff --git a/devices/pm/power_control/cpu/src/board_sf_3gr/cpu_scaling_table.c b/devices/pm/power_control/cpu/src/board_sf_3gr/cpu_scaling_table.c
index 6e6f9c2..c7f5ee7 100644
--- a/devices/pm/power_control/cpu/src/board_sf_3gr/cpu_scaling_table.c
+++ b/devices/pm/power_control/cpu/src/board_sf_3gr/cpu_scaling_table.c
@@ -49,7 +49,7 @@
 /* this value has to be alligned with the init setting done in prh_per_cpu_clk_init_seq*/
 /* to do API to be introduced to get the actual set CPU freq*/
 #ifdef SF3GR_GARNET_4_LEVEL_CPUFREQ
-#define CPU_CLOCK_SCALING_INITIAL_SETTING_INDEX 3
+#define CPU_CLOCK_SCALING_INITIAL_SETTING_INDEX 1
 #else
 #define CPU_CLOCK_SCALING_INITIAL_SETTING_INDEX 2
 #endif
@@ -67,11 +67,11 @@ T_CPU_CLOCK_SCALING_SETTING s_c_cpu_clock_scaling_table[CPU_CLOCK_SCALING_TABLE_
 
   {PRH_PER_ARM11_CLK_ENABLE_MED_PERF,          416,               2,       0,    4},
 
-  {PRH_PER_ARM11_CLK_ENABLE_MED_HIGH_PERF,     728,               3,       1,    4},
+  {PRH_PER_ARM11_CLK_ENABLE_MED_HIGH_PERF,     754,               3,       1,    4},
 
   {PRH_PER_ARM11_CLK_ENABLE_HIGH_PERF,         900,               4,       2,    4},
 
-  {PRH_PER_ARM11_CLK_ENABLE_ULTRA_HIGH_PERF,   1040,              4,       3,    4},
+  {PRH_PER_ARM11_CLK_ENABLE_ULTRA_HIGH_PERF,   1160,              4,       3,    4},
 
 };
 #else
@@ -85,7 +85,7 @@ T_CPU_CLOCK_SCALING_SETTING s_c_cpu_clock_scaling_table[CPU_CLOCK_SCALING_TABLE_
 
   {PRH_PER_ARM11_CLK_ENABLE_HIGH_PERF,         900,               3,       1,    3},
 
-  {PRH_PER_ARM11_CLK_ENABLE_ULTRA_HIGH_PERF,   1040,              3,       2,    3},
+  {PRH_PER_ARM11_CLK_ENABLE_ULTRA_HIGH_PERF,   1160,              3,       2,    3},
  
 };
 #endif
diff --git a/devices/pm/power_control/pmu/make/board_sf_3gx_ext_pmic/ext_pmic.mk b/devices/pm/power_control/pmu/make/board_sf_3gx_ext_pmic/ext_pmic.mk
index e59194b..268278e 100644
--- a/devices/pm/power_control/pmu/make/board_sf_3gx_ext_pmic/ext_pmic.mk
+++ b/devices/pm/power_control/pmu/make/board_sf_3gx_ext_pmic/ext_pmic.mk
@@ -29,9 +29,9 @@
 #
 # ------------- "C" Sources ---------------------------------------------------
 #
-ifeq '$(findstring SF3GX_VCPU_I2C_CTRL,${C_DEFINES})' 'SF3GX_VCPU_I2C_CTRL'
+${BUILD_LIB}_FILES  += ltepmic.c
 ${BUILD_LIB}_FILES  += sy8827e.c
-endif
+${BUILD_LIB}_FILES  += pmu_bootcore.c
 #
 # ------------- Assembler Sources -----------------------------------------------
 #
diff --git a/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/ltepmic.c b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/ltepmic.c
new file mode 100644
index 0000000..fa372de
--- /dev/null
+++ b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/ltepmic.c
@@ -0,0 +1,1006 @@
+/* =============================================================================
+ * Copyright (C) 2015 Intel Mobile Communications GmbH
+ *
+ *      Sec Class: Intel Confidential (IC)
+ *
+ * =============================================================================
+ *
+ * This document contains proprietary information belonging to IMC.
+ * Passing on and copying of this document, use and communication of its
+ * contents is not permitted without prior written authorisation.
+ *
+ * This file contains the generic part of the driver internal interface towards
+ * the PMU driver
+ * Generic part
+ *
+ * ===========================================================================*/
+
+//#define LTEPMIC_DEBUG
+#include "pmic.h"
+#include "pal_i2c.h"
+#include "pal_log.h"
+#include "pmu_driverif_cfg.h"
+#include "pmu_driverif.h"
+#include "pow_volt_spcu_cfg.h"
+#include "pmu_internal_cfg.h"
+#include "pmu_internal.h"
+#include "pmu_domain_internal.h"
+#include "prh.h"
+#include "mobilevisor/sys_exception.h"
+
+#define PMIC_I2C_BUS_ID     I2C_BUS_ID_2
+
+#ifdef LTEPMIC_DEBUG
+#define pmic_log	pal_log
+#else
+#define pmic_log(args...)
+#endif
+
+extern sPMU_SYNC_T sync_cmd[];
+
+typedef enum
+{
+  PMIC_WRITE_OP,
+  PMIC_READ_OP,
+  PMIC_CB_READ_OP,
+  PMIC_ENDOF_OP
+}ePMIC_I2C_OP;
+
+typedef struct
+{
+  ePMIC_I2C_OP   op_id;
+  ePOWER_RAIL_T     rail;
+  U8        num;
+  U8        reg;
+  U8        data;
+  unsigned int*  prh_request_p;
+} sPMIC_I2C_OP_PARA;
+
+typedef struct {
+	ePMU_VOLTAGE_LIST_T	voltage;
+	ePMU_MODE_LIST_T	mode;
+} sPOWER_RAIL_INFO;
+
+extern sPMU_SYNC_T sync_cmd[];
+
+ePOWER_RAIL_T domain_to_rail(ePMU_DOMAIN_T domain)
+{
+	switch (domain) {
+	case PMU_DOMAIN_EXT_BUCK1:
+		return POWER_RAIL_BUCK1;
+	default:
+		pmic_log("%s no rail found for domain %d\n", domain);
+		sys_panic(SYS_OWNER_VMM_POWER, SYS_CAUSE_SOFTWARE,
+			__LINE__, __FILE__, "unknown PMIC RAIL");
+		return POWER_RAIL_BUCK1;
+	}
+}
+
+static ePOWER_RAIL_T regaddr_to_rail(U16 reg_addr)
+{
+	if ((reg_addr >> 8) == 0x10)
+		return POWER_RAIL_BUCK1;
+	switch (reg_addr) {
+	case PMIC_VPROG1CNT_REG:
+	case PMIC_VPROG1VSEL_REG:
+	case PMIC_CM_VPROG1_MODE_CTRL_REG:
+	case PMIC_CM_VPROG1_INT_LVL_REG:
+		return POWER_RAIL_VPROG1;
+	case PMIC_VPROG2CNT_REG:
+	case PMIC_VPROG2VSEL_REG:
+	case PMIC_CM_VPROG2_MODE_CTRL_REG:
+		return POWER_RAIL_VPROG2;
+	case PMIC_VPROG3CNT_REG:
+	case PMIC_VPROG3VSEL_REG:
+	case PMIC_CM_VPROG3_MODE_CTRL_REG:
+	case PMIC_CM_VPROG3_INT_LVL_REG:
+		return POWER_RAIL_VPROG3;
+	default:
+		return POWER_RAIL_BUCK1;
+	}
+}
+
+static sPOWER_RAIL_INFO rail_info[POWER_RAIL_USED];
+
+/* use for first level access */
+static s_i2c_task i2c_task_e[POWER_RAIL_USED] = {0};
+static sPMIC_I2C_OP_PARA op_data[POWER_RAIL_USED] = {0};
+/* use in i2c op callback */
+static s_i2c_task i2c_task_cb[POWER_RAIL_USED];
+static sPMIC_I2C_OP_PARA op_data_cb[POWER_RAIL_USED];
+
+void pmic_i2c_op_cb(s_i2c_task* i2c_task);
+
+void pmic_call_prh(s_i2c_task* i2c_task)
+{
+	sPMIC_I2C_OP_PARA* op_data_cb_p = (sPMIC_I2C_OP_PARA *) i2c_task->data;
+	ePOWER_RAIL_T rail = op_data_cb_p->rail;
+	ePMU_DOMAIN_T pmu_domain = sync_cmd[rail].domain;
+
+	pmic_log("%s pmu_domain %d\n", __func__, pmu_domain);
+	
+	pow_volt_phys_domain_info_s *pow_volt_phys_domain_info_ptr = NULL;
+	pow_volt_phys_domain_info_ptr = pow_volt_get_phys_domain_info_ptr();
+	pow_volt_phys_domain_info_ptr[pmu_domain].prh_sync_fct((unsigned int*)op_data_cb_p->prh_request_p);
+	sync_cmd[rail].domain = 0;
+}
+
+void pmic_i2c_reg_op(s_i2c_task* i2c_task,U8 slave_address,U8* read_buf,U8 read_size,U8* write_buf,U8 write_size,void* data)
+{
+    sPMIC_I2C_OP_PARA* op_data = (sPMIC_I2C_OP_PARA *) data;
+    ePOWER_RAIL_T rail = op_data->rail;
+
+    i2c_task->bus_id         = PMIC_I2C_BUS_ID;
+    i2c_task->slave_address  = slave_address;
+    i2c_task->i2c_read_buf   = read_buf;
+    i2c_task->i2c_read_size  = read_size;
+    i2c_task->i2c_write_buf  = write_buf;
+    i2c_task->i2c_write_size = write_size;
+    i2c_task->cb = pmic_i2c_op_cb;
+    i2c_task->data = data;
+
+    if(1 == sync_cmd[rail].sync) {
+        i2c_task->sync_mode = 1;
+    } else {
+        /*Async mode when I2C module is up & guest VM running. */
+        i2c_task->sync_mode = 0;
+    }
+
+    pmic_log("%s %s\n", __func__, i2c_task->sync_mode ? "sync" : "async");
+
+    if(i2c_task->i2c_action == I2C_ACTION_READ)
+    {
+        strcpy(i2c_task->task_name,"PMIC_RD");
+    }
+    else if(i2c_task->i2c_action == I2C_ACTION_WRITE)
+    {
+        strcpy(i2c_task->task_name,"PMIC_WR");
+    }
+
+    pal_i2c_add_task(i2c_task);
+
+}
+
+void pmic_i2c_op_cb(s_i2c_task* i2c_task)
+{
+    sPMIC_I2C_OP_PARA * pdata = i2c_task->data;
+    ePOWER_RAIL_T rail = pdata->rail;
+    U8 num = pdata->num;
+    U8 val = *(i2c_task->i2c_read_buf);
+    U8 set = pdata->data;
+    U8 mask,reg =0;
+
+    pmic_log("%s op_id %d %s\n", __func__, pdata->op_id,
+	sync_cmd[rail].sync ? "sync" : "async");
+
+    switch(pdata->op_id)
+    {
+        case PMIC_WRITE_OP:
+            /* do an i2c read  after write */
+            memset(&i2c_task_cb[rail], 0, sizeof(i2c_task_cb));
+            memset(&op_data_cb[rail], 0, sizeof(op_data_cb));
+            op_data_cb[rail].rail = rail;
+            op_data_cb[rail].op_id = PMIC_CB_READ_OP;
+            op_data_cb[rail].reg = pdata->reg;
+            i2c_task_cb[rail].i2c_action  = I2C_ACTION_READ;
+	    op_data_cb[rail].prh_request_p = pdata->prh_request_p;
+            pmic_i2c_reg_op(&i2c_task_cb[rail],0x10,&(op_data_cb[rail].data),1,&(op_data_cb[rail].reg),1,&op_data_cb[rail]);
+            break;
+        case PMIC_CB_READ_OP:
+            /* CB_READ_OP is only used in callback of WRITE_OP case.
+               No need to signal prh this time. it was done while WRITE_OP callback. */
+            return;
+        case PMIC_READ_OP:
+        case PMIC_ENDOF_OP:
+        default:
+            break;
+    }
+
+    if (sync_cmd[rail].sync != 1)
+        pmic_call_prh(i2c_task);
+}
+
+U8 PMIC_Read(U16 reg_addr)
+{
+    ePOWER_RAIL_T rail = regaddr_to_rail(reg_addr);
+
+    memset(&i2c_task_e[rail], 0, sizeof(i2c_task_e[rail]));
+    memset(&op_data[rail], 0, sizeof(op_data[rail]));
+    op_data[rail].rail = rail;
+    op_data[rail].op_id = PMIC_ENDOF_OP;
+    op_data[rail].reg = reg_addr & 0xff;
+    i2c_task_e[rail].i2c_action  = I2C_ACTION_READ;
+    pmic_i2c_reg_op(&i2c_task_e[rail],reg_addr>>8,
+	&(op_data[rail].data),1,
+	&(op_data[rail].reg),1,&op_data[rail]);
+
+#ifdef LTEPMIC_DEBUG
+    xprint("%s reg_addr 0x%x = 0x%x\n", __func__,
+	reg_addr, op_data[rail].data);
+#endif
+
+    return op_data[rail].data;
+}
+
+void PMIC_Write(U16 reg_addr, U8 val)
+{
+    ePOWER_RAIL_T rail = regaddr_to_rail(reg_addr);
+
+    memset(&i2c_task_e[rail], 0, sizeof(i2c_task_e[rail]));
+    memset(&op_data[rail], 0, sizeof(op_data[rail]));
+    op_data[rail].rail = rail;
+//    op_data[rail].op_id = PMIC_ENDOF_OP;
+    op_data[rail].op_id = PMIC_WRITE_OP;
+    op_data[rail].reg = reg_addr & 0xff;
+    op_data[rail].data = val;
+    op_data[rail].prh_request_p = get_current_i2c_prh_request_pointer();
+	if( (sync_cmd[rail].sync == 0)&& (op_data[rail].prh_request_p ==0))
+	{
+		sys_panic(SYS_OWNER_VMM_POWER, SYS_CAUSE_SOFTWARE, __LINE__,
+			__FILE__, "async PMIC i2c request w/o prh_request_p");
+	}
+
+    i2c_task_e[rail].i2c_action  = I2C_ACTION_WRITE;
+    
+    pmic_i2c_reg_op(&i2c_task_e[rail],reg_addr>>8, NULL,0,
+	&(op_data[rail].reg),2,&op_data[rail]);
+
+#ifdef LTEPMIC_DEBUG
+    xprint("%s reg_addr 0x%x >>>> 0x%x\n", __func__, reg_addr, val);
+#endif
+    pmic_log("%s reg_addr 0x%x >>>> 0x%x\n", __func__, reg_addr, val);
+    //PMIC_Read(reg_addr);
+}
+
+U8 PMIC_Get(U16 reg_addr, HWREG_U8(*getFunc)(HWREG_U8 value))
+{
+  U8 reg_value, bitfield_value;
+
+  reg_value = PMIC_Read(reg_addr);
+  bitfield_value = getFunc(reg_value);
+
+  return bitfield_value;
+}
+
+void PMIC_Set(U16 reg_addr,HWREG_U8 shadw_content, HWREG_U8 (*setFunc)(HWREG_U8 _reg, HWREG_U8 value), HWREG_U8 value)
+{
+  U8 reg_value;
+
+  reg_value = shadw_content; 
+  reg_value = setFunc(reg_value, value);
+  PMIC_Write(reg_addr, reg_value);
+}
+
+ePMU_RETURN_T ltepmic_set_voltage(const ePMU_VOLTAGE_LIST_T voltage)
+{
+	switch(voltage)
+   	{
+	 case PMU_VOLTAGE_0V87: // alow ? --> 312
+	   PMIC_Set(PMIC_VCC_SETVIDFAST_REG,0xff,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_SETVID_REG,(HWREG_U8)VID_CODE_VALOW);
+	   return PMU_OK;
+	 case PMU_VOLTAGE_1V00: //3gx taget 0.843 ---> 416
+	   PMIC_Set(PMIC_VCC_SETVIDFAST_REG,0xff,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_SETVID_REG,(HWREG_U8)VID_CODE_VMED);
+	   return PMU_OK;
+	 case PMU_VOLTAGE_1V02: // 3gx target 0.983 ---> 750
+	   PMIC_Set(PMIC_VCC_SETVIDFAST_REG,0xff,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_SETVID_REG,(HWREG_U8)VID_CODE_VHIGH);
+	   return PMU_OK;
+         case PMU_VOLTAGE_1V10: // 3gx target 1.083 ---> 900
+	   PMIC_Set(PMIC_VCC_SETVIDFAST_REG,0xff,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_SETVID_REG,(HWREG_U8)VID_CODE_VUHIGH);
+	   return PMU_OK;
+	 case PMU_VOLTAGE_1V25: //3gx target 1.2632 --> 1160
+	   PMIC_Set(PMIC_VCC_SETVIDFAST_REG,0xff,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_SETVID_REG,(HWREG_U8)VID_CODE_VBURST);
+	   return PMU_OK;
+	 case PMU_VOLTAGE_FIXED:
+	   return PMU_OK;
+	 default:
+	   return PMU_ERR_INV_VOLT; /* voltage not supported */
+   }
+}
+
+/* --------------------------------------------------------------------------------*/
+void pmic_init_vcc_vnn(U32 is_vcc, HWREG_U8 init_voltage, eVLDOCNT_REG_MODEVPMIC mode)
+{
+  U8 reg = 0x0, timeout = 10;
+  volatile U8 vcc_vr_settled = 0x0;
+  static U8 vcc_mode, vnn_mode;
+  U16 reg_addr;
+
+  /* Configure VCC from PMIC */ 
+  reg = PMIC_Get(PMIC_VENDCTL1_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VCCCNT_REG);
+  /* Clear the I2C10LCK bit of VENDCTL1 register */
+  reg &= ~(0x1);
+  PMIC_Set(PMIC_VENDCTL1_REG,(HWREG_U8)NO_RAM_SHADOW_ALL_ZERO,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_CLKCONFIG_REG,(HWREG_U8)reg);
+
+  /* Write to SETVIDFAST register */
+  PMIC_Set(PMIC_SETVIDFAST_REG(is_vcc),(HWREG_U8)NO_RAM_SHADOW_ALL_ZERO,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_CLKCONFIG_REG,(HWREG_U8)init_voltage);
+
+#ifdef LTEPMIC_DEBUG
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x7);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x8);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x9);
+  if (!is_vcc) PMIC_Read(PMIC_VCC_VNN_BASE(0) | 0x0a);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x10);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x11);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x12);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x15);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x21);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x22);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x24);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x25);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x26);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x2F);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x30);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x31);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x32);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x33);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x34);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x35);
+  PMIC_Read(PMIC_VCC_VNN_BASE(is_vcc) | 0x36);
+#endif
+  /* Delay for 100usecs */
+  //SPCU_coredump_timer_wait(100);
+  /* Read VCC VR_SETTLED register here after the shadow copy update */
+  vcc_vr_settled = PMIC_Get(PMIC_VCC_VNN_BASE(is_vcc) | 0x10,(HWREG_U8(*)(HWREG_U8))getPmic_VSDVSEL_REG);
+  while( (vcc_vr_settled & 0x1) != 0x1)
+    {
+      /* If not updated wait again */
+      //SPCU_coredump_timer_wait(SPCU_WAIT_20US);
+      vcc_vr_settled = PMIC_Get(PMIC_VCC_VNN_BASE(is_vcc) | 0x10,(HWREG_U8(*)(HWREG_U8))getPmic_VSDVSEL_REG);
+	if (!(timeout--))
+		break;
+    }
+  /* Lock the bit back again */
+
+  if ((is_vcc && (vcc_mode != mode)) || (!is_vcc && (vnn_mode != mode))) {
+	reg_addr = is_vcc ? PMIC_VCCCNT_REG : PMIC_VNNCNT_REG;
+	PMIC_Write(reg_addr, mode << 1);
+	if (is_vcc)
+		vcc_mode = PMIC_Read(reg_addr) >> 1;
+	else
+		vnn_mode = PMIC_Read(reg_addr) >> 1;
+  }
+
+  return;
+}
+
+/*---------------------------------------------------------------------------------------------------------------*/
+/* Flag indicating Low temperature compensation enabled to set VCC & VNN to vhigh */
+static BOOL vhighLTEC_enabled = FALSE;
+static sPMU_T pmu_reg;
+void pmic_init_vcc_exit_standby(void)
+{
+  /* The voltage level to be used at standby exit shall be programmed into PMIC registers 
+     VCC_STDBY_EXITVID_REG and VNN_STDBY_EXITVID_REG. 
+     Using MC4 this shall be set at initialization to the Vlow VID code that will also 
+     be programmed in the SVID register VALOW and for MC6 to the one of VMED. 
+     For low-temperature support the VID values in VNN/VCC_STDBY_EXITVID_REG have to be updated 
+     at runtime to be identical to the ones written into SVID register VLOW (or VMED when using MC6). 
+  */
+  U8 vcc_reg_value = 0x0;
+  U8 vcc_vid_code = 0;
+  U8 vcc_vid_code_test = 0;
+  U8 vcc_reg_value_test = 0;
+  
+  /* First, unlock the VCC_STDBY_EXITVID_REG register for I2C programming access */
+  vcc_reg_value = PMIC_Get(PMIC_VENDCTL1_REG,(HWREG_U8(*)(HWREG_U8))getPmu_VENDCTL1_REG);
+  /* Clear the I2C10LCK bit of VENDCTL1 register */
+  vcc_reg_value &= ~(0x1);
+  PMIC_Set(PMIC_VENDCTL1_REG,(HWREG_U8)NO_RAM_SHADOW_ALL_ZERO,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmu_VENDCTL1_REG,(HWREG_U8)vcc_reg_value);
+
+  /* Self Test */
+  vcc_reg_value_test = PMIC_Get(PMIC_VENDCTL1_REG,(HWREG_U8(*)(HWREG_U8))getPmu_VENDCTL1_REG);
+  if (vcc_reg_value_test != vcc_reg_value)
+    PMU_trap(TRAP_PMU_INTERNAL_ERROR, 0, NULL, __LINE__, __FILE__);
+
+  /* Configure VCC VID from PMIC over I2C */ 
+   vcc_vid_code = VID_CODE_VMED;
+  PMIC_Set(PMIC_VCC_STDBY_EXITVID_REG,(HWREG_U8)NO_RAM_SHADOW_ALL_ZERO,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmu_VCC_STDBY_EXITVID_REG,(HWREG_U8)vcc_vid_code);
+ 
+  /* Self Test */
+  vcc_vid_code_test = PMIC_Get(PMIC_VCC_STDBY_EXITVID_REG,(HWREG_U8(*)(HWREG_U8))getPmu_VCC_STDBY_EXITVID_REG);
+  if (vcc_vid_code_test != vcc_vid_code)
+    PMU_trap(TRAP_PMU_INTERNAL_ERROR, 0, NULL, __LINE__, __FILE__);
+	
+  /* We will leave this in the unlocked state for now */
+  
+  /* backup vcc_exit_vid */
+  pmu_reg.vcc_exitvid.VCC_STDBY_EXITVID_REG_Content = vcc_vid_code_test;
+          
+  return;
+}
+
+/* --------------------------------------------------------------------------------*/
+void pmic_init_vnn_exit_standby(void)
+{
+  /* The voltage level to be used at standby exit shall be programmed into PMIC registers 
+     VCC_STDBY_EXITVID_REG and VNN_STDBY_EXITVID_REG. 
+     Using MC4 this shall be set at initialization to the Vlow VID code that will also 
+     be programmed in the SVID register VALOW and for MC6 to the one of VMED. 
+     For low-temperature support the VID values in VNN/VCC_STDBY_EXITVID_REG have to be updated 
+     at runtime to be identical to the ones written into SVID register VLOW (or VMED when using MC6). 
+  */
+  U8 vnn_reg_value = 0x0;
+  U8 vnn_vid_code = 0;
+  U8 vnn_vid_code_test = 0;
+
+  /* First, unlock the VNN_STDBY_EXITVID_REG register for I2C programming access */
+  vnn_reg_value = PMIC_Get(PMIC_VENDCTL1_REG,(HWREG_U8(*)(HWREG_U8))getPmu_VENDCTL1_REG);
+  /* Clear the I2C12LCK bit of VENDCTL1 register */
+  vnn_reg_value &= ~(0x2);
+  PMIC_Set(PMIC_VENDCTL1_REG,(HWREG_U8)NO_RAM_SHADOW_ALL_ZERO,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmu_VENDCTL1_REG,(HWREG_U8)vnn_reg_value);
+
+  /* Configure VNN VID from PMIC over I2C */ 
+  vnn_vid_code = VID_CODE_VHIGH;
+  PMIC_Set(PMIC_VNN_STDBY_EXITVID_REG,(HWREG_U8)NO_RAM_SHADOW_ALL_ZERO,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmu_VNN_STDBY_EXITVID_REG,(HWREG_U8)vnn_vid_code);
+
+#if 0
+  /* Self Test */
+  vnn_vid_code_test = PMIC_Get(PMIC_VNN_STDBY_EXITVID_REG,(HWREG_U8(*)(HWREG_U8))getPmu_VNN_STDBY_EXITVID_REG);
+  if (vnn_vid_code_test != vnn_vid_code)
+    PMU_trap(TRAP_PMU_INTERNAL_ERROR, 0, NULL, __LINE__, FILE_NAME);
+
+
+	 /* backup vcc_exit_vid */
+  pmu_reg.vnn_exitvid.VNN_STDBY_EXITVID_REG_Content = vnn_vid_code_test;
+#endif //if 0
+
+  /* We will leave this in the unlocked state for now */
+          
+  return;
+}
+
+#ifdef LTEPMIC_DEBUG
+#include <pmu_bootcore.h>
+extern sPMU_BOOT_INIT_T pmu_boot_init_cfg[]; 
+
+void show_boot_config(void)
+{
+	int cfg_ldo =0;
+	
+	xprint("          %s \n", __func__);
+	for (cfg_ldo=0; cfg_ldo < NO_OF_BOOT_LDO; cfg_ldo++ ) {
+	      PMIC_Read(pmu_boot_init_cfg[cfg_ldo].reg_addr);
+	}
+	xprint("          end \n", __func__);
+}
+#endif
+
+BOOL pmic_init(void)
+{
+    int i, j;
+    U8 reg_val = 0;
+
+    PMIC_Read(PMIC_ID0_REG);
+    PMIC_Read(PMIC_ID1_REG);
+
+#ifdef LTEPMIC_DEBUG
+    extern void meas_wait_in_ms(unsigned int delay_ms);
+    show_boot_config();
+    //meas_wait_in_ms(1);
+#endif
+
+    /* set the max VOUT of VCC to 1.35V */
+    PMIC_Write(0x1030, 0xdd);
+    pmic_init_vcc_vnn(PMIC_VCC, PMU_INIT_VCC_VID, VLDOCNT_REG_MODEVPMIC_NORMAL);
+    pmic_init_vcc_vnn(PMIC_VNN, PMU_INIT_VNN_VID, VLDOCNT_REG_MODEVPMIC_NORMAL);
+
+#if 1
+    PMU_int_hal_set_vprog1_voltage(PMU_VOLTAGE_2V50);
+    PMU_int_hal_set_vprog1_mode(PMU_MODE_ON);
+    PMU_int_hal_set_vprog2_voltage(PMU_VOLTAGE_2V80);
+    PMU_int_hal_set_vprog2_mode(PMU_MODE_ON);
+    PMU_int_hal_set_vprog3_voltage(PMU_VOLTAGE_1V20);
+    PMU_int_hal_set_vprog3_mode(PMU_MODE_ON);
+#endif
+
+   /* Initialize PMIC for Low Power State Configurations */
+   /* Voltage rails VNN and VCC will be scaled down by the PMIC to Vulow level automatically 
+	  when the SoC asserts standby to the PMIC at entering deep sleep. 
+	  It is not supported to power down VCC in SoFIA LTE (except for test purposes). 
+	  The used PMIC TLP sequence for standby entry is S0i1-SoC programmed as standby 
+	  target state (STDBYCNT register).
+   */
+   PMIC_Set(PMIC_STDBYCNT_REG,(HWREG_U8)NO_RAM_SHADOW_ALL_ZERO,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_STDBYCNT_REG_STDBYDEST,(HWREG_U8)PMIC_STDBY_TLIST_S0i1);
+   /* Configure the PMIC to setup the VCC Exit Standby voltage Level when exiting deep sleep */
+   pmic_init_vcc_exit_standby();
+   /* Configure the PMIC to setup the VNN Exit Standby voltage Level when exiting deep sleep */
+   pmic_init_vnn_exit_standby();
+
+   /* Disable/Mask VR settled IRQ's for VPA , VNN & VCC */
+   PMIC_Set(PMIC_DEV4_M_VEND_INT_REG,(HWREG_U8)NO_RAM_SHADOW_ALL_ZERO,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmu_M_VEND_INT_REG,(HWREG_U8)0x1C);
+
+  /* Backup (once during boot-up) PMU registers in shadow copy*/
+  pmu_reg.vcccnt_reg.VCCCNT_REG_Content = PMIC_Get(PMIC_VCCCNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VCCCNT_REG);
+  pmu_reg.vnncnt_reg.VNNCNT_REG_Content = PMIC_Get(PMIC_VNNCNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VNNCNT_REG);
+  pmu_reg.vdd1cnt_reg.VDD1CNT_REG_Content = PMIC_Get(PMIC_VDD1CNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VDD1CNT_REG);
+  pmu_reg.vdd1sel_reg.VDD1VSEL_REG_Content = PMIC_Get(PMIC_VDD1VSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VDD1VSEL_REG); 
+  pmu_reg.vdd2cnt_reg.VDD2CNT_REG_Content = PMIC_Get(PMIC_VDD2CNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VDD2CNT_REG);
+  pmu_reg.vdd2sel_reg.VDD2VSEL_REG_Content = PMIC_Get(PMIC_VDD2VSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VDD2VSEL_REG); 
+  pmu_reg.vpacnt_reg.VPACNT_REG_Content = PMIC_Get(PMIC_VPACNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VPACNT_REG);
+
+  pmu_reg.socwdtcfg_reg.SOCWDTCFG_REG_Content = PMIC_Get(PMIC_SOCWDTCFG_REG,(HWREG_U8(*)(HWREG_U8))getPmic_SOCWDTCFG_REG);
+  pmu_reg.vldocnt_reg.VLDOCNT_REG_Content = PMIC_Get(PMIC_VLDOCNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VLDOCNT_REG); 
+  pmu_reg.vprog1cnt_reg.VPROG1CNT_REG_Content = PMIC_Get(PMIC_VPROG1CNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VPROG1CNT_REG);
+  pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Content = PMIC_Get(PMIC_VPROG2CNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VPROG2CNT_REG);
+  pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Content = PMIC_Get(PMIC_VPROG3CNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VPROG3CNT_REG);  
+  pmu_reg.vusbcnt_reg.VUSBCNT_REG_Content = PMIC_Get(PMIC_VUSBCNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VUSBCNT_REG); 
+  pmu_reg.vsim1cnt_reg.VSIM1CNT_REG_Content = PMIC_Get(PMIC_VSIM1CNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VSIM1CNT_REG);
+  pmu_reg.vsim2cnt_reg.VSIM2CNT_REG_Content = PMIC_Get(PMIC_VSIM2CNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VSIM2CNT_REG);  
+  pmu_reg.vmipicnt_reg.VMIPICNT_REG_Content = PMIC_Get(PMIC_VMIPICNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VMIPICNT_REG);
+  pmu_reg.vemmccnt_reg.VEMMCCNT_REG_Content = PMIC_Get(PMIC_VEMMCCNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VEMMCCNT_REG);  
+  pmu_reg.vsdcnt_reg.VSDCNT_REG_Content = PMIC_Get(PMIC_VSDCNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VSDCNT_REG);
+  pmu_reg.vsdmmccnt_reg.VSDMMCCNT_REG_Content = PMIC_Get(PMIC_VSDMMCCNT_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VSDMMCCNT_REG);
+  pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Content = PMIC_Get(PMIC_VPROG1VSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VPROG1VSEL_REG);
+  pmu_reg.vprog2sel_reg.VPROG2VSEL_REG_Content = PMIC_Get(PMIC_VPROG2VSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VPROG2VSEL_REG);
+  pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Content = PMIC_Get(PMIC_VPROG3VSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VPROG3VSEL_REG);
+  pmu_reg.vusbsel_reg.VUSBVSEL_REG_Content = PMIC_Get(PMIC_VUSBVSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VUSBVSEL_REG);
+  pmu_reg.vsim1sel_reg.VSIM1VSEL_REG_Content = PMIC_Get(PMIC_VSIM1VSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VSIM1VSEL_REG);
+  pmu_reg.vsim2sel_reg.VSIM2VSEL_REG_Content = PMIC_Get(PMIC_VSIM2VSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VSIM2VSEL_REG);
+  pmu_reg.vmipisel_reg.VMIPIVSEL_REG_Content = PMIC_Get(PMIC_VMIPIVSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VMIPIVSEL_REG);
+  pmu_reg.vemmcsel_reg.VEMMCVSEL_REG_Content = PMIC_Get(PMIC_VEMMCVSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VEMMCVSEL_REG);
+  pmu_reg.vsdsel_reg.VSDVSEL_REG_Content = PMIC_Get(PMIC_VSDVSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VSDVSEL_REG);
+  pmu_reg.vsdmmcsel_reg.VSDMMCVSEL_REG_Content = PMIC_Get(PMIC_VSDMMCVSEL_REG,(HWREG_U8(*)(HWREG_U8))getPmic_VSDMMCVSEL_REG);
+  pmu_reg.irqlvl1_mask_reg.MIRQLVL1_REG_Content= PMIC_Get(PMIC_MIRQLVL1_REG,(HWREG_U8(*)(HWREG_U8))getPmic_MIRQLVL1_REG);
+  pmu_reg.critirq_mask_reg.MCRITIRQ_REG_Content = PMIC_Get(PMIC_MCRITIRQ_REG,(HWREG_U8(*)(HWREG_U8))getPmic_MCRITIRQ_REG);	
+  pmu_reg.critirq_reg.CRITIRQ_REG_Content = PMIC_Get(PMIC_CRITIRQ_REG,(HWREG_U8(*)(HWREG_U8))getPmic_CRITIRQ_REG);
+  pmu_reg.wake_srcreg.WAKESRC_REG_Content = PMIC_Get(PMIC_WAKESRC_REG,(HWREG_U8(*)(HWREG_U8))getPmic_WAKESRC_REG);
+  pmu_reg.reset_src0.RESETSRC0_REG_Content = PMIC_Get(PMIC_RESETSRC0_REG,(HWREG_U8(*)(HWREG_U8))getPmic_RESETSRC0_REG);
+  pmu_reg.reset_src1.RESETSRC1_REG_Content = PMIC_Get(PMIC_RESETSRC1_REG,(HWREG_U8(*)(HWREG_U8))getPmic_RESETSRC1_REG);
+
+   /* Clear the SHUTDOWN source registers with default values */
+  PMIC_Set(PMIC_RESETSRC0_REG,(HWREG_U8)NO_RAM_SHADOW_ALL_ZERO,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_RESETSRC0_REG,(HWREG_U8)0xFF);
+  PMIC_Set(PMIC_RESETSRC1_REG,(HWREG_U8)NO_RAM_SHADOW_ALL_ZERO,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_RESETSRC1_REG,(HWREG_U8)0x37);
+
+}
+
+extern void dcdc_init(void);
+int ltepmic_probed(void)
+{
+  static U8 inited;
+  static U8 pmic_type;
+
+  if (!inited) {
+	pmic_type = PMIC_Read(PMIC_ID1_REG);
+	inited = 1;
+  }
+  return (pmic_type == PMIC_ID1_SF_LTE);
+}
+
+void ext_pmic_init(void)
+{
+    ePOWER_RAIL_T rail;
+
+    /* check I2C module is up  */
+    if( !pal_i2c_get_init_status())
+    {
+        /* I2C is not yet initialized*/
+        //PMU_trap(TRAP_PMU_I2C_ERROR, 0, NULL, __LINE__, FILE_NAME);
+        return;
+    }
+
+    /* this function is called in bootcore init where guestvm not started. */
+    for (rail = 0; rail < POWER_RAIL_USED; rail++) {
+	sync_cmd[rail].sync = 1;
+    }
+
+    if (ltepmic_probed())
+    	pmic_init();
+    else
+	dcdc_init();
+}
+
+/*---------------------------------------------------------------------------------------------------------------*/
+
+/****************************************************************************************
+ * garnet External regulator BUCK1 for VCPU
+ ****************************************************************************************/
+
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_domain_cfg_internal.h */
+ePMU_RETURN_T pmic_set_vcc_voltage
+(
+  const ePMU_VOLTAGE_LIST_T voltage
+)
+{
+  U16 reg_addr = PMIC_SETVIDFAST_REG(1); 
+  pal_log("%s voltage %d\n", __func__, voltage);
+  rail_info[POWER_RAIL_BUCK1].voltage = voltage;
+  switch(voltage)
+   {
+	 case PMU_VOLTAGE_0V87:
+	   PMIC_Set(reg_addr,0xff,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_SETVID_REG,(HWREG_U8)VID_CODE_VLOW);
+	   return PMU_OK;
+	 case PMU_VOLTAGE_1V02:
+	   PMIC_Set(reg_addr,0xff,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_SETVID_REG,(HWREG_U8)VID_CODE_VMED);
+	   return PMU_OK;
+	 case PMU_VOLTAGE_1V14:
+	   PMIC_Set(reg_addr,0xff,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_SETVID_REG,(HWREG_U8)VID_CODE_VHIGH);
+	   return PMU_OK;
+         case PMU_VOLTAGE_1V25:
+	   PMIC_Set(reg_addr,0xff,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_SETVID_REG,(HWREG_U8)VID_CODE_VHIGH);
+	   return PMU_OK;
+	 case PMU_VOLTAGE_1V32:
+	   PMIC_Set(reg_addr,0xff,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_SETVID_REG,(HWREG_U8)VID_CODE_VHIGH);
+	   return PMU_OK;
+	 case PMU_VOLTAGE_FIXED:
+	   return PMU_OK;
+	 default:
+	   return PMU_ERR_INV_VOLT; /* voltage not supported */
+   }
+
+  return PMU_OK;
+}
+/*---------------------------------------------------------------------------------------------------------------*/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_domain_cfg_internal.h */
+ePMU_MODE_LIST_T current_vcc_mode = PMU_MODE_OFF;
+ePMU_RETURN_T pmic_get_vcc_info
+(
+  ePMU_VOLTAGE_LIST_T * const pmu_volt_p,
+  ePMU_VOLTAGE_LIST_T * const pmu_volt_nom_p,
+  ePMU_MODE_LIST_T    * const pmu_mode_p
+)
+{
+  ePMU_RETURN_T PMU_ret_val = PMU_OK;
+
+  pmic_log("%s voltage = %d\n", __func__, rail_info[POWER_RAIL_BUCK1].voltage);
+  if (pmu_volt_p != NULL)
+    *pmu_volt_p = rail_info[POWER_RAIL_BUCK1].voltage;
+
+  if (pmu_volt_p != NULL)
+    *pmu_volt_nom_p = rail_info[POWER_RAIL_BUCK1].voltage;
+
+  if (pmu_volt_p != NULL)
+    *pmu_mode_p = current_vcc_mode;
+
+  return PMU_ret_val;
+}
+
+/*---------------------------------------------------------------------------------------------------------------*/
+
+/****************************************************************************************
+* VPROG1 regulator
+****************************************************************************************/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_get_vprog1_info
+(
+  ePMU_VOLTAGE_LIST_T * const pmu_volt_p,
+  ePMU_VOLTAGE_LIST_T * const pmu_volt_nom_p,
+  ePMU_MODE_LIST_T	  * const pmu_mode_p
+)
+{
+  ePMU_RETURN_T PMU_ret_val = PMU_OK;
+
+	/* Check input parameters */
+  if ((NULL == pmu_volt_p) ||
+	  (NULL == pmu_volt_nom_p) ||
+	  (NULL == pmu_mode_p))
+  {
+	PMU_ret_val = PMU_ERR_INV_ARG;
+  }
+  else
+  {
+	*pmu_volt_p = rail_info[POWER_RAIL_VPROG1].voltage;
+	*pmu_volt_nom_p = rail_info[POWER_RAIL_VPROG1].voltage;
+	*pmu_mode_p = rail_info[POWER_RAIL_VPROG1].mode;
+  }
+  return PMU_ret_val;
+}
+/*---------------------------------------------------------------------------------------------------------------*/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_set_vprog1_voltage
+(
+  const ePMU_VOLTAGE_LIST_T voltage
+)
+{
+  rail_info[POWER_RAIL_VPROG1].voltage = voltage;
+  /* configure VPROG1 voltage map official enum to HW related enums */
+  switch(voltage)
+   {
+	 //case PMU_VOLTAGE_1V35:
+	  // PMIC_Set(PMIC_VPROG1VSEL_REG,pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG1VSEL_REG_VPROG1VSEL,(HWREG_U8)0x19);
+	  // pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Structure.VPROG1VSEL = 0x19;
+	  // return PMU_OK;
+	 case PMU_VOLTAGE_1V80:
+	   PMIC_Set(PMIC_VPROG1VSEL_REG,pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG1VSEL_REG_VPROG1VSEL,(HWREG_U8)0x1F);
+	   pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Structure.VPROG1VSEL = 0x1F;
+	   return PMU_OK;
+	 case PMU_VOLTAGE_2V50:
+	   PMIC_Set(PMIC_VPROG1VSEL_REG,pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG1VSEL_REG_VPROG1VSEL,(HWREG_U8)0x2D);
+	   pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Structure.VPROG1VSEL = 0x2D;
+	   return PMU_OK;
+      case PMU_VOLTAGE_2V80:
+	   PMIC_Set(PMIC_VPROG1VSEL_REG,pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG1VSEL_REG_VPROG1VSEL,(HWREG_U8)0x33);
+	   pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Structure.VPROG1VSEL = 0x33;
+	   return PMU_OK;
+	 case PMU_VOLTAGE_2V85:
+	   PMIC_Set(PMIC_VPROG1VSEL_REG,pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG1VSEL_REG_VPROG1VSEL,(HWREG_U8)0x34);
+	   pmu_reg.vprog1sel_reg.VPROG1VSEL_REG_Structure.VPROG1VSEL = 0x34;
+	   return PMU_OK;
+	 case PMU_VOLTAGE_FIXED:
+	   return PMU_OK;
+	 default:
+	   return PMU_ERR_INV_VOLT; /* voltage not supported */
+   }
+}
+/*---------------------------------------------------------------------------------------------------------------*/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_set_vprog1_mode
+(
+  const ePMU_MODE_LIST_T mode
+)
+{
+  rail_info[POWER_RAIL_VPROG1].mode = mode;
+  /* configure VPROG1 mode map offical enum to HW related enums */
+  switch(mode)
+  {
+	case PMU_MODE_FIXED:
+	  return PMU_OK; /* nothing has to be done here */
+	case PMU_MODE_ON:
+	  PMIC_Set(PMIC_VPROG1CNT_REG,pmu_reg.vprog1cnt_reg.VPROG1CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG1CNT_REG_MODEVPROG1,(HWREG_U8)0x2);
+	  pmu_reg.vprog1cnt_reg.VPROG1CNT_REG_Structure.MODEVPROG1 = 0x2;
+	  return PMU_OK;
+	case PMU_MODE_OFF_STDBY:
+	  PMIC_Set(PMIC_VPROG1CNT_REG,pmu_reg.vprog1cnt_reg.VPROG1CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG1CNT_REG_MODEVPROG1,(HWREG_U8)0x3);
+	  pmu_reg.vprog1cnt_reg.VPROG1CNT_REG_Structure.MODEVPROG1 = 0x3;
+	  return PMU_OK;
+	case PMU_MODE_IDLE_STDBY:
+	  PMIC_Set(PMIC_VPROG1CNT_REG,pmu_reg.vprog1cnt_reg.VPROG1CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG1CNT_REG_MODEVPROG1,(HWREG_U8)0x4);
+	  pmu_reg.vprog1cnt_reg.VPROG1CNT_REG_Structure.MODEVPROG1 = 0x4;
+	  return PMU_OK;
+	case PMU_MODE_OFF:
+	  PMIC_Set(PMIC_VPROG1CNT_REG,pmu_reg.vprog1cnt_reg.VPROG1CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG1CNT_REG_MODEVPROG1,(HWREG_U8)0);
+	  pmu_reg.vprog1cnt_reg.VPROG1CNT_REG_Structure.MODEVPROG1 = 0;
+	  return PMU_OK;
+	default:
+	  return PMU_ERR_INV_MODE;
+  }
+}
+
+/*---------------------------------------------------------------------------------------------------------------*/
+/****************************************************************************************
+* VPROG2 regulator
+****************************************************************************************/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_get_vprog2_info
+(
+  ePMU_VOLTAGE_LIST_T * const pmu_volt_p,
+  ePMU_VOLTAGE_LIST_T * const pmu_volt_nom_p,
+  ePMU_MODE_LIST_T	  * const pmu_mode_p
+)
+{
+  ePMU_RETURN_T PMU_ret_val = PMU_OK;
+
+	/* Check input parameters */
+  if ((NULL == pmu_volt_p) ||
+	  (NULL == pmu_volt_nom_p) ||
+	  (NULL == pmu_mode_p))
+  {
+	PMU_ret_val = PMU_ERR_INV_ARG;
+  }
+  else
+  {
+	*pmu_volt_p = rail_info[POWER_RAIL_VPROG2].voltage;
+	*pmu_volt_nom_p = rail_info[POWER_RAIL_VPROG2].voltage;
+	*pmu_mode_p = rail_info[POWER_RAIL_VPROG2].mode;
+  }
+  return PMU_ret_val;
+}
+/*---------------------------------------------------------------------------------------------------------------*/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_set_vprog2_voltage
+(
+  const ePMU_VOLTAGE_LIST_T voltage
+)
+{
+  rail_info[POWER_RAIL_VPROG2].voltage = voltage;
+  /* configure VPROG2 voltage map official enum to HW related enums */
+  switch(voltage)
+   {
+	 //case PMU_VOLTAGE_1V35:
+	 //  PMIC_Set(PMIC_VPROG2VSEL_REG,pmu_reg.vprog2sel_reg.VPROG2VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG2VSEL_REG_VPROG2VSEL,(HWREG_U8)0x19);
+	 //  pmu_reg.vprog2sel_reg.VPROG2VSEL_REG_Structure.VPROG2VSEL = 0x19;
+	 //  return PMU_OK;
+	 case PMU_VOLTAGE_1V80:
+	   PMIC_Set(PMIC_VPROG2VSEL_REG,pmu_reg.vprog2sel_reg.VPROG2VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG2VSEL_REG_VPROG2VSEL,(HWREG_U8)0x1F);
+	   pmu_reg.vprog2sel_reg.VPROG2VSEL_REG_Structure.VPROG2VSEL = 0x1F;
+	   return PMU_OK;
+	 case PMU_VOLTAGE_2V50:
+	   PMIC_Set(PMIC_VPROG2VSEL_REG,pmu_reg.vprog2sel_reg.VPROG2VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG2VSEL_REG_VPROG2VSEL,(HWREG_U8)0x2D);
+	   pmu_reg.vprog2sel_reg.VPROG2VSEL_REG_Structure.VPROG2VSEL = 0x2D;
+	   return PMU_OK;
+	 case PMU_VOLTAGE_2V80:
+	   PMIC_Set(PMIC_VPROG2VSEL_REG,pmu_reg.vprog2sel_reg.VPROG2VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG2VSEL_REG_VPROG2VSEL,(HWREG_U8)0x33);
+	   pmu_reg.vprog2sel_reg.VPROG2VSEL_REG_Structure.VPROG2VSEL = 0x33;
+	   return PMU_OK;
+	 case PMU_VOLTAGE_FIXED:
+	   return PMU_OK;
+	 default:
+	   return PMU_ERR_INV_VOLT; /* voltage not supported */
+   }
+}
+/*---------------------------------------------------------------------------------------------------------------*/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_set_vprog2_mode
+(
+  const ePMU_MODE_LIST_T mode
+)
+{
+  rail_info[POWER_RAIL_VPROG2].mode = mode;
+  /* configure VPROG2 mode map offical enum to HW related enums */
+  switch(mode)
+  {
+	case PMU_MODE_FIXED:
+	  return PMU_OK; /* nothing has to be done here */
+	case PMU_MODE_ON:
+	  PMIC_Set(PMIC_VPROG2CNT_REG,pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG2CNT_REG_MODEVPROG2,(HWREG_U8)0x2);
+	  pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Structure.MODEVPROG2 = 0x2;
+	  return PMU_OK;
+	case PMU_MODE_OFF_STDBY:
+	  PMIC_Set(PMIC_VPROG2CNT_REG,pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG2CNT_REG_MODEVPROG2,(HWREG_U8)0x3);
+	  pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Structure.MODEVPROG2 = 0x3;
+	  return PMU_OK;
+	case PMU_MODE_IDLE_STDBY: 
+	  PMIC_Set(PMIC_VPROG2CNT_REG,pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG2CNT_REG_MODEVPROG2,(HWREG_U8)0x4);
+	  pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Structure.MODEVPROG2 = 0x4;
+	  return PMU_OK;
+	case PMU_MODE_OFF:
+	  PMIC_Set(PMIC_VPROG2CNT_REG,pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG2CNT_REG_MODEVPROG2,(HWREG_U8)0);
+	  pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Structure.MODEVPROG2 = 0;
+	  return PMU_OK;
+	default:
+	  return PMU_ERR_INV_MODE;
+  }
+}
+/*---------------------------------------------------------------------------------------------------------------*/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_set_vprog2_pull_down
+(
+  const BOOL pull_down
+)
+{
+  /* configure VPROG2 pull down map offical enum to HW related enum */
+  if (pull_down)
+  {
+	PMIC_Set(PMIC_VPROG2CNT_REG,pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG2CNT_REG_VPROG2DIS_PLD,(HWREG_U8)0);
+	pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Structure.VPROG2DIS_PLD = 0;
+  }
+  else
+  {
+	PMIC_Set(PMIC_VPROG2CNT_REG,pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG2CNT_REG_VPROG2DIS_PLD,(HWREG_U8)1);
+	pmu_reg.vprog2cnt_reg.VPROG2CNT_REG_Structure.VPROG2DIS_PLD = 1;
+  }
+
+  return PMU_OK;
+}
+/*---------------------------------------------------------------------------------------------------------------*/
+/****************************************************************************************
+* VPROG3 regulator
+****************************************************************************************/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_get_vprog3_info
+(
+  ePMU_VOLTAGE_LIST_T * const pmu_volt_p,
+  ePMU_VOLTAGE_LIST_T * const pmu_volt_nom_p,
+  ePMU_MODE_LIST_T	  * const pmu_mode_p
+)
+{
+  ePMU_RETURN_T PMU_ret_val = PMU_OK;
+  uVPROG3CNT_REG myVPROG3_CNT = {0};
+  uVPROG3VSEL_REG myVPROG3_SEL = {0};
+
+	/* Check input parameters */
+  if ((NULL == pmu_volt_p) ||
+	  (NULL == pmu_volt_nom_p) ||
+	  (NULL == pmu_mode_p))
+  {
+	PMU_ret_val = PMU_ERR_INV_ARG;
+  }
+  else
+  {
+	*pmu_volt_p = rail_info[POWER_RAIL_VPROG3].voltage;
+	*pmu_volt_nom_p = rail_info[POWER_RAIL_VPROG3].voltage;
+	*pmu_mode_p = rail_info[POWER_RAIL_VPROG3].mode;
+  }
+  return PMU_ret_val;
+}
+/*---------------------------------------------------------------------------------------------------------------*/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_set_vprog3_voltage ( const ePMU_VOLTAGE_LIST_T voltage)
+{
+  rail_info[POWER_RAIL_VPROG2].voltage = voltage;
+  /* configure VPROG3 voltage map official enum to HW related enums */
+  switch(voltage)
+   {
+  case PMU_VOLTAGE_1V02:
+	   PMIC_Set(PMIC_VPROG3VSEL_REG,pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3VSEL_REG_VPROG3VSEL,(HWREG_U8)0x10);
+    pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Structure.VPROG3VSEL = 0x10;
+    return PMU_OK;
+	 case PMU_VOLTAGE_1V20:
+	   PMIC_Set(PMIC_VPROG3VSEL_REG,pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3VSEL_REG_VPROG3VSEL,(HWREG_U8)0x13);
+	   pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Structure.VPROG3VSEL = 0x13;
+	   return PMU_OK;
+	 case PMU_VOLTAGE_1V80:
+	   PMIC_Set(PMIC_VPROG3VSEL_REG,pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3VSEL_REG_VPROG3VSEL,(HWREG_U8)0x1F);
+	   pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Structure.VPROG3VSEL = 0x1F;
+	   return PMU_OK;
+	 //case PMU_VOLTAGE_1V85:
+	  // PMIC_Set(PMIC_VPROG3VSEL_REG,pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3VSEL_REG_VPROG3VSEL,(HWREG_U8)0x20);
+	  // pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Structure.VPROG3VSEL = 0x20;
+	  // return PMU_OK;
+	 case PMU_VOLTAGE_2V90:
+	   PMIC_Set(PMIC_VPROG3VSEL_REG,pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3VSEL_REG_VPROG3VSEL,(HWREG_U8)0x35);
+	   pmu_reg.vprog3sel_reg.VPROG3VSEL_REG_Structure.VPROG3VSEL = 0x35;
+	   return PMU_OK;
+	 case PMU_VOLTAGE_FIXED:
+	   return PMU_OK;
+	 default:
+	   return PMU_ERR_INV_VOLT; /* voltage not supported */
+   }
+}
+/*---------------------------------------------------------------------------------------------------------------*/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_set_vprog3_mode
+(
+  const ePMU_MODE_LIST_T mode
+)
+{
+  rail_info[POWER_RAIL_VPROG2].mode = mode;
+  /* configure VPROG3 mode map offical enum to HW related enums */
+  switch(mode)
+  {
+	case PMU_MODE_FIXED:
+	  return PMU_OK; /* nothing has to be done here */
+	case PMU_MODE_ON:
+	  PMIC_Set(PMIC_VPROG3CNT_REG,pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3CNT_REG_MODEVPROG3,(HWREG_U8)0x2);
+	  pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Structure.MODEVPROG3 = 0x2;
+	  return PMU_OK;
+	case PMU_MODE_OFF_STDBY:
+	  PMIC_Set(PMIC_VPROG3CNT_REG,pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3CNT_REG_MODEVPROG3,(HWREG_U8)0x3);
+	  pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Structure.MODEVPROG3 = 0x3;
+	  return PMU_OK;
+	case PMU_MODE_IDLE_STDBY:
+	  PMIC_Set(PMIC_VPROG3CNT_REG,pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3CNT_REG_MODEVPROG3,(HWREG_U8)0x4);
+	  pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Structure.MODEVPROG3 = 0x4;
+	  return PMU_OK;
+	case PMU_MODE_OFF:
+	  PMIC_Set(PMIC_VPROG3CNT_REG,pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3CNT_REG_MODEVPROG3,(HWREG_U8)0);
+	  pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Structure.MODEVPROG3 = 0;
+	  return PMU_OK;
+	default:
+	  return PMU_ERR_INV_MODE;
+  }
+}
+/*---------------------------------------------------------------------------------------------------------------*/
+/*---------------------------------------------------------------------------------------------------------------*/
+/** See pmu_int_hal_cfg_internal.h */
+ePMU_RETURN_T PMU_int_hal_set_vprog3_pull_down
+(
+  const BOOL pull_down
+)
+{
+  /* configure VPROG3 pull down map offical enum to HW related enum */
+  if (pull_down)
+  {
+	PMIC_Set(PMIC_VPROG3CNT_REG,pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3CNT_REG_VPROG3DIS_PLD,(HWREG_U8)0);
+	pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Structure.VPROG3DIS_PLD = 0;
+  }
+  else
+  {
+	PMIC_Set(PMIC_VPROG3CNT_REG,pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Content,(HWREG_U8 (*)(HWREG_U8 _reg, HWREG_U8 value))setPmic_VPROG3CNT_REG_VPROG3DIS_PLD,(HWREG_U8)1);
+	pmu_reg.vprog3cnt_reg.VPROG3CNT_REG_Structure.VPROG3DIS_PLD = 1;	
+  }
+
+  return PMU_OK;
+}
+
diff --git a/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmic.h b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmic.h
new file mode 100644
index 0000000..387b3c2
--- /dev/null
+++ b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmic.h
@@ -0,0 +1,34220 @@
+// ******************************************************************************
+// ------------------------------------------------------------------------------
+//                             INTEL RESTRICTED SECRET
+// ------------------------------------------------------------------------------
+//    Copyright (c) 2011 - 2014 Intel Mobile Communications GmbH
+//    Copyright (c) 2005 - 2011 Infineon Technologies AG
+// ------------------------------------------------------------------------------
+//
+//    DO NOT EDIT THIS FILE !!!
+//
+//    This file has been automatically generated from:
+//        !Unknown!
+//
+//    Input File Checksum:
+//        246FBD4A
+//
+//    Essence Command Line:
+//        essemplate -D i2c=true -I essence_in=PMIC_BHN_I2C_DEV1_REG_ESS.xml -I essence_in=PMIC_BHN_I2C_DEV2_REG_ESS.xml -I essence_in=PMIC_BHN_I2C_DEV3_REG_ESS.xml -D forcemodulename=pmic classified=confidential -D noresbits=True -t sg3hs_main.mako -o _out/pmic.txt -D arch=x86
+//
+//    Essence Tool Directory:
+//        I:\eda\intel\essence\devel\lib\python
+//
+//    Essence Version:
+//        2.1.28.devel
+//
+//    Generation Date:
+//        2014-04-07
+//
+// ******************************************************************************
+// ------------------------------------------------------------------------------
+//
+//  Revision Information :
+//    File name:   pmic.h
+//    Version:     not specified
+//    Responsible:
+//
+// ------------------------------------------------------------------------------
+//
+//  This file contains the register access for pmic
+//
+// ------------------------------------------------------------------------------
+
+
+
+/*lint -e46 -e528 */
+
+#ifndef __PMIC_HW_REG_H__
+#define __PMIC_HW_REG_H__
+
+#define LTEPMIC_MRD_TEST
+
+#ifdef PMIC_REG_INLINE_DISABLED
+  #undef __HWREG_INLINE__
+  #define __HWREG_INLINE__ /*no inline*/
+#elif !defined(__HWREG_INLINE__)
+  #ifdef __GNUC__
+    #define __HWREG_INLINE__ static __inline
+  #else
+    #define __HWREG_INLINE__ static __forceinline
+  #endif
+#endif
+
+
+#ifdef HWREG_U64
+    #undef HWREG_U64
+#endif
+
+#ifdef HWREG_U32
+    #undef HWREG_U32
+#endif
+
+#ifdef HWREG_U16
+    #undef HWREG_U16
+#endif
+
+#ifdef HWREG_U8
+    #undef HWREG_U8
+#endif
+
+#define HWREG_U64 unsigned long long
+#define HWREG_U32 unsigned long
+#define HWREG_U16 unsigned short
+#define HWREG_U8 unsigned char
+
+
+
+/** @brief ID0_REG register description at address offset 0x4e00
+  *
+  *  Chip ID Register 0
+  */
+typedef struct
+{
+    const HWREG_U8 MINREV :3; /**<  */
+    const HWREG_U8 MAJREV :3; /**<  */
+    const HWREG_U8 VENDID :2; /**<  */
+} sID0_REGStructure;
+
+
+/** @brief ID0_REG Bitfield widths
+*/
+#define lenID0_REG_MINREV 3
+#define lenID0_REG_MAJREV 3
+#define lenID0_REG_VENDID 2
+
+typedef enum
+{
+    ID0_REG_LSB_MINREV = 0,
+    ID0_REG_LSB_MAJREV = 3,
+    ID0_REG_LSB_VENDID = 6
+} eID0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 ID0_REG_Content;
+    sID0_REGStructure ID0_REG_Structure;
+} uID0_REG;
+
+typedef enum
+{
+    ID0_REG_MINREV_X0 = 0,
+    ID0_REG_MINREV_X1 = 1,
+    ID0_REG_MINREV_X2 = 2,
+    ID0_REG_MINREV_X3 = 3,
+    ID0_REG_MINREV_X4 = 4,
+    ID0_REG_MINREV_X5 = 5,
+    ID0_REG_MINREV_X6 = 6,
+    ID0_REG_MINREV_X7 = 7
+} eID0_REG_MINREV;
+
+typedef enum
+{
+    ID0_REG_MAJREV_AX = 0,
+    ID0_REG_MAJREV_BX = 1,
+    ID0_REG_MAJREV_CX = 2,
+    ID0_REG_MAJREV_DX = 3,
+    ID0_REG_MAJREV_EX = 4,
+    ID0_REG_MAJREV_FX = 5,
+    ID0_REG_MAJREV_GX = 6,
+    ID0_REG_MAJREV_HX = 7
+} eID0_REG_MAJREV;
+
+typedef enum
+{
+    ID0_REG_VENDID_INTEL = 0
+} eID0_REG_VENDID;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ID0_REG(HWREG_U8 value); /** Get complete register ID0_REG */
+__HWREG_INLINE__ eID0_REG_MINREV getPmic_ID0_REG_MINREV(HWREG_U8 value); /**< Get element MINREV of register ID0_REG */
+__HWREG_INLINE__ eID0_REG_MAJREV getPmic_ID0_REG_MAJREV(HWREG_U8 value); /**< Get element MAJREV of register ID0_REG */
+__HWREG_INLINE__ eID0_REG_VENDID getPmic_ID0_REG_VENDID(HWREG_U8 value); /**< Get element VENDID of register ID0_REG */
+
+
+/** @brief ID1_REG register description at address offset 0x4e01
+  *
+  *  Chip ID Register 1
+  */
+typedef struct
+{
+    const HWREG_U8 DEVICEID :8; /**<  */
+} sID1_REGStructure;
+
+
+/** @brief ID1_REG Bitfield widths
+*/
+#define lenID1_REG_DEVICEID 8
+
+typedef enum
+{
+    ID1_REG_LSB_DEVICEID = 0
+} eID1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 ID1_REG_Content;
+    sID1_REGStructure ID1_REG_Structure;
+} uID1_REG;
+
+typedef enum
+{
+    ID1_REG_DEVICEID_SC = 0,
+    ID1_REG_DEVICEID_WSC = 2
+} eID1_REG_DEVICEID;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ID1_REG(HWREG_U8 value); /** Get complete register ID1_REG */
+__HWREG_INLINE__ eID1_REG_DEVICEID getPmic_ID1_REG_DEVICEID(HWREG_U8 value); /**< Get element DEVICEID of register ID1_REG */
+
+
+/** @brief IRQLVL1_REG register description at address offset 0x4e02
+  *
+  *  Level 1 Interrupt Register
+  */
+typedef struct
+{
+    const HWREG_U8 PWRBTN :1; /**<  */
+    const HWREG_U8 TMU :1; /**<  */
+    const HWREG_U8 THRM :1; /**<  */
+    const HWREG_U8 BCU :1; /**<  */
+    const HWREG_U8 ADC :1; /**<  */
+    const HWREG_U8 CHGR :1; /**<  */
+    const HWREG_U8 GPIO :1; /**<  */
+    const HWREG_U8 CRIT :1; /**<  */
+} sIRQLVL1_REGStructure;
+
+
+/** @brief IRQLVL1_REG Bitfield widths
+*/
+#define lenIRQLVL1_REG_PWRBTN 1
+#define lenIRQLVL1_REG_TMU 1
+#define lenIRQLVL1_REG_THRM 1
+#define lenIRQLVL1_REG_BCU 1
+#define lenIRQLVL1_REG_ADC 1
+#define lenIRQLVL1_REG_CHGR 1
+#define lenIRQLVL1_REG_GPIO 1
+#define lenIRQLVL1_REG_CRIT 1
+
+typedef enum
+{
+    IRQLVL1_REG_LSB_PWRBTN = 0,
+    IRQLVL1_REG_LSB_TMU = 1,
+    IRQLVL1_REG_LSB_THRM = 2,
+    IRQLVL1_REG_LSB_BCU = 3,
+    IRQLVL1_REG_LSB_ADC = 4,
+    IRQLVL1_REG_LSB_CHGR = 5,
+    IRQLVL1_REG_LSB_GPIO = 6,
+    IRQLVL1_REG_LSB_CRIT = 7
+} eIRQLVL1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 IRQLVL1_REG_Content;
+    sIRQLVL1_REGStructure IRQLVL1_REG_Structure;
+} uIRQLVL1_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG(HWREG_U8 value); /** Get complete register IRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_PWRBTN(HWREG_U8 value); /**< Get element PWRBTN of register IRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_TMU(HWREG_U8 value); /**< Get element TMU of register IRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_THRM(HWREG_U8 value); /**< Get element THRM of register IRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_BCU(HWREG_U8 value); /**< Get element BCU of register IRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_ADC(HWREG_U8 value); /**< Get element ADC of register IRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_CHGR(HWREG_U8 value); /**< Get element CHGR of register IRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_GPIO(HWREG_U8 value); /**< Get element GPIO of register IRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_CRIT(HWREG_U8 value); /**< Get element CRIT of register IRQLVL1_REG */
+
+
+/** @brief PBIRQ_REG register description at address offset 0x4e03
+  *
+  *  Power Button Interrupt Register
+  */
+typedef struct
+{
+    HWREG_U8 PBTN :1; /**<  */
+    HWREG_U8 UBTN :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+    const HWREG_U8 VEND :1; /**<  */
+} sPBIRQ_REGStructure;
+
+
+/** @brief PBIRQ_REG Bitfield widths
+*/
+#define lenPBIRQ_REG_PBTN 1
+#define lenPBIRQ_REG_UBTN 1
+#define lenPBIRQ_REG_VEND 1
+
+typedef enum
+{
+    PBIRQ_REG_LSB_PBTN = 0,
+    PBIRQ_REG_LSB_UBTN = 1,
+    PBIRQ_REG_LSB_VEND = 7
+} ePBIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PBIRQ_REG_Content;
+    sPBIRQ_REGStructure PBIRQ_REG_Structure;
+} uPBIRQ_REG;
+
+typedef enum
+{
+    PBIRQ_REG_PBTN_NA = 0,
+    PBIRQ_REG_PBTN_IA = 1
+} ePBIRQ_REG_PBTN;
+
+typedef enum
+{
+    PBIRQ_REG_UBTN_NA = 0,
+    PBIRQ_REG_UBTN_IA = 1
+} ePBIRQ_REG_UBTN;
+
+typedef enum
+{
+    PBIRQ_REG_VEND_NA = 0,
+    PBIRQ_REG_VEND_IA = 1
+} ePBIRQ_REG_VEND;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBIRQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PBIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PBIRQ_REG(HWREG_U8 value); /** Get complete register PBIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PBIRQ_REG_PBTN(HWREG_U8 _reg, ePBIRQ_REG_PBTN value); /**< Set element PBTN of register PBIRQ_REG */
+__HWREG_INLINE__ ePBIRQ_REG_PBTN getPmic_PBIRQ_REG_PBTN(HWREG_U8 value); /**< Get element PBTN of register PBIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PBIRQ_REG_UBTN(HWREG_U8 _reg, ePBIRQ_REG_UBTN value); /**< Set element UBTN of register PBIRQ_REG */
+__HWREG_INLINE__ ePBIRQ_REG_UBTN getPmic_PBIRQ_REG_UBTN(HWREG_U8 value); /**< Get element UBTN of register PBIRQ_REG */
+__HWREG_INLINE__ ePBIRQ_REG_VEND getPmic_PBIRQ_REG_VEND(HWREG_U8 value); /**< Get element VEND of register PBIRQ_REG */
+
+
+/** @brief THRMIRQ0_REG register description at address offset 0x4e04
+  *
+  *  Thermal Monitor Interrupt Register 0
+  */
+typedef struct
+{
+    HWREG_U8 SYS0ALRT0 :1; /**<  */
+    HWREG_U8 SYS1ALRT0 :1; /**<  */
+    HWREG_U8 SYS2ALRT0 :1; /**<  */
+    HWREG_U8 PMICALRT0 :1; /**<  */
+    HWREG_U8 SYS0ALRT1 :1; /**<  */
+    HWREG_U8 SYS1ALRT1 :1; /**<  */
+    HWREG_U8 SYS2ALRT1 :1; /**<  */
+    HWREG_U8 GPALRT :1; /**<  */
+} sTHRMIRQ0_REGStructure;
+
+
+/** @brief THRMIRQ0_REG Bitfield widths
+*/
+#define lenTHRMIRQ0_REG_SYS0ALRT0 1
+#define lenTHRMIRQ0_REG_SYS1ALRT0 1
+#define lenTHRMIRQ0_REG_SYS2ALRT0 1
+#define lenTHRMIRQ0_REG_PMICALRT0 1
+#define lenTHRMIRQ0_REG_SYS0ALRT1 1
+#define lenTHRMIRQ0_REG_SYS1ALRT1 1
+#define lenTHRMIRQ0_REG_SYS2ALRT1 1
+#define lenTHRMIRQ0_REG_GPALRT 1
+
+typedef enum
+{
+    THRMIRQ0_REG_LSB_SYS0ALRT0 = 0,
+    THRMIRQ0_REG_LSB_SYS1ALRT0 = 1,
+    THRMIRQ0_REG_LSB_SYS2ALRT0 = 2,
+    THRMIRQ0_REG_LSB_PMICALRT0 = 3,
+    THRMIRQ0_REG_LSB_SYS0ALRT1 = 4,
+    THRMIRQ0_REG_LSB_SYS1ALRT1 = 5,
+    THRMIRQ0_REG_LSB_SYS2ALRT1 = 6,
+    THRMIRQ0_REG_LSB_GPALRT = 7
+} eTHRMIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMIRQ0_REG_Content;
+    sTHRMIRQ0_REGStructure THRMIRQ0_REG_Structure;
+} uTHRMIRQ0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG(HWREG_U8 value); /** Get complete register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS0ALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALRT0 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS0ALRT0(HWREG_U8 value); /**< Get element SYS0ALRT0 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS1ALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALRT0 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS1ALRT0(HWREG_U8 value); /**< Get element SYS1ALRT0 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS2ALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALRT0 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS2ALRT0(HWREG_U8 value); /**< Get element SYS2ALRT0 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_PMICALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICALRT0 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_PMICALRT0(HWREG_U8 value); /**< Get element PMICALRT0 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS0ALRT1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALRT1 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS0ALRT1(HWREG_U8 value); /**< Get element SYS0ALRT1 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS1ALRT1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALRT1 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS1ALRT1(HWREG_U8 value); /**< Get element SYS1ALRT1 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS2ALRT1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALRT1 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS2ALRT1(HWREG_U8 value); /**< Get element SYS2ALRT1 of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_GPALRT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPALRT of register THRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_GPALRT(HWREG_U8 value); /**< Get element GPALRT of register THRMIRQ0_REG */
+
+
+/** @brief THRMIRQ1_REG register description at address offset 0x4e05
+  *
+  *  Thermal Monitor Interrupt Register 1
+  */
+typedef struct
+{
+    HWREG_U8 SYS0CRIT :1; /**<  */
+    HWREG_U8 SYS1CRIT :1; /**<  */
+    HWREG_U8 SYS2CRIT :1; /**<  */
+    HWREG_U8 PMICCRIT :1; /**<  */
+    HWREG_U8 BATCRIT :1; /**<  */
+    HWREG_U8 BATCRITHOTCOLD :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 BZIRQ :1; /**<  */
+} sTHRMIRQ1_REGStructure;
+
+
+/** @brief THRMIRQ1_REG Bitfield widths
+*/
+#define lenTHRMIRQ1_REG_SYS0CRIT 1
+#define lenTHRMIRQ1_REG_SYS1CRIT 1
+#define lenTHRMIRQ1_REG_SYS2CRIT 1
+#define lenTHRMIRQ1_REG_PMICCRIT 1
+#define lenTHRMIRQ1_REG_BATCRIT 1
+#define lenTHRMIRQ1_REG_BATCRITHOTCOLD 1
+#define lenTHRMIRQ1_REG_BZIRQ 1
+
+typedef enum
+{
+    THRMIRQ1_REG_LSB_SYS0CRIT = 0,
+    THRMIRQ1_REG_LSB_SYS1CRIT = 1,
+    THRMIRQ1_REG_LSB_SYS2CRIT = 2,
+    THRMIRQ1_REG_LSB_PMICCRIT = 3,
+    THRMIRQ1_REG_LSB_BATCRIT = 4,
+    THRMIRQ1_REG_LSB_BATCRITHOTCOLD = 5,
+    THRMIRQ1_REG_LSB_BZIRQ = 7
+} eTHRMIRQ1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMIRQ1_REG_Content;
+    sTHRMIRQ1_REGStructure THRMIRQ1_REG_Structure;
+} uTHRMIRQ1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG(HWREG_U8 value); /** Get complete register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_SYS0CRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0CRIT of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_SYS0CRIT(HWREG_U8 value); /**< Get element SYS0CRIT of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_SYS1CRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1CRIT of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_SYS1CRIT(HWREG_U8 value); /**< Get element SYS1CRIT of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_SYS2CRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2CRIT of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_SYS2CRIT(HWREG_U8 value); /**< Get element SYS2CRIT of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_PMICCRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICCRIT of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_PMICCRIT(HWREG_U8 value); /**< Get element PMICCRIT of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_BATCRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRIT of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_BATCRIT(HWREG_U8 value); /**< Get element BATCRIT of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_BATCRITHOTCOLD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRITHOTCOLD of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_BATCRITHOTCOLD(HWREG_U8 value); /**< Get element BATCRITHOTCOLD of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_BZIRQ(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BZIRQ of register THRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_BZIRQ(HWREG_U8 value); /**< Get element BZIRQ of register THRMIRQ1_REG */
+
+
+/** @brief THRMIRQ2_REG register description at address offset 0x4e06
+  *
+  *  Thermal Monitor Interrupt Register 2
+  */
+typedef struct
+{
+    HWREG_U8 SYS0ALRT3 :1; /**<  */
+    HWREG_U8 SYS1ALRT3 :1; /**<  */
+    HWREG_U8 SYS2ALRT3 :1; /**<  */
+    HWREG_U8 PMICALRT3 :1; /**<  */
+    HWREG_U8 BAT0ALRT0 :1; /**<  */
+    HWREG_U8 BAT1ALRT0 :1; /**<  */
+    HWREG_U8 BAT0ALRT3 :1; /**<  */
+    HWREG_U8 BAT1ALRT3 :1; /**<  */
+} sTHRMIRQ2_REGStructure;
+
+
+/** @brief THRMIRQ2_REG Bitfield widths
+*/
+#define lenTHRMIRQ2_REG_SYS0ALRT3 1
+#define lenTHRMIRQ2_REG_SYS1ALRT3 1
+#define lenTHRMIRQ2_REG_SYS2ALRT3 1
+#define lenTHRMIRQ2_REG_PMICALRT3 1
+#define lenTHRMIRQ2_REG_BAT0ALRT0 1
+#define lenTHRMIRQ2_REG_BAT1ALRT0 1
+#define lenTHRMIRQ2_REG_BAT0ALRT3 1
+#define lenTHRMIRQ2_REG_BAT1ALRT3 1
+
+typedef enum
+{
+    THRMIRQ2_REG_LSB_SYS0ALRT3 = 0,
+    THRMIRQ2_REG_LSB_SYS1ALRT3 = 1,
+    THRMIRQ2_REG_LSB_SYS2ALRT3 = 2,
+    THRMIRQ2_REG_LSB_PMICALRT3 = 3,
+    THRMIRQ2_REG_LSB_BAT0ALRT0 = 4,
+    THRMIRQ2_REG_LSB_BAT1ALRT0 = 5,
+    THRMIRQ2_REG_LSB_BAT0ALRT3 = 6,
+    THRMIRQ2_REG_LSB_BAT1ALRT3 = 7
+} eTHRMIRQ2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMIRQ2_REG_Content;
+    sTHRMIRQ2_REGStructure THRMIRQ2_REG_Structure;
+} uTHRMIRQ2_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG(HWREG_U8 value); /** Get complete register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_SYS0ALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_SYS0ALRT3(HWREG_U8 value); /**< Get element SYS0ALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_SYS1ALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_SYS1ALRT3(HWREG_U8 value); /**< Get element SYS1ALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_SYS2ALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_SYS2ALRT3(HWREG_U8 value); /**< Get element SYS2ALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_PMICALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_PMICALRT3(HWREG_U8 value); /**< Get element PMICALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_BAT0ALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0ALRT0 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_BAT0ALRT0(HWREG_U8 value); /**< Get element BAT0ALRT0 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_BAT1ALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1ALRT0 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_BAT1ALRT0(HWREG_U8 value); /**< Get element BAT1ALRT0 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_BAT0ALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0ALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_BAT0ALRT3(HWREG_U8 value); /**< Get element BAT0ALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_BAT1ALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1ALRT3 of register THRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_BAT1ALRT3(HWREG_U8 value); /**< Get element BAT1ALRT3 of register THRMIRQ2_REG */
+
+
+/** @brief BCUIRQ_REG register description at address offset 0x4e07
+  *
+  *  BCU Interrupt Level 2 Register
+  */
+typedef struct
+{
+    HWREG_U8 VWARN1 :1; /**<  */
+    HWREG_U8 VWARN2 :1; /**<  */
+    HWREG_U8 VCRIT :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sBCUIRQ_REGStructure;
+
+
+/** @brief BCUIRQ_REG Bitfield widths
+*/
+#define lenBCUIRQ_REG_VWARN1 1
+#define lenBCUIRQ_REG_VWARN2 1
+#define lenBCUIRQ_REG_VCRIT 1
+
+typedef enum
+{
+    BCUIRQ_REG_LSB_VWARN1 = 0,
+    BCUIRQ_REG_LSB_VWARN2 = 1,
+    BCUIRQ_REG_LSB_VCRIT = 2
+} eBCUIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BCUIRQ_REG_Content;
+    sBCUIRQ_REGStructure BCUIRQ_REG_Structure;
+} uBCUIRQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUIRQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUIRQ_REG(HWREG_U8 value); /** Get complete register BCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUIRQ_REG_VWARN1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VWARN1 of register BCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUIRQ_REG_VWARN1(HWREG_U8 value); /**< Get element VWARN1 of register BCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUIRQ_REG_VWARN2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VWARN2 of register BCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUIRQ_REG_VWARN2(HWREG_U8 value); /**< Get element VWARN2 of register BCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUIRQ_REG_VCRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VCRIT of register BCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUIRQ_REG_VCRIT(HWREG_U8 value); /**< Get element VCRIT of register BCUIRQ_REG */
+
+
+/** @brief ADCIRQ_REG register description at address offset 0x4e08
+  *
+  *  GPADC Interrupt Register
+  */
+typedef struct
+{
+    HWREG_U8 USBID :1; /**<  */
+    HWREG_U8 PEAK :1; /**<  */
+    HWREG_U8 BATTEMP :1; /**<  */
+    HWREG_U8 SYSTEMP :1; /**<  */
+    HWREG_U8 BATTID :1; /**<  */
+    HWREG_U8 VBATT :1; /**<  */
+    HWREG_U8 GPMEAS :1; /**<  */
+    HWREG_U8 CCTICK :1; /**<  */
+} sADCIRQ_REGStructure;
+
+
+/** @brief ADCIRQ_REG Bitfield widths
+*/
+#define lenADCIRQ_REG_USBID 1
+#define lenADCIRQ_REG_PEAK 1
+#define lenADCIRQ_REG_BATTEMP 1
+#define lenADCIRQ_REG_SYSTEMP 1
+#define lenADCIRQ_REG_BATTID 1
+#define lenADCIRQ_REG_VBATT 1
+#define lenADCIRQ_REG_GPMEAS 1
+#define lenADCIRQ_REG_CCTICK 1
+
+typedef enum
+{
+    ADCIRQ_REG_LSB_USBID = 0,
+    ADCIRQ_REG_LSB_PEAK = 1,
+    ADCIRQ_REG_LSB_BATTEMP = 2,
+    ADCIRQ_REG_LSB_SYSTEMP = 3,
+    ADCIRQ_REG_LSB_BATTID = 4,
+    ADCIRQ_REG_LSB_VBATT = 5,
+    ADCIRQ_REG_LSB_GPMEAS = 6,
+    ADCIRQ_REG_LSB_CCTICK = 7
+} eADCIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 ADCIRQ_REG_Content;
+    sADCIRQ_REGStructure ADCIRQ_REG_Structure;
+} uADCIRQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG(HWREG_U8 value); /** Get complete register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_USBID(HWREG_U8 _reg, HWREG_U8 value); /**< Set element USBID of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_USBID(HWREG_U8 value); /**< Get element USBID of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_PEAK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PEAK of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_PEAK(HWREG_U8 value); /**< Get element PEAK of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_BATTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATTEMP of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_BATTEMP(HWREG_U8 value); /**< Get element BATTEMP of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_SYSTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYSTEMP of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_SYSTEMP(HWREG_U8 value); /**< Get element SYSTEMP of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_BATTID(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATTID of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_BATTID(HWREG_U8 value); /**< Get element BATTID of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_VBATT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VBATT of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_VBATT(HWREG_U8 value); /**< Get element VBATT of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_GPMEAS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPMEAS of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_GPMEAS(HWREG_U8 value); /**< Get element GPMEAS of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_CCTICK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CCTICK of register ADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_CCTICK(HWREG_U8 value); /**< Get element CCTICK of register ADCIRQ_REG */
+
+
+/** @brief CHGRIRQ0_REG register description at address offset 0x4e09
+  *
+  *  Charger Interrupt Register 0
+  */
+typedef struct
+{
+    HWREG_U8 CHGINTB :1; /**<  */
+    HWREG_U8 I2CWRCMP :1; /**<  */
+    HWREG_U8 I2CRDCMP :1; /**<  */
+    HWREG_U8 I2CERROR :1; /**<  */
+    HWREG_U8 CTYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sCHGRIRQ0_REGStructure;
+
+
+/** @brief CHGRIRQ0_REG Bitfield widths
+*/
+#define lenCHGRIRQ0_REG_CHGINTB 1
+#define lenCHGRIRQ0_REG_I2CWRCMP 1
+#define lenCHGRIRQ0_REG_I2CRDCMP 1
+#define lenCHGRIRQ0_REG_I2CERROR 1
+#define lenCHGRIRQ0_REG_CTYP 1
+
+typedef enum
+{
+    CHGRIRQ0_REG_LSB_CHGINTB = 0,
+    CHGRIRQ0_REG_LSB_I2CWRCMP = 1,
+    CHGRIRQ0_REG_LSB_I2CRDCMP = 2,
+    CHGRIRQ0_REG_LSB_I2CERROR = 3,
+    CHGRIRQ0_REG_LSB_CTYP = 4
+} eCHGRIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHGRIRQ0_REG_Content;
+    sCHGRIRQ0_REGStructure CHGRIRQ0_REG_Structure;
+} uCHGRIRQ0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG(HWREG_U8 value); /** Get complete register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG_CHGINTB(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CHGINTB of register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG_CHGINTB(HWREG_U8 value); /**< Get element CHGINTB of register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG_I2CWRCMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element I2CWRCMP of register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG_I2CWRCMP(HWREG_U8 value); /**< Get element I2CWRCMP of register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG_I2CRDCMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element I2CRDCMP of register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG_I2CRDCMP(HWREG_U8 value); /**< Get element I2CRDCMP of register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG_I2CERROR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element I2CERROR of register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG_I2CERROR(HWREG_U8 value); /**< Get element I2CERROR of register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG_CTYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CTYP of register CHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG_CTYP(HWREG_U8 value); /**< Get element CTYP of register CHGRIRQ0_REG */
+
+
+/** @brief CHGRIRQ1_REG register description at address offset 0x4e0a
+  *
+  *  Charger Interrupt Register 1
+  */
+typedef struct
+{
+    HWREG_U8 VBUSDET :1; /**<  */
+    HWREG_U8 DCDET :1; /**<  */
+    HWREG_U8 BATTDET :1; /**<  */
+    HWREG_U8 USBIDFLTDET :1; /**<  */
+    HWREG_U8 USBIDGNDDET :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sCHGRIRQ1_REGStructure;
+
+
+/** @brief CHGRIRQ1_REG Bitfield widths
+*/
+#define lenCHGRIRQ1_REG_VBUSDET 1
+#define lenCHGRIRQ1_REG_DCDET 1
+#define lenCHGRIRQ1_REG_BATTDET 1
+#define lenCHGRIRQ1_REG_USBIDFLTDET 1
+#define lenCHGRIRQ1_REG_USBIDGNDDET 1
+
+typedef enum
+{
+    CHGRIRQ1_REG_LSB_VBUSDET = 0,
+    CHGRIRQ1_REG_LSB_DCDET = 1,
+    CHGRIRQ1_REG_LSB_BATTDET = 2,
+    CHGRIRQ1_REG_LSB_USBIDFLTDET = 3,
+    CHGRIRQ1_REG_LSB_USBIDGNDDET = 4
+} eCHGRIRQ1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHGRIRQ1_REG_Content;
+    sCHGRIRQ1_REGStructure CHGRIRQ1_REG_Structure;
+} uCHGRIRQ1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG(HWREG_U8 value); /** Get complete register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG_VBUSDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VBUSDET of register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG_VBUSDET(HWREG_U8 value); /**< Get element VBUSDET of register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG_DCDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DCDET of register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG_DCDET(HWREG_U8 value); /**< Get element DCDET of register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG_BATTDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATTDET of register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG_BATTDET(HWREG_U8 value); /**< Get element BATTDET of register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG_USBIDFLTDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element USBIDFLTDET of register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG_USBIDFLTDET(HWREG_U8 value); /**< Get element USBIDFLTDET of register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG_USBIDGNDDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element USBIDGNDDET of register CHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG_USBIDGNDDET(HWREG_U8 value); /**< Get element USBIDGNDDET of register CHGRIRQ1_REG */
+
+
+/** @brief GPIOIRQ0_REG register description at address offset 0x4e0b
+  *
+  *  GPIO Interrupt Register 0
+  */
+typedef struct
+{
+    HWREG_U8 GPIO0P0 :1; /**<  */
+    HWREG_U8 GPIO0P1 :1; /**<  */
+    HWREG_U8 GPIO0P2 :1; /**<  */
+    HWREG_U8 GPIO0P3 :1; /**<  */
+    HWREG_U8 GPIO0P4 :1; /**<  */
+    HWREG_U8 GPIO0P5 :1; /**<  */
+    HWREG_U8 GPIO0P6 :1; /**<  */
+    HWREG_U8 BATTIO :1; /**<  */
+} sGPIOIRQ0_REGStructure;
+
+
+/** @brief GPIOIRQ0_REG Bitfield widths
+*/
+#define lenGPIOIRQ0_REG_GPIO0P0 1
+#define lenGPIOIRQ0_REG_GPIO0P1 1
+#define lenGPIOIRQ0_REG_GPIO0P2 1
+#define lenGPIOIRQ0_REG_GPIO0P3 1
+#define lenGPIOIRQ0_REG_GPIO0P4 1
+#define lenGPIOIRQ0_REG_GPIO0P5 1
+#define lenGPIOIRQ0_REG_GPIO0P6 1
+#define lenGPIOIRQ0_REG_BATTIO 1
+
+typedef enum
+{
+    GPIOIRQ0_REG_LSB_GPIO0P0 = 0,
+    GPIOIRQ0_REG_LSB_GPIO0P1 = 1,
+    GPIOIRQ0_REG_LSB_GPIO0P2 = 2,
+    GPIOIRQ0_REG_LSB_GPIO0P3 = 3,
+    GPIOIRQ0_REG_LSB_GPIO0P4 = 4,
+    GPIOIRQ0_REG_LSB_GPIO0P5 = 5,
+    GPIOIRQ0_REG_LSB_GPIO0P6 = 6,
+    GPIOIRQ0_REG_LSB_BATTIO = 7
+} eGPIOIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIOIRQ0_REG_Content;
+    sGPIOIRQ0_REGStructure GPIOIRQ0_REG_Structure;
+} uGPIOIRQ0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG(HWREG_U8 value); /** Get complete register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO0P0 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P0(HWREG_U8 value); /**< Get element GPIO0P0 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO0P1 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P1(HWREG_U8 value); /**< Get element GPIO0P1 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO0P2 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P2(HWREG_U8 value); /**< Get element GPIO0P2 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO0P3 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P3(HWREG_U8 value); /**< Get element GPIO0P3 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P4(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO0P4 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P4(HWREG_U8 value); /**< Get element GPIO0P4 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P5(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO0P5 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P5(HWREG_U8 value); /**< Get element GPIO0P5 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P6(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO0P6 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P6(HWREG_U8 value); /**< Get element GPIO0P6 of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_BATTIO(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATTIO of register GPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_BATTIO(HWREG_U8 value); /**< Get element BATTIO of register GPIOIRQ0_REG */
+
+
+/** @brief GPIOIRQ1_REG register description at address offset 0x4e0c
+  *
+  *  GPIO Interrupt Register 1
+  */
+typedef struct
+{
+    HWREG_U8 GPIO1P0 :1; /**<  */
+    HWREG_U8 GPIO1P1 :1; /**<  */
+    HWREG_U8 GPIO1P2 :1; /**<  */
+    HWREG_U8 GPIO1P3 :1; /**<  */
+    HWREG_U8 GPIO2P0 :1; /**<  */
+    HWREG_U8 GPIO2P1 :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sGPIOIRQ1_REGStructure;
+
+
+/** @brief GPIOIRQ1_REG Bitfield widths
+*/
+#define lenGPIOIRQ1_REG_GPIO1P0 1
+#define lenGPIOIRQ1_REG_GPIO1P1 1
+#define lenGPIOIRQ1_REG_GPIO1P2 1
+#define lenGPIOIRQ1_REG_GPIO1P3 1
+#define lenGPIOIRQ1_REG_GPIO2P0 1
+#define lenGPIOIRQ1_REG_GPIO2P1 1
+
+typedef enum
+{
+    GPIOIRQ1_REG_LSB_GPIO1P0 = 0,
+    GPIOIRQ1_REG_LSB_GPIO1P1 = 1,
+    GPIOIRQ1_REG_LSB_GPIO1P2 = 2,
+    GPIOIRQ1_REG_LSB_GPIO1P3 = 3,
+    GPIOIRQ1_REG_LSB_GPIO2P0 = 4,
+    GPIOIRQ1_REG_LSB_GPIO2P1 = 5
+} eGPIOIRQ1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIOIRQ1_REG_Content;
+    sGPIOIRQ1_REGStructure GPIOIRQ1_REG_Structure;
+} uGPIOIRQ1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG(HWREG_U8 value); /** Get complete register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO1P0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO1P0 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO1P0(HWREG_U8 value); /**< Get element GPIO1P0 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO1P1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO1P1 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO1P1(HWREG_U8 value); /**< Get element GPIO1P1 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO1P2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO1P2 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO1P2(HWREG_U8 value); /**< Get element GPIO1P2 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO1P3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO1P3 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO1P3(HWREG_U8 value); /**< Get element GPIO1P3 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO2P0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO2P0 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO2P0(HWREG_U8 value); /**< Get element GPIO2P0 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO2P1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIO2P1 of register GPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO2P1(HWREG_U8 value); /**< Get element GPIO2P1 of register GPIOIRQ1_REG */
+
+
+/** @brief CRITIRQ_REG register description at address offset 0x4e0d
+  *
+  *  Critical Event Interrupt Register
+  */
+typedef struct
+{
+    HWREG_U8 VROCP :1; /**<  */
+    HWREG_U8 OSCSTP :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sCRITIRQ_REGStructure;
+
+
+/** @brief CRITIRQ_REG Bitfield widths
+*/
+#define lenCRITIRQ_REG_VROCP 1
+#define lenCRITIRQ_REG_OSCSTP 1
+
+typedef enum
+{
+    CRITIRQ_REG_LSB_VROCP = 0,
+    CRITIRQ_REG_LSB_OSCSTP = 1
+} eCRITIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CRITIRQ_REG_Content;
+    sCRITIRQ_REGStructure CRITIRQ_REG_Structure;
+} uCRITIRQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CRITIRQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CRITIRQ_REG(HWREG_U8 value); /** Get complete register CRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CRITIRQ_REG_VROCP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VROCP of register CRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CRITIRQ_REG_VROCP(HWREG_U8 value); /**< Get element VROCP of register CRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CRITIRQ_REG_OSCSTP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element OSCSTP of register CRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CRITIRQ_REG_OSCSTP(HWREG_U8 value); /**< Get element OSCSTP of register CRITIRQ_REG */
+
+
+/** @brief MIRQLVL1_REG register description at address offset 0x4e0e
+  *
+  *  Level 1 Interrupt Mask Register
+  */
+typedef struct
+{
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 MTMU :1; /**<  */
+    HWREG_U8 MTHRM :1; /**<  */
+    HWREG_U8 MBCU :1; /**<  */
+    HWREG_U8 MADC :1; /**<  */
+    HWREG_U8 MCHGR :1; /**<  */
+    HWREG_U8 MGPIO :1; /**<  */
+    HWREG_U8 MCRIT :1; /**<  */
+} sMIRQLVL1_REGStructure;
+
+
+/** @brief MIRQLVL1_REG Bitfield widths
+*/
+#define lenMIRQLVL1_REG_MTMU 1
+#define lenMIRQLVL1_REG_MTHRM 1
+#define lenMIRQLVL1_REG_MBCU 1
+#define lenMIRQLVL1_REG_MADC 1
+#define lenMIRQLVL1_REG_MCHGR 1
+#define lenMIRQLVL1_REG_MGPIO 1
+#define lenMIRQLVL1_REG_MCRIT 1
+
+typedef enum
+{
+    MIRQLVL1_REG_LSB_MTMU = 1,
+    MIRQLVL1_REG_LSB_MTHRM = 2,
+    MIRQLVL1_REG_LSB_MBCU = 3,
+    MIRQLVL1_REG_LSB_MADC = 4,
+    MIRQLVL1_REG_LSB_MCHGR = 5,
+    MIRQLVL1_REG_LSB_MGPIO = 6,
+    MIRQLVL1_REG_LSB_MCRIT = 7
+} eMIRQLVL1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MIRQLVL1_REG_Content;
+    sMIRQLVL1_REGStructure MIRQLVL1_REG_Structure;
+} uMIRQLVL1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG(HWREG_U8 value); /** Get complete register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MTMU(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MTMU of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MTMU(HWREG_U8 value); /**< Get element MTMU of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MTHRM(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MTHRM of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MTHRM(HWREG_U8 value); /**< Get element MTHRM of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MBCU(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBCU of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MBCU(HWREG_U8 value); /**< Get element MBCU of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MADC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MADC of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MADC(HWREG_U8 value); /**< Get element MADC of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MCHGR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MCHGR of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MCHGR(HWREG_U8 value); /**< Get element MCHGR of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MGPIO(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MGPIO(HWREG_U8 value); /**< Get element MGPIO of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MCRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MCRIT of register MIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MCRIT(HWREG_U8 value); /**< Get element MCRIT of register MIRQLVL1_REG */
+
+
+/** @brief MPBIRQ_REG register description at address offset 0x4e0f
+  *
+  *  Power Button Interrupt Mask Register
+  */
+typedef struct
+{
+    HWREG_U8 MPBTN :1; /**<  */
+    HWREG_U8 MUBTN :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+    HWREG_U8 MVEND :1; /**<  */
+} sMPBIRQ_REGStructure;
+
+
+/** @brief MPBIRQ_REG Bitfield widths
+*/
+#define lenMPBIRQ_REG_MPBTN 1
+#define lenMPBIRQ_REG_MUBTN 1
+#define lenMPBIRQ_REG_MVEND 1
+
+typedef enum
+{
+    MPBIRQ_REG_LSB_MPBTN = 0,
+    MPBIRQ_REG_LSB_MUBTN = 1,
+    MPBIRQ_REG_LSB_MVEND = 7
+} eMPBIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MPBIRQ_REG_Content;
+    sMPBIRQ_REGStructure MPBIRQ_REG_Structure;
+} uMPBIRQ_REG;
+
+typedef enum
+{
+    MPBIRQ_REG_MPBTN_DIS = 1,
+    MPBIRQ_REG_MPBTN_EN = 0
+} eMPBIRQ_REG_MPBTN;
+
+typedef enum
+{
+    MPBIRQ_REG_MUBTN_DIS = 1,
+    MPBIRQ_REG_MUBTN_EN = 0
+} eMPBIRQ_REG_MUBTN;
+
+typedef enum
+{
+    MPBIRQ_REG_MVEND_DIS = 1,
+    MPBIRQ_REG_MVEND_EN = 0
+} eMPBIRQ_REG_MVEND;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MPBIRQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MPBIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MPBIRQ_REG(HWREG_U8 value); /** Get complete register MPBIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MPBIRQ_REG_MPBTN(HWREG_U8 _reg, eMPBIRQ_REG_MPBTN value); /**< Set element MPBTN of register MPBIRQ_REG */
+__HWREG_INLINE__ eMPBIRQ_REG_MPBTN getPmic_MPBIRQ_REG_MPBTN(HWREG_U8 value); /**< Get element MPBTN of register MPBIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MPBIRQ_REG_MUBTN(HWREG_U8 _reg, eMPBIRQ_REG_MUBTN value); /**< Set element MUBTN of register MPBIRQ_REG */
+__HWREG_INLINE__ eMPBIRQ_REG_MUBTN getPmic_MPBIRQ_REG_MUBTN(HWREG_U8 value); /**< Get element MUBTN of register MPBIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MPBIRQ_REG_MVEND(HWREG_U8 _reg, eMPBIRQ_REG_MVEND value); /**< Set element MVEND of register MPBIRQ_REG */
+__HWREG_INLINE__ eMPBIRQ_REG_MVEND getPmic_MPBIRQ_REG_MVEND(HWREG_U8 value); /**< Get element MVEND of register MPBIRQ_REG */
+
+
+/** @brief DEV1_STATUS_1_REG register description at address offset 0x4e10
+  *
+  *  sVID STATUS1 Register
+  */
+typedef struct
+{
+    const HWREG_U8 DEV1_RESERVED :3; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+    const HWREG_U8 DEV1_READ_STATUS2 :1; /**<  */
+} sDEV1_STATUS_1_REGStructure;
+
+
+/** @brief DEV1_STATUS_1_REG Bitfield widths
+*/
+#define lenDEV1_STATUS_1_REG_DEV1_RESERVED 3
+#define lenDEV1_STATUS_1_REG_DEV1_READ_STATUS2 1
+
+typedef enum
+{
+    DEV1_STATUS_1_REG_LSB_DEV1_RESERVED = 0,
+    DEV1_STATUS_1_REG_LSB_DEV1_READ_STATUS2 = 7
+} eDEV1_STATUS_1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV1_STATUS_1_REG_Content;
+    sDEV1_STATUS_1_REGStructure DEV1_STATUS_1_REG_Structure;
+} uDEV1_STATUS_1_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_1_REG(HWREG_U8 value); /** Get complete register DEV1_STATUS_1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_1_REG_DEV1_RESERVED(HWREG_U8 value); /**< Get element DEV1_RESERVED of register DEV1_STATUS_1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_1_REG_DEV1_READ_STATUS2(HWREG_U8 value); /**< Get element DEV1_READ_STATUS2 of register DEV1_STATUS_1_REG */
+
+
+/** @brief DEV1_STATUS_2_REG register description at address offset 0x4e11
+  *
+  *  sVID STATUS2 Register
+  */
+typedef struct
+{
+    const HWREG_U8 DEV1_PARITY_ERROR :1; /**<  */
+    const HWREG_U8 DEV1_DATA_FRAME_ERROR :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sDEV1_STATUS_2_REGStructure;
+
+
+/** @brief DEV1_STATUS_2_REG Bitfield widths
+*/
+#define lenDEV1_STATUS_2_REG_DEV1_PARITY_ERROR 1
+#define lenDEV1_STATUS_2_REG_DEV1_DATA_FRAME_ERROR 1
+
+typedef enum
+{
+    DEV1_STATUS_2_REG_LSB_DEV1_PARITY_ERROR = 0,
+    DEV1_STATUS_2_REG_LSB_DEV1_DATA_FRAME_ERROR = 1
+} eDEV1_STATUS_2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV1_STATUS_2_REG_Content;
+    sDEV1_STATUS_2_REGStructure DEV1_STATUS_2_REG_Structure;
+} uDEV1_STATUS_2_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_2_REG(HWREG_U8 value); /** Get complete register DEV1_STATUS_2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_2_REG_DEV1_PARITY_ERROR(HWREG_U8 value); /**< Get element DEV1_PARITY_ERROR of register DEV1_STATUS_2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_2_REG_DEV1_DATA_FRAME_ERROR(HWREG_U8 value); /**< Get element DEV1_DATA_FRAME_ERROR of register DEV1_STATUS_2_REG */
+
+
+/** @brief MTHRMIRQ0_REG register description at address offset 0x4e12
+  *
+  *  Thermal Monitor Interrupt Mask Register 0
+  */
+typedef struct
+{
+    HWREG_U8 MSYS0ALRT0 :1; /**<  */
+    HWREG_U8 MSYS1ALRT0 :1; /**<  */
+    HWREG_U8 MSYS2ALRT0 :1; /**<  */
+    HWREG_U8 MPMICALRT0 :1; /**<  */
+    HWREG_U8 MSYS0ALRT1 :1; /**<  */
+    HWREG_U8 MSYS1ALRT1 :1; /**<  */
+    HWREG_U8 MSYS2ALRT1 :1; /**<  */
+    HWREG_U8 MGPALERT :1; /**<  */
+} sMTHRMIRQ0_REGStructure;
+
+
+/** @brief MTHRMIRQ0_REG Bitfield widths
+*/
+#define lenMTHRMIRQ0_REG_MSYS0ALRT0 1
+#define lenMTHRMIRQ0_REG_MSYS1ALRT0 1
+#define lenMTHRMIRQ0_REG_MSYS2ALRT0 1
+#define lenMTHRMIRQ0_REG_MPMICALRT0 1
+#define lenMTHRMIRQ0_REG_MSYS0ALRT1 1
+#define lenMTHRMIRQ0_REG_MSYS1ALRT1 1
+#define lenMTHRMIRQ0_REG_MSYS2ALRT1 1
+#define lenMTHRMIRQ0_REG_MGPALERT 1
+
+typedef enum
+{
+    MTHRMIRQ0_REG_LSB_MSYS0ALRT0 = 0,
+    MTHRMIRQ0_REG_LSB_MSYS1ALRT0 = 1,
+    MTHRMIRQ0_REG_LSB_MSYS2ALRT0 = 2,
+    MTHRMIRQ0_REG_LSB_MPMICALRT0 = 3,
+    MTHRMIRQ0_REG_LSB_MSYS0ALRT1 = 4,
+    MTHRMIRQ0_REG_LSB_MSYS1ALRT1 = 5,
+    MTHRMIRQ0_REG_LSB_MSYS2ALRT1 = 6,
+    MTHRMIRQ0_REG_LSB_MGPALERT = 7
+} eMTHRMIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MTHRMIRQ0_REG_Content;
+    sMTHRMIRQ0_REGStructure MTHRMIRQ0_REG_Structure;
+} uMTHRMIRQ0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG(HWREG_U8 value); /** Get complete register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS0ALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS0ALRT0 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS0ALRT0(HWREG_U8 value); /**< Get element MSYS0ALRT0 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS1ALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS1ALRT0 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS1ALRT0(HWREG_U8 value); /**< Get element MSYS1ALRT0 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS2ALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS2ALRT0 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS2ALRT0(HWREG_U8 value); /**< Get element MSYS2ALRT0 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MPMICALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MPMICALRT0 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MPMICALRT0(HWREG_U8 value); /**< Get element MPMICALRT0 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS0ALRT1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS0ALRT1 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS0ALRT1(HWREG_U8 value); /**< Get element MSYS0ALRT1 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS1ALRT1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS1ALRT1 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS1ALRT1(HWREG_U8 value); /**< Get element MSYS1ALRT1 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS2ALRT1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS2ALRT1 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS2ALRT1(HWREG_U8 value); /**< Get element MSYS2ALRT1 of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MGPALERT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPALERT of register MTHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MGPALERT(HWREG_U8 value); /**< Get element MGPALERT of register MTHRMIRQ0_REG */
+
+
+/** @brief MTHRMIRQ1_REG register description at address offset 0x4e13
+  *
+  *  Thermal Monitor Interrupt Mask Register 1
+  */
+typedef struct
+{
+    HWREG_U8 MSYS0CRIT :1; /**<  */
+    HWREG_U8 MSYS1CRIT :1; /**<  */
+    HWREG_U8 MSYS2CRIT :1; /**<  */
+    HWREG_U8 MPMICCRIT :1; /**<  */
+    HWREG_U8 MBATCRIT :1; /**<  */
+    HWREG_U8 MBATCRITHOTCOLD :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 MBZIRQ :1; /**<  */
+} sMTHRMIRQ1_REGStructure;
+
+
+/** @brief MTHRMIRQ1_REG Bitfield widths
+*/
+#define lenMTHRMIRQ1_REG_MSYS0CRIT 1
+#define lenMTHRMIRQ1_REG_MSYS1CRIT 1
+#define lenMTHRMIRQ1_REG_MSYS2CRIT 1
+#define lenMTHRMIRQ1_REG_MPMICCRIT 1
+#define lenMTHRMIRQ1_REG_MBATCRIT 1
+#define lenMTHRMIRQ1_REG_MBATCRITHOTCOLD 1
+#define lenMTHRMIRQ1_REG_MBZIRQ 1
+
+typedef enum
+{
+    MTHRMIRQ1_REG_LSB_MSYS0CRIT = 0,
+    MTHRMIRQ1_REG_LSB_MSYS1CRIT = 1,
+    MTHRMIRQ1_REG_LSB_MSYS2CRIT = 2,
+    MTHRMIRQ1_REG_LSB_MPMICCRIT = 3,
+    MTHRMIRQ1_REG_LSB_MBATCRIT = 4,
+    MTHRMIRQ1_REG_LSB_MBATCRITHOTCOLD = 5,
+    MTHRMIRQ1_REG_LSB_MBZIRQ = 7
+} eMTHRMIRQ1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MTHRMIRQ1_REG_Content;
+    sMTHRMIRQ1_REGStructure MTHRMIRQ1_REG_Structure;
+} uMTHRMIRQ1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG(HWREG_U8 value); /** Get complete register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MSYS0CRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS0CRIT of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MSYS0CRIT(HWREG_U8 value); /**< Get element MSYS0CRIT of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MSYS1CRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS1CRIT of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MSYS1CRIT(HWREG_U8 value); /**< Get element MSYS1CRIT of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MSYS2CRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS2CRIT of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MSYS2CRIT(HWREG_U8 value); /**< Get element MSYS2CRIT of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MPMICCRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MPMICCRIT of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MPMICCRIT(HWREG_U8 value); /**< Get element MPMICCRIT of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MBATCRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBATCRIT of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MBATCRIT(HWREG_U8 value); /**< Get element MBATCRIT of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MBATCRITHOTCOLD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBATCRITHOTCOLD of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MBATCRITHOTCOLD(HWREG_U8 value); /**< Get element MBATCRITHOTCOLD of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MBZIRQ(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBZIRQ of register MTHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MBZIRQ(HWREG_U8 value); /**< Get element MBZIRQ of register MTHRMIRQ1_REG */
+
+
+/** @brief MTHRMIRQ2_REG register description at address offset 0x4e14
+  *
+  *  Thermal Monitor Interrupt Mask Register 2
+  */
+typedef struct
+{
+    HWREG_U8 MSYS0ALRT3 :1; /**<  */
+    HWREG_U8 MSYS1ALRT3 :1; /**<  */
+    HWREG_U8 MSYS2ALRT3 :1; /**<  */
+    HWREG_U8 MPMICALRT3 :1; /**<  */
+    HWREG_U8 MBAT0ALRT0 :1; /**<  */
+    HWREG_U8 MBAT1ALRT0 :1; /**<  */
+    HWREG_U8 MBAT0ALRT3 :1; /**<  */
+    HWREG_U8 MBAT1ALRT3 :1; /**<  */
+} sMTHRMIRQ2_REGStructure;
+
+
+/** @brief MTHRMIRQ2_REG Bitfield widths
+*/
+#define lenMTHRMIRQ2_REG_MSYS0ALRT3 1
+#define lenMTHRMIRQ2_REG_MSYS1ALRT3 1
+#define lenMTHRMIRQ2_REG_MSYS2ALRT3 1
+#define lenMTHRMIRQ2_REG_MPMICALRT3 1
+#define lenMTHRMIRQ2_REG_MBAT0ALRT0 1
+#define lenMTHRMIRQ2_REG_MBAT1ALRT0 1
+#define lenMTHRMIRQ2_REG_MBAT0ALRT3 1
+#define lenMTHRMIRQ2_REG_MBAT1ALRT3 1
+
+typedef enum
+{
+    MTHRMIRQ2_REG_LSB_MSYS0ALRT3 = 0,
+    MTHRMIRQ2_REG_LSB_MSYS1ALRT3 = 1,
+    MTHRMIRQ2_REG_LSB_MSYS2ALRT3 = 2,
+    MTHRMIRQ2_REG_LSB_MPMICALRT3 = 3,
+    MTHRMIRQ2_REG_LSB_MBAT0ALRT0 = 4,
+    MTHRMIRQ2_REG_LSB_MBAT1ALRT0 = 5,
+    MTHRMIRQ2_REG_LSB_MBAT0ALRT3 = 6,
+    MTHRMIRQ2_REG_LSB_MBAT1ALRT3 = 7
+} eMTHRMIRQ2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MTHRMIRQ2_REG_Content;
+    sMTHRMIRQ2_REGStructure MTHRMIRQ2_REG_Structure;
+} uMTHRMIRQ2_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG(HWREG_U8 value); /** Get complete register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MSYS0ALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS0ALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MSYS0ALRT3(HWREG_U8 value); /**< Get element MSYS0ALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MSYS1ALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS1ALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MSYS1ALRT3(HWREG_U8 value); /**< Get element MSYS1ALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MSYS2ALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYS2ALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MSYS2ALRT3(HWREG_U8 value); /**< Get element MSYS2ALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MPMICALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MPMICALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MPMICALRT3(HWREG_U8 value); /**< Get element MPMICALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MBAT0ALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBAT0ALRT0 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MBAT0ALRT0(HWREG_U8 value); /**< Get element MBAT0ALRT0 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MBAT1ALRT0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBAT1ALRT0 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MBAT1ALRT0(HWREG_U8 value); /**< Get element MBAT1ALRT0 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MBAT0ALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBAT0ALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MBAT0ALRT3(HWREG_U8 value); /**< Get element MBAT0ALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MBAT1ALRT3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBAT1ALRT3 of register MTHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MBAT1ALRT3(HWREG_U8 value); /**< Get element MBAT1ALRT3 of register MTHRMIRQ2_REG */
+
+
+/** @brief MBCUIRQ_REG register description at address offset 0x4e15
+  *
+  *  BCU Interrupt Level 2 Mask Register
+  */
+typedef struct
+{
+    HWREG_U8 MVWARN1 :1; /**<  */
+    HWREG_U8 MVWARN2 :1; /**<  */
+    HWREG_U8 MVCRIT :1; /**<  */
+    HWREG_U8 MGSMPULSE :1; /**<  */
+    HWREG_U8 MTXPWRTH :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sMBCUIRQ_REGStructure;
+
+
+/** @brief MBCUIRQ_REG Bitfield widths
+*/
+#define lenMBCUIRQ_REG_MVWARN1 1
+#define lenMBCUIRQ_REG_MVWARN2 1
+#define lenMBCUIRQ_REG_MVCRIT 1
+#define lenMBCUIRQ_REG_MGSMPULSE 1
+#define lenMBCUIRQ_REG_MTXPWRTH 1
+
+typedef enum
+{
+    MBCUIRQ_REG_LSB_MVWARN1 = 0,
+    MBCUIRQ_REG_LSB_MVWARN2 = 1,
+    MBCUIRQ_REG_LSB_MVCRIT = 2,
+    MBCUIRQ_REG_LSB_MGSMPULSE = 3,
+    MBCUIRQ_REG_LSB_MTXPWRTH = 4
+} eMBCUIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MBCUIRQ_REG_Content;
+    sMBCUIRQ_REGStructure MBCUIRQ_REG_Structure;
+} uMBCUIRQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG(HWREG_U8 value); /** Get complete register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG_MVWARN1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MVWARN1 of register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG_MVWARN1(HWREG_U8 value); /**< Get element MVWARN1 of register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG_MVWARN2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MVWARN2 of register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG_MVWARN2(HWREG_U8 value); /**< Get element MVWARN2 of register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG_MVCRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MVCRIT of register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG_MVCRIT(HWREG_U8 value); /**< Get element MVCRIT of register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG_MGSMPULSE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGSMPULSE of register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG_MGSMPULSE(HWREG_U8 value); /**< Get element MGSMPULSE of register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG_MTXPWRTH(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MTXPWRTH of register MBCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG_MTXPWRTH(HWREG_U8 value); /**< Get element MTXPWRTH of register MBCUIRQ_REG */
+
+
+/** @brief MADCIRQ_REG register description at address offset 0x4e16
+  *
+  *  GPADC Interrupt Mask Register
+  */
+typedef struct
+{
+    HWREG_U8 MUSBID :1; /**<  */
+    HWREG_U8 MPEAK :1; /**<  */
+    HWREG_U8 MBATTEMP :1; /**<  */
+    HWREG_U8 MSYSTEMP :1; /**<  */
+    HWREG_U8 MBATTID :1; /**<  */
+    HWREG_U8 MVBATT :1; /**<  */
+    HWREG_U8 MGPMEAS :1; /**<  */
+    HWREG_U8 MCCTICK :1; /**<  */
+} sMADCIRQ_REGStructure;
+
+
+/** @brief MADCIRQ_REG Bitfield widths
+*/
+#define lenMADCIRQ_REG_MUSBID 1
+#define lenMADCIRQ_REG_MPEAK 1
+#define lenMADCIRQ_REG_MBATTEMP 1
+#define lenMADCIRQ_REG_MSYSTEMP 1
+#define lenMADCIRQ_REG_MBATTID 1
+#define lenMADCIRQ_REG_MVBATT 1
+#define lenMADCIRQ_REG_MGPMEAS 1
+#define lenMADCIRQ_REG_MCCTICK 1
+
+typedef enum
+{
+    MADCIRQ_REG_LSB_MUSBID = 0,
+    MADCIRQ_REG_LSB_MPEAK = 1,
+    MADCIRQ_REG_LSB_MBATTEMP = 2,
+    MADCIRQ_REG_LSB_MSYSTEMP = 3,
+    MADCIRQ_REG_LSB_MBATTID = 4,
+    MADCIRQ_REG_LSB_MVBATT = 5,
+    MADCIRQ_REG_LSB_MGPMEAS = 6,
+    MADCIRQ_REG_LSB_MCCTICK = 7
+} eMADCIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MADCIRQ_REG_Content;
+    sMADCIRQ_REGStructure MADCIRQ_REG_Structure;
+} uMADCIRQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG(HWREG_U8 value); /** Get complete register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MUSBID(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MUSBID of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MUSBID(HWREG_U8 value); /**< Get element MUSBID of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MPEAK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MPEAK of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MPEAK(HWREG_U8 value); /**< Get element MPEAK of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MBATTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBATTEMP of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MBATTEMP(HWREG_U8 value); /**< Get element MBATTEMP of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MSYSTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MSYSTEMP of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MSYSTEMP(HWREG_U8 value); /**< Get element MSYSTEMP of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MBATTID(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBATTID of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MBATTID(HWREG_U8 value); /**< Get element MBATTID of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MVBATT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MVBATT of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MVBATT(HWREG_U8 value); /**< Get element MVBATT of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MGPMEAS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPMEAS of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MGPMEAS(HWREG_U8 value); /**< Get element MGPMEAS of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MCCTICK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MCCTICK of register MADCIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MCCTICK(HWREG_U8 value); /**< Get element MCCTICK of register MADCIRQ_REG */
+
+
+/** @brief MCHGRIRQ0_REG register description at address offset 0x4e17
+  *
+  *  MCHGRIRQ0 Interrupt Mask Register
+  */
+typedef struct
+{
+    HWREG_U8 MCHGINTB :1; /**<  */
+    HWREG_U8 MI2CWRCMP :1; /**<  */
+    HWREG_U8 MI2CRDCMP :1; /**<  */
+    HWREG_U8 MI2CERROR :1; /**<  */
+    HWREG_U8 MCTYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sMCHGRIRQ0_REGStructure;
+
+
+/** @brief MCHGRIRQ0_REG Bitfield widths
+*/
+#define lenMCHGRIRQ0_REG_MCHGINTB 1
+#define lenMCHGRIRQ0_REG_MI2CWRCMP 1
+#define lenMCHGRIRQ0_REG_MI2CRDCMP 1
+#define lenMCHGRIRQ0_REG_MI2CERROR 1
+#define lenMCHGRIRQ0_REG_MCTYP 1
+
+typedef enum
+{
+    MCHGRIRQ0_REG_LSB_MCHGINTB = 0,
+    MCHGRIRQ0_REG_LSB_MI2CWRCMP = 1,
+    MCHGRIRQ0_REG_LSB_MI2CRDCMP = 2,
+    MCHGRIRQ0_REG_LSB_MI2CERROR = 3,
+    MCHGRIRQ0_REG_LSB_MCTYP = 4
+} eMCHGRIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MCHGRIRQ0_REG_Content;
+    sMCHGRIRQ0_REGStructure MCHGRIRQ0_REG_Structure;
+} uMCHGRIRQ0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG(HWREG_U8 value); /** Get complete register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG_MCHGINTB(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MCHGINTB of register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG_MCHGINTB(HWREG_U8 value); /**< Get element MCHGINTB of register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG_MI2CWRCMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MI2CWRCMP of register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG_MI2CWRCMP(HWREG_U8 value); /**< Get element MI2CWRCMP of register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG_MI2CRDCMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MI2CRDCMP of register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG_MI2CRDCMP(HWREG_U8 value); /**< Get element MI2CRDCMP of register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG_MI2CERROR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MI2CERROR of register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG_MI2CERROR(HWREG_U8 value); /**< Get element MI2CERROR of register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG_MCTYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MCTYP of register MCHGRIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG_MCTYP(HWREG_U8 value); /**< Get element MCTYP of register MCHGRIRQ0_REG */
+
+
+/** @brief MCHGRIRQ1_REG register description at address offset 0x4e18
+  *
+  *  MCHGRIRQ1 Interrupt Mask Register
+  */
+typedef struct
+{
+    HWREG_U8 MVBUSDET :1; /**<  */
+    HWREG_U8 MDCDET :1; /**<  */
+    HWREG_U8 MBATTDET :1; /**<  */
+    HWREG_U8 MUSBIDFLTDET :1; /**<  */
+    HWREG_U8 MUSBIDGNDDET :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sMCHGRIRQ1_REGStructure;
+
+
+/** @brief MCHGRIRQ1_REG Bitfield widths
+*/
+#define lenMCHGRIRQ1_REG_MVBUSDET 1
+#define lenMCHGRIRQ1_REG_MDCDET 1
+#define lenMCHGRIRQ1_REG_MBATTDET 1
+#define lenMCHGRIRQ1_REG_MUSBIDFLTDET 1
+#define lenMCHGRIRQ1_REG_MUSBIDGNDDET 1
+
+typedef enum
+{
+    MCHGRIRQ1_REG_LSB_MVBUSDET = 0,
+    MCHGRIRQ1_REG_LSB_MDCDET = 1,
+    MCHGRIRQ1_REG_LSB_MBATTDET = 2,
+    MCHGRIRQ1_REG_LSB_MUSBIDFLTDET = 3,
+    MCHGRIRQ1_REG_LSB_MUSBIDGNDDET = 4
+} eMCHGRIRQ1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MCHGRIRQ1_REG_Content;
+    sMCHGRIRQ1_REGStructure MCHGRIRQ1_REG_Structure;
+} uMCHGRIRQ1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG(HWREG_U8 value); /** Get complete register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG_MVBUSDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MVBUSDET of register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG_MVBUSDET(HWREG_U8 value); /**< Get element MVBUSDET of register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG_MDCDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MDCDET of register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG_MDCDET(HWREG_U8 value); /**< Get element MDCDET of register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG_MBATTDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBATTDET of register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG_MBATTDET(HWREG_U8 value); /**< Get element MBATTDET of register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG_MUSBIDFLTDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MUSBIDFLTDET of register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG_MUSBIDFLTDET(HWREG_U8 value); /**< Get element MUSBIDFLTDET of register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG_MUSBIDGNDDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MUSBIDGNDDET of register MCHGRIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG_MUSBIDGNDDET(HWREG_U8 value); /**< Get element MUSBIDGNDDET of register MCHGRIRQ1_REG */
+
+
+/** @brief MGPIOIRQ0_REG register description at address offset 0x4e19
+  *
+  *  GPIO Interrupt Mask Register 0
+  */
+typedef struct
+{
+    HWREG_U8 MGPIO0P0 :1; /**<  */
+    HWREG_U8 MGPIO0P1 :1; /**<  */
+    HWREG_U8 MGPIO0P2 :1; /**<  */
+    HWREG_U8 MGPIO0P3 :1; /**<  */
+    HWREG_U8 MGPIO0P4 :1; /**<  */
+    HWREG_U8 MGPIO0P5 :1; /**<  */
+    HWREG_U8 MGPIO0P6 :1; /**<  */
+    HWREG_U8 MBATTIO :1; /**<  */
+} sMGPIOIRQ0_REGStructure;
+
+
+/** @brief MGPIOIRQ0_REG Bitfield widths
+*/
+#define lenMGPIOIRQ0_REG_MGPIO0P0 1
+#define lenMGPIOIRQ0_REG_MGPIO0P1 1
+#define lenMGPIOIRQ0_REG_MGPIO0P2 1
+#define lenMGPIOIRQ0_REG_MGPIO0P3 1
+#define lenMGPIOIRQ0_REG_MGPIO0P4 1
+#define lenMGPIOIRQ0_REG_MGPIO0P5 1
+#define lenMGPIOIRQ0_REG_MGPIO0P6 1
+#define lenMGPIOIRQ0_REG_MBATTIO 1
+
+typedef enum
+{
+    MGPIOIRQ0_REG_LSB_MGPIO0P0 = 0,
+    MGPIOIRQ0_REG_LSB_MGPIO0P1 = 1,
+    MGPIOIRQ0_REG_LSB_MGPIO0P2 = 2,
+    MGPIOIRQ0_REG_LSB_MGPIO0P3 = 3,
+    MGPIOIRQ0_REG_LSB_MGPIO0P4 = 4,
+    MGPIOIRQ0_REG_LSB_MGPIO0P5 = 5,
+    MGPIOIRQ0_REG_LSB_MGPIO0P6 = 6,
+    MGPIOIRQ0_REG_LSB_MBATTIO = 7
+} eMGPIOIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MGPIOIRQ0_REG_Content;
+    sMGPIOIRQ0_REGStructure MGPIOIRQ0_REG_Structure;
+} uMGPIOIRQ0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG(HWREG_U8 value); /** Get complete register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO0P0 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P0(HWREG_U8 value); /**< Get element MGPIO0P0 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO0P1 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P1(HWREG_U8 value); /**< Get element MGPIO0P1 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO0P2 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P2(HWREG_U8 value); /**< Get element MGPIO0P2 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO0P3 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P3(HWREG_U8 value); /**< Get element MGPIO0P3 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P4(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO0P4 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P4(HWREG_U8 value); /**< Get element MGPIO0P4 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P5(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO0P5 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P5(HWREG_U8 value); /**< Get element MGPIO0P5 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P6(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO0P6 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P6(HWREG_U8 value); /**< Get element MGPIO0P6 of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MBATTIO(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MBATTIO of register MGPIOIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MBATTIO(HWREG_U8 value); /**< Get element MBATTIO of register MGPIOIRQ0_REG */
+
+
+/** @brief MGPIOIRQ1_REG register description at address offset 0x4e1a
+  *
+  *  GPIO Interrupt Mask Register 1
+  */
+typedef struct
+{
+    HWREG_U8 MGPIO1P0 :1; /**<  */
+    HWREG_U8 MGPIO1P1 :1; /**<  */
+    HWREG_U8 MGPIO1P2 :1; /**<  */
+    HWREG_U8 MGPIO1P3 :1; /**<  */
+    HWREG_U8 MGPIO2P0 :1; /**<  */
+    HWREG_U8 MGPIO2P1 :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sMGPIOIRQ1_REGStructure;
+
+
+/** @brief MGPIOIRQ1_REG Bitfield widths
+*/
+#define lenMGPIOIRQ1_REG_MGPIO1P0 1
+#define lenMGPIOIRQ1_REG_MGPIO1P1 1
+#define lenMGPIOIRQ1_REG_MGPIO1P2 1
+#define lenMGPIOIRQ1_REG_MGPIO1P3 1
+#define lenMGPIOIRQ1_REG_MGPIO2P0 1
+#define lenMGPIOIRQ1_REG_MGPIO2P1 1
+
+typedef enum
+{
+    MGPIOIRQ1_REG_LSB_MGPIO1P0 = 0,
+    MGPIOIRQ1_REG_LSB_MGPIO1P1 = 1,
+    MGPIOIRQ1_REG_LSB_MGPIO1P2 = 2,
+    MGPIOIRQ1_REG_LSB_MGPIO1P3 = 3,
+    MGPIOIRQ1_REG_LSB_MGPIO2P0 = 4,
+    MGPIOIRQ1_REG_LSB_MGPIO2P1 = 5
+} eMGPIOIRQ1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MGPIOIRQ1_REG_Content;
+    sMGPIOIRQ1_REGStructure MGPIOIRQ1_REG_Structure;
+} uMGPIOIRQ1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG(HWREG_U8 value); /** Get complete register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO1P0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO1P0 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO1P0(HWREG_U8 value); /**< Get element MGPIO1P0 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO1P1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO1P1 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO1P1(HWREG_U8 value); /**< Get element MGPIO1P1 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO1P2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO1P2 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO1P2(HWREG_U8 value); /**< Get element MGPIO1P2 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO1P3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO1P3 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO1P3(HWREG_U8 value); /**< Get element MGPIO1P3 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO2P0(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO2P0 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO2P0(HWREG_U8 value); /**< Get element MGPIO2P0 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO2P1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MGPIO2P1 of register MGPIOIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO2P1(HWREG_U8 value); /**< Get element MGPIO2P1 of register MGPIOIRQ1_REG */
+
+
+/** @brief MCRITIRQ_REG register description at address offset 0x4e1b
+  *
+  *  Critical Event Interrupt Mask Register
+  */
+typedef struct
+{
+    HWREG_U8 MVROCP :1; /**<  */
+    HWREG_U8 MOSCSTP :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sMCRITIRQ_REGStructure;
+
+
+/** @brief MCRITIRQ_REG Bitfield widths
+*/
+#define lenMCRITIRQ_REG_MVROCP 1
+#define lenMCRITIRQ_REG_MOSCSTP 1
+
+typedef enum
+{
+    MCRITIRQ_REG_LSB_MVROCP = 0,
+    MCRITIRQ_REG_LSB_MOSCSTP = 1
+} eMCRITIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MCRITIRQ_REG_Content;
+    sMCRITIRQ_REGStructure MCRITIRQ_REG_Structure;
+} uMCRITIRQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCRITIRQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MCRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCRITIRQ_REG(HWREG_U8 value); /** Get complete register MCRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCRITIRQ_REG_MVROCP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MVROCP of register MCRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCRITIRQ_REG_MVROCP(HWREG_U8 value); /**< Get element MVROCP of register MCRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MCRITIRQ_REG_MOSCSTP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MOSCSTP of register MCRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MCRITIRQ_REG_MOSCSTP(HWREG_U8 value); /**< Get element MOSCSTP of register MCRITIRQ_REG */
+
+
+/** @brief DEV1_STATUS2_LASTREAD_REG register description at address offset 0x4e1c
+  *
+  *  sVID STATUS2 lastread Register
+  */
+typedef struct
+{
+    const HWREG_U8 DEV1_STATUS_2_ON_LAST_GETREG :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sDEV1_STATUS2_LASTREAD_REGStructure;
+
+
+/** @brief DEV1_STATUS2_LASTREAD_REG Bitfield widths
+*/
+#define lenDEV1_STATUS2_LASTREAD_REG_DEV1_STATUS_2_ON_LAST_GETREG 2
+
+typedef enum
+{
+    DEV1_STATUS2_LASTREAD_REG_LSB_DEV1_STATUS_2_ON_LAST_GETREG = 0
+} eDEV1_STATUS2_LASTREAD_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV1_STATUS2_LASTREAD_REG_Content;
+    sDEV1_STATUS2_LASTREAD_REGStructure DEV1_STATUS2_LASTREAD_REG_Structure;
+} uDEV1_STATUS2_LASTREAD_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS2_LASTREAD_REG(HWREG_U8 value); /** Get complete register DEV1_STATUS2_LASTREAD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS2_LASTREAD_REG_DEV1_STATUS_2_ON_LAST_GETREG(HWREG_U8 value); /**< Get element DEV1_STATUS_2_ON_LAST_GETREG of register DEV1_STATUS2_LASTREAD_REG */
+
+
+/** @brief MSVIDALERT_REG register description at address offset 0x4e1d
+  *
+  *  SVID Alert Mask Register
+  */
+typedef struct
+{
+    HWREG_U8 MICCMAXVCC :1; /**<  */
+    HWREG_U8 MICCMAXVNN :1; /**<  */
+    HWREG_U8 MICCMAXVSYS :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sMSVIDALERT_REGStructure;
+
+
+/** @brief MSVIDALERT_REG Bitfield widths
+*/
+#define lenMSVIDALERT_REG_MICCMAXVCC 1
+#define lenMSVIDALERT_REG_MICCMAXVNN 1
+#define lenMSVIDALERT_REG_MICCMAXVSYS 1
+
+typedef enum
+{
+    MSVIDALERT_REG_LSB_MICCMAXVCC = 0,
+    MSVIDALERT_REG_LSB_MICCMAXVNN = 1,
+    MSVIDALERT_REG_LSB_MICCMAXVSYS = 2
+} eMSVIDALERT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MSVIDALERT_REG_Content;
+    sMSVIDALERT_REGStructure MSVIDALERT_REG_Structure;
+} uMSVIDALERT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MSVIDALERT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MSVIDALERT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MSVIDALERT_REG(HWREG_U8 value); /** Get complete register MSVIDALERT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MSVIDALERT_REG_MICCMAXVCC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MICCMAXVCC of register MSVIDALERT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MSVIDALERT_REG_MICCMAXVCC(HWREG_U8 value); /**< Get element MICCMAXVCC of register MSVIDALERT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MSVIDALERT_REG_MICCMAXVNN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MICCMAXVNN of register MSVIDALERT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MSVIDALERT_REG_MICCMAXVNN(HWREG_U8 value); /**< Get element MICCMAXVNN of register MSVIDALERT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MSVIDALERT_REG_MICCMAXVSYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MICCMAXVSYS of register MSVIDALERT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MSVIDALERT_REG_MICCMAXVSYS(HWREG_U8 value); /**< Get element MICCMAXVSYS of register MSVIDALERT_REG */
+
+
+/** @brief IRQMULT_REG register description at address offset 0x4e1e
+  *
+  *  Multimedia Interrupt Register
+  */
+typedef struct
+{
+    const HWREG_U8 ACCDET1 :1; /**<  */
+    const HWREG_U8 ACCDET2 :1; /**<  */
+    const HWREG_U8 ACCDETAUX :1; /**<  */
+    const HWREG_U8 VIBOVC :1; /**<  */
+    const HWREG_U8 LSOVC :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sIRQMULT_REGStructure;
+
+
+/** @brief IRQMULT_REG Bitfield widths
+*/
+#define lenIRQMULT_REG_ACCDET1 1
+#define lenIRQMULT_REG_ACCDET2 1
+#define lenIRQMULT_REG_ACCDETAUX 1
+#define lenIRQMULT_REG_VIBOVC 1
+#define lenIRQMULT_REG_LSOVC 1
+
+typedef enum
+{
+    IRQMULT_REG_LSB_ACCDET1 = 0,
+    IRQMULT_REG_LSB_ACCDET2 = 1,
+    IRQMULT_REG_LSB_ACCDETAUX = 2,
+    IRQMULT_REG_LSB_VIBOVC = 3,
+    IRQMULT_REG_LSB_LSOVC = 4
+} eIRQMULT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 IRQMULT_REG_Content;
+    sIRQMULT_REGStructure IRQMULT_REG_Structure;
+} uIRQMULT_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG(HWREG_U8 value); /** Get complete register IRQMULT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG_ACCDET1(HWREG_U8 value); /**< Get element ACCDET1 of register IRQMULT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG_ACCDET2(HWREG_U8 value); /**< Get element ACCDET2 of register IRQMULT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG_ACCDETAUX(HWREG_U8 value); /**< Get element ACCDETAUX of register IRQMULT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG_VIBOVC(HWREG_U8 value); /**< Get element VIBOVC of register IRQMULT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG_LSOVC(HWREG_U8 value); /**< Get element LSOVC of register IRQMULT_REG */
+
+
+/** @brief MIRQMULT_REG register description at address offset 0x4e1f
+  *
+  *  Multimedia Interrupt Mask Register
+  */
+typedef struct
+{
+    const HWREG_U8 :3; /**< Unused bitfield */
+    HWREG_U8 MVIBOVC :1; /**<  */
+    HWREG_U8 MLSOVC :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sMIRQMULT_REGStructure;
+
+
+/** @brief MIRQMULT_REG Bitfield widths
+*/
+#define lenMIRQMULT_REG_MVIBOVC 1
+#define lenMIRQMULT_REG_MLSOVC 1
+
+typedef enum
+{
+    MIRQMULT_REG_LSB_MVIBOVC = 3,
+    MIRQMULT_REG_LSB_MLSOVC = 4
+} eMIRQMULT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MIRQMULT_REG_Content;
+    sMIRQMULT_REGStructure MIRQMULT_REG_Structure;
+} uMIRQMULT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQMULT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MIRQMULT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQMULT_REG(HWREG_U8 value); /** Get complete register MIRQMULT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQMULT_REG_MVIBOVC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MVIBOVC of register MIRQMULT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQMULT_REG_MVIBOVC(HWREG_U8 value); /**< Get element MVIBOVC of register MIRQMULT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQMULT_REG_MLSOVC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MLSOVC of register MIRQMULT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQMULT_REG_MLSOVC(HWREG_U8 value); /**< Get element MLSOVC of register MIRQMULT_REG */
+
+
+/** @brief SPWRSRC_REG register description at address offset 0x4e20
+  *
+  *  Power Source Interrupt Status Register
+  */
+typedef struct
+{
+    const HWREG_U8 SVBUSDET :1; /**<  */
+    const HWREG_U8 SDCDET :1; /**<  */
+    const HWREG_U8 SBATTDET :1; /**<  */
+    const HWREG_U8 SUSBIDDET :2; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sSPWRSRC_REGStructure;
+
+
+/** @brief SPWRSRC_REG Bitfield widths
+*/
+#define lenSPWRSRC_REG_SVBUSDET 1
+#define lenSPWRSRC_REG_SDCDET 1
+#define lenSPWRSRC_REG_SBATTDET 1
+#define lenSPWRSRC_REG_SUSBIDDET 2
+
+typedef enum
+{
+    SPWRSRC_REG_LSB_SVBUSDET = 0,
+    SPWRSRC_REG_LSB_SDCDET = 1,
+    SPWRSRC_REG_LSB_SBATTDET = 2,
+    SPWRSRC_REG_LSB_SUSBIDDET = 3
+} eSPWRSRC_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SPWRSRC_REG_Content;
+    sSPWRSRC_REGStructure SPWRSRC_REG_Structure;
+} uSPWRSRC_REG;
+
+typedef enum
+{
+    SPWRSRC_REG_SVBUSDET_DISCONNECTED = 0,
+    SPWRSRC_REG_SVBUSDET_CONNECTED = 1
+} eSPWRSRC_REG_SVBUSDET;
+
+typedef enum
+{
+    SPWRSRC_REG_SDCDET_DISCONNECTED = 0,
+    SPWRSRC_REG_SDCDET_CONNECTED = 1
+} eSPWRSRC_REG_SDCDET;
+
+typedef enum
+{
+    SPWRSRC_REG_SBATTDET_DISCONNECTED = 0,
+    SPWRSRC_REG_SBATTDET_CONNECTED = 1
+} eSPWRSRC_REG_SBATTDET;
+
+typedef enum
+{
+    SPWRSRC_REG_SUSBIDDET_RID_ACA = 0,
+    SPWRSRC_REG_SUSBIDDET_RID_GND = 1,
+    SPWRSRC_REG_SUSBIDDET_RID_FLOAT = 2
+} eSPWRSRC_REG_SUSBIDDET;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SPWRSRC_REG(HWREG_U8 value); /** Get complete register SPWRSRC_REG */
+__HWREG_INLINE__ eSPWRSRC_REG_SVBUSDET getPmic_SPWRSRC_REG_SVBUSDET(HWREG_U8 value); /**< Get element SVBUSDET of register SPWRSRC_REG */
+__HWREG_INLINE__ eSPWRSRC_REG_SDCDET getPmic_SPWRSRC_REG_SDCDET(HWREG_U8 value); /**< Get element SDCDET of register SPWRSRC_REG */
+__HWREG_INLINE__ eSPWRSRC_REG_SBATTDET getPmic_SPWRSRC_REG_SBATTDET(HWREG_U8 value); /**< Get element SBATTDET of register SPWRSRC_REG */
+__HWREG_INLINE__ eSPWRSRC_REG_SUSBIDDET getPmic_SPWRSRC_REG_SUSBIDDET(HWREG_U8 value); /**< Get element SUSBIDDET of register SPWRSRC_REG */
+
+
+/** @brief LOWBATTDET0_REG register description at address offset 0x4e21
+  *
+  *  Valid Battery Detection Register 0
+  */
+typedef struct
+{
+    HWREG_U8 LOWBATT :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sLOWBATTDET0_REGStructure;
+
+
+/** @brief LOWBATTDET0_REG Bitfield widths
+*/
+#define lenLOWBATTDET0_REG_LOWBATT 4
+
+typedef enum
+{
+    LOWBATTDET0_REG_LSB_LOWBATT = 0
+} eLOWBATTDET0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 LOWBATTDET0_REG_Content;
+    sLOWBATTDET0_REGStructure LOWBATTDET0_REG_Structure;
+} uLOWBATTDET0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_LOWBATTDET0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register LOWBATTDET0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_LOWBATTDET0_REG(HWREG_U8 value); /** Get complete register LOWBATTDET0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_LOWBATTDET0_REG_LOWBATT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element LOWBATT of register LOWBATTDET0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_LOWBATTDET0_REG_LOWBATT(HWREG_U8 value); /**< Get element LOWBATT of register LOWBATTDET0_REG */
+
+
+/** @brief LOWBATTDET1_REG register description at address offset 0x4e22
+  *
+  *  Valid Battery Detection Register 1
+  */
+typedef struct
+{
+    HWREG_U8 LOWBATTSDP :4; /**<  */
+    HWREG_U8 LOWBATTDCP :4; /**<  */
+} sLOWBATTDET1_REGStructure;
+
+
+/** @brief LOWBATTDET1_REG Bitfield widths
+*/
+#define lenLOWBATTDET1_REG_LOWBATTSDP 4
+#define lenLOWBATTDET1_REG_LOWBATTDCP 4
+
+typedef enum
+{
+    LOWBATTDET1_REG_LSB_LOWBATTSDP = 0,
+    LOWBATTDET1_REG_LSB_LOWBATTDCP = 4
+} eLOWBATTDET1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 LOWBATTDET1_REG_Content;
+    sLOWBATTDET1_REGStructure LOWBATTDET1_REG_Structure;
+} uLOWBATTDET1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_LOWBATTDET1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register LOWBATTDET1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_LOWBATTDET1_REG(HWREG_U8 value); /** Get complete register LOWBATTDET1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_LOWBATTDET1_REG_LOWBATTSDP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element LOWBATTSDP of register LOWBATTDET1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_LOWBATTDET1_REG_LOWBATTSDP(HWREG_U8 value); /**< Get element LOWBATTSDP of register LOWBATTDET1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_LOWBATTDET1_REG_LOWBATTDCP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element LOWBATTDCP of register LOWBATTDET1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_LOWBATTDET1_REG_LOWBATTDCP(HWREG_U8 value); /**< Get element LOWBATTDCP of register LOWBATTDET1_REG */
+
+
+/** @brief PSDETCTRL_REG register description at address offset 0x4e23
+  *
+  *  Power Source Detect Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 VBUSDBEN :1; /**<  */
+    HWREG_U8 VDCINDBEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 BATTRMPDEN :1; /**<  */
+    HWREG_U8 BATTRMSRC :2; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sPSDETCTRL_REGStructure;
+
+
+/** @brief PSDETCTRL_REG Bitfield widths
+*/
+#define lenPSDETCTRL_REG_VBUSDBEN 1
+#define lenPSDETCTRL_REG_VDCINDBEN 1
+#define lenPSDETCTRL_REG_BATTRMPDEN 1
+#define lenPSDETCTRL_REG_BATTRMSRC 2
+
+typedef enum
+{
+    PSDETCTRL_REG_LSB_VBUSDBEN = 0,
+    PSDETCTRL_REG_LSB_VDCINDBEN = 1,
+    PSDETCTRL_REG_LSB_BATTRMPDEN = 3,
+    PSDETCTRL_REG_LSB_BATTRMSRC = 4
+} ePSDETCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PSDETCTRL_REG_Content;
+    sPSDETCTRL_REGStructure PSDETCTRL_REG_Structure;
+} uPSDETCTRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PSDETCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PSDETCTRL_REG(HWREG_U8 value); /** Get complete register PSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PSDETCTRL_REG_VBUSDBEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VBUSDBEN of register PSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PSDETCTRL_REG_VBUSDBEN(HWREG_U8 value); /**< Get element VBUSDBEN of register PSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PSDETCTRL_REG_VDCINDBEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDCINDBEN of register PSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PSDETCTRL_REG_VDCINDBEN(HWREG_U8 value); /**< Get element VDCINDBEN of register PSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PSDETCTRL_REG_BATTRMPDEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATTRMPDEN of register PSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PSDETCTRL_REG_BATTRMPDEN(HWREG_U8 value); /**< Get element BATTRMPDEN of register PSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PSDETCTRL_REG_BATTRMSRC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATTRMSRC of register PSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PSDETCTRL_REG_BATTRMSRC(HWREG_U8 value); /**< Get element BATTRMSRC of register PSDETCTRL_REG */
+
+
+/** @brief BATTDETCTRL0_REG register description at address offset 0x4e24
+  *
+  *  Battery Removal Control Register 0
+  */
+typedef struct
+{
+    HWREG_U8 BATTDBEN :1; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+    HWREG_U8 BATTYP :3; /**<  */
+} sBATTDETCTRL0_REGStructure;
+
+
+/** @brief BATTDETCTRL0_REG Bitfield widths
+*/
+#define lenBATTDETCTRL0_REG_BATTDBEN 1
+#define lenBATTDETCTRL0_REG_BATTYP 3
+
+typedef enum
+{
+    BATTDETCTRL0_REG_LSB_BATTDBEN = 0,
+    BATTDETCTRL0_REG_LSB_BATTYP = 5
+} eBATTDETCTRL0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATTDETCTRL0_REG_Content;
+    sBATTDETCTRL0_REGStructure BATTDETCTRL0_REG_Structure;
+} uBATTDETCTRL0_REG;
+
+typedef enum
+{
+    BATTDETCTRL0_REG_BATTDBEN_ENABLE = 1,
+    BATTDETCTRL0_REG_BATTDBEN_DISABLE = 0
+} eBATTDETCTRL0_REG_BATTDBEN;
+
+typedef enum
+{
+    BATTDETCTRL0_REG_BATTYP_LC = 0,
+    BATTDETCTRL0_REG_BATTYP_SMART = 1,
+    BATTDETCTRL0_REG_BATTYP_MIPI = 2,
+    BATTDETCTRL0_REG_BATTYP_SDQ = 3,
+    BATTDETCTRL0_REG_BATTYP_NONREM = 4
+} eBATTDETCTRL0_REG_BATTYP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATTDETCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL0_REG(HWREG_U8 value); /** Get complete register BATTDETCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL0_REG_BATTDBEN(HWREG_U8 _reg, eBATTDETCTRL0_REG_BATTDBEN value); /**< Set element BATTDBEN of register BATTDETCTRL0_REG */
+__HWREG_INLINE__ eBATTDETCTRL0_REG_BATTDBEN getPmic_BATTDETCTRL0_REG_BATTDBEN(HWREG_U8 value); /**< Get element BATTDBEN of register BATTDETCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL0_REG_BATTYP(HWREG_U8 _reg, eBATTDETCTRL0_REG_BATTYP value); /**< Set element BATTYP of register BATTDETCTRL0_REG */
+__HWREG_INLINE__ eBATTDETCTRL0_REG_BATTYP getPmic_BATTDETCTRL0_REG_BATTYP(HWREG_U8 value); /**< Get element BATTYP of register BATTDETCTRL0_REG */
+
+
+/** @brief BATTDETCTRL1_REG register description at address offset 0x4e25
+  *
+  *  Battery Removal Control Register 1
+  */
+typedef struct
+{
+    HWREG_U8 BRMDBC :5; /**<  */
+    HWREG_U8 BTDEN :1; /**<  */
+    const HWREG_U8 BTDLC :1; /**<  */
+    const HWREG_U8 BTDSMART :1; /**<  */
+} sBATTDETCTRL1_REGStructure;
+
+
+/** @brief BATTDETCTRL1_REG Bitfield widths
+*/
+#define lenBATTDETCTRL1_REG_BRMDBC 5
+#define lenBATTDETCTRL1_REG_BTDEN 1
+#define lenBATTDETCTRL1_REG_BTDLC 1
+#define lenBATTDETCTRL1_REG_BTDSMART 1
+
+typedef enum
+{
+    BATTDETCTRL1_REG_LSB_BRMDBC = 0,
+    BATTDETCTRL1_REG_LSB_BTDEN = 5,
+    BATTDETCTRL1_REG_LSB_BTDLC = 6,
+    BATTDETCTRL1_REG_LSB_BTDSMART = 7
+} eBATTDETCTRL1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATTDETCTRL1_REG_Content;
+    sBATTDETCTRL1_REGStructure BATTDETCTRL1_REG_Structure;
+} uBATTDETCTRL1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATTDETCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL1_REG(HWREG_U8 value); /** Get complete register BATTDETCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL1_REG_BRMDBC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BRMDBC of register BATTDETCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL1_REG_BRMDBC(HWREG_U8 value); /**< Get element BRMDBC of register BATTDETCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL1_REG_BTDEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BTDEN of register BATTDETCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL1_REG_BTDEN(HWREG_U8 value); /**< Get element BTDEN of register BATTDETCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL1_REG_BTDLC(HWREG_U8 value); /**< Get element BTDLC of register BATTDETCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL1_REG_BTDSMART(HWREG_U8 value); /**< Get element BTDSMART of register BATTDETCTRL1_REG */
+
+
+/** @brief SPLTIMER_REG register description at address offset 0x4e28
+  *
+  *  Short Power Loss Timer Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 SPLTIMERVAL :8; /**<  */
+} sSPLTIMER_REGStructure;
+
+
+/** @brief SPLTIMER_REG Bitfield widths
+*/
+#define lenSPLTIMER_REG_SPLTIMERVAL 8
+
+typedef enum
+{
+    SPLTIMER_REG_LSB_SPLTIMERVAL = 0
+} eSPLTIMER_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SPLTIMER_REG_Content;
+    sSPLTIMER_REGStructure SPLTIMER_REG_Structure;
+} uSPLTIMER_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SPLTIMER_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SPLTIMER_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SPLTIMER_REG(HWREG_U8 value); /** Get complete register SPLTIMER_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SPLTIMER_REG_SPLTIMERVAL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SPLTIMERVAL of register SPLTIMER_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SPLTIMER_REG_SPLTIMERVAL(HWREG_U8 value); /**< Get element SPLTIMERVAL of register SPLTIMER_REG */
+
+
+/** @brief SSPLTIMER_REG register description at address offset 0x4e29
+  *
+  *  Short Power Loss Timer Status Register
+  */
+typedef struct
+{
+    const HWREG_U8 SSPLTIMERVAL :8; /**<  */
+} sSSPLTIMER_REGStructure;
+
+
+/** @brief SSPLTIMER_REG Bitfield widths
+*/
+#define lenSSPLTIMER_REG_SSPLTIMERVAL 8
+
+typedef enum
+{
+    SSPLTIMER_REG_LSB_SSPLTIMERVAL = 0
+} eSSPLTIMER_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SSPLTIMER_REG_Content;
+    sSSPLTIMER_REGStructure SSPLTIMER_REG_Structure;
+} uSSPLTIMER_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SSPLTIMER_REG(HWREG_U8 value); /** Get complete register SSPLTIMER_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SSPLTIMER_REG_SSPLTIMERVAL(HWREG_U8 value); /**< Get element SSPLTIMERVAL of register SSPLTIMER_REG */
+
+
+/** @brief CHIPCNTRL_REG register description at address offset 0x4e2a
+  *
+  *  Chip Control Register
+  */
+typedef struct
+{
+    HWREG_U8 COLDOFF :1; /**<  */
+    HWREG_U8 COLDRESET :1; /**<  */
+    HWREG_U8 WARMRESET :1; /**<  */
+    HWREG_U8 PLATFORMRST :1; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sCHIPCNTRL_REGStructure;
+
+
+/** @brief CHIPCNTRL_REG Bitfield widths
+*/
+#define lenCHIPCNTRL_REG_COLDOFF 1
+#define lenCHIPCNTRL_REG_COLDRESET 1
+#define lenCHIPCNTRL_REG_WARMRESET 1
+#define lenCHIPCNTRL_REG_PLATFORMRST 1
+
+typedef enum
+{
+    CHIPCNTRL_REG_LSB_COLDOFF = 0,
+    CHIPCNTRL_REG_LSB_COLDRESET = 1,
+    CHIPCNTRL_REG_LSB_WARMRESET = 2,
+    CHIPCNTRL_REG_LSB_PLATFORMRST = 3
+} eCHIPCNTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHIPCNTRL_REG_Content;
+    sCHIPCNTRL_REGStructure CHIPCNTRL_REG_Structure;
+} uCHIPCNTRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHIPCNTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHIPCNTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHIPCNTRL_REG_COLDOFF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element COLDOFF of register CHIPCNTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHIPCNTRL_REG_COLDRESET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element COLDRESET of register CHIPCNTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHIPCNTRL_REG_WARMRESET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WARMRESET of register CHIPCNTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHIPCNTRL_REG_PLATFORMRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PLATFORMRST of register CHIPCNTRL_REG */
+
+
+/** @brief PLATFORMRST_DT_REG register description at address offset 0x4e2b
+  *
+  *  PLATFORM RESET Duration Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 PRT :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sPLATFORMRST_DT_REGStructure;
+
+
+/** @brief PLATFORMRST_DT_REG Bitfield widths
+*/
+#define lenPLATFORMRST_DT_REG_PRT 4
+
+typedef enum
+{
+    PLATFORMRST_DT_REG_LSB_PRT = 0
+} ePLATFORMRST_DT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PLATFORMRST_DT_REG_Content;
+    sPLATFORMRST_DT_REGStructure PLATFORMRST_DT_REG_Structure;
+} uPLATFORMRST_DT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PLATFORMRST_DT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PLATFORMRST_DT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PLATFORMRST_DT_REG(HWREG_U8 value); /** Get complete register PLATFORMRST_DT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PLATFORMRST_DT_REG_PRT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PRT of register PLATFORMRST_DT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PLATFORMRST_DT_REG_PRT(HWREG_U8 value); /**< Get element PRT of register PLATFORMRST_DT_REG */
+
+
+/** @brief RESETSRC0_REG register description at address offset 0x4e2c
+  *
+  *  Reset Source Register 0
+  */
+typedef struct
+{
+    HWREG_U8 RTHERMTRIP :1; /**<  */
+    HWREG_U8 RPMICTEMP :1; /**<  */
+    HWREG_U8 RSYSTEMP :1; /**<  */
+    HWREG_U8 RVCRIT :1; /**<  */
+    HWREG_U8 RBATTRM :1; /**<  */
+    HWREG_U8 RVSYSUVP :1; /**<  */
+    HWREG_U8 RBATTEMP :1; /**<  */
+    HWREG_U8 RPMICWDTEXP :1; /**<  */
+} sRESETSRC0_REGStructure;
+
+
+/** @brief RESETSRC0_REG Bitfield widths
+*/
+#define lenRESETSRC0_REG_RTHERMTRIP 1
+#define lenRESETSRC0_REG_RPMICTEMP 1
+#define lenRESETSRC0_REG_RSYSTEMP 1
+#define lenRESETSRC0_REG_RVCRIT 1
+#define lenRESETSRC0_REG_RBATTRM 1
+#define lenRESETSRC0_REG_RVSYSUVP 1
+#define lenRESETSRC0_REG_RBATTEMP 1
+#define lenRESETSRC0_REG_RPMICWDTEXP 1
+
+typedef enum
+{
+    RESETSRC0_REG_LSB_RTHERMTRIP = 0,
+    RESETSRC0_REG_LSB_RPMICTEMP = 1,
+    RESETSRC0_REG_LSB_RSYSTEMP = 2,
+    RESETSRC0_REG_LSB_RVCRIT = 3,
+    RESETSRC0_REG_LSB_RBATTRM = 4,
+    RESETSRC0_REG_LSB_RVSYSUVP = 5,
+    RESETSRC0_REG_LSB_RBATTEMP = 6,
+    RESETSRC0_REG_LSB_RPMICWDTEXP = 7
+} eRESETSRC0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 RESETSRC0_REG_Content;
+    sRESETSRC0_REGStructure RESETSRC0_REG_Structure;
+} uRESETSRC0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG(HWREG_U8 value); /** Get complete register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RTHERMTRIP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RTHERMTRIP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RTHERMTRIP(HWREG_U8 value); /**< Get element RTHERMTRIP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RPMICTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RPMICTEMP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RPMICTEMP(HWREG_U8 value); /**< Get element RPMICTEMP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RSYSTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RSYSTEMP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RSYSTEMP(HWREG_U8 value); /**< Get element RSYSTEMP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RVCRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RVCRIT of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RVCRIT(HWREG_U8 value); /**< Get element RVCRIT of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RBATTRM(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RBATTRM of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RBATTRM(HWREG_U8 value); /**< Get element RBATTRM of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RVSYSUVP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RVSYSUVP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RVSYSUVP(HWREG_U8 value); /**< Get element RVSYSUVP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RBATTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RBATTEMP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RBATTEMP(HWREG_U8 value); /**< Get element RBATTEMP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RPMICWDTEXP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RPMICWDTEXP of register RESETSRC0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RPMICWDTEXP(HWREG_U8 value); /**< Get element RPMICWDTEXP of register RESETSRC0_REG */
+
+
+/** @brief RESETSRC1_REG register description at address offset 0x4e2d
+  *
+  *  Reset Source Register 1
+  */
+typedef struct
+{
+    HWREG_U8 RCOLDOFF :1; /**<  */
+    HWREG_U8 RCOLDRESET :1; /**<  */
+    HWREG_U8 RWARMRESET :1; /**<  */
+    HWREG_U8 RFCO :1; /**<  */
+    HWREG_U8 RSOCWDT :1; /**<  */
+    HWREG_U8 RPLATFORMRST :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sRESETSRC1_REGStructure;
+
+
+/** @brief RESETSRC1_REG Bitfield widths
+*/
+#define lenRESETSRC1_REG_RCOLDOFF 1
+#define lenRESETSRC1_REG_RCOLDRESET 1
+#define lenRESETSRC1_REG_RWARMRESET 1
+#define lenRESETSRC1_REG_RFCO 1
+#define lenRESETSRC1_REG_RSOCWDT 1
+#define lenRESETSRC1_REG_RPLATFORMRST 1
+
+typedef enum
+{
+    RESETSRC1_REG_LSB_RCOLDOFF = 0,
+    RESETSRC1_REG_LSB_RCOLDRESET = 1,
+    RESETSRC1_REG_LSB_RWARMRESET = 2,
+    RESETSRC1_REG_LSB_RFCO = 3,
+    RESETSRC1_REG_LSB_RSOCWDT = 4,
+    RESETSRC1_REG_LSB_RPLATFORMRST = 5
+} eRESETSRC1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 RESETSRC1_REG_Content;
+    sRESETSRC1_REGStructure RESETSRC1_REG_Structure;
+} uRESETSRC1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG(HWREG_U8 value); /** Get complete register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RCOLDOFF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RCOLDOFF of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RCOLDOFF(HWREG_U8 value); /**< Get element RCOLDOFF of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RCOLDRESET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RCOLDRESET of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RCOLDRESET(HWREG_U8 value); /**< Get element RCOLDRESET of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RWARMRESET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RWARMRESET of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RWARMRESET(HWREG_U8 value); /**< Get element RWARMRESET of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RFCO(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RFCO of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RFCO(HWREG_U8 value); /**< Get element RFCO of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RSOCWDT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RSOCWDT of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RSOCWDT(HWREG_U8 value); /**< Get element RSOCWDT of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RPLATFORMRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RPLATFORMRST of register RESETSRC1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RPLATFORMRST(HWREG_U8 value); /**< Get element RPLATFORMRST of register RESETSRC1_REG */
+
+
+/** @brief RESETRDYCTRL_REG register description at address offset 0x4e2e
+  *
+  *  Reset Ready Indication Register
+  */
+typedef struct
+{
+    HWREG_U8 COLDRSTRDY :1; /**<  */
+    HWREG_U8 WARMRSTRDY :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sRESETRDYCTRL_REGStructure;
+
+
+/** @brief RESETRDYCTRL_REG Bitfield widths
+*/
+#define lenRESETRDYCTRL_REG_COLDRSTRDY 1
+#define lenRESETRDYCTRL_REG_WARMRSTRDY 1
+
+typedef enum
+{
+    RESETRDYCTRL_REG_LSB_COLDRSTRDY = 0,
+    RESETRDYCTRL_REG_LSB_WARMRSTRDY = 1
+} eRESETRDYCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 RESETRDYCTRL_REG_Content;
+    sRESETRDYCTRL_REGStructure RESETRDYCTRL_REG_Structure;
+} uRESETRDYCTRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETRDYCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register RESETRDYCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETRDYCTRL_REG_COLDRSTRDY(HWREG_U8 _reg, HWREG_U8 value); /**< Set element COLDRSTRDY of register RESETRDYCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETRDYCTRL_REG_WARMRSTRDY(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WARMRSTRDY of register RESETRDYCTRL_REG */
+
+
+/** @brief SRCWAKECFG_REG register description at address offset 0x4e30
+  *
+  *  Input Source Wake Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 BATWAKEEN :1; /**<  */
+    HWREG_U8 VBUSWAKEEN :1; /**<  */
+    HWREG_U8 VDCINWAKEEN :1; /**<  */
+    HWREG_U8 USBIDWAKEEN :1; /**<  */
+    HWREG_U8 PWRONWAKEEN :1; /**<  */
+    HWREG_U8 SPLWAKEEN :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sSRCWAKECFG_REGStructure;
+
+
+/** @brief SRCWAKECFG_REG Bitfield widths
+*/
+#define lenSRCWAKECFG_REG_BATWAKEEN 1
+#define lenSRCWAKECFG_REG_VBUSWAKEEN 1
+#define lenSRCWAKECFG_REG_VDCINWAKEEN 1
+#define lenSRCWAKECFG_REG_USBIDWAKEEN 1
+#define lenSRCWAKECFG_REG_PWRONWAKEEN 1
+#define lenSRCWAKECFG_REG_SPLWAKEEN 1
+
+typedef enum
+{
+    SRCWAKECFG_REG_LSB_BATWAKEEN = 0,
+    SRCWAKECFG_REG_LSB_VBUSWAKEEN = 1,
+    SRCWAKECFG_REG_LSB_VDCINWAKEEN = 2,
+    SRCWAKECFG_REG_LSB_USBIDWAKEEN = 3,
+    SRCWAKECFG_REG_LSB_PWRONWAKEEN = 4,
+    SRCWAKECFG_REG_LSB_SPLWAKEEN = 5
+} eSRCWAKECFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SRCWAKECFG_REG_Content;
+    sSRCWAKECFG_REGStructure SRCWAKECFG_REG_Structure;
+} uSRCWAKECFG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG(HWREG_U8 value); /** Get complete register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_BATWAKEEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_BATWAKEEN(HWREG_U8 value); /**< Get element BATWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_VBUSWAKEEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VBUSWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_VBUSWAKEEN(HWREG_U8 value); /**< Get element VBUSWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_VDCINWAKEEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDCINWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_VDCINWAKEEN(HWREG_U8 value); /**< Get element VDCINWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_USBIDWAKEEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element USBIDWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_USBIDWAKEEN(HWREG_U8 value); /**< Get element USBIDWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_PWRONWAKEEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PWRONWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_PWRONWAKEEN(HWREG_U8 value); /**< Get element PWRONWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_SPLWAKEEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SPLWAKEEN of register SRCWAKECFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_SPLWAKEEN(HWREG_U8 value); /**< Get element SPLWAKEEN of register SRCWAKECFG_REG */
+
+
+/** @brief WAKESRC_REG register description at address offset 0x4e31
+  *
+  *  Wake Source Register
+  */
+typedef struct
+{
+    HWREG_U8 WAKEPBTN :1; /**<  */
+    HWREG_U8 WAKEBAT :1; /**<  */
+    HWREG_U8 WAKEVBUS :1; /**<  */
+    HWREG_U8 WAKEVDCIN :1; /**<  */
+    HWREG_U8 WAKEUSBID :1; /**<  */
+    HWREG_U8 WAKEWA :1; /**<  */
+    HWREG_U8 WAKEPWRON :1; /**<  */
+    HWREG_U8 WAKESPL :1; /**<  */
+} sWAKESRC_REGStructure;
+
+
+/** @brief WAKESRC_REG Bitfield widths
+*/
+#define lenWAKESRC_REG_WAKEPBTN 1
+#define lenWAKESRC_REG_WAKEBAT 1
+#define lenWAKESRC_REG_WAKEVBUS 1
+#define lenWAKESRC_REG_WAKEVDCIN 1
+#define lenWAKESRC_REG_WAKEUSBID 1
+#define lenWAKESRC_REG_WAKEWA 1
+#define lenWAKESRC_REG_WAKEPWRON 1
+#define lenWAKESRC_REG_WAKESPL 1
+
+typedef enum
+{
+    WAKESRC_REG_LSB_WAKEPBTN = 0,
+    WAKESRC_REG_LSB_WAKEBAT = 1,
+    WAKESRC_REG_LSB_WAKEVBUS = 2,
+    WAKESRC_REG_LSB_WAKEVDCIN = 3,
+    WAKESRC_REG_LSB_WAKEUSBID = 4,
+    WAKESRC_REG_LSB_WAKEWA = 5,
+    WAKESRC_REG_LSB_WAKEPWRON = 6,
+    WAKESRC_REG_LSB_WAKESPL = 7
+} eWAKESRC_REGLsb;
+
+typedef union
+{
+    HWREG_U8 WAKESRC_REG_Content;
+    sWAKESRC_REGStructure WAKESRC_REG_Structure;
+} uWAKESRC_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG(HWREG_U8 value); /** Get complete register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEPBTN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WAKEPBTN of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEPBTN(HWREG_U8 value); /**< Get element WAKEPBTN of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEBAT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WAKEBAT of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEBAT(HWREG_U8 value); /**< Get element WAKEBAT of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEVBUS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WAKEVBUS of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEVBUS(HWREG_U8 value); /**< Get element WAKEVBUS of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEVDCIN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WAKEVDCIN of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEVDCIN(HWREG_U8 value); /**< Get element WAKEVDCIN of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEUSBID(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WAKEUSBID of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEUSBID(HWREG_U8 value); /**< Get element WAKEUSBID of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEWA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WAKEWA of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEWA(HWREG_U8 value); /**< Get element WAKEWA of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEPWRON(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WAKEPWRON of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEPWRON(HWREG_U8 value); /**< Get element WAKEPWRON of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKESPL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WAKESPL of register WAKESRC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKESPL(HWREG_U8 value); /**< Get element WAKESPL of register WAKESRC_REG */
+
+
+/** @brief STDBYCNT_REG register description at address offset 0x4e32
+  *
+  *  Standby Control Register
+  */
+typedef struct
+{
+    HWREG_U8 STDBYDEST :3; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sSTDBYCNT_REGStructure;
+
+
+/** @brief STDBYCNT_REG Bitfield widths
+*/
+#define lenSTDBYCNT_REG_STDBYDEST 3
+
+typedef enum
+{
+    STDBYCNT_REG_LSB_STDBYDEST = 0
+} eSTDBYCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 STDBYCNT_REG_Content;
+    sSTDBYCNT_REGStructure STDBYCNT_REG_Structure;
+} uSTDBYCNT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_STDBYCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register STDBYCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STDBYCNT_REG(HWREG_U8 value); /** Get complete register STDBYCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_STDBYCNT_REG_STDBYDEST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element STDBYDEST of register STDBYCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STDBYCNT_REG_STDBYDEST(HWREG_U8 value); /**< Get element STDBYDEST of register STDBYCNT_REG */
+
+
+/** @brief REGLOCK_REG register description at address offset 0x4e34
+  *
+  *  Register Lock Register
+  */
+typedef struct
+{
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 VCRIT_CFG :1; /**<  */
+    HWREG_U8 THERMAL :1; /**<  */
+    HWREG_U8 LOWBATDET :1; /**<  */
+    HWREG_U8 ALERTLOCK :1; /**<  */
+    HWREG_U8 PB :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sREGLOCK_REGStructure;
+
+
+/** @brief REGLOCK_REG Bitfield widths
+*/
+#define lenREGLOCK_REG_VCRIT_CFG 1
+#define lenREGLOCK_REG_THERMAL 1
+#define lenREGLOCK_REG_LOWBATDET 1
+#define lenREGLOCK_REG_ALERTLOCK 1
+#define lenREGLOCK_REG_PB 1
+
+typedef enum
+{
+    REGLOCK_REG_LSB_VCRIT_CFG = 1,
+    REGLOCK_REG_LSB_THERMAL = 2,
+    REGLOCK_REG_LSB_LOWBATDET = 3,
+    REGLOCK_REG_LSB_ALERTLOCK = 4,
+    REGLOCK_REG_LSB_PB = 5
+} eREGLOCK_REGLsb;
+
+typedef union
+{
+    HWREG_U8 REGLOCK_REG_Content;
+    sREGLOCK_REGStructure REGLOCK_REG_Structure;
+} uREGLOCK_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG(HWREG_U8 value); /** Get complete register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG_VCRIT_CFG(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VCRIT_CFG of register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG_VCRIT_CFG(HWREG_U8 value); /**< Get element VCRIT_CFG of register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG_THERMAL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element THERMAL of register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG_THERMAL(HWREG_U8 value); /**< Get element THERMAL of register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG_LOWBATDET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element LOWBATDET of register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG_LOWBATDET(HWREG_U8 value); /**< Get element LOWBATDET of register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG_ALERTLOCK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALERTLOCK of register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG_ALERTLOCK(HWREG_U8 value); /**< Get element ALERTLOCK of register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG_PB(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PB of register REGLOCK_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG_PB(HWREG_U8 value); /**< Get element PB of register REGLOCK_REG */
+
+
+/** @brief DEV1_SETREGADR_REG register description at address offset 0x4e35
+  *
+  *  sVID Set Register Address Register
+  */
+typedef struct
+{
+    HWREG_U8 DEV1_SETREGADR :8; /**<  */
+} sDEV1_SETREGADR_REGStructure;
+
+
+/** @brief DEV1_SETREGADR_REG Bitfield widths
+*/
+#define lenDEV1_SETREGADR_REG_DEV1_SETREGADR 8
+
+typedef enum
+{
+    DEV1_SETREGADR_REG_LSB_DEV1_SETREGADR = 0
+} eDEV1_SETREGADR_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV1_SETREGADR_REG_Content;
+    sDEV1_SETREGADR_REGStructure DEV1_SETREGADR_REG_Structure;
+} uDEV1_SETREGADR_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV1_SETREGADR_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register DEV1_SETREGADR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_SETREGADR_REG(HWREG_U8 value); /** Get complete register DEV1_SETREGADR_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV1_SETREGADR_REG_DEV1_SETREGADR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DEV1_SETREGADR of register DEV1_SETREGADR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_SETREGADR_REG_DEV1_SETREGADR(HWREG_U8 value); /**< Get element DEV1_SETREGADR of register DEV1_SETREGADR_REG */
+
+
+/** @brief MODEMCTRL_REG register description at address offset 0x4e36
+  *
+  *  Modem Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEMOFF :1; /**<  */
+    HWREG_U8 MODEMRSTSEQ :1; /**<  */
+    HWREG_U8 SDWN_N :1; /**<  */
+    HWREG_U8 SDWNDRV :1; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sMODEMCTRL_REGStructure;
+
+
+/** @brief MODEMCTRL_REG Bitfield widths
+*/
+#define lenMODEMCTRL_REG_MODEMOFF 1
+#define lenMODEMCTRL_REG_MODEMRSTSEQ 1
+#define lenMODEMCTRL_REG_SDWN_N 1
+#define lenMODEMCTRL_REG_SDWNDRV 1
+
+typedef enum
+{
+    MODEMCTRL_REG_LSB_MODEMOFF = 0,
+    MODEMCTRL_REG_LSB_MODEMRSTSEQ = 1,
+    MODEMCTRL_REG_LSB_SDWN_N = 2,
+    MODEMCTRL_REG_LSB_SDWNDRV = 3
+} eMODEMCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MODEMCTRL_REG_Content;
+    sMODEMCTRL_REGStructure MODEMCTRL_REG_Structure;
+} uMODEMCTRL_REG;
+
+typedef enum
+{
+    MODEMCTRL_REG_SDWN_N_SA = 0,
+    MODEMCTRL_REG_SDWN_N_NA = 1
+} eMODEMCTRL_REG_SDWN_N;
+
+typedef enum
+{
+    MODEMCTRL_REG_SDWNDRV_OD = 0,
+    MODEMCTRL_REG_SDWNDRV_PP = 1
+} eMODEMCTRL_REG_SDWNDRV;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MODEMCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MODEMCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MODEMCTRL_REG(HWREG_U8 value); /** Get complete register MODEMCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MODEMCTRL_REG_MODEMOFF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEMOFF of register MODEMCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MODEMCTRL_REG_MODEMOFF(HWREG_U8 value); /**< Get element MODEMOFF of register MODEMCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MODEMCTRL_REG_MODEMRSTSEQ(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEMRSTSEQ of register MODEMCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MODEMCTRL_REG_SDWN_N(HWREG_U8 _reg, eMODEMCTRL_REG_SDWN_N value); /**< Set element SDWN_N of register MODEMCTRL_REG */
+__HWREG_INLINE__ eMODEMCTRL_REG_SDWN_N getPmic_MODEMCTRL_REG_SDWN_N(HWREG_U8 value); /**< Get element SDWN_N of register MODEMCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MODEMCTRL_REG_SDWNDRV(HWREG_U8 _reg, eMODEMCTRL_REG_SDWNDRV value); /**< Set element SDWNDRV of register MODEMCTRL_REG */
+__HWREG_INLINE__ eMODEMCTRL_REG_SDWNDRV getPmic_MODEMCTRL_REG_SDWNDRV(HWREG_U8 value); /**< Get element SDWNDRV of register MODEMCTRL_REG */
+
+
+/** @brief SOCCTRL_REG register description at address offset 0x4e37
+  *
+  *  SoC Control Register
+  */
+typedef struct
+{
+    HWREG_U8 POWERGOOD :1; /**<  */
+    HWREG_U8 RESET_N :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sSOCCTRL_REGStructure;
+
+
+/** @brief SOCCTRL_REG Bitfield widths
+*/
+#define lenSOCCTRL_REG_POWERGOOD 1
+#define lenSOCCTRL_REG_RESET_N 1
+
+typedef enum
+{
+    SOCCTRL_REG_LSB_POWERGOOD = 0,
+    SOCCTRL_REG_LSB_RESET_N = 1
+} eSOCCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SOCCTRL_REG_Content;
+    sSOCCTRL_REGStructure SOCCTRL_REG_Structure;
+} uSOCCTRL_REG;
+
+typedef enum
+{
+    SOCCTRL_REG_POWERGOOD_PA = 1,
+    SOCCTRL_REG_POWERGOOD_NA = 0
+} eSOCCTRL_REG_POWERGOOD;
+
+typedef enum
+{
+    SOCCTRL_REG_RESET_N_RA = 0,
+    SOCCTRL_REG_RESET_N_NA = 1
+} eSOCCTRL_REG_RESET_N;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SOCCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SOCCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SOCCTRL_REG(HWREG_U8 value); /** Get complete register SOCCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SOCCTRL_REG_POWERGOOD(HWREG_U8 _reg, eSOCCTRL_REG_POWERGOOD value); /**< Set element POWERGOOD of register SOCCTRL_REG */
+__HWREG_INLINE__ eSOCCTRL_REG_POWERGOOD getPmic_SOCCTRL_REG_POWERGOOD(HWREG_U8 value); /**< Get element POWERGOOD of register SOCCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SOCCTRL_REG_RESET_N(HWREG_U8 _reg, eSOCCTRL_REG_RESET_N value); /**< Set element RESET_N of register SOCCTRL_REG */
+__HWREG_INLINE__ eSOCCTRL_REG_RESET_N getPmic_SOCCTRL_REG_RESET_N(HWREG_U8 value); /**< Get element RESET_N of register SOCCTRL_REG */
+
+
+/** @brief BBCHGRCFG_REG register description at address offset 0x4e38
+  *
+  *  Backup Battery Charger Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 BBCHGEN :1; /**<  */
+    HWREG_U8 BBCHGV :2; /**<  */
+    HWREG_U8 BBCHGI :2; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sBBCHGRCFG_REGStructure;
+
+
+/** @brief BBCHGRCFG_REG Bitfield widths
+*/
+#define lenBBCHGRCFG_REG_BBCHGEN 1
+#define lenBBCHGRCFG_REG_BBCHGV 2
+#define lenBBCHGRCFG_REG_BBCHGI 2
+
+typedef enum
+{
+    BBCHGRCFG_REG_LSB_BBCHGEN = 0,
+    BBCHGRCFG_REG_LSB_BBCHGV = 1,
+    BBCHGRCFG_REG_LSB_BBCHGI = 3
+} eBBCHGRCFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BBCHGRCFG_REG_Content;
+    sBBCHGRCFG_REGStructure BBCHGRCFG_REG_Structure;
+} uBBCHGRCFG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BBCHGRCFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BBCHGRCFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BBCHGRCFG_REG(HWREG_U8 value); /** Get complete register BBCHGRCFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BBCHGRCFG_REG_BBCHGEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BBCHGEN of register BBCHGRCFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BBCHGRCFG_REG_BBCHGEN(HWREG_U8 value); /**< Get element BBCHGEN of register BBCHGRCFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BBCHGRCFG_REG_BBCHGV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BBCHGV of register BBCHGRCFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BBCHGRCFG_REG_BBCHGV(HWREG_U8 value); /**< Get element BBCHGV of register BBCHGRCFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BBCHGRCFG_REG_BBCHGI(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BBCHGI of register BBCHGRCFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BBCHGRCFG_REG_BBCHGI(HWREG_U8 value); /**< Get element BBCHGI of register BBCHGRCFG_REG */
+
+
+/** @brief FLTCFG_REG register description at address offset 0x4e3d
+  *
+  *  Button Fault Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 FLTACT :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sFLTCFG_REGStructure;
+
+
+/** @brief FLTCFG_REG Bitfield widths
+*/
+#define lenFLTCFG_REG_FLTACT 2
+
+typedef enum
+{
+    FLTCFG_REG_LSB_FLTACT = 0
+} eFLTCFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 FLTCFG_REG_Content;
+    sFLTCFG_REGStructure FLTCFG_REG_Structure;
+} uFLTCFG_REG;
+
+typedef enum
+{
+    FLTCFG_REG_FLTACT_PLFRST = 0,
+    FLTCFG_REG_FLTACT_RES1 = 1,
+    FLTCFG_REG_FLTACT_RES2 = 2,
+    FLTCFG_REG_FLTACT_CLDOFF = 3
+} eFLTCFG_REG_FLTACT;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLTCFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register FLTCFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLTCFG_REG(HWREG_U8 value); /** Get complete register FLTCFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_FLTCFG_REG_FLTACT(HWREG_U8 _reg, eFLTCFG_REG_FLTACT value); /**< Set element FLTACT of register FLTCFG_REG */
+__HWREG_INLINE__ eFLTCFG_REG_FLTACT getPmic_FLTCFG_REG_FLTACT(HWREG_U8 value); /**< Get element FLTACT of register FLTCFG_REG */
+
+
+/** @brief PBCONFIG1_REG register description at address offset 0x4e3e
+  *
+  *  Power Button Configuration Register 1
+  */
+typedef struct
+{
+    HWREG_U8 FLT :4; /**<  */
+    HWREG_U8 PBHOLD :3; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sPBCONFIG1_REGStructure;
+
+
+/** @brief PBCONFIG1_REG Bitfield widths
+*/
+#define lenPBCONFIG1_REG_FLT 4
+#define lenPBCONFIG1_REG_PBHOLD 3
+
+typedef enum
+{
+    PBCONFIG1_REG_LSB_FLT = 0,
+    PBCONFIG1_REG_LSB_PBHOLD = 4
+} ePBCONFIG1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PBCONFIG1_REG_Content;
+    sPBCONFIG1_REGStructure PBCONFIG1_REG_Structure;
+} uPBCONFIG1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PBCONFIG1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG1_REG(HWREG_U8 value); /** Get complete register PBCONFIG1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG1_REG_FLT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element FLT of register PBCONFIG1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG1_REG_FLT(HWREG_U8 value); /**< Get element FLT of register PBCONFIG1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG1_REG_PBHOLD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PBHOLD of register PBCONFIG1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG1_REG_PBHOLD(HWREG_U8 value); /**< Get element PBHOLD of register PBCONFIG1_REG */
+
+
+/** @brief PBCONFIG2_REG register description at address offset 0x4e3f
+  *
+  *  Power Button Configuration Register 2
+  */
+typedef struct
+{
+    HWREG_U8 PBDIS :2; /**<  */
+    HWREG_U8 UIBTNDIS :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sPBCONFIG2_REGStructure;
+
+
+/** @brief PBCONFIG2_REG Bitfield widths
+*/
+#define lenPBCONFIG2_REG_PBDIS 2
+#define lenPBCONFIG2_REG_UIBTNDIS 1
+
+typedef enum
+{
+    PBCONFIG2_REG_LSB_PBDIS = 0,
+    PBCONFIG2_REG_LSB_UIBTNDIS = 2
+} ePBCONFIG2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PBCONFIG2_REG_Content;
+    sPBCONFIG2_REGStructure PBCONFIG2_REG_Structure;
+} uPBCONFIG2_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG2_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PBCONFIG2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG2_REG(HWREG_U8 value); /** Get complete register PBCONFIG2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG2_REG_PBDIS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PBDIS of register PBCONFIG2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG2_REG_PBDIS(HWREG_U8 value); /**< Get element PBDIS of register PBCONFIG2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG2_REG_UIBTNDIS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element UIBTNDIS of register PBCONFIG2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG2_REG_UIBTNDIS(HWREG_U8 value); /**< Get element UIBTNDIS of register PBCONFIG2_REG */
+
+
+/** @brief PBSTATUS_REG register description at address offset 0x4e40
+  *
+  *  Power Button Status Register
+  */
+typedef struct
+{
+    const HWREG_U8 PBHT :4; /**<  */
+    const HWREG_U8 PBLVL :1; /**<  */
+    HWREG_U8 CLRFLT :1; /**<  */
+    HWREG_U8 CLRHT :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sPBSTATUS_REGStructure;
+
+
+/** @brief PBSTATUS_REG Bitfield widths
+*/
+#define lenPBSTATUS_REG_PBHT 4
+#define lenPBSTATUS_REG_PBLVL 1
+#define lenPBSTATUS_REG_CLRFLT 1
+#define lenPBSTATUS_REG_CLRHT 1
+
+typedef enum
+{
+    PBSTATUS_REG_LSB_PBHT = 0,
+    PBSTATUS_REG_LSB_PBLVL = 4,
+    PBSTATUS_REG_LSB_CLRFLT = 5,
+    PBSTATUS_REG_LSB_CLRHT = 6
+} ePBSTATUS_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PBSTATUS_REG_Content;
+    sPBSTATUS_REGStructure PBSTATUS_REG_Structure;
+} uPBSTATUS_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBSTATUS_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PBSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PBSTATUS_REG(HWREG_U8 value); /** Get complete register PBSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PBSTATUS_REG_PBHT(HWREG_U8 value); /**< Get element PBHT of register PBSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PBSTATUS_REG_PBLVL(HWREG_U8 value); /**< Get element PBLVL of register PBSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PBSTATUS_REG_CLRFLT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CLRFLT of register PBSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PBSTATUS_REG_CLRHT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CLRHT of register PBSTATUS_REG */
+
+
+/** @brief UBSTATUS_REG register description at address offset 0x4e41
+  *
+  *  UI Button Status Register
+  */
+typedef struct
+{
+    const HWREG_U8 UBHT :4; /**<  */
+    const HWREG_U8 UBLVL :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sUBSTATUS_REGStructure;
+
+
+/** @brief UBSTATUS_REG Bitfield widths
+*/
+#define lenUBSTATUS_REG_UBHT 4
+#define lenUBSTATUS_REG_UBLVL 1
+
+typedef enum
+{
+    UBSTATUS_REG_LSB_UBHT = 0,
+    UBSTATUS_REG_LSB_UBLVL = 4
+} eUBSTATUS_REGLsb;
+
+typedef union
+{
+    HWREG_U8 UBSTATUS_REG_Content;
+    sUBSTATUS_REGStructure UBSTATUS_REG_Structure;
+} uUBSTATUS_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_UBSTATUS_REG(HWREG_U8 value); /** Get complete register UBSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_UBSTATUS_REG_UBHT(HWREG_U8 value); /**< Get element UBHT of register UBSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_UBSTATUS_REG_UBLVL(HWREG_U8 value); /**< Get element UBLVL of register UBSTATUS_REG */
+
+
+/** @brief GPIO0P0CTLO_REG register description at address offset 0x4e44
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO0P0CTLO_REGStructure;
+
+
+/** @brief GPIO0P0CTLO_REG Bitfield widths
+*/
+#define lenGPIO0P0CTLO_REG_DOUT 1
+#define lenGPIO0P0CTLO_REG_RVAL 1
+#define lenGPIO0P0CTLO_REG_REN 1
+#define lenGPIO0P0CTLO_REG_DRV 1
+#define lenGPIO0P0CTLO_REG_DIR 1
+#define lenGPIO0P0CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO0P0CTLO_REG_LSB_DOUT = 0,
+    GPIO0P0CTLO_REG_LSB_RVAL = 1,
+    GPIO0P0CTLO_REG_LSB_REN = 3,
+    GPIO0P0CTLO_REG_LSB_DRV = 4,
+    GPIO0P0CTLO_REG_LSB_DIR = 5,
+    GPIO0P0CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO0P0CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P0CTLO_REG_Content;
+    sGPIO0P0CTLO_REGStructure GPIO0P0CTLO_REG_Structure;
+} uGPIO0P0CTLO_REG;
+
+typedef enum
+{
+    GPIO0P0CTLO_REG_RVAL_DOWN = 0,
+    GPIO0P0CTLO_REG_RVAL_UP = 1
+} eGPIO0P0CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG(HWREG_U8 value); /** Get complete register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P0CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ eGPIO0P0CTLO_REG_RVAL getPmic_GPIO0P0CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO0P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO0P0CTLO_REG */
+
+
+/** @brief GPIO0P1CTLO_REG register description at address offset 0x4e45
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO0P1CTLO_REGStructure;
+
+
+/** @brief GPIO0P1CTLO_REG Bitfield widths
+*/
+#define lenGPIO0P1CTLO_REG_DOUT 1
+#define lenGPIO0P1CTLO_REG_RVAL 1
+#define lenGPIO0P1CTLO_REG_REN 1
+#define lenGPIO0P1CTLO_REG_DRV 1
+#define lenGPIO0P1CTLO_REG_DIR 1
+#define lenGPIO0P1CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO0P1CTLO_REG_LSB_DOUT = 0,
+    GPIO0P1CTLO_REG_LSB_RVAL = 1,
+    GPIO0P1CTLO_REG_LSB_REN = 3,
+    GPIO0P1CTLO_REG_LSB_DRV = 4,
+    GPIO0P1CTLO_REG_LSB_DIR = 5,
+    GPIO0P1CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO0P1CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P1CTLO_REG_Content;
+    sGPIO0P1CTLO_REGStructure GPIO0P1CTLO_REG_Structure;
+} uGPIO0P1CTLO_REG;
+
+typedef enum
+{
+    GPIO0P1CTLO_REG_RVAL_DOWN = 0,
+    GPIO0P1CTLO_REG_RVAL_UP = 1
+} eGPIO0P1CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG(HWREG_U8 value); /** Get complete register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P1CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ eGPIO0P1CTLO_REG_RVAL getPmic_GPIO0P1CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO0P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO0P1CTLO_REG */
+
+
+/** @brief GPIO0P2CTLO_REG register description at address offset 0x4e46
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO0P2CTLO_REGStructure;
+
+
+/** @brief GPIO0P2CTLO_REG Bitfield widths
+*/
+#define lenGPIO0P2CTLO_REG_DOUT 1
+#define lenGPIO0P2CTLO_REG_RVAL 1
+#define lenGPIO0P2CTLO_REG_REN 1
+#define lenGPIO0P2CTLO_REG_DRV 1
+#define lenGPIO0P2CTLO_REG_DIR 1
+#define lenGPIO0P2CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO0P2CTLO_REG_LSB_DOUT = 0,
+    GPIO0P2CTLO_REG_LSB_RVAL = 1,
+    GPIO0P2CTLO_REG_LSB_REN = 3,
+    GPIO0P2CTLO_REG_LSB_DRV = 4,
+    GPIO0P2CTLO_REG_LSB_DIR = 5,
+    GPIO0P2CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO0P2CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P2CTLO_REG_Content;
+    sGPIO0P2CTLO_REGStructure GPIO0P2CTLO_REG_Structure;
+} uGPIO0P2CTLO_REG;
+
+typedef enum
+{
+    GPIO0P2CTLO_REG_RVAL_DOWN = 0,
+    GPIO0P2CTLO_REG_RVAL_UP = 1
+} eGPIO0P2CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG(HWREG_U8 value); /** Get complete register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P2CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ eGPIO0P2CTLO_REG_RVAL getPmic_GPIO0P2CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO0P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO0P2CTLO_REG */
+
+
+/** @brief GPIO0P3CTLO_REG register description at address offset 0x4e47
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO0P3CTLO_REGStructure;
+
+
+/** @brief GPIO0P3CTLO_REG Bitfield widths
+*/
+#define lenGPIO0P3CTLO_REG_DOUT 1
+#define lenGPIO0P3CTLO_REG_RVAL 1
+#define lenGPIO0P3CTLO_REG_REN 1
+#define lenGPIO0P3CTLO_REG_DRV 1
+#define lenGPIO0P3CTLO_REG_DIR 1
+#define lenGPIO0P3CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO0P3CTLO_REG_LSB_DOUT = 0,
+    GPIO0P3CTLO_REG_LSB_RVAL = 1,
+    GPIO0P3CTLO_REG_LSB_REN = 3,
+    GPIO0P3CTLO_REG_LSB_DRV = 4,
+    GPIO0P3CTLO_REG_LSB_DIR = 5,
+    GPIO0P3CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO0P3CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P3CTLO_REG_Content;
+    sGPIO0P3CTLO_REGStructure GPIO0P3CTLO_REG_Structure;
+} uGPIO0P3CTLO_REG;
+
+typedef enum
+{
+    GPIO0P3CTLO_REG_RVAL_DOWN = 0,
+    GPIO0P3CTLO_REG_RVAL_UP = 1
+} eGPIO0P3CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG(HWREG_U8 value); /** Get complete register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P3CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ eGPIO0P3CTLO_REG_RVAL getPmic_GPIO0P3CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO0P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO0P3CTLO_REG */
+
+
+/** @brief GPIO0P4CTLO_REG register description at address offset 0x4e48
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO0P4CTLO_REGStructure;
+
+
+/** @brief GPIO0P4CTLO_REG Bitfield widths
+*/
+#define lenGPIO0P4CTLO_REG_DOUT 1
+#define lenGPIO0P4CTLO_REG_RVAL 1
+#define lenGPIO0P4CTLO_REG_REN 1
+#define lenGPIO0P4CTLO_REG_DRV 1
+#define lenGPIO0P4CTLO_REG_DIR 1
+#define lenGPIO0P4CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO0P4CTLO_REG_LSB_DOUT = 0,
+    GPIO0P4CTLO_REG_LSB_RVAL = 1,
+    GPIO0P4CTLO_REG_LSB_REN = 3,
+    GPIO0P4CTLO_REG_LSB_DRV = 4,
+    GPIO0P4CTLO_REG_LSB_DIR = 5,
+    GPIO0P4CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO0P4CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P4CTLO_REG_Content;
+    sGPIO0P4CTLO_REGStructure GPIO0P4CTLO_REG_Structure;
+} uGPIO0P4CTLO_REG;
+
+typedef enum
+{
+    GPIO0P4CTLO_REG_RVAL_DOWN = 0,
+    GPIO0P4CTLO_REG_RVAL_UP = 1
+} eGPIO0P4CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG(HWREG_U8 value); /** Get complete register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P4CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ eGPIO0P4CTLO_REG_RVAL getPmic_GPIO0P4CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO0P4CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO0P4CTLO_REG */
+
+
+/** @brief GPIO0P5CTLO_REG register description at address offset 0x4e49
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO0P5CTLO_REGStructure;
+
+
+/** @brief GPIO0P5CTLO_REG Bitfield widths
+*/
+#define lenGPIO0P5CTLO_REG_DOUT 1
+#define lenGPIO0P5CTLO_REG_RVAL 1
+#define lenGPIO0P5CTLO_REG_REN 1
+#define lenGPIO0P5CTLO_REG_DRV 1
+#define lenGPIO0P5CTLO_REG_DIR 1
+#define lenGPIO0P5CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO0P5CTLO_REG_LSB_DOUT = 0,
+    GPIO0P5CTLO_REG_LSB_RVAL = 1,
+    GPIO0P5CTLO_REG_LSB_REN = 3,
+    GPIO0P5CTLO_REG_LSB_DRV = 4,
+    GPIO0P5CTLO_REG_LSB_DIR = 5,
+    GPIO0P5CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO0P5CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P5CTLO_REG_Content;
+    sGPIO0P5CTLO_REGStructure GPIO0P5CTLO_REG_Structure;
+} uGPIO0P5CTLO_REG;
+
+typedef enum
+{
+    GPIO0P5CTLO_REG_RVAL_DOWN = 0,
+    GPIO0P5CTLO_REG_RVAL_UP = 1
+} eGPIO0P5CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG(HWREG_U8 value); /** Get complete register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P5CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ eGPIO0P5CTLO_REG_RVAL getPmic_GPIO0P5CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO0P5CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO0P5CTLO_REG */
+
+
+/** @brief GPIO0P6CTLO_REG register description at address offset 0x4e4a
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO0P6CTLO_REGStructure;
+
+
+/** @brief GPIO0P6CTLO_REG Bitfield widths
+*/
+#define lenGPIO0P6CTLO_REG_DOUT 1
+#define lenGPIO0P6CTLO_REG_RVAL 1
+#define lenGPIO0P6CTLO_REG_REN 1
+#define lenGPIO0P6CTLO_REG_DRV 1
+#define lenGPIO0P6CTLO_REG_DIR 1
+#define lenGPIO0P6CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO0P6CTLO_REG_LSB_DOUT = 0,
+    GPIO0P6CTLO_REG_LSB_RVAL = 1,
+    GPIO0P6CTLO_REG_LSB_REN = 3,
+    GPIO0P6CTLO_REG_LSB_DRV = 4,
+    GPIO0P6CTLO_REG_LSB_DIR = 5,
+    GPIO0P6CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO0P6CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P6CTLO_REG_Content;
+    sGPIO0P6CTLO_REGStructure GPIO0P6CTLO_REG_Structure;
+} uGPIO0P6CTLO_REG;
+
+typedef enum
+{
+    GPIO0P6CTLO_REG_RVAL_DOWN = 0,
+    GPIO0P6CTLO_REG_RVAL_UP = 1
+} eGPIO0P6CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG(HWREG_U8 value); /** Get complete register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P6CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ eGPIO0P6CTLO_REG_RVAL getPmic_GPIO0P6CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO0P6CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO0P6CTLO_REG */
+
+
+/** @brief GPIO1P0CTLO_REG register description at address offset 0x4e4b
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO1P0CTLO_REGStructure;
+
+
+/** @brief GPIO1P0CTLO_REG Bitfield widths
+*/
+#define lenGPIO1P0CTLO_REG_DOUT 1
+#define lenGPIO1P0CTLO_REG_RVAL 1
+#define lenGPIO1P0CTLO_REG_REN 1
+#define lenGPIO1P0CTLO_REG_DRV 1
+#define lenGPIO1P0CTLO_REG_DIR 1
+#define lenGPIO1P0CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO1P0CTLO_REG_LSB_DOUT = 0,
+    GPIO1P0CTLO_REG_LSB_RVAL = 1,
+    GPIO1P0CTLO_REG_LSB_REN = 3,
+    GPIO1P0CTLO_REG_LSB_DRV = 4,
+    GPIO1P0CTLO_REG_LSB_DIR = 5,
+    GPIO1P0CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO1P0CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO1P0CTLO_REG_Content;
+    sGPIO1P0CTLO_REGStructure GPIO1P0CTLO_REG_Structure;
+} uGPIO1P0CTLO_REG;
+
+typedef enum
+{
+    GPIO1P0CTLO_REG_RVAL_DOWN = 0,
+    GPIO1P0CTLO_REG_RVAL_UP = 1
+} eGPIO1P0CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG(HWREG_U8 value); /** Get complete register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO1P0CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ eGPIO1P0CTLO_REG_RVAL getPmic_GPIO1P0CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO1P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO1P0CTLO_REG */
+
+
+/** @brief GPIO1P1CTLO_REG register description at address offset 0x4e4c
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO1P1CTLO_REGStructure;
+
+
+/** @brief GPIO1P1CTLO_REG Bitfield widths
+*/
+#define lenGPIO1P1CTLO_REG_DOUT 1
+#define lenGPIO1P1CTLO_REG_RVAL 1
+#define lenGPIO1P1CTLO_REG_REN 1
+#define lenGPIO1P1CTLO_REG_DRV 1
+#define lenGPIO1P1CTLO_REG_DIR 1
+#define lenGPIO1P1CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO1P1CTLO_REG_LSB_DOUT = 0,
+    GPIO1P1CTLO_REG_LSB_RVAL = 1,
+    GPIO1P1CTLO_REG_LSB_REN = 3,
+    GPIO1P1CTLO_REG_LSB_DRV = 4,
+    GPIO1P1CTLO_REG_LSB_DIR = 5,
+    GPIO1P1CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO1P1CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO1P1CTLO_REG_Content;
+    sGPIO1P1CTLO_REGStructure GPIO1P1CTLO_REG_Structure;
+} uGPIO1P1CTLO_REG;
+
+typedef enum
+{
+    GPIO1P1CTLO_REG_RVAL_DOWN = 0,
+    GPIO1P1CTLO_REG_RVAL_UP = 1
+} eGPIO1P1CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG(HWREG_U8 value); /** Get complete register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO1P1CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ eGPIO1P1CTLO_REG_RVAL getPmic_GPIO1P1CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO1P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO1P1CTLO_REG */
+
+
+/** @brief GPIO1P2CTLO_REG register description at address offset 0x4e4d
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO1P2CTLO_REGStructure;
+
+
+/** @brief GPIO1P2CTLO_REG Bitfield widths
+*/
+#define lenGPIO1P2CTLO_REG_DOUT 1
+#define lenGPIO1P2CTLO_REG_RVAL 1
+#define lenGPIO1P2CTLO_REG_REN 1
+#define lenGPIO1P2CTLO_REG_DRV 1
+#define lenGPIO1P2CTLO_REG_DIR 1
+#define lenGPIO1P2CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO1P2CTLO_REG_LSB_DOUT = 0,
+    GPIO1P2CTLO_REG_LSB_RVAL = 1,
+    GPIO1P2CTLO_REG_LSB_REN = 3,
+    GPIO1P2CTLO_REG_LSB_DRV = 4,
+    GPIO1P2CTLO_REG_LSB_DIR = 5,
+    GPIO1P2CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO1P2CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO1P2CTLO_REG_Content;
+    sGPIO1P2CTLO_REGStructure GPIO1P2CTLO_REG_Structure;
+} uGPIO1P2CTLO_REG;
+
+typedef enum
+{
+    GPIO1P2CTLO_REG_RVAL_DOWN = 0,
+    GPIO1P2CTLO_REG_RVAL_UP = 1
+} eGPIO1P2CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG(HWREG_U8 value); /** Get complete register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO1P2CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ eGPIO1P2CTLO_REG_RVAL getPmic_GPIO1P2CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO1P2CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO1P2CTLO_REG */
+
+
+/** @brief GPIO1P3CTLO_REG register description at address offset 0x4e4e
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO1P3CTLO_REGStructure;
+
+
+/** @brief GPIO1P3CTLO_REG Bitfield widths
+*/
+#define lenGPIO1P3CTLO_REG_DOUT 1
+#define lenGPIO1P3CTLO_REG_RVAL 1
+#define lenGPIO1P3CTLO_REG_REN 1
+#define lenGPIO1P3CTLO_REG_DRV 1
+#define lenGPIO1P3CTLO_REG_DIR 1
+#define lenGPIO1P3CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO1P3CTLO_REG_LSB_DOUT = 0,
+    GPIO1P3CTLO_REG_LSB_RVAL = 1,
+    GPIO1P3CTLO_REG_LSB_REN = 3,
+    GPIO1P3CTLO_REG_LSB_DRV = 4,
+    GPIO1P3CTLO_REG_LSB_DIR = 5,
+    GPIO1P3CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO1P3CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO1P3CTLO_REG_Content;
+    sGPIO1P3CTLO_REGStructure GPIO1P3CTLO_REG_Structure;
+} uGPIO1P3CTLO_REG;
+
+typedef enum
+{
+    GPIO1P3CTLO_REG_RVAL_DOWN = 0,
+    GPIO1P3CTLO_REG_RVAL_UP = 1
+} eGPIO1P3CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG(HWREG_U8 value); /** Get complete register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO1P3CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ eGPIO1P3CTLO_REG_RVAL getPmic_GPIO1P3CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO1P3CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO1P3CTLO_REG */
+
+
+/** @brief GPIO2P0CTLO_REG register description at address offset 0x4e4f
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO2P0CTLO_REGStructure;
+
+
+/** @brief GPIO2P0CTLO_REG Bitfield widths
+*/
+#define lenGPIO2P0CTLO_REG_DOUT 1
+#define lenGPIO2P0CTLO_REG_RVAL 1
+#define lenGPIO2P0CTLO_REG_REN 1
+#define lenGPIO2P0CTLO_REG_DRV 1
+#define lenGPIO2P0CTLO_REG_DIR 1
+#define lenGPIO2P0CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO2P0CTLO_REG_LSB_DOUT = 0,
+    GPIO2P0CTLO_REG_LSB_RVAL = 1,
+    GPIO2P0CTLO_REG_LSB_REN = 3,
+    GPIO2P0CTLO_REG_LSB_DRV = 4,
+    GPIO2P0CTLO_REG_LSB_DIR = 5,
+    GPIO2P0CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO2P0CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO2P0CTLO_REG_Content;
+    sGPIO2P0CTLO_REGStructure GPIO2P0CTLO_REG_Structure;
+} uGPIO2P0CTLO_REG;
+
+typedef enum
+{
+    GPIO2P0CTLO_REG_RVAL_DOWN = 0,
+    GPIO2P0CTLO_REG_RVAL_UP = 1
+} eGPIO2P0CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG(HWREG_U8 value); /** Get complete register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO2P0CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ eGPIO2P0CTLO_REG_RVAL getPmic_GPIO2P0CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO2P0CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO2P0CTLO_REG */
+
+
+/** @brief GPIO2P1CTLO_REG register description at address offset 0x4e50
+  *
+  *  GPIO Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sGPIO2P1CTLO_REGStructure;
+
+
+/** @brief GPIO2P1CTLO_REG Bitfield widths
+*/
+#define lenGPIO2P1CTLO_REG_DOUT 1
+#define lenGPIO2P1CTLO_REG_RVAL 1
+#define lenGPIO2P1CTLO_REG_REN 1
+#define lenGPIO2P1CTLO_REG_DRV 1
+#define lenGPIO2P1CTLO_REG_DIR 1
+#define lenGPIO2P1CTLO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    GPIO2P1CTLO_REG_LSB_DOUT = 0,
+    GPIO2P1CTLO_REG_LSB_RVAL = 1,
+    GPIO2P1CTLO_REG_LSB_REN = 3,
+    GPIO2P1CTLO_REG_LSB_DRV = 4,
+    GPIO2P1CTLO_REG_LSB_DIR = 5,
+    GPIO2P1CTLO_REG_LSB_ALTFUNCEN = 6
+} eGPIO2P1CTLO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO2P1CTLO_REG_Content;
+    sGPIO2P1CTLO_REGStructure GPIO2P1CTLO_REG_Structure;
+} uGPIO2P1CTLO_REG;
+
+typedef enum
+{
+    GPIO2P1CTLO_REG_RVAL_DOWN = 0,
+    GPIO2P1CTLO_REG_RVAL_UP = 1
+} eGPIO2P1CTLO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG(HWREG_U8 value); /** Get complete register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO2P1CTLO_REG_RVAL value); /**< Set element RVAL of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ eGPIO2P1CTLO_REG_RVAL getPmic_GPIO2P1CTLO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG_REN(HWREG_U8 value); /**< Get element REN of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register GPIO2P1CTLO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register GPIO2P1CTLO_REG */
+
+
+/** @brief GPIO0P0CTLI_REG register description at address offset 0x4e51
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO0P0CTLI_REGStructure;
+
+
+/** @brief GPIO0P0CTLI_REG Bitfield widths
+*/
+#define lenGPIO0P0CTLI_REG_DIN 1
+#define lenGPIO0P0CTLI_REG_INTCNT 2
+#define lenGPIO0P0CTLI_REG_GPIDBNC 1
+#define lenGPIO0P0CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO0P0CTLI_REG_LSB_DIN = 0,
+    GPIO0P0CTLI_REG_LSB_INTCNT = 1,
+    GPIO0P0CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO0P0CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO0P0CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P0CTLI_REG_Content;
+    sGPIO0P0CTLI_REGStructure GPIO0P0CTLI_REG_Structure;
+} uGPIO0P0CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLI_REG(HWREG_U8 value); /** Get complete register GPIO0P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO0P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO0P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO0P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO0P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO0P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO0P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO0P0CTLI_REG */
+
+
+/** @brief GPIO0P1CTLI_REG register description at address offset 0x4e52
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO0P1CTLI_REGStructure;
+
+
+/** @brief GPIO0P1CTLI_REG Bitfield widths
+*/
+#define lenGPIO0P1CTLI_REG_DIN 1
+#define lenGPIO0P1CTLI_REG_INTCNT 2
+#define lenGPIO0P1CTLI_REG_GPIDBNC 1
+#define lenGPIO0P1CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO0P1CTLI_REG_LSB_DIN = 0,
+    GPIO0P1CTLI_REG_LSB_INTCNT = 1,
+    GPIO0P1CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO0P1CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO0P1CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P1CTLI_REG_Content;
+    sGPIO0P1CTLI_REGStructure GPIO0P1CTLI_REG_Structure;
+} uGPIO0P1CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLI_REG(HWREG_U8 value); /** Get complete register GPIO0P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO0P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO0P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO0P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO0P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO0P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO0P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO0P1CTLI_REG */
+
+
+/** @brief GPIO0P2CTLI_REG register description at address offset 0x4e53
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO0P2CTLI_REGStructure;
+
+
+/** @brief GPIO0P2CTLI_REG Bitfield widths
+*/
+#define lenGPIO0P2CTLI_REG_DIN 1
+#define lenGPIO0P2CTLI_REG_INTCNT 2
+#define lenGPIO0P2CTLI_REG_GPIDBNC 1
+#define lenGPIO0P2CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO0P2CTLI_REG_LSB_DIN = 0,
+    GPIO0P2CTLI_REG_LSB_INTCNT = 1,
+    GPIO0P2CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO0P2CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO0P2CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P2CTLI_REG_Content;
+    sGPIO0P2CTLI_REGStructure GPIO0P2CTLI_REG_Structure;
+} uGPIO0P2CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLI_REG(HWREG_U8 value); /** Get complete register GPIO0P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO0P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO0P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO0P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO0P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO0P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO0P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO0P2CTLI_REG */
+
+
+/** @brief GPIO0P3CTLI_REG register description at address offset 0x4e54
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO0P3CTLI_REGStructure;
+
+
+/** @brief GPIO0P3CTLI_REG Bitfield widths
+*/
+#define lenGPIO0P3CTLI_REG_DIN 1
+#define lenGPIO0P3CTLI_REG_INTCNT 2
+#define lenGPIO0P3CTLI_REG_GPIDBNC 1
+#define lenGPIO0P3CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO0P3CTLI_REG_LSB_DIN = 0,
+    GPIO0P3CTLI_REG_LSB_INTCNT = 1,
+    GPIO0P3CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO0P3CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO0P3CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P3CTLI_REG_Content;
+    sGPIO0P3CTLI_REGStructure GPIO0P3CTLI_REG_Structure;
+} uGPIO0P3CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLI_REG(HWREG_U8 value); /** Get complete register GPIO0P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO0P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO0P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO0P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO0P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO0P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO0P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO0P3CTLI_REG */
+
+
+/** @brief GPIO0P4CTLI_REG register description at address offset 0x4e55
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO0P4CTLI_REGStructure;
+
+
+/** @brief GPIO0P4CTLI_REG Bitfield widths
+*/
+#define lenGPIO0P4CTLI_REG_DIN 1
+#define lenGPIO0P4CTLI_REG_INTCNT 2
+#define lenGPIO0P4CTLI_REG_GPIDBNC 1
+#define lenGPIO0P4CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO0P4CTLI_REG_LSB_DIN = 0,
+    GPIO0P4CTLI_REG_LSB_INTCNT = 1,
+    GPIO0P4CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO0P4CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO0P4CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P4CTLI_REG_Content;
+    sGPIO0P4CTLI_REGStructure GPIO0P4CTLI_REG_Structure;
+} uGPIO0P4CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P4CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLI_REG(HWREG_U8 value); /** Get complete register GPIO0P4CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO0P4CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO0P4CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO0P4CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO0P4CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO0P4CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO0P4CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO0P4CTLI_REG */
+
+
+/** @brief GPIO0P5CTLI_REG register description at address offset 0x4e56
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO0P5CTLI_REGStructure;
+
+
+/** @brief GPIO0P5CTLI_REG Bitfield widths
+*/
+#define lenGPIO0P5CTLI_REG_DIN 1
+#define lenGPIO0P5CTLI_REG_INTCNT 2
+#define lenGPIO0P5CTLI_REG_GPIDBNC 1
+#define lenGPIO0P5CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO0P5CTLI_REG_LSB_DIN = 0,
+    GPIO0P5CTLI_REG_LSB_INTCNT = 1,
+    GPIO0P5CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO0P5CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO0P5CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P5CTLI_REG_Content;
+    sGPIO0P5CTLI_REGStructure GPIO0P5CTLI_REG_Structure;
+} uGPIO0P5CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P5CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLI_REG(HWREG_U8 value); /** Get complete register GPIO0P5CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO0P5CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO0P5CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO0P5CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO0P5CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO0P5CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO0P5CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO0P5CTLI_REG */
+
+
+/** @brief GPIO0P6CTLI_REG register description at address offset 0x4e57
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO0P6CTLI_REGStructure;
+
+
+/** @brief GPIO0P6CTLI_REG Bitfield widths
+*/
+#define lenGPIO0P6CTLI_REG_DIN 1
+#define lenGPIO0P6CTLI_REG_INTCNT 2
+#define lenGPIO0P6CTLI_REG_GPIDBNC 1
+#define lenGPIO0P6CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO0P6CTLI_REG_LSB_DIN = 0,
+    GPIO0P6CTLI_REG_LSB_INTCNT = 1,
+    GPIO0P6CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO0P6CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO0P6CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO0P6CTLI_REG_Content;
+    sGPIO0P6CTLI_REGStructure GPIO0P6CTLI_REG_Structure;
+} uGPIO0P6CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO0P6CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLI_REG(HWREG_U8 value); /** Get complete register GPIO0P6CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO0P6CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO0P6CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO0P6CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO0P6CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO0P6CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO0P6CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO0P6CTLI_REG */
+
+
+/** @brief GPIO1P0CTLI_REG register description at address offset 0x4e58
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO1P0CTLI_REGStructure;
+
+
+/** @brief GPIO1P0CTLI_REG Bitfield widths
+*/
+#define lenGPIO1P0CTLI_REG_DIN 1
+#define lenGPIO1P0CTLI_REG_INTCNT 2
+#define lenGPIO1P0CTLI_REG_GPIDBNC 1
+#define lenGPIO1P0CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO1P0CTLI_REG_LSB_DIN = 0,
+    GPIO1P0CTLI_REG_LSB_INTCNT = 1,
+    GPIO1P0CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO1P0CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO1P0CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO1P0CTLI_REG_Content;
+    sGPIO1P0CTLI_REGStructure GPIO1P0CTLI_REG_Structure;
+} uGPIO1P0CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO1P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLI_REG(HWREG_U8 value); /** Get complete register GPIO1P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO1P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO1P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO1P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO1P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO1P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO1P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO1P0CTLI_REG */
+
+
+/** @brief GPIO1P1CTLI_REG register description at address offset 0x4e59
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO1P1CTLI_REGStructure;
+
+
+/** @brief GPIO1P1CTLI_REG Bitfield widths
+*/
+#define lenGPIO1P1CTLI_REG_DIN 1
+#define lenGPIO1P1CTLI_REG_INTCNT 2
+#define lenGPIO1P1CTLI_REG_GPIDBNC 1
+#define lenGPIO1P1CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO1P1CTLI_REG_LSB_DIN = 0,
+    GPIO1P1CTLI_REG_LSB_INTCNT = 1,
+    GPIO1P1CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO1P1CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO1P1CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO1P1CTLI_REG_Content;
+    sGPIO1P1CTLI_REGStructure GPIO1P1CTLI_REG_Structure;
+} uGPIO1P1CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO1P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLI_REG(HWREG_U8 value); /** Get complete register GPIO1P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO1P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO1P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO1P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO1P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO1P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO1P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO1P1CTLI_REG */
+
+
+/** @brief GPIO1P2CTLI_REG register description at address offset 0x4e5a
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO1P2CTLI_REGStructure;
+
+
+/** @brief GPIO1P2CTLI_REG Bitfield widths
+*/
+#define lenGPIO1P2CTLI_REG_DIN 1
+#define lenGPIO1P2CTLI_REG_INTCNT 2
+#define lenGPIO1P2CTLI_REG_GPIDBNC 1
+#define lenGPIO1P2CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO1P2CTLI_REG_LSB_DIN = 0,
+    GPIO1P2CTLI_REG_LSB_INTCNT = 1,
+    GPIO1P2CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO1P2CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO1P2CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO1P2CTLI_REG_Content;
+    sGPIO1P2CTLI_REGStructure GPIO1P2CTLI_REG_Structure;
+} uGPIO1P2CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO1P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLI_REG(HWREG_U8 value); /** Get complete register GPIO1P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO1P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO1P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO1P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO1P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO1P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO1P2CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO1P2CTLI_REG */
+
+
+/** @brief GPIO1P3CTLI_REG register description at address offset 0x4e5b
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO1P3CTLI_REGStructure;
+
+
+/** @brief GPIO1P3CTLI_REG Bitfield widths
+*/
+#define lenGPIO1P3CTLI_REG_DIN 1
+#define lenGPIO1P3CTLI_REG_INTCNT 2
+#define lenGPIO1P3CTLI_REG_GPIDBNC 1
+#define lenGPIO1P3CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO1P3CTLI_REG_LSB_DIN = 0,
+    GPIO1P3CTLI_REG_LSB_INTCNT = 1,
+    GPIO1P3CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO1P3CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO1P3CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO1P3CTLI_REG_Content;
+    sGPIO1P3CTLI_REGStructure GPIO1P3CTLI_REG_Structure;
+} uGPIO1P3CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO1P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLI_REG(HWREG_U8 value); /** Get complete register GPIO1P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO1P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO1P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO1P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO1P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO1P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO1P3CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO1P3CTLI_REG */
+
+
+/** @brief GPIO2P0CTLI_REG register description at address offset 0x4e5c
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO2P0CTLI_REGStructure;
+
+
+/** @brief GPIO2P0CTLI_REG Bitfield widths
+*/
+#define lenGPIO2P0CTLI_REG_DIN 1
+#define lenGPIO2P0CTLI_REG_INTCNT 2
+#define lenGPIO2P0CTLI_REG_GPIDBNC 1
+#define lenGPIO2P0CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO2P0CTLI_REG_LSB_DIN = 0,
+    GPIO2P0CTLI_REG_LSB_INTCNT = 1,
+    GPIO2P0CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO2P0CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO2P0CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO2P0CTLI_REG_Content;
+    sGPIO2P0CTLI_REGStructure GPIO2P0CTLI_REG_Structure;
+} uGPIO2P0CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO2P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLI_REG(HWREG_U8 value); /** Get complete register GPIO2P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO2P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO2P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO2P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO2P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO2P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO2P0CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO2P0CTLI_REG */
+
+
+/** @brief GPIO2P1CTLI_REG register description at address offset 0x4e5d
+  *
+  *  GPIO Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    HWREG_U8 INTCNT :2; /**<  */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sGPIO2P1CTLI_REGStructure;
+
+
+/** @brief GPIO2P1CTLI_REG Bitfield widths
+*/
+#define lenGPIO2P1CTLI_REG_DIN 1
+#define lenGPIO2P1CTLI_REG_INTCNT 2
+#define lenGPIO2P1CTLI_REG_GPIDBNC 1
+#define lenGPIO2P1CTLI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    GPIO2P1CTLI_REG_LSB_DIN = 0,
+    GPIO2P1CTLI_REG_LSB_INTCNT = 1,
+    GPIO2P1CTLI_REG_LSB_GPIDBNC = 3,
+    GPIO2P1CTLI_REG_LSB_GPIGLBYP = 4
+} eGPIO2P1CTLI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPIO2P1CTLI_REG_Content;
+    sGPIO2P1CTLI_REGStructure GPIO2P1CTLI_REG_Structure;
+} uGPIO2P1CTLI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPIO2P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLI_REG(HWREG_U8 value); /** Get complete register GPIO2P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register GPIO2P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element INTCNT of register GPIO2P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLI_REG_INTCNT(HWREG_U8 value); /**< Get element INTCNT of register GPIO2P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register GPIO2P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register GPIO2P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register GPIO2P1CTLI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register GPIO2P1CTLI_REG */
+
+
+/** @brief VCCCNT_REG register description at address offset 0x4e60
+  *
+  *  VCC Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 MODEVCC :4; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sVCCCNT_REGStructure;
+
+
+/** @brief VCCCNT_REG Bitfield widths
+*/
+#define lenVCCCNT_REG_MODEVCC 4
+
+typedef enum
+{
+    VCCCNT_REG_LSB_MODEVCC = 1
+} eVCCCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VCCCNT_REG_Content;
+    sVCCCNT_REGStructure VCCCNT_REG_Structure;
+} uVCCCNT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VCCCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VCCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VCCCNT_REG(HWREG_U8 value); /** Get complete register VCCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VCCCNT_REG_MODEVCC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVCC of register VCCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VCCCNT_REG_MODEVCC(HWREG_U8 value); /**< Get element MODEVCC of register VCCCNT_REG */
+
+
+/** @brief VNNCNT_REG register description at address offset 0x4e61
+  *
+  *  VNN Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 MODEVNN :4; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sVNNCNT_REGStructure;
+
+
+/** @brief VNNCNT_REG Bitfield widths
+*/
+#define lenVNNCNT_REG_MODEVNN 4
+
+typedef enum
+{
+    VNNCNT_REG_LSB_MODEVNN = 1
+} eVNNCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VNNCNT_REG_Content;
+    sVNNCNT_REGStructure VNNCNT_REG_Structure;
+} uVNNCNT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VNNCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VNNCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VNNCNT_REG(HWREG_U8 value); /** Get complete register VNNCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VNNCNT_REG_MODEVNN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVNN of register VNNCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VNNCNT_REG_MODEVNN(HWREG_U8 value); /**< Get element MODEVNN of register VNNCNT_REG */
+
+
+/** @brief VDD1CNT_REG register description at address offset 0x4e63
+  *
+  *  VDD1 Control Register
+  */
+typedef struct
+{
+    HWREG_U8 VDD1EN :1; /**<  */
+    HWREG_U8 MODEVDD1 :4; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sVDD1CNT_REGStructure;
+
+
+/** @brief VDD1CNT_REG Bitfield widths
+*/
+#define lenVDD1CNT_REG_VDD1EN 1
+#define lenVDD1CNT_REG_MODEVDD1 4
+
+typedef enum
+{
+    VDD1CNT_REG_LSB_VDD1EN = 0,
+    VDD1CNT_REG_LSB_MODEVDD1 = 1
+} eVDD1CNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VDD1CNT_REG_Content;
+    sVDD1CNT_REGStructure VDD1CNT_REG_Structure;
+} uVDD1CNT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD1CNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VDD1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD1CNT_REG(HWREG_U8 value); /** Get complete register VDD1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD1CNT_REG_VDD1EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDD1EN of register VDD1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD1CNT_REG_VDD1EN(HWREG_U8 value); /**< Get element VDD1EN of register VDD1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD1CNT_REG_MODEVDD1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVDD1 of register VDD1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD1CNT_REG_MODEVDD1(HWREG_U8 value); /**< Get element MODEVDD1 of register VDD1CNT_REG */
+
+
+/** @brief VDD1VSEL_REG register description at address offset 0x4e64
+  *
+  *  VDD1 Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VDD1VSEL :8; /**<  */
+} sVDD1VSEL_REGStructure;
+
+
+/** @brief VDD1VSEL_REG Bitfield widths
+*/
+#define lenVDD1VSEL_REG_VDD1VSEL 8
+
+typedef enum
+{
+    VDD1VSEL_REG_LSB_VDD1VSEL = 0
+} eVDD1VSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VDD1VSEL_REG_Content;
+    sVDD1VSEL_REGStructure VDD1VSEL_REG_Structure;
+} uVDD1VSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD1VSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VDD1VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD1VSEL_REG(HWREG_U8 value); /** Get complete register VDD1VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD1VSEL_REG_VDD1VSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDD1VSEL of register VDD1VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD1VSEL_REG_VDD1VSEL(HWREG_U8 value); /**< Get element VDD1VSEL of register VDD1VSEL_REG */
+
+
+/** @brief VDD2CNT_REG register description at address offset 0x4e65
+  *
+  *  VDD2 Control Register
+  */
+typedef struct
+{
+    HWREG_U8 VDD2EN :1; /**<  */
+    HWREG_U8 MODEVDD2 :4; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sVDD2CNT_REGStructure;
+
+
+/** @brief VDD2CNT_REG Bitfield widths
+*/
+#define lenVDD2CNT_REG_VDD2EN 1
+#define lenVDD2CNT_REG_MODEVDD2 4
+
+typedef enum
+{
+    VDD2CNT_REG_LSB_VDD2EN = 0,
+    VDD2CNT_REG_LSB_MODEVDD2 = 1
+} eVDD2CNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VDD2CNT_REG_Content;
+    sVDD2CNT_REGStructure VDD2CNT_REG_Structure;
+} uVDD2CNT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD2CNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VDD2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD2CNT_REG(HWREG_U8 value); /** Get complete register VDD2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD2CNT_REG_VDD2EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDD2EN of register VDD2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD2CNT_REG_VDD2EN(HWREG_U8 value); /**< Get element VDD2EN of register VDD2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD2CNT_REG_MODEVDD2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVDD2 of register VDD2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD2CNT_REG_MODEVDD2(HWREG_U8 value); /**< Get element MODEVDD2 of register VDD2CNT_REG */
+
+
+/** @brief VDD2VSEL_REG register description at address offset 0x4e66
+  *
+  *  VDD2 Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VDD2VSEL :8; /**<  */
+} sVDD2VSEL_REGStructure;
+
+
+/** @brief VDD2VSEL_REG Bitfield widths
+*/
+#define lenVDD2VSEL_REG_VDD2VSEL 8
+
+typedef enum
+{
+    VDD2VSEL_REG_LSB_VDD2VSEL = 0
+} eVDD2VSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VDD2VSEL_REG_Content;
+    sVDD2VSEL_REGStructure VDD2VSEL_REG_Structure;
+} uVDD2VSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD2VSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VDD2VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD2VSEL_REG(HWREG_U8 value); /** Get complete register VDD2VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD2VSEL_REG_VDD2VSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDD2VSEL of register VDD2VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD2VSEL_REG_VDD2VSEL(HWREG_U8 value); /**< Get element VDD2VSEL of register VDD2VSEL_REG */
+
+
+/** @brief VPACNT_REG register description at address offset 0x4e6d
+  *
+  *  VPA Control Register
+  */
+typedef struct
+{
+    HWREG_U8 VPAEN :1; /**<  */
+    HWREG_U8 MODEVPA :4; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sVPACNT_REGStructure;
+
+
+/** @brief VPACNT_REG Bitfield widths
+*/
+#define lenVPACNT_REG_VPAEN 1
+#define lenVPACNT_REG_MODEVPA 4
+
+typedef enum
+{
+    VPACNT_REG_LSB_VPAEN = 0,
+    VPACNT_REG_LSB_MODEVPA = 1
+} eVPACNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VPACNT_REG_Content;
+    sVPACNT_REGStructure VPACNT_REG_Structure;
+} uVPACNT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPACNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VPACNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPACNT_REG(HWREG_U8 value); /** Get complete register VPACNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPACNT_REG_VPAEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VPAEN of register VPACNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPACNT_REG_VPAEN(HWREG_U8 value); /**< Get element VPAEN of register VPACNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPACNT_REG_MODEVPA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVPA of register VPACNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPACNT_REG_MODEVPA(HWREG_U8 value); /**< Get element MODEVPA of register VPACNT_REG */
+
+
+/** @brief VPAVSEL_REG register description at address offset 0x4e6e
+  *
+  *  VPA Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VPAVSEL :8; /**<  */
+} sVPAVSEL_REGStructure;
+
+
+/** @brief VPAVSEL_REG Bitfield widths
+*/
+#define lenVPAVSEL_REG_VPAVSEL 8
+
+typedef enum
+{
+    VPAVSEL_REG_LSB_VPAVSEL = 0
+} eVPAVSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VPAVSEL_REG_Content;
+    sVPAVSEL_REGStructure VPAVSEL_REG_Structure;
+} uVPAVSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPAVSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VPAVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPAVSEL_REG(HWREG_U8 value); /** Get complete register VPAVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPAVSEL_REG_VPAVSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VPAVSEL of register VPAVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPAVSEL_REG_VPAVSEL(HWREG_U8 value); /**< Get element VPAVSEL of register VPAVSEL_REG */
+
+
+/** @brief VREFSOCCNT_REG register description at address offset 0x4e7b
+  *
+  *  VREFSOC Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVREFSOC :3; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+    HWREG_U8 VINSEL :2; /**<  */
+} sVREFSOCCNT_REGStructure;
+
+
+/** @brief VREFSOCCNT_REG Bitfield widths
+*/
+#define lenVREFSOCCNT_REG_MODEVREFSOC 3
+#define lenVREFSOCCNT_REG_VINSEL 2
+
+typedef enum
+{
+    VREFSOCCNT_REG_LSB_MODEVREFSOC = 0,
+    VREFSOCCNT_REG_LSB_VINSEL = 6
+} eVREFSOCCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VREFSOCCNT_REG_Content;
+    sVREFSOCCNT_REGStructure VREFSOCCNT_REG_Structure;
+} uVREFSOCCNT_REG;
+
+typedef enum
+{
+    VREFSOCCNT_REG_VINSEL_AHO = 0,
+    VREFSOCCNT_REG_VINSEL_VSYS = 1,
+    VREFSOCCNT_REG_VINSEL_VDDIO = 2,
+    VREFSOCCNT_REG_VINSEL_RES = 3
+} eVREFSOCCNT_REG_VINSEL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFSOCCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VREFSOCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFSOCCNT_REG(HWREG_U8 value); /** Get complete register VREFSOCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFSOCCNT_REG_MODEVREFSOC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVREFSOC of register VREFSOCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFSOCCNT_REG_MODEVREFSOC(HWREG_U8 value); /**< Get element MODEVREFSOC of register VREFSOCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFSOCCNT_REG_VINSEL(HWREG_U8 _reg, eVREFSOCCNT_REG_VINSEL value); /**< Set element VINSEL of register VREFSOCCNT_REG */
+__HWREG_INLINE__ eVREFSOCCNT_REG_VINSEL getPmic_VREFSOCCNT_REG_VINSEL(HWREG_U8 value); /**< Get element VINSEL of register VREFSOCCNT_REG */
+
+
+/** @brief VWARN1_CFG_REG register description at address offset 0x4e80
+  *
+  *  BCU VWARN1 Voltage Trip Point Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 VWARN1 :3; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sVWARN1_CFG_REGStructure;
+
+
+/** @brief VWARN1_CFG_REG Bitfield widths
+*/
+#define lenVWARN1_CFG_REG_VWARN1 3
+
+typedef enum
+{
+    VWARN1_CFG_REG_LSB_VWARN1 = 0
+} eVWARN1_CFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VWARN1_CFG_REG_Content;
+    sVWARN1_CFG_REGStructure VWARN1_CFG_REG_Structure;
+} uVWARN1_CFG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VWARN1_CFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VWARN1_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VWARN1_CFG_REG(HWREG_U8 value); /** Get complete register VWARN1_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VWARN1_CFG_REG_VWARN1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VWARN1 of register VWARN1_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VWARN1_CFG_REG_VWARN1(HWREG_U8 value); /**< Get element VWARN1 of register VWARN1_CFG_REG */
+
+
+/** @brief VWARN2_CFG_REG register description at address offset 0x4e81
+  *
+  *  BCU VWARN2 Voltage Trip Point Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 VWARN2 :3; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+    HWREG_U8 VW2_ENTRY_DG :1; /**<  */
+} sVWARN2_CFG_REGStructure;
+
+
+/** @brief VWARN2_CFG_REG Bitfield widths
+*/
+#define lenVWARN2_CFG_REG_VWARN2 3
+#define lenVWARN2_CFG_REG_VW2_ENTRY_DG 1
+
+typedef enum
+{
+    VWARN2_CFG_REG_LSB_VWARN2 = 0,
+    VWARN2_CFG_REG_LSB_VW2_ENTRY_DG = 7
+} eVWARN2_CFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VWARN2_CFG_REG_Content;
+    sVWARN2_CFG_REGStructure VWARN2_CFG_REG_Structure;
+} uVWARN2_CFG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VWARN2_CFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VWARN2_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VWARN2_CFG_REG(HWREG_U8 value); /** Get complete register VWARN2_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VWARN2_CFG_REG_VWARN2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VWARN2 of register VWARN2_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VWARN2_CFG_REG_VWARN2(HWREG_U8 value); /**< Get element VWARN2 of register VWARN2_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VWARN2_CFG_REG_VW2_ENTRY_DG(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VW2_ENTRY_DG of register VWARN2_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VWARN2_CFG_REG_VW2_ENTRY_DG(HWREG_U8 value); /**< Get element VW2_ENTRY_DG of register VWARN2_CFG_REG */
+
+
+/** @brief VCRIT_CFG_REG register description at address offset 0x4e82
+  *
+  *  VCRIT Voltage Trip Point Configuration Register for BCU
+  */
+typedef struct
+{
+    HWREG_U8 VCRIT :3; /**<  */
+    HWREG_U8 VCRIT_EN :1; /**<  */
+    HWREG_U8 VCRIT_SDWN :1; /**<  */
+    HWREG_U8 VCRIT_DB :2; /**<  */
+    HWREG_U8 VCRIT_ENTRY_DG :1; /**<  */
+} sVCRIT_CFG_REGStructure;
+
+
+/** @brief VCRIT_CFG_REG Bitfield widths
+*/
+#define lenVCRIT_CFG_REG_VCRIT 3
+#define lenVCRIT_CFG_REG_VCRIT_EN 1
+#define lenVCRIT_CFG_REG_VCRIT_SDWN 1
+#define lenVCRIT_CFG_REG_VCRIT_DB 2
+#define lenVCRIT_CFG_REG_VCRIT_ENTRY_DG 1
+
+typedef enum
+{
+    VCRIT_CFG_REG_LSB_VCRIT = 0,
+    VCRIT_CFG_REG_LSB_VCRIT_EN = 3,
+    VCRIT_CFG_REG_LSB_VCRIT_SDWN = 4,
+    VCRIT_CFG_REG_LSB_VCRIT_DB = 5,
+    VCRIT_CFG_REG_LSB_VCRIT_ENTRY_DG = 7
+} eVCRIT_CFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VCRIT_CFG_REG_Content;
+    sVCRIT_CFG_REGStructure VCRIT_CFG_REG_Structure;
+} uVCRIT_CFG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG(HWREG_U8 value); /** Get complete register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG_VCRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VCRIT of register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG_VCRIT(HWREG_U8 value); /**< Get element VCRIT of register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG_VCRIT_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VCRIT_EN of register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG_VCRIT_EN(HWREG_U8 value); /**< Get element VCRIT_EN of register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG_VCRIT_SDWN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VCRIT_SDWN of register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG_VCRIT_SDWN(HWREG_U8 value); /**< Get element VCRIT_SDWN of register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG_VCRIT_DB(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VCRIT_DB of register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG_VCRIT_DB(HWREG_U8 value); /**< Get element VCRIT_DB of register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG_VCRIT_ENTRY_DG(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VCRIT_ENTRY_DG of register VCRIT_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG_VCRIT_ENTRY_DG(HWREG_U8 value); /**< Get element VCRIT_ENTRY_DG of register VCRIT_CFG_REG */
+
+
+/** @brief BCUDISCRIT_BEH_REG register description at address offset 0x4e84
+  *
+  *  BCUDISCRIT Behavior Register
+  */
+typedef struct
+{
+    HWREG_U8 BCUDISCRIT_EN :1; /**<  */
+    HWREG_U8 BCUDISCRIT_POL :1; /**<  */
+    HWREG_U8 BCUDISCRIT_STICKY :1; /**<  */
+    HWREG_U8 BCUSENS_SEL :1; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sBCUDISCRIT_BEH_REGStructure;
+
+
+/** @brief BCUDISCRIT_BEH_REG Bitfield widths
+*/
+#define lenBCUDISCRIT_BEH_REG_BCUDISCRIT_EN 1
+#define lenBCUDISCRIT_BEH_REG_BCUDISCRIT_POL 1
+#define lenBCUDISCRIT_BEH_REG_BCUDISCRIT_STICKY 1
+#define lenBCUDISCRIT_BEH_REG_BCUSENS_SEL 1
+
+typedef enum
+{
+    BCUDISCRIT_BEH_REG_LSB_BCUDISCRIT_EN = 0,
+    BCUDISCRIT_BEH_REG_LSB_BCUDISCRIT_POL = 1,
+    BCUDISCRIT_BEH_REG_LSB_BCUDISCRIT_STICKY = 2,
+    BCUDISCRIT_BEH_REG_LSB_BCUSENS_SEL = 3
+} eBCUDISCRIT_BEH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BCUDISCRIT_BEH_REG_Content;
+    sBCUDISCRIT_BEH_REGStructure BCUDISCRIT_BEH_REG_Structure;
+} uBCUDISCRIT_BEH_REG;
+
+typedef enum
+{
+    BCUDISCRIT_BEH_REG_BCUSENS_SEL_SVSYS = 0,
+    BCUDISCRIT_BEH_REG_BCUSENS_SEL_SVBATT = 1
+} eBCUDISCRIT_BEH_REG_BCUSENS_SEL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUDISCRIT_BEH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BCUDISCRIT_BEH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUDISCRIT_BEH_REG(HWREG_U8 value); /** Get complete register BCUDISCRIT_BEH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BCUDISCRIT_EN of register BCUDISCRIT_BEH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_EN(HWREG_U8 value); /**< Get element BCUDISCRIT_EN of register BCUDISCRIT_BEH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_POL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BCUDISCRIT_POL of register BCUDISCRIT_BEH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_POL(HWREG_U8 value); /**< Get element BCUDISCRIT_POL of register BCUDISCRIT_BEH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_STICKY(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BCUDISCRIT_STICKY of register BCUDISCRIT_BEH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_STICKY(HWREG_U8 value); /**< Get element BCUDISCRIT_STICKY of register BCUDISCRIT_BEH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUDISCRIT_BEH_REG_BCUSENS_SEL(HWREG_U8 _reg, eBCUDISCRIT_BEH_REG_BCUSENS_SEL value); /**< Set element BCUSENS_SEL of register BCUDISCRIT_BEH_REG */
+__HWREG_INLINE__ eBCUDISCRIT_BEH_REG_BCUSENS_SEL getPmic_BCUDISCRIT_BEH_REG_BCUSENS_SEL(HWREG_U8 value); /**< Get element BCUSENS_SEL of register BCUDISCRIT_BEH_REG */
+
+
+/** @brief S_BCUIRQ_REG register description at address offset 0x4e8b
+  *
+  *  BCU Interrupt Flags Status Register
+  */
+typedef struct
+{
+    const HWREG_U8 S_VWARN1 :1; /**<  */
+    const HWREG_U8 S_VWARN2 :1; /**<  */
+    const HWREG_U8 S_VCRIT :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sS_BCUIRQ_REGStructure;
+
+
+/** @brief S_BCUIRQ_REG Bitfield widths
+*/
+#define lenS_BCUIRQ_REG_S_VWARN1 1
+#define lenS_BCUIRQ_REG_S_VWARN2 1
+#define lenS_BCUIRQ_REG_S_VCRIT 1
+
+typedef enum
+{
+    S_BCUIRQ_REG_LSB_S_VWARN1 = 0,
+    S_BCUIRQ_REG_LSB_S_VWARN2 = 1,
+    S_BCUIRQ_REG_LSB_S_VCRIT = 2
+} eS_BCUIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 S_BCUIRQ_REG_Content;
+    sS_BCUIRQ_REGStructure S_BCUIRQ_REG_Structure;
+} uS_BCUIRQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUIRQ_REG(HWREG_U8 value); /** Get complete register S_BCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUIRQ_REG_S_VWARN1(HWREG_U8 value); /**< Get element S_VWARN1 of register S_BCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUIRQ_REG_S_VWARN2(HWREG_U8 value); /**< Get element S_VWARN2 of register S_BCUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUIRQ_REG_S_VCRIT(HWREG_U8 value); /**< Get element S_VCRIT of register S_BCUIRQ_REG */
+
+
+/** @brief S_BCUCTRL_REG register description at address offset 0x4e8c
+  *
+  *  BCU Output Control Status Register
+  */
+typedef struct
+{
+    HWREG_U8 S_BCUDISCRIT :1; /**<  */
+    const HWREG_U8 :7; /**< Unused bitfield */
+} sS_BCUCTRL_REGStructure;
+
+
+/** @brief S_BCUCTRL_REG Bitfield widths
+*/
+#define lenS_BCUCTRL_REG_S_BCUDISCRIT 1
+
+typedef enum
+{
+    S_BCUCTRL_REG_LSB_S_BCUDISCRIT = 0
+} eS_BCUCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 S_BCUCTRL_REG_Content;
+    sS_BCUCTRL_REGStructure S_BCUCTRL_REG_Structure;
+} uS_BCUCTRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_S_BCUCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register S_BCUCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUCTRL_REG(HWREG_U8 value); /** Get complete register S_BCUCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_S_BCUCTRL_REG_S_BCUDISCRIT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element S_BCUDISCRIT of register S_BCUCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUCTRL_REG_S_BCUDISCRIT(HWREG_U8 value); /**< Get element S_BCUDISCRIT of register S_BCUCTRL_REG */
+
+
+/** @brief ICCMAXVSYS_CFG_REG register description at address offset 0x4e8d
+  *
+  *  IccMAXVSYS Voltage Trip Point Configuration Register for BCU
+  */
+typedef struct
+{
+    HWREG_U8 ICCMAXVSYS_VW1_EN :1; /**<  */
+    HWREG_U8 ICCMAXVSYS_VW2_EN :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sICCMAXVSYS_CFG_REGStructure;
+
+
+/** @brief ICCMAXVSYS_CFG_REG Bitfield widths
+*/
+#define lenICCMAXVSYS_CFG_REG_ICCMAXVSYS_VW1_EN 1
+#define lenICCMAXVSYS_CFG_REG_ICCMAXVSYS_VW2_EN 1
+
+typedef enum
+{
+    ICCMAXVSYS_CFG_REG_LSB_ICCMAXVSYS_VW1_EN = 0,
+    ICCMAXVSYS_CFG_REG_LSB_ICCMAXVSYS_VW2_EN = 1
+} eICCMAXVSYS_CFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 ICCMAXVSYS_CFG_REG_Content;
+    sICCMAXVSYS_CFG_REGStructure ICCMAXVSYS_CFG_REG_Structure;
+} uICCMAXVSYS_CFG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVSYS_CFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register ICCMAXVSYS_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVSYS_CFG_REG(HWREG_U8 value); /** Get complete register ICCMAXVSYS_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVSYS_CFG_REG_ICCMAXVSYS_VW1_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ICCMAXVSYS_VW1_EN of register ICCMAXVSYS_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVSYS_CFG_REG_ICCMAXVSYS_VW1_EN(HWREG_U8 value); /**< Get element ICCMAXVSYS_VW1_EN of register ICCMAXVSYS_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVSYS_CFG_REG_ICCMAXVSYS_VW2_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ICCMAXVSYS_VW2_EN of register ICCMAXVSYS_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVSYS_CFG_REG_ICCMAXVSYS_VW2_EN(HWREG_U8 value); /**< Get element ICCMAXVSYS_VW2_EN of register ICCMAXVSYS_CFG_REG */
+
+
+/** @brief ICCMAXVCC_CFG_REG register description at address offset 0x4e8e
+  *
+  *  IccMAXVCC Current Trip Point Configuration Register for BCU
+  */
+typedef struct
+{
+    HWREG_U8 ICCMAXVCC :3; /**<  */
+    HWREG_U8 ICCMAXVCC_DB :3; /**<  */
+    HWREG_U8 ICCMAXVCC_EN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sICCMAXVCC_CFG_REGStructure;
+
+
+/** @brief ICCMAXVCC_CFG_REG Bitfield widths
+*/
+#define lenICCMAXVCC_CFG_REG_ICCMAXVCC 3
+#define lenICCMAXVCC_CFG_REG_ICCMAXVCC_DB 3
+#define lenICCMAXVCC_CFG_REG_ICCMAXVCC_EN 1
+
+typedef enum
+{
+    ICCMAXVCC_CFG_REG_LSB_ICCMAXVCC = 0,
+    ICCMAXVCC_CFG_REG_LSB_ICCMAXVCC_DB = 3,
+    ICCMAXVCC_CFG_REG_LSB_ICCMAXVCC_EN = 6
+} eICCMAXVCC_CFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 ICCMAXVCC_CFG_REG_Content;
+    sICCMAXVCC_CFG_REGStructure ICCMAXVCC_CFG_REG_Structure;
+} uICCMAXVCC_CFG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVCC_CFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register ICCMAXVCC_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVCC_CFG_REG(HWREG_U8 value); /** Get complete register ICCMAXVCC_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ICCMAXVCC of register ICCMAXVCC_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC(HWREG_U8 value); /**< Get element ICCMAXVCC of register ICCMAXVCC_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC_DB(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ICCMAXVCC_DB of register ICCMAXVCC_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC_DB(HWREG_U8 value); /**< Get element ICCMAXVCC_DB of register ICCMAXVCC_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ICCMAXVCC_EN of register ICCMAXVCC_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC_EN(HWREG_U8 value); /**< Get element ICCMAXVCC_EN of register ICCMAXVCC_CFG_REG */
+
+
+/** @brief ICCMAXVNN_CFG_REG register description at address offset 0x4e90
+  *
+  *  IccMAXVNN Current Trip Point Configuration Register for BCU
+  */
+typedef struct
+{
+    HWREG_U8 ICCMAXVNN :4; /**<  */
+    HWREG_U8 ICCMAXVNN_DB :3; /**<  */
+    HWREG_U8 ICCMAXVNN_EN :1; /**<  */
+} sICCMAXVNN_CFG_REGStructure;
+
+
+/** @brief ICCMAXVNN_CFG_REG Bitfield widths
+*/
+#define lenICCMAXVNN_CFG_REG_ICCMAXVNN 4
+#define lenICCMAXVNN_CFG_REG_ICCMAXVNN_DB 3
+#define lenICCMAXVNN_CFG_REG_ICCMAXVNN_EN 1
+
+typedef enum
+{
+    ICCMAXVNN_CFG_REG_LSB_ICCMAXVNN = 0,
+    ICCMAXVNN_CFG_REG_LSB_ICCMAXVNN_DB = 4,
+    ICCMAXVNN_CFG_REG_LSB_ICCMAXVNN_EN = 7
+} eICCMAXVNN_CFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 ICCMAXVNN_CFG_REG_Content;
+    sICCMAXVNN_CFG_REGStructure ICCMAXVNN_CFG_REG_Structure;
+} uICCMAXVNN_CFG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVNN_CFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register ICCMAXVNN_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVNN_CFG_REG(HWREG_U8 value); /** Get complete register ICCMAXVNN_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ICCMAXVNN of register ICCMAXVNN_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN(HWREG_U8 value); /**< Get element ICCMAXVNN of register ICCMAXVNN_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN_DB(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ICCMAXVNN_DB of register ICCMAXVNN_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN_DB(HWREG_U8 value); /**< Get element ICCMAXVNN_DB of register ICCMAXVNN_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ICCMAXVNN_EN of register ICCMAXVNN_CFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN_EN(HWREG_U8 value); /**< Get element ICCMAXVNN_EN of register ICCMAXVNN_CFG_REG */
+
+
+/** @brief SOCWDTCFG_REG register description at address offset 0x4e92
+  *
+  *  SOC Watchdog Timer Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 SOCWDTACT :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sSOCWDTCFG_REGStructure;
+
+
+/** @brief SOCWDTCFG_REG Bitfield widths
+*/
+#define lenSOCWDTCFG_REG_SOCWDTACT 2
+
+typedef enum
+{
+    SOCWDTCFG_REG_LSB_SOCWDTACT = 0
+} eSOCWDTCFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SOCWDTCFG_REG_Content;
+    sSOCWDTCFG_REGStructure SOCWDTCFG_REG_Structure;
+} uSOCWDTCFG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SOCWDTCFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SOCWDTCFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SOCWDTCFG_REG(HWREG_U8 value); /** Get complete register SOCWDTCFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SOCWDTCFG_REG_SOCWDTACT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SOCWDTACT of register SOCWDTCFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SOCWDTCFG_REG_SOCWDTACT(HWREG_U8 value); /**< Get element SOCWDTACT of register SOCWDTCFG_REG */
+
+
+/** @brief VLDOCNT_REG register description at address offset 0x4ea1
+  *
+  *  Miscellaneous LDO Control Register
+  */
+typedef struct
+{
+    HWREG_U8 VREFSOCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 VPMIC_IN_SEL :2; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+    HWREG_U8 MODEVPMIC :2; /**<  */
+} sVLDOCNT_REGStructure;
+
+
+/** @brief VLDOCNT_REG Bitfield widths
+*/
+#define lenVLDOCNT_REG_VREFSOCEN 1
+#define lenVLDOCNT_REG_VPMIC_IN_SEL 2
+#define lenVLDOCNT_REG_MODEVPMIC 2
+
+typedef enum
+{
+    VLDOCNT_REG_LSB_VREFSOCEN = 0,
+    VLDOCNT_REG_LSB_VPMIC_IN_SEL = 2,
+    VLDOCNT_REG_LSB_MODEVPMIC = 6
+} eVLDOCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VLDOCNT_REG_Content;
+    sVLDOCNT_REGStructure VLDOCNT_REG_Structure;
+} uVLDOCNT_REG;
+
+typedef enum
+{
+    VLDOCNT_REG_VREFSOCEN_DIS = 0,
+    VLDOCNT_REG_VREFSOCEN_EN = 1
+} eVLDOCNT_REG_VREFSOCEN;
+
+typedef enum
+{
+    VLDOCNT_REG_VPMIC_IN_SEL_AHO = 0,
+    VLDOCNT_REG_VPMIC_IN_SEL_VSYS = 1,
+    VLDOCNT_REG_VPMIC_IN_SEL_VDDIO = 2,
+    VLDOCNT_REG_VPMIC_IN_SEL_RES = 3
+} eVLDOCNT_REG_VPMIC_IN_SEL;
+
+typedef enum
+{
+    VLDOCNT_REG_MODEVPMIC_AUTO = 0,
+    VLDOCNT_REG_MODEVPMIC_NORMAL = 1,
+    VLDOCNT_REG_MODEVPMIC_ECO = 2,
+    VLDOCNT_REG_MODEVPMIC_RESERVED = 3
+} eVLDOCNT_REG_MODEVPMIC;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VLDOCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VLDOCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VLDOCNT_REG(HWREG_U8 value); /** Get complete register VLDOCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VLDOCNT_REG_VREFSOCEN(HWREG_U8 _reg, eVLDOCNT_REG_VREFSOCEN value); /**< Set element VREFSOCEN of register VLDOCNT_REG */
+__HWREG_INLINE__ eVLDOCNT_REG_VREFSOCEN getPmic_VLDOCNT_REG_VREFSOCEN(HWREG_U8 value); /**< Get element VREFSOCEN of register VLDOCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VLDOCNT_REG_VPMIC_IN_SEL(HWREG_U8 _reg, eVLDOCNT_REG_VPMIC_IN_SEL value); /**< Set element VPMIC_IN_SEL of register VLDOCNT_REG */
+__HWREG_INLINE__ eVLDOCNT_REG_VPMIC_IN_SEL getPmic_VLDOCNT_REG_VPMIC_IN_SEL(HWREG_U8 value); /**< Get element VPMIC_IN_SEL of register VLDOCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VLDOCNT_REG_MODEVPMIC(HWREG_U8 _reg, eVLDOCNT_REG_MODEVPMIC value); /**< Set element MODEVPMIC of register VLDOCNT_REG */
+__HWREG_INLINE__ eVLDOCNT_REG_MODEVPMIC getPmic_VLDOCNT_REG_MODEVPMIC(HWREG_U8 value); /**< Get element MODEVPMIC of register VLDOCNT_REG */
+
+
+/** @brief VPROG1CNT_REG register description at address offset 0x4ea2
+  *
+  *  VPROG1 Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVPROG1 :3; /**<  */
+    HWREG_U8 VPROG1DIS_PLD :1; /**<  */
+    HWREG_U8 VPROG1FASTSTUP :1; /**<  */
+    HWREG_U8 VPROG1RMTCAP :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVPROG1CNT_REGStructure;
+
+
+/** @brief VPROG1CNT_REG Bitfield widths
+*/
+#define lenVPROG1CNT_REG_MODEVPROG1 3
+#define lenVPROG1CNT_REG_VPROG1DIS_PLD 1
+#define lenVPROG1CNT_REG_VPROG1FASTSTUP 1
+#define lenVPROG1CNT_REG_VPROG1RMTCAP 1
+
+typedef enum
+{
+    VPROG1CNT_REG_LSB_MODEVPROG1 = 0,
+    VPROG1CNT_REG_LSB_VPROG1DIS_PLD = 3,
+    VPROG1CNT_REG_LSB_VPROG1FASTSTUP = 4,
+    VPROG1CNT_REG_LSB_VPROG1RMTCAP = 5
+} eVPROG1CNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VPROG1CNT_REG_Content;
+    sVPROG1CNT_REGStructure VPROG1CNT_REG_Structure;
+} uVPROG1CNT_REG;
+
+typedef enum
+{
+    VPROG1CNT_REG_VPROG1DIS_PLD_EN = 0,
+    VPROG1CNT_REG_VPROG1DIS_PLD_DIS = 1
+} eVPROG1CNT_REG_VPROG1DIS_PLD;
+
+typedef enum
+{
+    VPROG1CNT_REG_VPROG1FASTSTUP_SOFT = 0,
+    VPROG1CNT_REG_VPROG1FASTSTUP_FAST = 1
+} eVPROG1CNT_REG_VPROG1FASTSTUP;
+
+typedef enum
+{
+    VPROG1CNT_REG_VPROG1RMTCAP_LOCAL = 0,
+    VPROG1CNT_REG_VPROG1RMTCAP_REMOTE = 1
+} eVPROG1CNT_REG_VPROG1RMTCAP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1CNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VPROG1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG1CNT_REG(HWREG_U8 value); /** Get complete register VPROG1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1CNT_REG_MODEVPROG1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVPROG1 of register VPROG1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG1CNT_REG_MODEVPROG1(HWREG_U8 value); /**< Get element MODEVPROG1 of register VPROG1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1CNT_REG_VPROG1DIS_PLD(HWREG_U8 _reg, eVPROG1CNT_REG_VPROG1DIS_PLD value); /**< Set element VPROG1DIS_PLD of register VPROG1CNT_REG */
+__HWREG_INLINE__ eVPROG1CNT_REG_VPROG1DIS_PLD getPmic_VPROG1CNT_REG_VPROG1DIS_PLD(HWREG_U8 value); /**< Get element VPROG1DIS_PLD of register VPROG1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1CNT_REG_VPROG1FASTSTUP(HWREG_U8 _reg, eVPROG1CNT_REG_VPROG1FASTSTUP value); /**< Set element VPROG1FASTSTUP of register VPROG1CNT_REG */
+__HWREG_INLINE__ eVPROG1CNT_REG_VPROG1FASTSTUP getPmic_VPROG1CNT_REG_VPROG1FASTSTUP(HWREG_U8 value); /**< Get element VPROG1FASTSTUP of register VPROG1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1CNT_REG_VPROG1RMTCAP(HWREG_U8 _reg, eVPROG1CNT_REG_VPROG1RMTCAP value); /**< Set element VPROG1RMTCAP of register VPROG1CNT_REG */
+__HWREG_INLINE__ eVPROG1CNT_REG_VPROG1RMTCAP getPmic_VPROG1CNT_REG_VPROG1RMTCAP(HWREG_U8 value); /**< Get element VPROG1RMTCAP of register VPROG1CNT_REG */
+
+
+/** @brief VPROG2CNT_REG register description at address offset 0x4ea3
+  *
+  *  VPROG2 Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVPROG2 :3; /**<  */
+    HWREG_U8 VPROG2DIS_PLD :1; /**<  */
+    HWREG_U8 VPROG2FASTSTUP :1; /**<  */
+    HWREG_U8 VPROG2RMTCAP :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVPROG2CNT_REGStructure;
+
+
+/** @brief VPROG2CNT_REG Bitfield widths
+*/
+#define lenVPROG2CNT_REG_MODEVPROG2 3
+#define lenVPROG2CNT_REG_VPROG2DIS_PLD 1
+#define lenVPROG2CNT_REG_VPROG2FASTSTUP 1
+#define lenVPROG2CNT_REG_VPROG2RMTCAP 1
+
+typedef enum
+{
+    VPROG2CNT_REG_LSB_MODEVPROG2 = 0,
+    VPROG2CNT_REG_LSB_VPROG2DIS_PLD = 3,
+    VPROG2CNT_REG_LSB_VPROG2FASTSTUP = 4,
+    VPROG2CNT_REG_LSB_VPROG2RMTCAP = 5
+} eVPROG2CNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VPROG2CNT_REG_Content;
+    sVPROG2CNT_REGStructure VPROG2CNT_REG_Structure;
+} uVPROG2CNT_REG;
+
+typedef enum
+{
+    VPROG2CNT_REG_VPROG2DIS_PLD_EN = 0,
+    VPROG2CNT_REG_VPROG2DIS_PLD_DIS = 1
+} eVPROG2CNT_REG_VPROG2DIS_PLD;
+
+typedef enum
+{
+    VPROG2CNT_REG_VPROG2FASTSTUP_SOFT = 0,
+    VPROG2CNT_REG_VPROG2FASTSTUP_FAST = 1
+} eVPROG2CNT_REG_VPROG2FASTSTUP;
+
+typedef enum
+{
+    VPROG2CNT_REG_VPROG2RMTCAP_LOCAL = 0,
+    VPROG2CNT_REG_VPROG2RMTCAP_REMOTE = 1
+} eVPROG2CNT_REG_VPROG2RMTCAP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2CNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VPROG2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG2CNT_REG(HWREG_U8 value); /** Get complete register VPROG2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2CNT_REG_MODEVPROG2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVPROG2 of register VPROG2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG2CNT_REG_MODEVPROG2(HWREG_U8 value); /**< Get element MODEVPROG2 of register VPROG2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2CNT_REG_VPROG2DIS_PLD(HWREG_U8 _reg, eVPROG2CNT_REG_VPROG2DIS_PLD value); /**< Set element VPROG2DIS_PLD of register VPROG2CNT_REG */
+__HWREG_INLINE__ eVPROG2CNT_REG_VPROG2DIS_PLD getPmic_VPROG2CNT_REG_VPROG2DIS_PLD(HWREG_U8 value); /**< Get element VPROG2DIS_PLD of register VPROG2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2CNT_REG_VPROG2FASTSTUP(HWREG_U8 _reg, eVPROG2CNT_REG_VPROG2FASTSTUP value); /**< Set element VPROG2FASTSTUP of register VPROG2CNT_REG */
+__HWREG_INLINE__ eVPROG2CNT_REG_VPROG2FASTSTUP getPmic_VPROG2CNT_REG_VPROG2FASTSTUP(HWREG_U8 value); /**< Get element VPROG2FASTSTUP of register VPROG2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2CNT_REG_VPROG2RMTCAP(HWREG_U8 _reg, eVPROG2CNT_REG_VPROG2RMTCAP value); /**< Set element VPROG2RMTCAP of register VPROG2CNT_REG */
+__HWREG_INLINE__ eVPROG2CNT_REG_VPROG2RMTCAP getPmic_VPROG2CNT_REG_VPROG2RMTCAP(HWREG_U8 value); /**< Get element VPROG2RMTCAP of register VPROG2CNT_REG */
+
+
+/** @brief VPROG3CNT_REG register description at address offset 0x4ea4
+  *
+  *  VPROG3 Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVPROG3 :3; /**<  */
+    HWREG_U8 VPROG3DIS_PLD :1; /**<  */
+    HWREG_U8 VPROG3FASTSTUP :1; /**<  */
+    HWREG_U8 VPROG3RMTCAP :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVPROG3CNT_REGStructure;
+
+
+/** @brief VPROG3CNT_REG Bitfield widths
+*/
+#define lenVPROG3CNT_REG_MODEVPROG3 3
+#define lenVPROG3CNT_REG_VPROG3DIS_PLD 1
+#define lenVPROG3CNT_REG_VPROG3FASTSTUP 1
+#define lenVPROG3CNT_REG_VPROG3RMTCAP 1
+
+typedef enum
+{
+    VPROG3CNT_REG_LSB_MODEVPROG3 = 0,
+    VPROG3CNT_REG_LSB_VPROG3DIS_PLD = 3,
+    VPROG3CNT_REG_LSB_VPROG3FASTSTUP = 4,
+    VPROG3CNT_REG_LSB_VPROG3RMTCAP = 5
+} eVPROG3CNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VPROG3CNT_REG_Content;
+    sVPROG3CNT_REGStructure VPROG3CNT_REG_Structure;
+} uVPROG3CNT_REG;
+
+typedef enum
+{
+    VPROG3CNT_REG_VPROG3DIS_PLD_EN = 0,
+    VPROG3CNT_REG_VPROG3DIS_PLD_DIS = 1
+} eVPROG3CNT_REG_VPROG3DIS_PLD;
+
+typedef enum
+{
+    VPROG3CNT_REG_VPROG3FASTSTUP_SOFT = 0,
+    VPROG3CNT_REG_VPROG3FASTSTUP_FAST = 1
+} eVPROG3CNT_REG_VPROG3FASTSTUP;
+
+typedef enum
+{
+    VPROG3CNT_REG_VPROG3RMTCAP_LOCAL = 0,
+    VPROG3CNT_REG_VPROG3RMTCAP_REMOTE = 1
+} eVPROG3CNT_REG_VPROG3RMTCAP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3CNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VPROG3CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG3CNT_REG(HWREG_U8 value); /** Get complete register VPROG3CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3CNT_REG_MODEVPROG3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVPROG3 of register VPROG3CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG3CNT_REG_MODEVPROG3(HWREG_U8 value); /**< Get element MODEVPROG3 of register VPROG3CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3CNT_REG_VPROG3DIS_PLD(HWREG_U8 _reg, eVPROG3CNT_REG_VPROG3DIS_PLD value); /**< Set element VPROG3DIS_PLD of register VPROG3CNT_REG */
+__HWREG_INLINE__ eVPROG3CNT_REG_VPROG3DIS_PLD getPmic_VPROG3CNT_REG_VPROG3DIS_PLD(HWREG_U8 value); /**< Get element VPROG3DIS_PLD of register VPROG3CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3CNT_REG_VPROG3FASTSTUP(HWREG_U8 _reg, eVPROG3CNT_REG_VPROG3FASTSTUP value); /**< Set element VPROG3FASTSTUP of register VPROG3CNT_REG */
+__HWREG_INLINE__ eVPROG3CNT_REG_VPROG3FASTSTUP getPmic_VPROG3CNT_REG_VPROG3FASTSTUP(HWREG_U8 value); /**< Get element VPROG3FASTSTUP of register VPROG3CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3CNT_REG_VPROG3RMTCAP(HWREG_U8 _reg, eVPROG3CNT_REG_VPROG3RMTCAP value); /**< Set element VPROG3RMTCAP of register VPROG3CNT_REG */
+__HWREG_INLINE__ eVPROG3CNT_REG_VPROG3RMTCAP getPmic_VPROG3CNT_REG_VPROG3RMTCAP(HWREG_U8 value); /**< Get element VPROG3RMTCAP of register VPROG3CNT_REG */
+
+
+/** @brief VUSBCNT_REG register description at address offset 0x4ea5
+  *
+  *  VUSB Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVUSB :3; /**<  */
+    HWREG_U8 VUSBDIS_PLD :1; /**<  */
+    HWREG_U8 VUSBFASTSTUP :1; /**<  */
+    HWREG_U8 VUSBRMTCAP :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVUSBCNT_REGStructure;
+
+
+/** @brief VUSBCNT_REG Bitfield widths
+*/
+#define lenVUSBCNT_REG_MODEVUSB 3
+#define lenVUSBCNT_REG_VUSBDIS_PLD 1
+#define lenVUSBCNT_REG_VUSBFASTSTUP 1
+#define lenVUSBCNT_REG_VUSBRMTCAP 1
+
+typedef enum
+{
+    VUSBCNT_REG_LSB_MODEVUSB = 0,
+    VUSBCNT_REG_LSB_VUSBDIS_PLD = 3,
+    VUSBCNT_REG_LSB_VUSBFASTSTUP = 4,
+    VUSBCNT_REG_LSB_VUSBRMTCAP = 5
+} eVUSBCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VUSBCNT_REG_Content;
+    sVUSBCNT_REGStructure VUSBCNT_REG_Structure;
+} uVUSBCNT_REG;
+
+typedef enum
+{
+    VUSBCNT_REG_VUSBDIS_PLD_EN = 0,
+    VUSBCNT_REG_VUSBDIS_PLD_DIS = 1
+} eVUSBCNT_REG_VUSBDIS_PLD;
+
+typedef enum
+{
+    VUSBCNT_REG_VUSBFASTSTUP_SOFT = 0,
+    VUSBCNT_REG_VUSBFASTSTUP_FAST = 1
+} eVUSBCNT_REG_VUSBFASTSTUP;
+
+typedef enum
+{
+    VUSBCNT_REG_VUSBRMTCAP_LOCAL = 0,
+    VUSBCNT_REG_VUSBRMTCAP_REMOTE = 1
+} eVUSBCNT_REG_VUSBRMTCAP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VUSBCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VUSBCNT_REG(HWREG_U8 value); /** Get complete register VUSBCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBCNT_REG_MODEVUSB(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVUSB of register VUSBCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VUSBCNT_REG_MODEVUSB(HWREG_U8 value); /**< Get element MODEVUSB of register VUSBCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBCNT_REG_VUSBDIS_PLD(HWREG_U8 _reg, eVUSBCNT_REG_VUSBDIS_PLD value); /**< Set element VUSBDIS_PLD of register VUSBCNT_REG */
+__HWREG_INLINE__ eVUSBCNT_REG_VUSBDIS_PLD getPmic_VUSBCNT_REG_VUSBDIS_PLD(HWREG_U8 value); /**< Get element VUSBDIS_PLD of register VUSBCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBCNT_REG_VUSBFASTSTUP(HWREG_U8 _reg, eVUSBCNT_REG_VUSBFASTSTUP value); /**< Set element VUSBFASTSTUP of register VUSBCNT_REG */
+__HWREG_INLINE__ eVUSBCNT_REG_VUSBFASTSTUP getPmic_VUSBCNT_REG_VUSBFASTSTUP(HWREG_U8 value); /**< Get element VUSBFASTSTUP of register VUSBCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBCNT_REG_VUSBRMTCAP(HWREG_U8 _reg, eVUSBCNT_REG_VUSBRMTCAP value); /**< Set element VUSBRMTCAP of register VUSBCNT_REG */
+__HWREG_INLINE__ eVUSBCNT_REG_VUSBRMTCAP getPmic_VUSBCNT_REG_VUSBRMTCAP(HWREG_U8 value); /**< Get element VUSBRMTCAP of register VUSBCNT_REG */
+
+
+/** @brief VSIM1CNT_REG register description at address offset 0x4ea6
+  *
+  *  VSIM1 Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVSIM1 :3; /**<  */
+    HWREG_U8 VSIM1DIS_PLD :1; /**<  */
+    HWREG_U8 VSIM1FASTSTUP :1; /**<  */
+    HWREG_U8 VSIM1RMTCAP :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVSIM1CNT_REGStructure;
+
+
+/** @brief VSIM1CNT_REG Bitfield widths
+*/
+#define lenVSIM1CNT_REG_MODEVSIM1 3
+#define lenVSIM1CNT_REG_VSIM1DIS_PLD 1
+#define lenVSIM1CNT_REG_VSIM1FASTSTUP 1
+#define lenVSIM1CNT_REG_VSIM1RMTCAP 1
+
+typedef enum
+{
+    VSIM1CNT_REG_LSB_MODEVSIM1 = 0,
+    VSIM1CNT_REG_LSB_VSIM1DIS_PLD = 3,
+    VSIM1CNT_REG_LSB_VSIM1FASTSTUP = 4,
+    VSIM1CNT_REG_LSB_VSIM1RMTCAP = 5
+} eVSIM1CNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VSIM1CNT_REG_Content;
+    sVSIM1CNT_REGStructure VSIM1CNT_REG_Structure;
+} uVSIM1CNT_REG;
+
+typedef enum
+{
+    VSIM1CNT_REG_VSIM1DIS_PLD_EN = 0,
+    VSIM1CNT_REG_VSIM1DIS_PLD_DIS = 1
+} eVSIM1CNT_REG_VSIM1DIS_PLD;
+
+typedef enum
+{
+    VSIM1CNT_REG_VSIM1FASTSTUP_SOFT = 0,
+    VSIM1CNT_REG_VSIM1FASTSTUP_FAST = 1
+} eVSIM1CNT_REG_VSIM1FASTSTUP;
+
+typedef enum
+{
+    VSIM1CNT_REG_VSIM1RMTCAP_LOCAL = 0,
+    VSIM1CNT_REG_VSIM1RMTCAP_REMOTE = 1
+} eVSIM1CNT_REG_VSIM1RMTCAP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1CNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VSIM1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM1CNT_REG(HWREG_U8 value); /** Get complete register VSIM1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1CNT_REG_MODEVSIM1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVSIM1 of register VSIM1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM1CNT_REG_MODEVSIM1(HWREG_U8 value); /**< Get element MODEVSIM1 of register VSIM1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1CNT_REG_VSIM1DIS_PLD(HWREG_U8 _reg, eVSIM1CNT_REG_VSIM1DIS_PLD value); /**< Set element VSIM1DIS_PLD of register VSIM1CNT_REG */
+__HWREG_INLINE__ eVSIM1CNT_REG_VSIM1DIS_PLD getPmic_VSIM1CNT_REG_VSIM1DIS_PLD(HWREG_U8 value); /**< Get element VSIM1DIS_PLD of register VSIM1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1CNT_REG_VSIM1FASTSTUP(HWREG_U8 _reg, eVSIM1CNT_REG_VSIM1FASTSTUP value); /**< Set element VSIM1FASTSTUP of register VSIM1CNT_REG */
+__HWREG_INLINE__ eVSIM1CNT_REG_VSIM1FASTSTUP getPmic_VSIM1CNT_REG_VSIM1FASTSTUP(HWREG_U8 value); /**< Get element VSIM1FASTSTUP of register VSIM1CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1CNT_REG_VSIM1RMTCAP(HWREG_U8 _reg, eVSIM1CNT_REG_VSIM1RMTCAP value); /**< Set element VSIM1RMTCAP of register VSIM1CNT_REG */
+__HWREG_INLINE__ eVSIM1CNT_REG_VSIM1RMTCAP getPmic_VSIM1CNT_REG_VSIM1RMTCAP(HWREG_U8 value); /**< Get element VSIM1RMTCAP of register VSIM1CNT_REG */
+
+
+/** @brief VSIM2CNT_REG register description at address offset 0x4ea7
+  *
+  *  VSIM2 Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVSIM2 :3; /**<  */
+    HWREG_U8 VSIM2DIS_PLD :1; /**<  */
+    HWREG_U8 VSIM2FASTSTUP :1; /**<  */
+    HWREG_U8 VSIM2RMTCAP :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVSIM2CNT_REGStructure;
+
+
+/** @brief VSIM2CNT_REG Bitfield widths
+*/
+#define lenVSIM2CNT_REG_MODEVSIM2 3
+#define lenVSIM2CNT_REG_VSIM2DIS_PLD 1
+#define lenVSIM2CNT_REG_VSIM2FASTSTUP 1
+#define lenVSIM2CNT_REG_VSIM2RMTCAP 1
+
+typedef enum
+{
+    VSIM2CNT_REG_LSB_MODEVSIM2 = 0,
+    VSIM2CNT_REG_LSB_VSIM2DIS_PLD = 3,
+    VSIM2CNT_REG_LSB_VSIM2FASTSTUP = 4,
+    VSIM2CNT_REG_LSB_VSIM2RMTCAP = 5
+} eVSIM2CNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VSIM2CNT_REG_Content;
+    sVSIM2CNT_REGStructure VSIM2CNT_REG_Structure;
+} uVSIM2CNT_REG;
+
+typedef enum
+{
+    VSIM2CNT_REG_VSIM2DIS_PLD_EN = 0,
+    VSIM2CNT_REG_VSIM2DIS_PLD_DIS = 1
+} eVSIM2CNT_REG_VSIM2DIS_PLD;
+
+typedef enum
+{
+    VSIM2CNT_REG_VSIM2FASTSTUP_SOFT = 0,
+    VSIM2CNT_REG_VSIM2FASTSTUP_FAST = 1
+} eVSIM2CNT_REG_VSIM2FASTSTUP;
+
+typedef enum
+{
+    VSIM2CNT_REG_VSIM2RMTCAP_LOCAL = 0,
+    VSIM2CNT_REG_VSIM2RMTCAP_REMOTE = 1
+} eVSIM2CNT_REG_VSIM2RMTCAP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2CNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VSIM2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM2CNT_REG(HWREG_U8 value); /** Get complete register VSIM2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2CNT_REG_MODEVSIM2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVSIM2 of register VSIM2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM2CNT_REG_MODEVSIM2(HWREG_U8 value); /**< Get element MODEVSIM2 of register VSIM2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2CNT_REG_VSIM2DIS_PLD(HWREG_U8 _reg, eVSIM2CNT_REG_VSIM2DIS_PLD value); /**< Set element VSIM2DIS_PLD of register VSIM2CNT_REG */
+__HWREG_INLINE__ eVSIM2CNT_REG_VSIM2DIS_PLD getPmic_VSIM2CNT_REG_VSIM2DIS_PLD(HWREG_U8 value); /**< Get element VSIM2DIS_PLD of register VSIM2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2CNT_REG_VSIM2FASTSTUP(HWREG_U8 _reg, eVSIM2CNT_REG_VSIM2FASTSTUP value); /**< Set element VSIM2FASTSTUP of register VSIM2CNT_REG */
+__HWREG_INLINE__ eVSIM2CNT_REG_VSIM2FASTSTUP getPmic_VSIM2CNT_REG_VSIM2FASTSTUP(HWREG_U8 value); /**< Get element VSIM2FASTSTUP of register VSIM2CNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2CNT_REG_VSIM2RMTCAP(HWREG_U8 _reg, eVSIM2CNT_REG_VSIM2RMTCAP value); /**< Set element VSIM2RMTCAP of register VSIM2CNT_REG */
+__HWREG_INLINE__ eVSIM2CNT_REG_VSIM2RMTCAP getPmic_VSIM2CNT_REG_VSIM2RMTCAP(HWREG_U8 value); /**< Get element VSIM2RMTCAP of register VSIM2CNT_REG */
+
+
+/** @brief VMIPICNT_REG register description at address offset 0x4ea8
+  *
+  *  VMIPI Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVMIPI :3; /**<  */
+    HWREG_U8 VMIPIDIS_PLD :1; /**<  */
+    HWREG_U8 VMIPIFASTSTUP :1; /**<  */
+    HWREG_U8 VMIPIRMTCAP :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVMIPICNT_REGStructure;
+
+
+/** @brief VMIPICNT_REG Bitfield widths
+*/
+#define lenVMIPICNT_REG_MODEVMIPI 3
+#define lenVMIPICNT_REG_VMIPIDIS_PLD 1
+#define lenVMIPICNT_REG_VMIPIFASTSTUP 1
+#define lenVMIPICNT_REG_VMIPIRMTCAP 1
+
+typedef enum
+{
+    VMIPICNT_REG_LSB_MODEVMIPI = 0,
+    VMIPICNT_REG_LSB_VMIPIDIS_PLD = 3,
+    VMIPICNT_REG_LSB_VMIPIFASTSTUP = 4,
+    VMIPICNT_REG_LSB_VMIPIRMTCAP = 5
+} eVMIPICNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VMIPICNT_REG_Content;
+    sVMIPICNT_REGStructure VMIPICNT_REG_Structure;
+} uVMIPICNT_REG;
+
+typedef enum
+{
+    VMIPICNT_REG_VMIPIDIS_PLD_EN = 0,
+    VMIPICNT_REG_VMIPIDIS_PLD_DIS = 1
+} eVMIPICNT_REG_VMIPIDIS_PLD;
+
+typedef enum
+{
+    VMIPICNT_REG_VMIPIFASTSTUP_SOFT = 0,
+    VMIPICNT_REG_VMIPIFASTSTUP_FAST = 1
+} eVMIPICNT_REG_VMIPIFASTSTUP;
+
+typedef enum
+{
+    VMIPICNT_REG_VMIPIRMTCAP_LOCAL = 0,
+    VMIPICNT_REG_VMIPIRMTCAP_REMOTE = 1
+} eVMIPICNT_REG_VMIPIRMTCAP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPICNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VMIPICNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VMIPICNT_REG(HWREG_U8 value); /** Get complete register VMIPICNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPICNT_REG_MODEVMIPI(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVMIPI of register VMIPICNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VMIPICNT_REG_MODEVMIPI(HWREG_U8 value); /**< Get element MODEVMIPI of register VMIPICNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPICNT_REG_VMIPIDIS_PLD(HWREG_U8 _reg, eVMIPICNT_REG_VMIPIDIS_PLD value); /**< Set element VMIPIDIS_PLD of register VMIPICNT_REG */
+__HWREG_INLINE__ eVMIPICNT_REG_VMIPIDIS_PLD getPmic_VMIPICNT_REG_VMIPIDIS_PLD(HWREG_U8 value); /**< Get element VMIPIDIS_PLD of register VMIPICNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPICNT_REG_VMIPIFASTSTUP(HWREG_U8 _reg, eVMIPICNT_REG_VMIPIFASTSTUP value); /**< Set element VMIPIFASTSTUP of register VMIPICNT_REG */
+__HWREG_INLINE__ eVMIPICNT_REG_VMIPIFASTSTUP getPmic_VMIPICNT_REG_VMIPIFASTSTUP(HWREG_U8 value); /**< Get element VMIPIFASTSTUP of register VMIPICNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPICNT_REG_VMIPIRMTCAP(HWREG_U8 _reg, eVMIPICNT_REG_VMIPIRMTCAP value); /**< Set element VMIPIRMTCAP of register VMIPICNT_REG */
+__HWREG_INLINE__ eVMIPICNT_REG_VMIPIRMTCAP getPmic_VMIPICNT_REG_VMIPIRMTCAP(HWREG_U8 value); /**< Get element VMIPIRMTCAP of register VMIPICNT_REG */
+
+
+/** @brief VEMMCCNT_REG register description at address offset 0x4ea9
+  *
+  *  VMMC Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVEMMC :3; /**<  */
+    HWREG_U8 VMMCDIS_PLD :1; /**<  */
+    HWREG_U8 VMMCFASTSTUP :1; /**<  */
+    HWREG_U8 VMMCRMTCAP :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVEMMCCNT_REGStructure;
+
+
+/** @brief VEMMCCNT_REG Bitfield widths
+*/
+#define lenVEMMCCNT_REG_MODEVEMMC 3
+#define lenVEMMCCNT_REG_VMMCDIS_PLD 1
+#define lenVEMMCCNT_REG_VMMCFASTSTUP 1
+#define lenVEMMCCNT_REG_VMMCRMTCAP 1
+
+typedef enum
+{
+    VEMMCCNT_REG_LSB_MODEVEMMC = 0,
+    VEMMCCNT_REG_LSB_VMMCDIS_PLD = 3,
+    VEMMCCNT_REG_LSB_VMMCFASTSTUP = 4,
+    VEMMCCNT_REG_LSB_VMMCRMTCAP = 5
+} eVEMMCCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VEMMCCNT_REG_Content;
+    sVEMMCCNT_REGStructure VEMMCCNT_REG_Structure;
+} uVEMMCCNT_REG;
+
+typedef enum
+{
+    VEMMCCNT_REG_VMMCDIS_PLD_EN = 0,
+    VEMMCCNT_REG_VMMCDIS_PLD_DIS = 1
+} eVEMMCCNT_REG_VMMCDIS_PLD;
+
+typedef enum
+{
+    VEMMCCNT_REG_VMMCFASTSTUP_SOFT = 0,
+    VEMMCCNT_REG_VMMCFASTSTUP_FAST = 1
+} eVEMMCCNT_REG_VMMCFASTSTUP;
+
+typedef enum
+{
+    VEMMCCNT_REG_VMMCRMTCAP_LOCAL = 0,
+    VEMMCCNT_REG_VMMCRMTCAP_REMOTE = 1
+} eVEMMCCNT_REG_VMMCRMTCAP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VEMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VEMMCCNT_REG(HWREG_U8 value); /** Get complete register VEMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCCNT_REG_MODEVEMMC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVEMMC of register VEMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VEMMCCNT_REG_MODEVEMMC(HWREG_U8 value); /**< Get element MODEVEMMC of register VEMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCCNT_REG_VMMCDIS_PLD(HWREG_U8 _reg, eVEMMCCNT_REG_VMMCDIS_PLD value); /**< Set element VMMCDIS_PLD of register VEMMCCNT_REG */
+__HWREG_INLINE__ eVEMMCCNT_REG_VMMCDIS_PLD getPmic_VEMMCCNT_REG_VMMCDIS_PLD(HWREG_U8 value); /**< Get element VMMCDIS_PLD of register VEMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCCNT_REG_VMMCFASTSTUP(HWREG_U8 _reg, eVEMMCCNT_REG_VMMCFASTSTUP value); /**< Set element VMMCFASTSTUP of register VEMMCCNT_REG */
+__HWREG_INLINE__ eVEMMCCNT_REG_VMMCFASTSTUP getPmic_VEMMCCNT_REG_VMMCFASTSTUP(HWREG_U8 value); /**< Get element VMMCFASTSTUP of register VEMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCCNT_REG_VMMCRMTCAP(HWREG_U8 _reg, eVEMMCCNT_REG_VMMCRMTCAP value); /**< Set element VMMCRMTCAP of register VEMMCCNT_REG */
+__HWREG_INLINE__ eVEMMCCNT_REG_VMMCRMTCAP getPmic_VEMMCCNT_REG_VMMCRMTCAP(HWREG_U8 value); /**< Get element VMMCRMTCAP of register VEMMCCNT_REG */
+
+
+/** @brief VSDCNT_REG register description at address offset 0x4eaa
+  *
+  *  VSD Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVSD :3; /**<  */
+    HWREG_U8 VSDDIS_PLD :1; /**<  */
+    HWREG_U8 VSDFASTSTUP :1; /**<  */
+    HWREG_U8 VSDRMTCAP :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVSDCNT_REGStructure;
+
+
+/** @brief VSDCNT_REG Bitfield widths
+*/
+#define lenVSDCNT_REG_MODEVSD 3
+#define lenVSDCNT_REG_VSDDIS_PLD 1
+#define lenVSDCNT_REG_VSDFASTSTUP 1
+#define lenVSDCNT_REG_VSDRMTCAP 1
+
+typedef enum
+{
+    VSDCNT_REG_LSB_MODEVSD = 0,
+    VSDCNT_REG_LSB_VSDDIS_PLD = 3,
+    VSDCNT_REG_LSB_VSDFASTSTUP = 4,
+    VSDCNT_REG_LSB_VSDRMTCAP = 5
+} eVSDCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VSDCNT_REG_Content;
+    sVSDCNT_REGStructure VSDCNT_REG_Structure;
+} uVSDCNT_REG;
+
+typedef enum
+{
+    VSDCNT_REG_VSDDIS_PLD_EN = 0,
+    VSDCNT_REG_VSDDIS_PLD_DIS = 1
+} eVSDCNT_REG_VSDDIS_PLD;
+
+typedef enum
+{
+    VSDCNT_REG_VSDFASTSTUP_SOFT = 0,
+    VSDCNT_REG_VSDFASTSTUP_FAST = 1
+} eVSDCNT_REG_VSDFASTSTUP;
+
+typedef enum
+{
+    VSDCNT_REG_VSDRMTCAP_LOCAL = 0,
+    VSDCNT_REG_VSDRMTCAP_REMOTE = 1
+} eVSDCNT_REG_VSDRMTCAP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VSDCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDCNT_REG(HWREG_U8 value); /** Get complete register VSDCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDCNT_REG_MODEVSD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVSD of register VSDCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDCNT_REG_MODEVSD(HWREG_U8 value); /**< Get element MODEVSD of register VSDCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDCNT_REG_VSDDIS_PLD(HWREG_U8 _reg, eVSDCNT_REG_VSDDIS_PLD value); /**< Set element VSDDIS_PLD of register VSDCNT_REG */
+__HWREG_INLINE__ eVSDCNT_REG_VSDDIS_PLD getPmic_VSDCNT_REG_VSDDIS_PLD(HWREG_U8 value); /**< Get element VSDDIS_PLD of register VSDCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDCNT_REG_VSDFASTSTUP(HWREG_U8 _reg, eVSDCNT_REG_VSDFASTSTUP value); /**< Set element VSDFASTSTUP of register VSDCNT_REG */
+__HWREG_INLINE__ eVSDCNT_REG_VSDFASTSTUP getPmic_VSDCNT_REG_VSDFASTSTUP(HWREG_U8 value); /**< Get element VSDFASTSTUP of register VSDCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDCNT_REG_VSDRMTCAP(HWREG_U8 _reg, eVSDCNT_REG_VSDRMTCAP value); /**< Set element VSDRMTCAP of register VSDCNT_REG */
+__HWREG_INLINE__ eVSDCNT_REG_VSDRMTCAP getPmic_VSDCNT_REG_VSDRMTCAP(HWREG_U8 value); /**< Get element VSDRMTCAP of register VSDCNT_REG */
+
+
+/** @brief VSDMMCCNT_REG register description at address offset 0x4eab
+  *
+  *  VSDMMC Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEVSDMMC :3; /**<  */
+    HWREG_U8 VSDMMCDIS_PLD :1; /**<  */
+    HWREG_U8 VSDMMCFASTSTUP :1; /**<  */
+    HWREG_U8 MMC :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVSDMMCCNT_REGStructure;
+
+
+/** @brief VSDMMCCNT_REG Bitfield widths
+*/
+#define lenVSDMMCCNT_REG_MODEVSDMMC 3
+#define lenVSDMMCCNT_REG_VSDMMCDIS_PLD 1
+#define lenVSDMMCCNT_REG_VSDMMCFASTSTUP 1
+#define lenVSDMMCCNT_REG_MMC 1
+
+typedef enum
+{
+    VSDMMCCNT_REG_LSB_MODEVSDMMC = 0,
+    VSDMMCCNT_REG_LSB_VSDMMCDIS_PLD = 3,
+    VSDMMCCNT_REG_LSB_VSDMMCFASTSTUP = 4,
+    VSDMMCCNT_REG_LSB_MMC = 5
+} eVSDMMCCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VSDMMCCNT_REG_Content;
+    sVSDMMCCNT_REGStructure VSDMMCCNT_REG_Structure;
+} uVSDMMCCNT_REG;
+
+typedef enum
+{
+    VSDMMCCNT_REG_VSDMMCDIS_PLD_EN = 0,
+    VSDMMCCNT_REG_VSDMMCDIS_PLD_DIS = 1
+} eVSDMMCCNT_REG_VSDMMCDIS_PLD;
+
+typedef enum
+{
+    VSDMMCCNT_REG_VSDMMCFASTSTUP_SOFT = 0,
+    VSDMMCCNT_REG_VSDMMCFASTSTUP_FAST = 1
+} eVSDMMCCNT_REG_VSDMMCFASTSTUP;
+
+typedef enum
+{
+    VSDMMCCNT_REG_MMC_LOCAL = 0,
+    VSDMMCCNT_REG_MMC_REMOTE = 1
+} eVSDMMCCNT_REG_MMC;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VSDMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDMMCCNT_REG(HWREG_U8 value); /** Get complete register VSDMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCCNT_REG_MODEVSDMMC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MODEVSDMMC of register VSDMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDMMCCNT_REG_MODEVSDMMC(HWREG_U8 value); /**< Get element MODEVSDMMC of register VSDMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCCNT_REG_VSDMMCDIS_PLD(HWREG_U8 _reg, eVSDMMCCNT_REG_VSDMMCDIS_PLD value); /**< Set element VSDMMCDIS_PLD of register VSDMMCCNT_REG */
+__HWREG_INLINE__ eVSDMMCCNT_REG_VSDMMCDIS_PLD getPmic_VSDMMCCNT_REG_VSDMMCDIS_PLD(HWREG_U8 value); /**< Get element VSDMMCDIS_PLD of register VSDMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCCNT_REG_VSDMMCFASTSTUP(HWREG_U8 _reg, eVSDMMCCNT_REG_VSDMMCFASTSTUP value); /**< Set element VSDMMCFASTSTUP of register VSDMMCCNT_REG */
+__HWREG_INLINE__ eVSDMMCCNT_REG_VSDMMCFASTSTUP getPmic_VSDMMCCNT_REG_VSDMMCFASTSTUP(HWREG_U8 value); /**< Get element VSDMMCFASTSTUP of register VSDMMCCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCCNT_REG_MMC(HWREG_U8 _reg, eVSDMMCCNT_REG_MMC value); /**< Set element MMC of register VSDMMCCNT_REG */
+__HWREG_INLINE__ eVSDMMCCNT_REG_MMC getPmic_VSDMMCCNT_REG_MMC(HWREG_U8 value); /**< Get element MMC of register VSDMMCCNT_REG */
+
+
+/** @brief VPROG1VSEL_REG register description at address offset 0x4eb0
+  *
+  *  VPROG1 Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VPROG1VSEL :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVPROG1VSEL_REGStructure;
+
+
+/** @brief VPROG1VSEL_REG Bitfield widths
+*/
+#define lenVPROG1VSEL_REG_VPROG1VSEL 6
+
+typedef enum
+{
+    VPROG1VSEL_REG_LSB_VPROG1VSEL = 0
+} eVPROG1VSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VPROG1VSEL_REG_Content;
+    sVPROG1VSEL_REGStructure VPROG1VSEL_REG_Structure;
+} uVPROG1VSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1VSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VPROG1VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG1VSEL_REG(HWREG_U8 value); /** Get complete register VPROG1VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1VSEL_REG_VPROG1VSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VPROG1VSEL of register VPROG1VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG1VSEL_REG_VPROG1VSEL(HWREG_U8 value); /**< Get element VPROG1VSEL of register VPROG1VSEL_REG */
+
+
+/** @brief VPROG2VSEL_REG register description at address offset 0x4eb1
+  *
+  *  VPROG2 Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VPROG2VSEL :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVPROG2VSEL_REGStructure;
+
+
+/** @brief VPROG2VSEL_REG Bitfield widths
+*/
+#define lenVPROG2VSEL_REG_VPROG2VSEL 6
+
+typedef enum
+{
+    VPROG2VSEL_REG_LSB_VPROG2VSEL = 0
+} eVPROG2VSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VPROG2VSEL_REG_Content;
+    sVPROG2VSEL_REGStructure VPROG2VSEL_REG_Structure;
+} uVPROG2VSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2VSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VPROG2VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG2VSEL_REG(HWREG_U8 value); /** Get complete register VPROG2VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2VSEL_REG_VPROG2VSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VPROG2VSEL of register VPROG2VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG2VSEL_REG_VPROG2VSEL(HWREG_U8 value); /**< Get element VPROG2VSEL of register VPROG2VSEL_REG */
+
+
+/** @brief VPROG3VSEL_REG register description at address offset 0x4eb2
+  *
+  *  VPROG3 Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VPROG3VSEL :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVPROG3VSEL_REGStructure;
+
+
+/** @brief VPROG3VSEL_REG Bitfield widths
+*/
+#define lenVPROG3VSEL_REG_VPROG3VSEL 6
+
+typedef enum
+{
+    VPROG3VSEL_REG_LSB_VPROG3VSEL = 0
+} eVPROG3VSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VPROG3VSEL_REG_Content;
+    sVPROG3VSEL_REGStructure VPROG3VSEL_REG_Structure;
+} uVPROG3VSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3VSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VPROG3VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG3VSEL_REG(HWREG_U8 value); /** Get complete register VPROG3VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3VSEL_REG_VPROG3VSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VPROG3VSEL of register VPROG3VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG3VSEL_REG_VPROG3VSEL(HWREG_U8 value); /**< Get element VPROG3VSEL of register VPROG3VSEL_REG */
+
+
+/** @brief VUSBVSEL_REG register description at address offset 0x4eb3
+  *
+  *  VUSB Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VUSBVSEL :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVUSBVSEL_REGStructure;
+
+
+/** @brief VUSBVSEL_REG Bitfield widths
+*/
+#define lenVUSBVSEL_REG_VUSBVSEL 6
+
+typedef enum
+{
+    VUSBVSEL_REG_LSB_VUSBVSEL = 0
+} eVUSBVSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VUSBVSEL_REG_Content;
+    sVUSBVSEL_REGStructure VUSBVSEL_REG_Structure;
+} uVUSBVSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBVSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VUSBVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VUSBVSEL_REG(HWREG_U8 value); /** Get complete register VUSBVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBVSEL_REG_VUSBVSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VUSBVSEL of register VUSBVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VUSBVSEL_REG_VUSBVSEL(HWREG_U8 value); /**< Get element VUSBVSEL of register VUSBVSEL_REG */
+
+
+/** @brief VSIM1VSEL_REG register description at address offset 0x4eb4
+  *
+  *  VSIM1 Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VSIM1VSEL :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVSIM1VSEL_REGStructure;
+
+
+/** @brief VSIM1VSEL_REG Bitfield widths
+*/
+#define lenVSIM1VSEL_REG_VSIM1VSEL 6
+
+typedef enum
+{
+    VSIM1VSEL_REG_LSB_VSIM1VSEL = 0
+} eVSIM1VSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VSIM1VSEL_REG_Content;
+    sVSIM1VSEL_REGStructure VSIM1VSEL_REG_Structure;
+} uVSIM1VSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1VSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VSIM1VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM1VSEL_REG(HWREG_U8 value); /** Get complete register VSIM1VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1VSEL_REG_VSIM1VSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VSIM1VSEL of register VSIM1VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM1VSEL_REG_VSIM1VSEL(HWREG_U8 value); /**< Get element VSIM1VSEL of register VSIM1VSEL_REG */
+
+
+/** @brief VSIM2VSEL_REG register description at address offset 0x4eb5
+  *
+  *  VSIM2 Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VSIM2VSEL :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVSIM2VSEL_REGStructure;
+
+
+/** @brief VSIM2VSEL_REG Bitfield widths
+*/
+#define lenVSIM2VSEL_REG_VSIM2VSEL 6
+
+typedef enum
+{
+    VSIM2VSEL_REG_LSB_VSIM2VSEL = 0
+} eVSIM2VSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VSIM2VSEL_REG_Content;
+    sVSIM2VSEL_REGStructure VSIM2VSEL_REG_Structure;
+} uVSIM2VSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2VSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VSIM2VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM2VSEL_REG(HWREG_U8 value); /** Get complete register VSIM2VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2VSEL_REG_VSIM2VSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VSIM2VSEL of register VSIM2VSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM2VSEL_REG_VSIM2VSEL(HWREG_U8 value); /**< Get element VSIM2VSEL of register VSIM2VSEL_REG */
+
+
+/** @brief VMIPIVSEL_REG register description at address offset 0x4eb6
+  *
+  *  VMIPI Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VMIPIVSEL :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVMIPIVSEL_REGStructure;
+
+
+/** @brief VMIPIVSEL_REG Bitfield widths
+*/
+#define lenVMIPIVSEL_REG_VMIPIVSEL 6
+
+typedef enum
+{
+    VMIPIVSEL_REG_LSB_VMIPIVSEL = 0
+} eVMIPIVSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VMIPIVSEL_REG_Content;
+    sVMIPIVSEL_REGStructure VMIPIVSEL_REG_Structure;
+} uVMIPIVSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPIVSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VMIPIVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VMIPIVSEL_REG(HWREG_U8 value); /** Get complete register VMIPIVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPIVSEL_REG_VMIPIVSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VMIPIVSEL of register VMIPIVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VMIPIVSEL_REG_VMIPIVSEL(HWREG_U8 value); /**< Get element VMIPIVSEL of register VMIPIVSEL_REG */
+
+
+/** @brief VEMMCVSEL_REG register description at address offset 0x4eb7
+  *
+  *  VEMMC Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VEMMCVSEL :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVEMMCVSEL_REGStructure;
+
+
+/** @brief VEMMCVSEL_REG Bitfield widths
+*/
+#define lenVEMMCVSEL_REG_VEMMCVSEL 6
+
+typedef enum
+{
+    VEMMCVSEL_REG_LSB_VEMMCVSEL = 0
+} eVEMMCVSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VEMMCVSEL_REG_Content;
+    sVEMMCVSEL_REGStructure VEMMCVSEL_REG_Structure;
+} uVEMMCVSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCVSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VEMMCVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VEMMCVSEL_REG(HWREG_U8 value); /** Get complete register VEMMCVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCVSEL_REG_VEMMCVSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VEMMCVSEL of register VEMMCVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VEMMCVSEL_REG_VEMMCVSEL(HWREG_U8 value); /**< Get element VEMMCVSEL of register VEMMCVSEL_REG */
+
+
+/** @brief VSDVSEL_REG register description at address offset 0x4eb8
+  *
+  *  VSD Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VSDVSEL :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVSDVSEL_REGStructure;
+
+
+/** @brief VSDVSEL_REG Bitfield widths
+*/
+#define lenVSDVSEL_REG_VSDVSEL 6
+
+typedef enum
+{
+    VSDVSEL_REG_LSB_VSDVSEL = 0
+} eVSDVSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VSDVSEL_REG_Content;
+    sVSDVSEL_REGStructure VSDVSEL_REG_Structure;
+} uVSDVSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDVSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VSDVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDVSEL_REG(HWREG_U8 value); /** Get complete register VSDVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDVSEL_REG_VSDVSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VSDVSEL of register VSDVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDVSEL_REG_VSDVSEL(HWREG_U8 value); /**< Get element VSDVSEL of register VSDVSEL_REG */
+
+
+/** @brief VSDMMCVSEL_REG register description at address offset 0x4eb9
+  *
+  *  VSDMMC Voltage Select Register
+  */
+typedef struct
+{
+    HWREG_U8 VSDMMCVSEL :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sVSDMMCVSEL_REGStructure;
+
+
+/** @brief VSDMMCVSEL_REG Bitfield widths
+*/
+#define lenVSDMMCVSEL_REG_VSDMMCVSEL 6
+
+typedef enum
+{
+    VSDMMCVSEL_REG_LSB_VSDMMCVSEL = 0
+} eVSDMMCVSEL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VSDMMCVSEL_REG_Content;
+    sVSDMMCVSEL_REGStructure VSDMMCVSEL_REG_Structure;
+} uVSDMMCVSEL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCVSEL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VSDMMCVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDMMCVSEL_REG(HWREG_U8 value); /** Get complete register VSDMMCVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCVSEL_REG_VSDMMCVSEL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VSDMMCVSEL of register VSDMMCVSEL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDMMCVSEL_REG_VSDMMCVSEL(HWREG_U8 value); /**< Get element VSDMMCVSEL of register VSDMMCVSEL_REG */
+
+
+/** @brief TRMPGM_REG register description at address offset 0x4f00
+  *
+  *  Trim Program Revision Register
+  */
+typedef struct
+{
+    HWREG_U8 TRMREV :8; /**<  */
+} sTRMPGM_REGStructure;
+
+
+/** @brief TRMPGM_REG Bitfield widths
+*/
+#define lenTRMPGM_REG_TRMREV 8
+
+typedef enum
+{
+    TRMPGM_REG_LSB_TRMREV = 0
+} eTRMPGM_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TRMPGM_REG_Content;
+    sTRMPGM_REGStructure TRMPGM_REG_Structure;
+} uTRMPGM_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TRMPGM_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TRMPGM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TRMPGM_REG(HWREG_U8 value); /** Get complete register TRMPGM_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TRMPGM_REG_TRMREV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TRMREV of register TRMPGM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TRMPGM_REG_TRMREV(HWREG_U8 value); /**< Get element TRMREV of register TRMPGM_REG */
+
+
+/** @brief OTPVERSION_REG register description at address offset 0x4f01
+  *
+  *  OTP Version Number Register
+  */
+typedef struct
+{
+    HWREG_U8 OTPVERSION :8; /**<  */
+} sOTPVERSION_REGStructure;
+
+
+/** @brief OTPVERSION_REG Bitfield widths
+*/
+#define lenOTPVERSION_REG_OTPVERSION 8
+
+typedef enum
+{
+    OTPVERSION_REG_LSB_OTPVERSION = 0
+} eOTPVERSION_REGLsb;
+
+typedef union
+{
+    HWREG_U8 OTPVERSION_REG_Content;
+    sOTPVERSION_REGStructure OTPVERSION_REG_Structure;
+} uOTPVERSION_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_OTPVERSION_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register OTPVERSION_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_OTPVERSION_REG(HWREG_U8 value); /** Get complete register OTPVERSION_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_OTPVERSION_REG_OTPVERSION(HWREG_U8 _reg, HWREG_U8 value); /**< Set element OTPVERSION of register OTPVERSION_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_OTPVERSION_REG_OTPVERSION(HWREG_U8 value); /**< Get element OTPVERSION of register OTPVERSION_REG */
+
+
+/** @brief GPADCREQ_REG register description at address offset 0x4f02
+  *
+  *  GPADC Conversion Request Register
+  */
+typedef struct
+{
+    const HWREG_U8 BUSY_BIT :1; /**<  */
+    HWREG_U8 ADC_USBID :1; /**<  */
+    HWREG_U8 ADC_BATTEMP :1; /**<  */
+    HWREG_U8 ADC_SYSTEMP :1; /**<  */
+    HWREG_U8 ADC_BATTID :1; /**<  */
+    HWREG_U8 ADC_VBATT :1; /**<  */
+    HWREG_U8 ADC_GPMEAS :1; /**<  */
+    HWREG_U8 ADC_PEAK :1; /**<  */
+} sGPADCREQ_REGStructure;
+
+
+/** @brief GPADCREQ_REG Bitfield widths
+*/
+#define lenGPADCREQ_REG_BUSY 1
+#define lenGPADCREQ_REG_ADC_USBID 1
+#define lenGPADCREQ_REG_ADC_BATTEMP 1
+#define lenGPADCREQ_REG_ADC_SYSTEMP 1
+#define lenGPADCREQ_REG_ADC_BATTID 1
+#define lenGPADCREQ_REG_ADC_VBATT 1
+#define lenGPADCREQ_REG_ADC_GPMEAS 1
+#define lenGPADCREQ_REG_ADC_PEAK 1
+
+typedef enum
+{
+    GPADCREQ_REG_LSB_BUSY = 0,
+    GPADCREQ_REG_LSB_ADC_USBID = 1,
+    GPADCREQ_REG_LSB_ADC_BATTEMP = 2,
+    GPADCREQ_REG_LSB_ADC_SYSTEMP = 3,
+    GPADCREQ_REG_LSB_ADC_BATTID = 4,
+    GPADCREQ_REG_LSB_ADC_VBATT = 5,
+    GPADCREQ_REG_LSB_ADC_GPMEAS = 6,
+    GPADCREQ_REG_LSB_ADC_PEAK = 7
+} eGPADCREQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPADCREQ_REG_Content;
+    sGPADCREQ_REGStructure GPADCREQ_REG_Structure;
+} uGPADCREQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPADCREQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPADCREQ_REG(HWREG_U8 value); /** Get complete register GPADCREQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPADCREQ_REG_BUSY(HWREG_U8 value); /**< Get element BUSY of register GPADCREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_USBID(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ADC_USBID of register GPADCREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_BATTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ADC_BATTEMP of register GPADCREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_SYSTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ADC_SYSTEMP of register GPADCREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_BATTID(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ADC_BATTID of register GPADCREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_VBATT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ADC_VBATT of register GPADCREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_GPMEAS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ADC_GPMEAS of register GPADCREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_PEAK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ADC_PEAK of register GPADCREQ_REG */
+
+
+/** @brief VBATRSLTH_REG register description at address offset 0x4f03
+  *
+  *  VBAT Result Register (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 VBAT_H :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sVBATRSLTH_REGStructure;
+
+
+/** @brief VBATRSLTH_REG Bitfield widths
+*/
+#define lenVBATRSLTH_REG_VBAT_H 4
+
+typedef enum
+{
+    VBATRSLTH_REG_LSB_VBAT_H = 0
+} eVBATRSLTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VBATRSLTH_REG_Content;
+    sVBATRSLTH_REGStructure VBATRSLTH_REG_Structure;
+} uVBATRSLTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATRSLTH_REG(HWREG_U8 value); /** Get complete register VBATRSLTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATRSLTH_REG_VBAT_H(HWREG_U8 value); /**< Get element VBAT_H of register VBATRSLTH_REG */
+
+
+/** @brief VBATRSLTL_REG register description at address offset 0x4f04
+  *
+  *  VBAT Result Register (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 VBAT_L :8; /**<  */
+} sVBATRSLTL_REGStructure;
+
+
+/** @brief VBATRSLTL_REG Bitfield widths
+*/
+#define lenVBATRSLTL_REG_VBAT_L 8
+
+typedef enum
+{
+    VBATRSLTL_REG_LSB_VBAT_L = 0
+} eVBATRSLTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VBATRSLTL_REG_Content;
+    sVBATRSLTL_REGStructure VBATRSLTL_REG_Structure;
+} uVBATRSLTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATRSLTL_REG(HWREG_U8 value); /** Get complete register VBATRSLTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATRSLTL_REG_VBAT_L(HWREG_U8 value); /**< Get element VBAT_L of register VBATRSLTL_REG */
+
+
+/** @brief GPADCCNTL_REG register description at address offset 0x4f05
+  *
+  *  GPADC Control Register
+  */
+typedef struct
+{
+    HWREG_U8 VREF_DIS :1; /**<  */
+    HWREG_U8 WDT_DIS :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sGPADCCNTL_REGStructure;
+
+
+/** @brief GPADCCNTL_REG Bitfield widths
+*/
+#define lenGPADCCNTL_REG_VREF_DIS 1
+#define lenGPADCCNTL_REG_WDT_DIS 1
+
+typedef enum
+{
+    GPADCCNTL_REG_LSB_VREF_DIS = 0,
+    GPADCCNTL_REG_LSB_WDT_DIS = 1
+} eGPADCCNTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPADCCNTL_REG_Content;
+    sGPADCCNTL_REGStructure GPADCCNTL_REG_Structure;
+} uGPADCCNTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCCNTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPADCCNTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPADCCNTL_REG(HWREG_U8 value); /** Get complete register GPADCCNTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCCNTL_REG_VREF_DIS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VREF_DIS of register GPADCCNTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPADCCNTL_REG_VREF_DIS(HWREG_U8 value); /**< Get element VREF_DIS of register GPADCCNTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCCNTL_REG_WDT_DIS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WDT_DIS of register GPADCCNTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPADCCNTL_REG_WDT_DIS(HWREG_U8 value); /**< Get element WDT_DIS of register GPADCCNTL_REG */
+
+
+/** @brief BATTIDRSLTH_REG register description at address offset 0x4f06
+  *
+  *  BATTID Result Register (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 BATTID_H :4; /**<  */
+    const HWREG_U8 BATTID_CURSRC :4; /**<  */
+} sBATTIDRSLTH_REGStructure;
+
+
+/** @brief BATTIDRSLTH_REG Bitfield widths
+*/
+#define lenBATTIDRSLTH_REG_BATTID_H 4
+#define lenBATTIDRSLTH_REG_BATTID_CURSRC 4
+
+typedef enum
+{
+    BATTIDRSLTH_REG_LSB_BATTID_H = 0,
+    BATTIDRSLTH_REG_LSB_BATTID_CURSRC = 4
+} eBATTIDRSLTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATTIDRSLTH_REG_Content;
+    sBATTIDRSLTH_REGStructure BATTIDRSLTH_REG_Structure;
+} uBATTIDRSLTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTIDRSLTH_REG(HWREG_U8 value); /** Get complete register BATTIDRSLTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTIDRSLTH_REG_BATTID_H(HWREG_U8 value); /**< Get element BATTID_H of register BATTIDRSLTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTIDRSLTH_REG_BATTID_CURSRC(HWREG_U8 value); /**< Get element BATTID_CURSRC of register BATTIDRSLTH_REG */
+
+
+/** @brief BATTIDRSLTL_REG register description at address offset 0x4f07
+  *
+  *  BATTID Result Register (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 BATTID_L :8; /**<  */
+} sBATTIDRSLTL_REGStructure;
+
+
+/** @brief BATTIDRSLTL_REG Bitfield widths
+*/
+#define lenBATTIDRSLTL_REG_BATTID_L 8
+
+typedef enum
+{
+    BATTIDRSLTL_REG_LSB_BATTID_L = 0
+} eBATTIDRSLTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATTIDRSLTL_REG_Content;
+    sBATTIDRSLTL_REGStructure BATTIDRSLTL_REG_Structure;
+} uBATTIDRSLTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTIDRSLTL_REG(HWREG_U8 value); /** Get complete register BATTIDRSLTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTIDRSLTL_REG_BATTID_L(HWREG_U8 value); /**< Get element BATTID_L of register BATTIDRSLTL_REG */
+
+
+/** @brief USBIDRSLTH_REG register description at address offset 0x4f08
+  *
+  *  USBID Result Register (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 USBID_H :4; /**<  */
+    const HWREG_U8 USBID_CURSRC :4; /**<  */
+} sUSBIDRSLTH_REGStructure;
+
+
+/** @brief USBIDRSLTH_REG Bitfield widths
+*/
+#define lenUSBIDRSLTH_REG_USBID_H 4
+#define lenUSBIDRSLTH_REG_USBID_CURSRC 4
+
+typedef enum
+{
+    USBIDRSLTH_REG_LSB_USBID_H = 0,
+    USBIDRSLTH_REG_LSB_USBID_CURSRC = 4
+} eUSBIDRSLTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 USBIDRSLTH_REG_Content;
+    sUSBIDRSLTH_REGStructure USBIDRSLTH_REG_Structure;
+} uUSBIDRSLTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDRSLTH_REG(HWREG_U8 value); /** Get complete register USBIDRSLTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDRSLTH_REG_USBID_H(HWREG_U8 value); /**< Get element USBID_H of register USBIDRSLTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDRSLTH_REG_USBID_CURSRC(HWREG_U8 value); /**< Get element USBID_CURSRC of register USBIDRSLTH_REG */
+
+
+/** @brief USBIDRSLTL_REG register description at address offset 0x4f09
+  *
+  *  USBID Result Register (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 USBID_L :8; /**<  */
+} sUSBIDRSLTL_REGStructure;
+
+
+/** @brief USBIDRSLTL_REG Bitfield widths
+*/
+#define lenUSBIDRSLTL_REG_USBID_L 8
+
+typedef enum
+{
+    USBIDRSLTL_REG_LSB_USBID_L = 0
+} eUSBIDRSLTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 USBIDRSLTL_REG_Content;
+    sUSBIDRSLTL_REGStructure USBIDRSLTL_REG_Structure;
+} uUSBIDRSLTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDRSLTL_REG(HWREG_U8 value); /** Get complete register USBIDRSLTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDRSLTL_REG_USBID_L(HWREG_U8 value); /**< Get element USBID_L of register USBIDRSLTL_REG */
+
+
+/** @brief GPMEASRSLTH_REG register description at address offset 0x4f0a
+  *
+  *  GPMEAS Result Register (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 GPMEAS_H :4; /**<  */
+    const HWREG_U8 GPMEAS_CURSRC :4; /**<  */
+} sGPMEASRSLTH_REGStructure;
+
+
+/** @brief GPMEASRSLTH_REG Bitfield widths
+*/
+#define lenGPMEASRSLTH_REG_GPMEAS_H 4
+#define lenGPMEASRSLTH_REG_GPMEAS_CURSRC 4
+
+typedef enum
+{
+    GPMEASRSLTH_REG_LSB_GPMEAS_H = 0,
+    GPMEASRSLTH_REG_LSB_GPMEAS_CURSRC = 4
+} eGPMEASRSLTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPMEASRSLTH_REG_Content;
+    sGPMEASRSLTH_REGStructure GPMEASRSLTH_REG_Structure;
+} uGPMEASRSLTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASRSLTH_REG(HWREG_U8 value); /** Get complete register GPMEASRSLTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASRSLTH_REG_GPMEAS_H(HWREG_U8 value); /**< Get element GPMEAS_H of register GPMEASRSLTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASRSLTH_REG_GPMEAS_CURSRC(HWREG_U8 value); /**< Get element GPMEAS_CURSRC of register GPMEASRSLTH_REG */
+
+
+/** @brief GPMEASRSLTL_REG register description at address offset 0x4f0b
+  *
+  *  GPMEAS Result Register (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 GPMEAS_L :8; /**<  */
+} sGPMEASRSLTL_REGStructure;
+
+
+/** @brief GPMEASRSLTL_REG Bitfield widths
+*/
+#define lenGPMEASRSLTL_REG_GPMEAS_L 8
+
+typedef enum
+{
+    GPMEASRSLTL_REG_LSB_GPMEAS_L = 0
+} eGPMEASRSLTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPMEASRSLTL_REG_Content;
+    sGPMEASRSLTL_REGStructure GPMEASRSLTL_REG_Structure;
+} uGPMEASRSLTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASRSLTL_REG(HWREG_U8 value); /** Get complete register GPMEASRSLTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASRSLTL_REG_GPMEAS_L(HWREG_U8 value); /**< Get element GPMEAS_L of register GPMEASRSLTL_REG */
+
+
+/** @brief Y0DATAH_REG register description at address offset 0x4f0c
+  *
+  *  Y0 Result Register (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 Y0_H :4; /**<  */
+    const HWREG_U8 Y0_CURSRC :4; /**<  */
+} sY0DATAH_REGStructure;
+
+
+/** @brief Y0DATAH_REG Bitfield widths
+*/
+#define lenY0DATAH_REG_Y0_H 4
+#define lenY0DATAH_REG_Y0_CURSRC 4
+
+typedef enum
+{
+    Y0DATAH_REG_LSB_Y0_H = 0,
+    Y0DATAH_REG_LSB_Y0_CURSRC = 4
+} eY0DATAH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 Y0DATAH_REG_Content;
+    sY0DATAH_REGStructure Y0DATAH_REG_Structure;
+} uY0DATAH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y0DATAH_REG(HWREG_U8 value); /** Get complete register Y0DATAH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_Y0DATAH_REG_Y0_H(HWREG_U8 value); /**< Get element Y0_H of register Y0DATAH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_Y0DATAH_REG_Y0_CURSRC(HWREG_U8 value); /**< Get element Y0_CURSRC of register Y0DATAH_REG */
+
+
+/** @brief Y0DATAL_REG register description at address offset 0x4f0d
+  *
+  *  Y0 Result Register (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 Y0_L :8; /**<  */
+} sY0DATAL_REGStructure;
+
+
+/** @brief Y0DATAL_REG Bitfield widths
+*/
+#define lenY0DATAL_REG_Y0_L 8
+
+typedef enum
+{
+    Y0DATAL_REG_LSB_Y0_L = 0
+} eY0DATAL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 Y0DATAL_REG_Content;
+    sY0DATAL_REGStructure Y0DATAL_REG_Structure;
+} uY0DATAL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y0DATAL_REG(HWREG_U8 value); /** Get complete register Y0DATAL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_Y0DATAL_REG_Y0_L(HWREG_U8 value); /**< Get element Y0_L of register Y0DATAL_REG */
+
+
+/** @brief Y1DATAH_REG register description at address offset 0x4f0e
+  *
+  *  Y1 Result Register (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 Y1_H :4; /**<  */
+    const HWREG_U8 Y1_CURSRC :4; /**<  */
+} sY1DATAH_REGStructure;
+
+
+/** @brief Y1DATAH_REG Bitfield widths
+*/
+#define lenY1DATAH_REG_Y1_H 4
+#define lenY1DATAH_REG_Y1_CURSRC 4
+
+typedef enum
+{
+    Y1DATAH_REG_LSB_Y1_H = 0,
+    Y1DATAH_REG_LSB_Y1_CURSRC = 4
+} eY1DATAH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 Y1DATAH_REG_Content;
+    sY1DATAH_REGStructure Y1DATAH_REG_Structure;
+} uY1DATAH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y1DATAH_REG(HWREG_U8 value); /** Get complete register Y1DATAH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_Y1DATAH_REG_Y1_H(HWREG_U8 value); /**< Get element Y1_H of register Y1DATAH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_Y1DATAH_REG_Y1_CURSRC(HWREG_U8 value); /**< Get element Y1_CURSRC of register Y1DATAH_REG */
+
+
+/** @brief Y1DATAL_REG register description at address offset 0x4f0f
+  *
+  *  Y1 Result Register (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 Y1_L :8; /**<  */
+} sY1DATAL_REGStructure;
+
+
+/** @brief Y1DATAL_REG Bitfield widths
+*/
+#define lenY1DATAL_REG_Y1_L 8
+
+typedef enum
+{
+    Y1DATAL_REG_LSB_Y1_L = 0
+} eY1DATAL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 Y1DATAL_REG_Content;
+    sY1DATAL_REGStructure Y1DATAL_REG_Structure;
+} uY1DATAL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y1DATAL_REG(HWREG_U8 value); /** Get complete register Y1DATAL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_Y1DATAL_REG_Y1_L(HWREG_U8 value); /**< Get element Y1_L of register Y1DATAL_REG */
+
+
+/** @brief DEV2_STATUS_1_REG register description at address offset 0x4f10
+  *
+  *  sVID STATUS1 Register
+  */
+typedef struct
+{
+    const HWREG_U8 DEV2_RESERVED :3; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+    const HWREG_U8 DEV2_READ_STATUS2 :1; /**<  */
+} sDEV2_STATUS_1_REGStructure;
+
+
+/** @brief DEV2_STATUS_1_REG Bitfield widths
+*/
+#define lenDEV2_STATUS_1_REG_DEV2_RESERVED 3
+#define lenDEV2_STATUS_1_REG_DEV2_READ_STATUS2 1
+
+typedef enum
+{
+    DEV2_STATUS_1_REG_LSB_DEV2_RESERVED = 0,
+    DEV2_STATUS_1_REG_LSB_DEV2_READ_STATUS2 = 7
+} eDEV2_STATUS_1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV2_STATUS_1_REG_Content;
+    sDEV2_STATUS_1_REGStructure DEV2_STATUS_1_REG_Structure;
+} uDEV2_STATUS_1_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_1_REG(HWREG_U8 value); /** Get complete register DEV2_STATUS_1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_1_REG_DEV2_RESERVED(HWREG_U8 value); /**< Get element DEV2_RESERVED of register DEV2_STATUS_1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_1_REG_DEV2_READ_STATUS2(HWREG_U8 value); /**< Get element DEV2_READ_STATUS2 of register DEV2_STATUS_1_REG */
+
+
+/** @brief DEV2_STATUS_2_REG register description at address offset 0x4f11
+  *
+  *  sVID STATUS2 Register
+  */
+typedef struct
+{
+    const HWREG_U8 DEV2_PARITY_ERROR :1; /**<  */
+    const HWREG_U8 DEV2_DATA_FRAME_ERROR :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sDEV2_STATUS_2_REGStructure;
+
+
+/** @brief DEV2_STATUS_2_REG Bitfield widths
+*/
+#define lenDEV2_STATUS_2_REG_DEV2_PARITY_ERROR 1
+#define lenDEV2_STATUS_2_REG_DEV2_DATA_FRAME_ERROR 1
+
+typedef enum
+{
+    DEV2_STATUS_2_REG_LSB_DEV2_PARITY_ERROR = 0,
+    DEV2_STATUS_2_REG_LSB_DEV2_DATA_FRAME_ERROR = 1
+} eDEV2_STATUS_2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV2_STATUS_2_REG_Content;
+    sDEV2_STATUS_2_REGStructure DEV2_STATUS_2_REG_Structure;
+} uDEV2_STATUS_2_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_2_REG(HWREG_U8 value); /** Get complete register DEV2_STATUS_2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_2_REG_DEV2_PARITY_ERROR(HWREG_U8 value); /**< Get element DEV2_PARITY_ERROR of register DEV2_STATUS_2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_2_REG_DEV2_DATA_FRAME_ERROR(HWREG_U8 value); /**< Get element DEV2_DATA_FRAME_ERROR of register DEV2_STATUS_2_REG */
+
+
+/** @brief PEAKREQ_REG register description at address offset 0x4f12
+  *
+  *  Peak Detector Request Register
+  */
+typedef struct
+{
+    HWREG_U8 MINDETECT :1; /**<  */
+    HWREG_U8 MAXDETECT :1; /**<  */
+    HWREG_U8 IN2OUTTEST :1; /**<  */
+    HWREG_U8 RDOUTTEST :1; /**<  */
+    HWREG_U8 PEAKTEST :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sPEAKREQ_REGStructure;
+
+
+/** @brief PEAKREQ_REG Bitfield widths
+*/
+#define lenPEAKREQ_REG_MINDETECT 1
+#define lenPEAKREQ_REG_MAXDETECT 1
+#define lenPEAKREQ_REG_IN2OUTTEST 1
+#define lenPEAKREQ_REG_RDOUTTEST 1
+#define lenPEAKREQ_REG_PEAKTEST 1
+
+typedef enum
+{
+    PEAKREQ_REG_LSB_MINDETECT = 0,
+    PEAKREQ_REG_LSB_MAXDETECT = 1,
+    PEAKREQ_REG_LSB_IN2OUTTEST = 2,
+    PEAKREQ_REG_LSB_RDOUTTEST = 3,
+    PEAKREQ_REG_LSB_PEAKTEST = 4
+} ePEAKREQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PEAKREQ_REG_Content;
+    sPEAKREQ_REGStructure PEAKREQ_REG_Structure;
+} uPEAKREQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PEAKREQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKREQ_REG(HWREG_U8 value); /** Get complete register PEAKREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG_MINDETECT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MINDETECT of register PEAKREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG_MAXDETECT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MAXDETECT of register PEAKREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG_IN2OUTTEST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element IN2OUTTEST of register PEAKREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG_RDOUTTEST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RDOUTTEST of register PEAKREQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG_PEAKTEST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PEAKTEST of register PEAKREQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKREQ_REG_PEAKTEST(HWREG_U8 value); /**< Get element PEAKTEST of register PEAKREQ_REG */
+
+
+/** @brief PEAKRSLTH_REG register description at address offset 0x4f13
+  *
+  *  PEAK Result Register (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 PEAK_H :4; /**<  */
+    const HWREG_U8 PEAK_CURSRC :4; /**<  */
+} sPEAKRSLTH_REGStructure;
+
+
+/** @brief PEAKRSLTH_REG Bitfield widths
+*/
+#define lenPEAKRSLTH_REG_PEAK_H 4
+#define lenPEAKRSLTH_REG_PEAK_CURSRC 4
+
+typedef enum
+{
+    PEAKRSLTH_REG_LSB_PEAK_H = 0,
+    PEAKRSLTH_REG_LSB_PEAK_CURSRC = 4
+} ePEAKRSLTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PEAKRSLTH_REG_Content;
+    sPEAKRSLTH_REGStructure PEAKRSLTH_REG_Structure;
+} uPEAKRSLTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKRSLTH_REG(HWREG_U8 value); /** Get complete register PEAKRSLTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKRSLTH_REG_PEAK_H(HWREG_U8 value); /**< Get element PEAK_H of register PEAKRSLTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKRSLTH_REG_PEAK_CURSRC(HWREG_U8 value); /**< Get element PEAK_CURSRC of register PEAKRSLTH_REG */
+
+
+/** @brief PEAKRSLTL_REG register description at address offset 0x4f14
+  *
+  *  PEAK Result Register (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 PEAK_L :8; /**<  */
+} sPEAKRSLTL_REGStructure;
+
+
+/** @brief PEAKRSLTL_REG Bitfield widths
+*/
+#define lenPEAKRSLTL_REG_PEAK_L 8
+
+typedef enum
+{
+    PEAKRSLTL_REG_LSB_PEAK_L = 0
+} ePEAKRSLTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PEAKRSLTL_REG_Content;
+    sPEAKRSLTL_REGStructure PEAKRSLTL_REG_Structure;
+} uPEAKRSLTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKRSLTL_REG(HWREG_U8 value); /** Get complete register PEAKRSLTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKRSLTL_REG_PEAK_L(HWREG_U8 value); /**< Get element PEAK_L of register PEAKRSLTL_REG */
+
+
+/** @brief BATTEMP0H_REG register description at address offset 0x4f15
+  *
+  *  Battery 0 Temperature (MSB)
+  */
+typedef struct
+{
+    HWREG_U8 BATTEMP0_H :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sBATTEMP0H_REGStructure;
+
+
+/** @brief BATTEMP0H_REG Bitfield widths
+*/
+#define lenBATTEMP0H_REG_BATTEMP0_H 4
+
+typedef enum
+{
+    BATTEMP0H_REG_LSB_BATTEMP0_H = 0
+} eBATTEMP0H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATTEMP0H_REG_Content;
+    sBATTEMP0H_REGStructure BATTEMP0H_REG_Structure;
+} uBATTEMP0H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP0H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATTEMP0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP0H_REG(HWREG_U8 value); /** Get complete register BATTEMP0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP0H_REG_BATTEMP0_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATTEMP0_H of register BATTEMP0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP0H_REG_BATTEMP0_H(HWREG_U8 value); /**< Get element BATTEMP0_H of register BATTEMP0H_REG */
+
+
+/** @brief BATTEMP0L_REG register description at address offset 0x4f16
+  *
+  *  Battery 0 Temperature (LSB)
+  */
+typedef struct
+{
+    HWREG_U8 BATTEMP0_L :8; /**<  */
+} sBATTEMP0L_REGStructure;
+
+
+/** @brief BATTEMP0L_REG Bitfield widths
+*/
+#define lenBATTEMP0L_REG_BATTEMP0_L 8
+
+typedef enum
+{
+    BATTEMP0L_REG_LSB_BATTEMP0_L = 0
+} eBATTEMP0L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATTEMP0L_REG_Content;
+    sBATTEMP0L_REGStructure BATTEMP0L_REG_Structure;
+} uBATTEMP0L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP0L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATTEMP0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP0L_REG(HWREG_U8 value); /** Get complete register BATTEMP0L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP0L_REG_BATTEMP0_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATTEMP0_L of register BATTEMP0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP0L_REG_BATTEMP0_L(HWREG_U8 value); /**< Get element BATTEMP0_L of register BATTEMP0L_REG */
+
+
+/** @brief BATTEMP1H_REG register description at address offset 0x4f17
+  *
+  *  Battery 1 Temperature (MSB)
+  */
+typedef struct
+{
+    HWREG_U8 BATTEMP1_H :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sBATTEMP1H_REGStructure;
+
+
+/** @brief BATTEMP1H_REG Bitfield widths
+*/
+#define lenBATTEMP1H_REG_BATTEMP1_H 4
+
+typedef enum
+{
+    BATTEMP1H_REG_LSB_BATTEMP1_H = 0
+} eBATTEMP1H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATTEMP1H_REG_Content;
+    sBATTEMP1H_REGStructure BATTEMP1H_REG_Structure;
+} uBATTEMP1H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP1H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATTEMP1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP1H_REG(HWREG_U8 value); /** Get complete register BATTEMP1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP1H_REG_BATTEMP1_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATTEMP1_H of register BATTEMP1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP1H_REG_BATTEMP1_H(HWREG_U8 value); /**< Get element BATTEMP1_H of register BATTEMP1H_REG */
+
+
+/** @brief BATTEMP1L_REG register description at address offset 0x4f18
+  *
+  *  Battery 1 Temperature (LSB)
+  */
+typedef struct
+{
+    HWREG_U8 BATTEMP1_L :8; /**<  */
+} sBATTEMP1L_REGStructure;
+
+
+/** @brief BATTEMP1L_REG Bitfield widths
+*/
+#define lenBATTEMP1L_REG_BATTEMP1_L 8
+
+typedef enum
+{
+    BATTEMP1L_REG_LSB_BATTEMP1_L = 0
+} eBATTEMP1L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATTEMP1L_REG_Content;
+    sBATTEMP1L_REGStructure BATTEMP1L_REG_Structure;
+} uBATTEMP1L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP1L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATTEMP1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP1L_REG(HWREG_U8 value); /** Get complete register BATTEMP1L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP1L_REG_BATTEMP1_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATTEMP1_L of register BATTEMP1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP1L_REG_BATTEMP1_L(HWREG_U8 value); /**< Get element BATTEMP1_L of register BATTEMP1L_REG */
+
+
+/** @brief STHRMIRQ0_REG register description at address offset 0x4f19
+  *
+  *  Thermal Monitor Status Register 0
+  */
+typedef struct
+{
+    const HWREG_U8 SSYS0ALRT0 :1; /**<  */
+    const HWREG_U8 SSYS1ALRT0 :1; /**<  */
+    const HWREG_U8 SSYS2ALRT0 :1; /**<  */
+    const HWREG_U8 SPMICALRT0 :1; /**<  */
+    const HWREG_U8 SSYS0ALRT1 :1; /**<  */
+    const HWREG_U8 SSYS1ALRT1 :1; /**<  */
+    const HWREG_U8 SSYS2ALRT1 :1; /**<  */
+    const HWREG_U8 GPMEASALRT :1; /**<  */
+} sSTHRMIRQ0_REGStructure;
+
+
+/** @brief STHRMIRQ0_REG Bitfield widths
+*/
+#define lenSTHRMIRQ0_REG_SSYS0ALRT0 1
+#define lenSTHRMIRQ0_REG_SSYS1ALRT0 1
+#define lenSTHRMIRQ0_REG_SSYS2ALRT0 1
+#define lenSTHRMIRQ0_REG_SPMICALRT0 1
+#define lenSTHRMIRQ0_REG_SSYS0ALRT1 1
+#define lenSTHRMIRQ0_REG_SSYS1ALRT1 1
+#define lenSTHRMIRQ0_REG_SSYS2ALRT1 1
+#define lenSTHRMIRQ0_REG_GPMEASALRT 1
+
+typedef enum
+{
+    STHRMIRQ0_REG_LSB_SSYS0ALRT0 = 0,
+    STHRMIRQ0_REG_LSB_SSYS1ALRT0 = 1,
+    STHRMIRQ0_REG_LSB_SSYS2ALRT0 = 2,
+    STHRMIRQ0_REG_LSB_SPMICALRT0 = 3,
+    STHRMIRQ0_REG_LSB_SSYS0ALRT1 = 4,
+    STHRMIRQ0_REG_LSB_SSYS1ALRT1 = 5,
+    STHRMIRQ0_REG_LSB_SSYS2ALRT1 = 6,
+    STHRMIRQ0_REG_LSB_GPMEASALRT = 7
+} eSTHRMIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 STHRMIRQ0_REG_Content;
+    sSTHRMIRQ0_REGStructure STHRMIRQ0_REG_Structure;
+} uSTHRMIRQ0_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG(HWREG_U8 value); /** Get complete register STHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS0ALRT0(HWREG_U8 value); /**< Get element SSYS0ALRT0 of register STHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS1ALRT0(HWREG_U8 value); /**< Get element SSYS1ALRT0 of register STHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS2ALRT0(HWREG_U8 value); /**< Get element SSYS2ALRT0 of register STHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SPMICALRT0(HWREG_U8 value); /**< Get element SPMICALRT0 of register STHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS0ALRT1(HWREG_U8 value); /**< Get element SSYS0ALRT1 of register STHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS1ALRT1(HWREG_U8 value); /**< Get element SSYS1ALRT1 of register STHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS2ALRT1(HWREG_U8 value); /**< Get element SSYS2ALRT1 of register STHRMIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_GPMEASALRT(HWREG_U8 value); /**< Get element GPMEASALRT of register STHRMIRQ0_REG */
+
+
+/** @brief STHRMIRQ1_REG register description at address offset 0x4f1a
+  *
+  *  Thermal Monitor Status Register 1
+  */
+typedef struct
+{
+    const HWREG_U8 SSYS0CRIT :1; /**<  */
+    const HWREG_U8 SSYS1CRIT :1; /**<  */
+    const HWREG_U8 SSYS2CRIT :1; /**<  */
+    const HWREG_U8 SPMICCRIT :1; /**<  */
+    const HWREG_U8 SBATCRIT :1; /**<  */
+    const HWREG_U8 SBATCRITHOTCOLD :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sSTHRMIRQ1_REGStructure;
+
+
+/** @brief STHRMIRQ1_REG Bitfield widths
+*/
+#define lenSTHRMIRQ1_REG_SSYS0CRIT 1
+#define lenSTHRMIRQ1_REG_SSYS1CRIT 1
+#define lenSTHRMIRQ1_REG_SSYS2CRIT 1
+#define lenSTHRMIRQ1_REG_SPMICCRIT 1
+#define lenSTHRMIRQ1_REG_SBATCRIT 1
+#define lenSTHRMIRQ1_REG_SBATCRITHOTCOLD 1
+
+typedef enum
+{
+    STHRMIRQ1_REG_LSB_SSYS0CRIT = 0,
+    STHRMIRQ1_REG_LSB_SSYS1CRIT = 1,
+    STHRMIRQ1_REG_LSB_SSYS2CRIT = 2,
+    STHRMIRQ1_REG_LSB_SPMICCRIT = 3,
+    STHRMIRQ1_REG_LSB_SBATCRIT = 4,
+    STHRMIRQ1_REG_LSB_SBATCRITHOTCOLD = 5
+} eSTHRMIRQ1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 STHRMIRQ1_REG_Content;
+    sSTHRMIRQ1_REGStructure STHRMIRQ1_REG_Structure;
+} uSTHRMIRQ1_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG(HWREG_U8 value); /** Get complete register STHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SSYS0CRIT(HWREG_U8 value); /**< Get element SSYS0CRIT of register STHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SSYS1CRIT(HWREG_U8 value); /**< Get element SSYS1CRIT of register STHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SSYS2CRIT(HWREG_U8 value); /**< Get element SSYS2CRIT of register STHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SPMICCRIT(HWREG_U8 value); /**< Get element SPMICCRIT of register STHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SBATCRIT(HWREG_U8 value); /**< Get element SBATCRIT of register STHRMIRQ1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SBATCRITHOTCOLD(HWREG_U8 value); /**< Get element SBATCRITHOTCOLD of register STHRMIRQ1_REG */
+
+
+/** @brief STHRMIRQ2_REG register description at address offset 0x4f1b
+  *
+  *  Thermal Monitor Status Register 2
+  */
+typedef struct
+{
+    const HWREG_U8 SSYS0ALRT3 :1; /**<  */
+    const HWREG_U8 SSYS1ALRT3 :1; /**<  */
+    const HWREG_U8 SSYS2ALRT3 :1; /**<  */
+    const HWREG_U8 SPMICALRT3 :1; /**<  */
+    const HWREG_U8 SBAT0ALRT0 :1; /**<  */
+    const HWREG_U8 SBAT1ALRT0 :1; /**<  */
+    const HWREG_U8 SBAT0ALRT3 :1; /**<  */
+    const HWREG_U8 SBAT1ALRT3 :1; /**<  */
+} sSTHRMIRQ2_REGStructure;
+
+
+/** @brief STHRMIRQ2_REG Bitfield widths
+*/
+#define lenSTHRMIRQ2_REG_SSYS0ALRT3 1
+#define lenSTHRMIRQ2_REG_SSYS1ALRT3 1
+#define lenSTHRMIRQ2_REG_SSYS2ALRT3 1
+#define lenSTHRMIRQ2_REG_SPMICALRT3 1
+#define lenSTHRMIRQ2_REG_SBAT0ALRT0 1
+#define lenSTHRMIRQ2_REG_SBAT1ALRT0 1
+#define lenSTHRMIRQ2_REG_SBAT0ALRT3 1
+#define lenSTHRMIRQ2_REG_SBAT1ALRT3 1
+
+typedef enum
+{
+    STHRMIRQ2_REG_LSB_SSYS0ALRT3 = 0,
+    STHRMIRQ2_REG_LSB_SSYS1ALRT3 = 1,
+    STHRMIRQ2_REG_LSB_SSYS2ALRT3 = 2,
+    STHRMIRQ2_REG_LSB_SPMICALRT3 = 3,
+    STHRMIRQ2_REG_LSB_SBAT0ALRT0 = 4,
+    STHRMIRQ2_REG_LSB_SBAT1ALRT0 = 5,
+    STHRMIRQ2_REG_LSB_SBAT0ALRT3 = 6,
+    STHRMIRQ2_REG_LSB_SBAT1ALRT3 = 7
+} eSTHRMIRQ2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 STHRMIRQ2_REG_Content;
+    sSTHRMIRQ2_REGStructure STHRMIRQ2_REG_Structure;
+} uSTHRMIRQ2_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG(HWREG_U8 value); /** Get complete register STHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SSYS0ALRT3(HWREG_U8 value); /**< Get element SSYS0ALRT3 of register STHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SSYS1ALRT3(HWREG_U8 value); /**< Get element SSYS1ALRT3 of register STHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SSYS2ALRT3(HWREG_U8 value); /**< Get element SSYS2ALRT3 of register STHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SPMICALRT3(HWREG_U8 value); /**< Get element SPMICALRT3 of register STHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SBAT0ALRT0(HWREG_U8 value); /**< Get element SBAT0ALRT0 of register STHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SBAT1ALRT0(HWREG_U8 value); /**< Get element SBAT1ALRT0 of register STHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SBAT0ALRT3(HWREG_U8 value); /**< Get element SBAT0ALRT3 of register STHRMIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SBAT1ALRT3(HWREG_U8 value); /**< Get element SBAT1ALRT3 of register STHRMIRQ2_REG */
+
+
+/** @brief DEV2_STATUS2_LASTREAD_REG register description at address offset 0x4f1c
+  *
+  *  sVID STATUS2 lastread Register
+  */
+typedef struct
+{
+    const HWREG_U8 DEV2_STATUS_2_ON_LAST_GETREG :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sDEV2_STATUS2_LASTREAD_REGStructure;
+
+
+/** @brief DEV2_STATUS2_LASTREAD_REG Bitfield widths
+*/
+#define lenDEV2_STATUS2_LASTREAD_REG_DEV2_STATUS_2_ON_LAST_GETREG 2
+
+typedef enum
+{
+    DEV2_STATUS2_LASTREAD_REG_LSB_DEV2_STATUS_2_ON_LAST_GETREG = 0
+} eDEV2_STATUS2_LASTREAD_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV2_STATUS2_LASTREAD_REG_Content;
+    sDEV2_STATUS2_LASTREAD_REGStructure DEV2_STATUS2_LASTREAD_REG_Structure;
+} uDEV2_STATUS2_LASTREAD_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS2_LASTREAD_REG(HWREG_U8 value); /** Get complete register DEV2_STATUS2_LASTREAD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS2_LASTREAD_REG_DEV2_STATUS_2_ON_LAST_GETREG(HWREG_U8 value); /**< Get element DEV2_STATUS_2_ON_LAST_GETREG of register DEV2_STATUS2_LASTREAD_REG */
+
+
+/** @brief THRMMONCFG_REG register description at address offset 0x4f1d
+  *
+  *  Thermal Monitor Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 NUMBAT :1; /**<  */
+    HWREG_U8 THRMSRC :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTHRMMONCFG_REGStructure;
+
+
+/** @brief THRMMONCFG_REG Bitfield widths
+*/
+#define lenTHRMMONCFG_REG_NUMBAT 1
+#define lenTHRMMONCFG_REG_THRMSRC 1
+
+typedef enum
+{
+    THRMMONCFG_REG_LSB_NUMBAT = 0,
+    THRMMONCFG_REG_LSB_THRMSRC = 1
+} eTHRMMONCFG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMMONCFG_REG_Content;
+    sTHRMMONCFG_REGStructure THRMMONCFG_REG_Structure;
+} uTHRMMONCFG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCFG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMMONCFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCFG_REG(HWREG_U8 value); /** Get complete register THRMMONCFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCFG_REG_NUMBAT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element NUMBAT of register THRMMONCFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCFG_REG_NUMBAT(HWREG_U8 value); /**< Get element NUMBAT of register THRMMONCFG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCFG_REG_THRMSRC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element THRMSRC of register THRMMONCFG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCFG_REG_THRMSRC(HWREG_U8 value); /**< Get element THRMSRC of register THRMMONCFG_REG */
+
+
+/** @brief THRMMONCTL_REG register description at address offset 0x4f1e
+  *
+  *  Thermal Monitor Control Register
+  */
+typedef struct
+{
+    HWREG_U8 SYSFRQA :2; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 SYSFRQS :2; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sTHRMMONCTL_REGStructure;
+
+
+/** @brief THRMMONCTL_REG Bitfield widths
+*/
+#define lenTHRMMONCTL_REG_SYSFRQA 2
+#define lenTHRMMONCTL_REG_SYSFRQS 2
+
+typedef enum
+{
+    THRMMONCTL_REG_LSB_SYSFRQA = 0,
+    THRMMONCTL_REG_LSB_SYSFRQS = 3
+} eTHRMMONCTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMMONCTL_REG_Content;
+    sTHRMMONCTL_REGStructure THRMMONCTL_REG_Structure;
+} uTHRMMONCTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCTL_REG(HWREG_U8 value); /** Get complete register THRMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCTL_REG_SYSFRQA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYSFRQA of register THRMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCTL_REG_SYSFRQA(HWREG_U8 value); /**< Get element SYSFRQA of register THRMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCTL_REG_SYSFRQS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYSFRQS of register THRMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCTL_REG_SYSFRQS(HWREG_U8 value); /**< Get element SYSFRQS of register THRMMONCTL_REG */
+
+
+/** @brief BATTHERMMONCTL_REG register description at address offset 0x4f1f
+  *
+  *  Battery Temperature Monitor Control Register
+  */
+typedef struct
+{
+    HWREG_U8 BATFRQA :2; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 BATFRQS :2; /**<  */
+    HWREG_U8 BATFRQC :2; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sBATTHERMMONCTL_REGStructure;
+
+
+/** @brief BATTHERMMONCTL_REG Bitfield widths
+*/
+#define lenBATTHERMMONCTL_REG_BATFRQA 2
+#define lenBATTHERMMONCTL_REG_BATFRQS 2
+#define lenBATTHERMMONCTL_REG_BATFRQC 2
+
+typedef enum
+{
+    BATTHERMMONCTL_REG_LSB_BATFRQA = 0,
+    BATTHERMMONCTL_REG_LSB_BATFRQS = 3,
+    BATTHERMMONCTL_REG_LSB_BATFRQC = 5
+} eBATTHERMMONCTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATTHERMMONCTL_REG_Content;
+    sBATTHERMMONCTL_REGStructure BATTHERMMONCTL_REG_Structure;
+} uBATTHERMMONCTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTHERMMONCTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATTHERMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTHERMMONCTL_REG(HWREG_U8 value); /** Get complete register BATTHERMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTHERMMONCTL_REG_BATFRQA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATFRQA of register BATTHERMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTHERMMONCTL_REG_BATFRQA(HWREG_U8 value); /**< Get element BATFRQA of register BATTHERMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTHERMMONCTL_REG_BATFRQS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATFRQS of register BATTHERMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTHERMMONCTL_REG_BATFRQS(HWREG_U8 value); /**< Get element BATFRQS of register BATTHERMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTHERMMONCTL_REG_BATFRQC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATFRQC of register BATTHERMMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTHERMMONCTL_REG_BATFRQC(HWREG_U8 value); /**< Get element BATFRQC of register BATTHERMMONCTL_REG */
+
+
+/** @brief VBATMONCTL_REG register description at address offset 0x4f20
+  *
+  *  Battery Temperature Monitor Control Register
+  */
+typedef struct
+{
+    HWREG_U8 VBATFRQA :2; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 VBATFRQS :2; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sVBATMONCTL_REGStructure;
+
+
+/** @brief VBATMONCTL_REG Bitfield widths
+*/
+#define lenVBATMONCTL_REG_VBATFRQA 2
+#define lenVBATMONCTL_REG_VBATFRQS 2
+
+typedef enum
+{
+    VBATMONCTL_REG_LSB_VBATFRQA = 0,
+    VBATMONCTL_REG_LSB_VBATFRQS = 3
+} eVBATMONCTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VBATMONCTL_REG_Content;
+    sVBATMONCTL_REGStructure VBATMONCTL_REG_Structure;
+} uVBATMONCTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBATMONCTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VBATMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMONCTL_REG(HWREG_U8 value); /** Get complete register VBATMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VBATMONCTL_REG_VBATFRQA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VBATFRQA of register VBATMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMONCTL_REG_VBATFRQA(HWREG_U8 value); /**< Get element VBATFRQA of register VBATMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VBATMONCTL_REG_VBATFRQS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VBATFRQS of register VBATMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMONCTL_REG_VBATFRQS(HWREG_U8 value); /**< Get element VBATFRQS of register VBATMONCTL_REG */
+
+
+/** @brief GPMONCTL_REG register description at address offset 0x4f21
+  *
+  *  General Purpose Monitor Control Register
+  */
+typedef struct
+{
+    HWREG_U8 GPFRQA :2; /**<  */
+    HWREG_U8 GPFRQS :2; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sGPMONCTL_REGStructure;
+
+
+/** @brief GPMONCTL_REG Bitfield widths
+*/
+#define lenGPMONCTL_REG_GPFRQA 2
+#define lenGPMONCTL_REG_GPFRQS 2
+
+typedef enum
+{
+    GPMONCTL_REG_LSB_GPFRQA = 0,
+    GPMONCTL_REG_LSB_GPFRQS = 2
+} eGPMONCTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPMONCTL_REG_Content;
+    sGPMONCTL_REGStructure GPMONCTL_REG_Structure;
+} uGPMONCTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMONCTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMONCTL_REG(HWREG_U8 value); /** Get complete register GPMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMONCTL_REG_GPFRQA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPFRQA of register GPMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMONCTL_REG_GPFRQA(HWREG_U8 value); /**< Get element GPFRQA of register GPMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMONCTL_REG_GPFRQS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPFRQS of register GPMONCTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMONCTL_REG_GPFRQS(HWREG_U8 value); /**< Get element GPFRQS of register GPMONCTL_REG */
+
+
+/** @brief THRMBATZONE_REG register description at address offset 0x4f22
+  *
+  *  Battery Thermal Zone Reporting Register
+  */
+typedef struct
+{
+    const HWREG_U8 BATZONE :3; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sTHRMBATZONE_REGStructure;
+
+
+/** @brief THRMBATZONE_REG Bitfield widths
+*/
+#define lenTHRMBATZONE_REG_BATZONE 3
+
+typedef enum
+{
+    THRMBATZONE_REG_LSB_BATZONE = 0
+} eTHRMBATZONE_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMBATZONE_REG_Content;
+    sTHRMBATZONE_REGStructure THRMBATZONE_REG_Structure;
+} uTHRMBATZONE_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMBATZONE_REG(HWREG_U8 value); /** Get complete register THRMBATZONE_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMBATZONE_REG_BATZONE(HWREG_U8 value); /**< Get element BATZONE of register THRMBATZONE_REG */
+
+
+/** @brief SYS0ALERT0H_REG register description at address offset 0x4f23
+  *
+  *  SYS0 Alert0 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 SYS0ALERT0_H :1; /**<  */
+    HWREG_U8 SYS0ALERT0_CURHYS :3; /**<  */
+    HWREG_U8 SYS0ALERT0_HYS :4; /**<  */
+} sSYS0ALERT0H_REGStructure;
+
+
+/** @brief SYS0ALERT0H_REG Bitfield widths
+*/
+#define lenSYS0ALERT0H_REG_SYS0ALERT0_H 1
+#define lenSYS0ALERT0H_REG_SYS0ALERT0_CURHYS 3
+#define lenSYS0ALERT0H_REG_SYS0ALERT0_HYS 4
+
+typedef enum
+{
+    SYS0ALERT0H_REG_LSB_SYS0ALERT0_H = 0,
+    SYS0ALERT0H_REG_LSB_SYS0ALERT0_CURHYS = 1,
+    SYS0ALERT0H_REG_LSB_SYS0ALERT0_HYS = 4
+} eSYS0ALERT0H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS0ALERT0H_REG_Content;
+    sSYS0ALERT0H_REGStructure SYS0ALERT0H_REG_Structure;
+} uSYS0ALERT0H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0H_REG(HWREG_U8 value); /** Get complete register SYS0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0H_REG_SYS0ALERT0_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT0_H of register SYS0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0H_REG_SYS0ALERT0_H(HWREG_U8 value); /**< Get element SYS0ALERT0_H of register SYS0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0H_REG_SYS0ALERT0_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT0_CURHYS of register SYS0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0H_REG_SYS0ALERT0_CURHYS(HWREG_U8 value); /**< Get element SYS0ALERT0_CURHYS of register SYS0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0H_REG_SYS0ALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT0_HYS of register SYS0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0H_REG_SYS0ALERT0_HYS(HWREG_U8 value); /**< Get element SYS0ALERT0_HYS of register SYS0ALERT0H_REG */
+
+
+/** @brief SYS0ALERT0L_REG register description at address offset 0x4f24
+  *
+  *  SYS0 Alert0 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS0ALERT0_L :8; /**<  */
+} sSYS0ALERT0L_REGStructure;
+
+
+/** @brief SYS0ALERT0L_REG Bitfield widths
+*/
+#define lenSYS0ALERT0L_REG_SYS0ALERT0_L 8
+
+typedef enum
+{
+    SYS0ALERT0L_REG_LSB_SYS0ALERT0_L = 0
+} eSYS0ALERT0L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS0ALERT0L_REG_Content;
+    sSYS0ALERT0L_REGStructure SYS0ALERT0L_REG_Structure;
+} uSYS0ALERT0L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS0ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0L_REG(HWREG_U8 value); /** Get complete register SYS0ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0L_REG_SYS0ALERT0_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT0_L of register SYS0ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0L_REG_SYS0ALERT0_L(HWREG_U8 value); /**< Get element SYS0ALERT0_L of register SYS0ALERT0L_REG */
+
+
+/** @brief SYS0ALERT1H_REG register description at address offset 0x4f25
+  *
+  *  SYS0 Alert1 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 SYS0ALERT1_H :1; /**<  */
+    HWREG_U8 SYS0ALERT1_CURHYS :3; /**<  */
+    HWREG_U8 SYS0ALERT1_HYS :4; /**<  */
+} sSYS0ALERT1H_REGStructure;
+
+
+/** @brief SYS0ALERT1H_REG Bitfield widths
+*/
+#define lenSYS0ALERT1H_REG_SYS0ALERT1_H 1
+#define lenSYS0ALERT1H_REG_SYS0ALERT1_CURHYS 3
+#define lenSYS0ALERT1H_REG_SYS0ALERT1_HYS 4
+
+typedef enum
+{
+    SYS0ALERT1H_REG_LSB_SYS0ALERT1_H = 0,
+    SYS0ALERT1H_REG_LSB_SYS0ALERT1_CURHYS = 1,
+    SYS0ALERT1H_REG_LSB_SYS0ALERT1_HYS = 4
+} eSYS0ALERT1H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS0ALERT1H_REG_Content;
+    sSYS0ALERT1H_REGStructure SYS0ALERT1H_REG_Structure;
+} uSYS0ALERT1H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS0ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1H_REG(HWREG_U8 value); /** Get complete register SYS0ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1H_REG_SYS0ALERT1_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT1_H of register SYS0ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1H_REG_SYS0ALERT1_H(HWREG_U8 value); /**< Get element SYS0ALERT1_H of register SYS0ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1H_REG_SYS0ALERT1_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT1_CURHYS of register SYS0ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1H_REG_SYS0ALERT1_CURHYS(HWREG_U8 value); /**< Get element SYS0ALERT1_CURHYS of register SYS0ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1H_REG_SYS0ALERT1_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT1_HYS of register SYS0ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1H_REG_SYS0ALERT1_HYS(HWREG_U8 value); /**< Get element SYS0ALERT1_HYS of register SYS0ALERT1H_REG */
+
+
+/** @brief SYS0ALERT1L_REG register description at address offset 0x4f26
+  *
+  *  SYS0 Alert1 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS0ALERT1_L :8; /**<  */
+} sSYS0ALERT1L_REGStructure;
+
+
+/** @brief SYS0ALERT1L_REG Bitfield widths
+*/
+#define lenSYS0ALERT1L_REG_SYS0ALERT1_L 8
+
+typedef enum
+{
+    SYS0ALERT1L_REG_LSB_SYS0ALERT1_L = 0
+} eSYS0ALERT1L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS0ALERT1L_REG_Content;
+    sSYS0ALERT1L_REGStructure SYS0ALERT1L_REG_Structure;
+} uSYS0ALERT1L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS0ALERT1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1L_REG(HWREG_U8 value); /** Get complete register SYS0ALERT1L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1L_REG_SYS0ALERT1_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT1_L of register SYS0ALERT1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1L_REG_SYS0ALERT1_L(HWREG_U8 value); /**< Get element SYS0ALERT1_L of register SYS0ALERT1L_REG */
+
+
+/** @brief SYS1ALERT0H_REG register description at address offset 0x4f27
+  *
+  *  SYS1 Alert0 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 SYS1ALERT0_H :1; /**<  */
+    HWREG_U8 SYS1ALERT0_CURHYS :3; /**<  */
+    HWREG_U8 SYS1ALERT0_HYS :4; /**<  */
+} sSYS1ALERT0H_REGStructure;
+
+
+/** @brief SYS1ALERT0H_REG Bitfield widths
+*/
+#define lenSYS1ALERT0H_REG_SYS1ALERT0_H 1
+#define lenSYS1ALERT0H_REG_SYS1ALERT0_CURHYS 3
+#define lenSYS1ALERT0H_REG_SYS1ALERT0_HYS 4
+
+typedef enum
+{
+    SYS1ALERT0H_REG_LSB_SYS1ALERT0_H = 0,
+    SYS1ALERT0H_REG_LSB_SYS1ALERT0_CURHYS = 1,
+    SYS1ALERT0H_REG_LSB_SYS1ALERT0_HYS = 4
+} eSYS1ALERT0H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS1ALERT0H_REG_Content;
+    sSYS1ALERT0H_REGStructure SYS1ALERT0H_REG_Structure;
+} uSYS1ALERT0H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0H_REG(HWREG_U8 value); /** Get complete register SYS1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0H_REG_SYS1ALERT0_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT0_H of register SYS1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0H_REG_SYS1ALERT0_H(HWREG_U8 value); /**< Get element SYS1ALERT0_H of register SYS1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0H_REG_SYS1ALERT0_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT0_CURHYS of register SYS1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0H_REG_SYS1ALERT0_CURHYS(HWREG_U8 value); /**< Get element SYS1ALERT0_CURHYS of register SYS1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0H_REG_SYS1ALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT0_HYS of register SYS1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0H_REG_SYS1ALERT0_HYS(HWREG_U8 value); /**< Get element SYS1ALERT0_HYS of register SYS1ALERT0H_REG */
+
+
+/** @brief SYS1ALERT0L_REG register description at address offset 0x4f28
+  *
+  *  SYS1 Alert0 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS1ALERT0_L :8; /**<  */
+} sSYS1ALERT0L_REGStructure;
+
+
+/** @brief SYS1ALERT0L_REG Bitfield widths
+*/
+#define lenSYS1ALERT0L_REG_SYS1ALERT0_L 8
+
+typedef enum
+{
+    SYS1ALERT0L_REG_LSB_SYS1ALERT0_L = 0
+} eSYS1ALERT0L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS1ALERT0L_REG_Content;
+    sSYS1ALERT0L_REGStructure SYS1ALERT0L_REG_Structure;
+} uSYS1ALERT0L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS1ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0L_REG(HWREG_U8 value); /** Get complete register SYS1ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0L_REG_SYS1ALERT0_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT0_L of register SYS1ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0L_REG_SYS1ALERT0_L(HWREG_U8 value); /**< Get element SYS1ALERT0_L of register SYS1ALERT0L_REG */
+
+
+/** @brief SYS1ALERT1H_REG register description at address offset 0x4f29
+  *
+  *  SYS1 Alert1 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 SYS1ALERT1_H :1; /**<  */
+    HWREG_U8 SYS1ALERT1_CURHYS :3; /**<  */
+    HWREG_U8 SYS1ALERT1_HYS :4; /**<  */
+} sSYS1ALERT1H_REGStructure;
+
+
+/** @brief SYS1ALERT1H_REG Bitfield widths
+*/
+#define lenSYS1ALERT1H_REG_SYS1ALERT1_H 1
+#define lenSYS1ALERT1H_REG_SYS1ALERT1_CURHYS 3
+#define lenSYS1ALERT1H_REG_SYS1ALERT1_HYS 4
+
+typedef enum
+{
+    SYS1ALERT1H_REG_LSB_SYS1ALERT1_H = 0,
+    SYS1ALERT1H_REG_LSB_SYS1ALERT1_CURHYS = 1,
+    SYS1ALERT1H_REG_LSB_SYS1ALERT1_HYS = 4
+} eSYS1ALERT1H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS1ALERT1H_REG_Content;
+    sSYS1ALERT1H_REGStructure SYS1ALERT1H_REG_Structure;
+} uSYS1ALERT1H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS1ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1H_REG(HWREG_U8 value); /** Get complete register SYS1ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1H_REG_SYS1ALERT1_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT1_H of register SYS1ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1H_REG_SYS1ALERT1_H(HWREG_U8 value); /**< Get element SYS1ALERT1_H of register SYS1ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1H_REG_SYS1ALERT1_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT1_CURHYS of register SYS1ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1H_REG_SYS1ALERT1_CURHYS(HWREG_U8 value); /**< Get element SYS1ALERT1_CURHYS of register SYS1ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1H_REG_SYS1ALERT1_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT1_HYS of register SYS1ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1H_REG_SYS1ALERT1_HYS(HWREG_U8 value); /**< Get element SYS1ALERT1_HYS of register SYS1ALERT1H_REG */
+
+
+/** @brief SYS1ALERT1L_REG register description at address offset 0x4f2a
+  *
+  *  SYS1 Alert1 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS1ALERT1_L :8; /**<  */
+} sSYS1ALERT1L_REGStructure;
+
+
+/** @brief SYS1ALERT1L_REG Bitfield widths
+*/
+#define lenSYS1ALERT1L_REG_SYS1ALERT1_L 8
+
+typedef enum
+{
+    SYS1ALERT1L_REG_LSB_SYS1ALERT1_L = 0
+} eSYS1ALERT1L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS1ALERT1L_REG_Content;
+    sSYS1ALERT1L_REGStructure SYS1ALERT1L_REG_Structure;
+} uSYS1ALERT1L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS1ALERT1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1L_REG(HWREG_U8 value); /** Get complete register SYS1ALERT1L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1L_REG_SYS1ALERT1_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT1_L of register SYS1ALERT1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1L_REG_SYS1ALERT1_L(HWREG_U8 value); /**< Get element SYS1ALERT1_L of register SYS1ALERT1L_REG */
+
+
+/** @brief SYS2ALERT0H_REG register description at address offset 0x4f2b
+  *
+  *  SYS2 Alert0 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 SYS2ALERT0_H :1; /**<  */
+    HWREG_U8 SYS2ALERT0_CURHYS :3; /**<  */
+    HWREG_U8 SYS2ALERT0_HYS :4; /**<  */
+} sSYS2ALERT0H_REGStructure;
+
+
+/** @brief SYS2ALERT0H_REG Bitfield widths
+*/
+#define lenSYS2ALERT0H_REG_SYS2ALERT0_H 1
+#define lenSYS2ALERT0H_REG_SYS2ALERT0_CURHYS 3
+#define lenSYS2ALERT0H_REG_SYS2ALERT0_HYS 4
+
+typedef enum
+{
+    SYS2ALERT0H_REG_LSB_SYS2ALERT0_H = 0,
+    SYS2ALERT0H_REG_LSB_SYS2ALERT0_CURHYS = 1,
+    SYS2ALERT0H_REG_LSB_SYS2ALERT0_HYS = 4
+} eSYS2ALERT0H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS2ALERT0H_REG_Content;
+    sSYS2ALERT0H_REGStructure SYS2ALERT0H_REG_Structure;
+} uSYS2ALERT0H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS2ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0H_REG(HWREG_U8 value); /** Get complete register SYS2ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0H_REG_SYS2ALERT0_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT0_H of register SYS2ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0H_REG_SYS2ALERT0_H(HWREG_U8 value); /**< Get element SYS2ALERT0_H of register SYS2ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0H_REG_SYS2ALERT0_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT0_CURHYS of register SYS2ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0H_REG_SYS2ALERT0_CURHYS(HWREG_U8 value); /**< Get element SYS2ALERT0_CURHYS of register SYS2ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0H_REG_SYS2ALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT0_HYS of register SYS2ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0H_REG_SYS2ALERT0_HYS(HWREG_U8 value); /**< Get element SYS2ALERT0_HYS of register SYS2ALERT0H_REG */
+
+
+/** @brief SYS2ALERT0L_REG register description at address offset 0x4f2c
+  *
+  *  SYS2 Alert0 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS2ALERT0_L :8; /**<  */
+} sSYS2ALERT0L_REGStructure;
+
+
+/** @brief SYS2ALERT0L_REG Bitfield widths
+*/
+#define lenSYS2ALERT0L_REG_SYS2ALERT0_L 8
+
+typedef enum
+{
+    SYS2ALERT0L_REG_LSB_SYS2ALERT0_L = 0
+} eSYS2ALERT0L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS2ALERT0L_REG_Content;
+    sSYS2ALERT0L_REGStructure SYS2ALERT0L_REG_Structure;
+} uSYS2ALERT0L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS2ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0L_REG(HWREG_U8 value); /** Get complete register SYS2ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0L_REG_SYS2ALERT0_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT0_L of register SYS2ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0L_REG_SYS2ALERT0_L(HWREG_U8 value); /**< Get element SYS2ALERT0_L of register SYS2ALERT0L_REG */
+
+
+/** @brief SYS2ALERT1H_REG register description at address offset 0x4f2d
+  *
+  *  SYS2 Alert1 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 SYS2ALERT1_H :1; /**<  */
+    HWREG_U8 SYS2ALERT1_CURHYS :3; /**<  */
+    HWREG_U8 SYS2ALERT1_HYS :4; /**<  */
+} sSYS2ALERT1H_REGStructure;
+
+
+/** @brief SYS2ALERT1H_REG Bitfield widths
+*/
+#define lenSYS2ALERT1H_REG_SYS2ALERT1_H 1
+#define lenSYS2ALERT1H_REG_SYS2ALERT1_CURHYS 3
+#define lenSYS2ALERT1H_REG_SYS2ALERT1_HYS 4
+
+typedef enum
+{
+    SYS2ALERT1H_REG_LSB_SYS2ALERT1_H = 0,
+    SYS2ALERT1H_REG_LSB_SYS2ALERT1_CURHYS = 1,
+    SYS2ALERT1H_REG_LSB_SYS2ALERT1_HYS = 4
+} eSYS2ALERT1H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS2ALERT1H_REG_Content;
+    sSYS2ALERT1H_REGStructure SYS2ALERT1H_REG_Structure;
+} uSYS2ALERT1H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS2ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1H_REG(HWREG_U8 value); /** Get complete register SYS2ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1H_REG_SYS2ALERT1_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT1_H of register SYS2ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1H_REG_SYS2ALERT1_H(HWREG_U8 value); /**< Get element SYS2ALERT1_H of register SYS2ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1H_REG_SYS2ALERT1_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT1_CURHYS of register SYS2ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1H_REG_SYS2ALERT1_CURHYS(HWREG_U8 value); /**< Get element SYS2ALERT1_CURHYS of register SYS2ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1H_REG_SYS2ALERT1_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT1_HYS of register SYS2ALERT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1H_REG_SYS2ALERT1_HYS(HWREG_U8 value); /**< Get element SYS2ALERT1_HYS of register SYS2ALERT1H_REG */
+
+
+/** @brief SYS2ALERT1L_REG register description at address offset 0x4f2e
+  *
+  *  SYS2 Alert1 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS2ALERT1_L :8; /**<  */
+} sSYS2ALERT1L_REGStructure;
+
+
+/** @brief SYS2ALERT1L_REG Bitfield widths
+*/
+#define lenSYS2ALERT1L_REG_SYS2ALERT1_L 8
+
+typedef enum
+{
+    SYS2ALERT1L_REG_LSB_SYS2ALERT1_L = 0
+} eSYS2ALERT1L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS2ALERT1L_REG_Content;
+    sSYS2ALERT1L_REGStructure SYS2ALERT1L_REG_Structure;
+} uSYS2ALERT1L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS2ALERT1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1L_REG(HWREG_U8 value); /** Get complete register SYS2ALERT1L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1L_REG_SYS2ALERT1_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT1_L of register SYS2ALERT1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1L_REG_SYS2ALERT1_L(HWREG_U8 value); /**< Get element SYS2ALERT1_L of register SYS2ALERT1L_REG */
+
+
+/** @brief BAT0ALERT0H_REG register description at address offset 0x4f2f
+  *
+  *  BAT0 Alert0 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 BAT0ALERT0_H :1; /**<  */
+    HWREG_U8 BAT0ALERT0_CURHYS :3; /**<  */
+    HWREG_U8 BAT0ALERT0_HYS :4; /**<  */
+} sBAT0ALERT0H_REGStructure;
+
+
+/** @brief BAT0ALERT0H_REG Bitfield widths
+*/
+#define lenBAT0ALERT0H_REG_BAT0ALERT0_H 1
+#define lenBAT0ALERT0H_REG_BAT0ALERT0_CURHYS 3
+#define lenBAT0ALERT0H_REG_BAT0ALERT0_HYS 4
+
+typedef enum
+{
+    BAT0ALERT0H_REG_LSB_BAT0ALERT0_H = 0,
+    BAT0ALERT0H_REG_LSB_BAT0ALERT0_CURHYS = 1,
+    BAT0ALERT0H_REG_LSB_BAT0ALERT0_HYS = 4
+} eBAT0ALERT0H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BAT0ALERT0H_REG_Content;
+    sBAT0ALERT0H_REGStructure BAT0ALERT0H_REG_Structure;
+} uBAT0ALERT0H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BAT0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0H_REG(HWREG_U8 value); /** Get complete register BAT0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0H_REG_BAT0ALERT0_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0ALERT0_H of register BAT0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0H_REG_BAT0ALERT0_H(HWREG_U8 value); /**< Get element BAT0ALERT0_H of register BAT0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0H_REG_BAT0ALERT0_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0ALERT0_CURHYS of register BAT0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0H_REG_BAT0ALERT0_CURHYS(HWREG_U8 value); /**< Get element BAT0ALERT0_CURHYS of register BAT0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0H_REG_BAT0ALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0ALERT0_HYS of register BAT0ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0H_REG_BAT0ALERT0_HYS(HWREG_U8 value); /**< Get element BAT0ALERT0_HYS of register BAT0ALERT0H_REG */
+
+
+/** @brief BAT0ALERT0L_REG register description at address offset 0x4f30
+  *
+  *  BAT0 Alert0 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 BAT0ALERT0_L :8; /**<  */
+} sBAT0ALERT0L_REGStructure;
+
+
+/** @brief BAT0ALERT0L_REG Bitfield widths
+*/
+#define lenBAT0ALERT0L_REG_BAT0ALERT0_L 8
+
+typedef enum
+{
+    BAT0ALERT0L_REG_LSB_BAT0ALERT0_L = 0
+} eBAT0ALERT0L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BAT0ALERT0L_REG_Content;
+    sBAT0ALERT0L_REGStructure BAT0ALERT0L_REG_Structure;
+} uBAT0ALERT0L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BAT0ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0L_REG(HWREG_U8 value); /** Get complete register BAT0ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0L_REG_BAT0ALERT0_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0ALERT0_L of register BAT0ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0L_REG_BAT0ALERT0_L(HWREG_U8 value); /**< Get element BAT0ALERT0_L of register BAT0ALERT0L_REG */
+
+
+/** @brief BAT1ALERT0H_REG register description at address offset 0x4f31
+  *
+  *  BAT1 Alert0 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 BAT1ALERT0_H :1; /**<  */
+    HWREG_U8 BAT1ALERT0_CURHYS :3; /**<  */
+    HWREG_U8 BAT1ALERT0_HYS :4; /**<  */
+} sBAT1ALERT0H_REGStructure;
+
+
+/** @brief BAT1ALERT0H_REG Bitfield widths
+*/
+#define lenBAT1ALERT0H_REG_BAT1ALERT0_H 1
+#define lenBAT1ALERT0H_REG_BAT1ALERT0_CURHYS 3
+#define lenBAT1ALERT0H_REG_BAT1ALERT0_HYS 4
+
+typedef enum
+{
+    BAT1ALERT0H_REG_LSB_BAT1ALERT0_H = 0,
+    BAT1ALERT0H_REG_LSB_BAT1ALERT0_CURHYS = 1,
+    BAT1ALERT0H_REG_LSB_BAT1ALERT0_HYS = 4
+} eBAT1ALERT0H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BAT1ALERT0H_REG_Content;
+    sBAT1ALERT0H_REGStructure BAT1ALERT0H_REG_Structure;
+} uBAT1ALERT0H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BAT1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0H_REG(HWREG_U8 value); /** Get complete register BAT1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0H_REG_BAT1ALERT0_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1ALERT0_H of register BAT1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0H_REG_BAT1ALERT0_H(HWREG_U8 value); /**< Get element BAT1ALERT0_H of register BAT1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0H_REG_BAT1ALERT0_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1ALERT0_CURHYS of register BAT1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0H_REG_BAT1ALERT0_CURHYS(HWREG_U8 value); /**< Get element BAT1ALERT0_CURHYS of register BAT1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0H_REG_BAT1ALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1ALERT0_HYS of register BAT1ALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0H_REG_BAT1ALERT0_HYS(HWREG_U8 value); /**< Get element BAT1ALERT0_HYS of register BAT1ALERT0H_REG */
+
+
+/** @brief BAT1ALERT0L_REG register description at address offset 0x4f32
+  *
+  *  BAT1 Alert0 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 BAT1ALERT0_L :8; /**<  */
+} sBAT1ALERT0L_REGStructure;
+
+
+/** @brief BAT1ALERT0L_REG Bitfield widths
+*/
+#define lenBAT1ALERT0L_REG_BAT1ALERT0_L 8
+
+typedef enum
+{
+    BAT1ALERT0L_REG_LSB_BAT1ALERT0_L = 0
+} eBAT1ALERT0L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BAT1ALERT0L_REG_Content;
+    sBAT1ALERT0L_REGStructure BAT1ALERT0L_REG_Structure;
+} uBAT1ALERT0L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BAT1ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0L_REG(HWREG_U8 value); /** Get complete register BAT1ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0L_REG_BAT1ALERT0_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1ALERT0_L of register BAT1ALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0L_REG_BAT1ALERT0_L(HWREG_U8 value); /**< Get element BAT1ALERT0_L of register BAT1ALERT0L_REG */
+
+
+/** @brief PMICALERT0H_REG register description at address offset 0x4f33
+  *
+  *  PMIC Alert0 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 PMICALERT0_H :4; /**<  */
+    HWREG_U8 PMICALERT0_HYS :4; /**<  */
+} sPMICALERT0H_REGStructure;
+
+
+/** @brief PMICALERT0H_REG Bitfield widths
+*/
+#define lenPMICALERT0H_REG_PMICALERT0_H 4
+#define lenPMICALERT0H_REG_PMICALERT0_HYS 4
+
+typedef enum
+{
+    PMICALERT0H_REG_LSB_PMICALERT0_H = 0,
+    PMICALERT0H_REG_LSB_PMICALERT0_HYS = 4
+} ePMICALERT0H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PMICALERT0H_REG_Content;
+    sPMICALERT0H_REGStructure PMICALERT0H_REG_Structure;
+} uPMICALERT0H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PMICALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT0H_REG(HWREG_U8 value); /** Get complete register PMICALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT0H_REG_PMICALERT0_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICALERT0_H of register PMICALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT0H_REG_PMICALERT0_H(HWREG_U8 value); /**< Get element PMICALERT0_H of register PMICALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT0H_REG_PMICALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICALERT0_HYS of register PMICALERT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT0H_REG_PMICALERT0_HYS(HWREG_U8 value); /**< Get element PMICALERT0_HYS of register PMICALERT0H_REG */
+
+
+/** @brief PMICALERT0L_REG register description at address offset 0x4f34
+  *
+  *  PMIC Alert0 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 PMICALERT0_L :8; /**<  */
+} sPMICALERT0L_REGStructure;
+
+
+/** @brief PMICALERT0L_REG Bitfield widths
+*/
+#define lenPMICALERT0L_REG_PMICALERT0_L 8
+
+typedef enum
+{
+    PMICALERT0L_REG_LSB_PMICALERT0_L = 0
+} ePMICALERT0L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PMICALERT0L_REG_Content;
+    sPMICALERT0L_REGStructure PMICALERT0L_REG_Structure;
+} uPMICALERT0L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PMICALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT0L_REG(HWREG_U8 value); /** Get complete register PMICALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT0L_REG_PMICALERT0_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICALERT0_L of register PMICALERT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT0L_REG_PMICALERT0_L(HWREG_U8 value); /**< Get element PMICALERT0_L of register PMICALERT0L_REG */
+
+
+/** @brief DEV2_SETREGADR_REG register description at address offset 0x4f35
+  *
+  *  sVID Set Register Address Register
+  */
+typedef struct
+{
+    HWREG_U8 DEV2_SETREGADR :8; /**<  */
+} sDEV2_SETREGADR_REGStructure;
+
+
+/** @brief DEV2_SETREGADR_REG Bitfield widths
+*/
+#define lenDEV2_SETREGADR_REG_DEV2_SETREGADR 8
+
+typedef enum
+{
+    DEV2_SETREGADR_REG_LSB_DEV2_SETREGADR = 0
+} eDEV2_SETREGADR_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV2_SETREGADR_REG_Content;
+    sDEV2_SETREGADR_REGStructure DEV2_SETREGADR_REG_Structure;
+} uDEV2_SETREGADR_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV2_SETREGADR_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register DEV2_SETREGADR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_SETREGADR_REG(HWREG_U8 value); /** Get complete register DEV2_SETREGADR_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV2_SETREGADR_REG_DEV2_SETREGADR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DEV2_SETREGADR of register DEV2_SETREGADR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_SETREGADR_REG_DEV2_SETREGADR(HWREG_U8 value); /**< Get element DEV2_SETREGADR of register DEV2_SETREGADR_REG */
+
+
+/** @brief GPMEASALERTH_REG register description at address offset 0x4f36
+  *
+  *  General Purpose Measurement Alert (MSB)
+  */
+typedef struct
+{
+    HWREG_U8 GPALERT_H :1; /**<  */
+    HWREG_U8 GPALERT_CURHYS :3; /**<  */
+    HWREG_U8 GPALERT_HYS :4; /**<  */
+} sGPMEASALERTH_REGStructure;
+
+
+/** @brief GPMEASALERTH_REG Bitfield widths
+*/
+#define lenGPMEASALERTH_REG_GPALERT_H 1
+#define lenGPMEASALERTH_REG_GPALERT_CURHYS 3
+#define lenGPMEASALERTH_REG_GPALERT_HYS 4
+
+typedef enum
+{
+    GPMEASALERTH_REG_LSB_GPALERT_H = 0,
+    GPMEASALERTH_REG_LSB_GPALERT_CURHYS = 1,
+    GPMEASALERTH_REG_LSB_GPALERT_HYS = 4
+} eGPMEASALERTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPMEASALERTH_REG_Content;
+    sGPMEASALERTH_REGStructure GPMEASALERTH_REG_Structure;
+} uGPMEASALERTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPMEASALERTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTH_REG(HWREG_U8 value); /** Get complete register GPMEASALERTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTH_REG_GPALERT_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPALERT_H of register GPMEASALERTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTH_REG_GPALERT_H(HWREG_U8 value); /**< Get element GPALERT_H of register GPMEASALERTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTH_REG_GPALERT_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPALERT_CURHYS of register GPMEASALERTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTH_REG_GPALERT_CURHYS(HWREG_U8 value); /**< Get element GPALERT_CURHYS of register GPMEASALERTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTH_REG_GPALERT_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPALERT_HYS of register GPMEASALERTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTH_REG_GPALERT_HYS(HWREG_U8 value); /**< Get element GPALERT_HYS of register GPMEASALERTH_REG */
+
+
+/** @brief GPMEASALERTL_REG register description at address offset 0x4f37
+  *
+  *  Gerneral Purpose Measurement Alert (LSB)
+  */
+typedef struct
+{
+    HWREG_U8 GPALERT_L :8; /**<  */
+} sGPMEASALERTL_REGStructure;
+
+
+/** @brief GPMEASALERTL_REG Bitfield widths
+*/
+#define lenGPMEASALERTL_REG_GPALERT_L 8
+
+typedef enum
+{
+    GPMEASALERTL_REG_LSB_GPALERT_L = 0
+} eGPMEASALERTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPMEASALERTL_REG_Content;
+    sGPMEASALERTL_REGStructure GPMEASALERTL_REG_Structure;
+} uGPMEASALERTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPMEASALERTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTL_REG(HWREG_U8 value); /** Get complete register GPMEASALERTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTL_REG_GPALERT_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPALERT_L of register GPMEASALERTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTL_REG_GPALERT_L(HWREG_U8 value); /**< Get element GPALERT_L of register GPMEASALERTL_REG */
+
+
+/** @brief THRMRSLT0H_REG register description at address offset 0x4f38
+  *
+  *  Thermal Result Register 0 High (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 SYS0TEMP_H :4; /**<  */
+    const HWREG_U8 SYS0CURSRC :4; /**<  */
+} sTHRMRSLT0H_REGStructure;
+
+
+/** @brief THRMRSLT0H_REG Bitfield widths
+*/
+#define lenTHRMRSLT0H_REG_SYS0TEMP_H 4
+#define lenTHRMRSLT0H_REG_SYS0CURSRC 4
+
+typedef enum
+{
+    THRMRSLT0H_REG_LSB_SYS0TEMP_H = 0,
+    THRMRSLT0H_REG_LSB_SYS0CURSRC = 4
+} eTHRMRSLT0H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT0H_REG_Content;
+    sTHRMRSLT0H_REGStructure THRMRSLT0H_REG_Structure;
+} uTHRMRSLT0H_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT0H_REG(HWREG_U8 value); /** Get complete register THRMRSLT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT0H_REG_SYS0TEMP_H(HWREG_U8 value); /**< Get element SYS0TEMP_H of register THRMRSLT0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT0H_REG_SYS0CURSRC(HWREG_U8 value); /**< Get element SYS0CURSRC of register THRMRSLT0H_REG */
+
+
+/** @brief THRMRSLT0L_REG register description at address offset 0x4f39
+  *
+  *  Thermal Result Register 0 Low (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 SYS0TEMP_L :8; /**<  */
+} sTHRMRSLT0L_REGStructure;
+
+
+/** @brief THRMRSLT0L_REG Bitfield widths
+*/
+#define lenTHRMRSLT0L_REG_SYS0TEMP_L 8
+
+typedef enum
+{
+    THRMRSLT0L_REG_LSB_SYS0TEMP_L = 0
+} eTHRMRSLT0L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT0L_REG_Content;
+    sTHRMRSLT0L_REGStructure THRMRSLT0L_REG_Structure;
+} uTHRMRSLT0L_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT0L_REG(HWREG_U8 value); /** Get complete register THRMRSLT0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT0L_REG_SYS0TEMP_L(HWREG_U8 value); /**< Get element SYS0TEMP_L of register THRMRSLT0L_REG */
+
+
+/** @brief THRMRSLT1H_REG register description at address offset 0x4f3a
+  *
+  *  Thermal Result Register 1 High (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 SYS1TEMP_H :4; /**<  */
+    const HWREG_U8 SYS1CURSRC :4; /**<  */
+} sTHRMRSLT1H_REGStructure;
+
+
+/** @brief THRMRSLT1H_REG Bitfield widths
+*/
+#define lenTHRMRSLT1H_REG_SYS1TEMP_H 4
+#define lenTHRMRSLT1H_REG_SYS1CURSRC 4
+
+typedef enum
+{
+    THRMRSLT1H_REG_LSB_SYS1TEMP_H = 0,
+    THRMRSLT1H_REG_LSB_SYS1CURSRC = 4
+} eTHRMRSLT1H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT1H_REG_Content;
+    sTHRMRSLT1H_REGStructure THRMRSLT1H_REG_Structure;
+} uTHRMRSLT1H_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT1H_REG(HWREG_U8 value); /** Get complete register THRMRSLT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT1H_REG_SYS1TEMP_H(HWREG_U8 value); /**< Get element SYS1TEMP_H of register THRMRSLT1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT1H_REG_SYS1CURSRC(HWREG_U8 value); /**< Get element SYS1CURSRC of register THRMRSLT1H_REG */
+
+
+/** @brief THRMRSLT1L_REG register description at address offset 0x4f3b
+  *
+  *  Thermal Result Register 1 Low (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 SYS1TEMP_L :8; /**<  */
+} sTHRMRSLT1L_REGStructure;
+
+
+/** @brief THRMRSLT1L_REG Bitfield widths
+*/
+#define lenTHRMRSLT1L_REG_SYS1TEMP_L 8
+
+typedef enum
+{
+    THRMRSLT1L_REG_LSB_SYS1TEMP_L = 0
+} eTHRMRSLT1L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT1L_REG_Content;
+    sTHRMRSLT1L_REGStructure THRMRSLT1L_REG_Structure;
+} uTHRMRSLT1L_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT1L_REG(HWREG_U8 value); /** Get complete register THRMRSLT1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT1L_REG_SYS1TEMP_L(HWREG_U8 value); /**< Get element SYS1TEMP_L of register THRMRSLT1L_REG */
+
+
+/** @brief THRMRSLT2H_REG register description at address offset 0x4f3c
+  *
+  *  Thermal Result Register 2 High (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 SYS2TEMP_H :4; /**<  */
+    const HWREG_U8 SYS2CURSRC :4; /**<  */
+} sTHRMRSLT2H_REGStructure;
+
+
+/** @brief THRMRSLT2H_REG Bitfield widths
+*/
+#define lenTHRMRSLT2H_REG_SYS2TEMP_H 4
+#define lenTHRMRSLT2H_REG_SYS2CURSRC 4
+
+typedef enum
+{
+    THRMRSLT2H_REG_LSB_SYS2TEMP_H = 0,
+    THRMRSLT2H_REG_LSB_SYS2CURSRC = 4
+} eTHRMRSLT2H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT2H_REG_Content;
+    sTHRMRSLT2H_REGStructure THRMRSLT2H_REG_Structure;
+} uTHRMRSLT2H_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT2H_REG(HWREG_U8 value); /** Get complete register THRMRSLT2H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT2H_REG_SYS2TEMP_H(HWREG_U8 value); /**< Get element SYS2TEMP_H of register THRMRSLT2H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT2H_REG_SYS2CURSRC(HWREG_U8 value); /**< Get element SYS2CURSRC of register THRMRSLT2H_REG */
+
+
+/** @brief THRMRSLT2L_REG register description at address offset 0x4f3d
+  *
+  *  Thermal Result Register 2 Low (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 SYS2TEMP_L :8; /**<  */
+} sTHRMRSLT2L_REGStructure;
+
+
+/** @brief THRMRSLT2L_REG Bitfield widths
+*/
+#define lenTHRMRSLT2L_REG_SYS2TEMP_L 8
+
+typedef enum
+{
+    THRMRSLT2L_REG_LSB_SYS2TEMP_L = 0
+} eTHRMRSLT2L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT2L_REG_Content;
+    sTHRMRSLT2L_REGStructure THRMRSLT2L_REG_Structure;
+} uTHRMRSLT2L_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT2L_REG(HWREG_U8 value); /** Get complete register THRMRSLT2L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT2L_REG_SYS2TEMP_L(HWREG_U8 value); /**< Get element SYS2TEMP_L of register THRMRSLT2L_REG */
+
+
+/** @brief THRMRSLT3H_REG register description at address offset 0x4f3e
+  *
+  *  Thermal Result Register 3 High (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 THERM_BAT0TEMP_H :4; /**<  */
+    const HWREG_U8 BAT0TEMPCURSRC :4; /**<  */
+} sTHRMRSLT3H_REGStructure;
+
+
+/** @brief THRMRSLT3H_REG Bitfield widths
+*/
+#define lenTHRMRSLT3H_REG_THERM_BAT0TEMP_H 4
+#define lenTHRMRSLT3H_REG_BAT0TEMPCURSRC 4
+
+typedef enum
+{
+    THRMRSLT3H_REG_LSB_THERM_BAT0TEMP_H = 0,
+    THRMRSLT3H_REG_LSB_BAT0TEMPCURSRC = 4
+} eTHRMRSLT3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT3H_REG_Content;
+    sTHRMRSLT3H_REGStructure THRMRSLT3H_REG_Structure;
+} uTHRMRSLT3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT3H_REG(HWREG_U8 value); /** Get complete register THRMRSLT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT3H_REG_THERM_BAT0TEMP_H(HWREG_U8 value); /**< Get element THERM_BAT0TEMP_H of register THRMRSLT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT3H_REG_BAT0TEMPCURSRC(HWREG_U8 value); /**< Get element BAT0TEMPCURSRC of register THRMRSLT3H_REG */
+
+
+/** @brief THRMRSLT3L_REG register description at address offset 0x4f3f
+  *
+  *  Thermal Result Register 3 Low (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 THERM_BAT0TEMP_L :8; /**<  */
+} sTHRMRSLT3L_REGStructure;
+
+
+/** @brief THRMRSLT3L_REG Bitfield widths
+*/
+#define lenTHRMRSLT3L_REG_THERM_BAT0TEMP_L 8
+
+typedef enum
+{
+    THRMRSLT3L_REG_LSB_THERM_BAT0TEMP_L = 0
+} eTHRMRSLT3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT3L_REG_Content;
+    sTHRMRSLT3L_REGStructure THRMRSLT3L_REG_Structure;
+} uTHRMRSLT3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT3L_REG(HWREG_U8 value); /** Get complete register THRMRSLT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT3L_REG_THERM_BAT0TEMP_L(HWREG_U8 value); /**< Get element THERM_BAT0TEMP_L of register THRMRSLT3L_REG */
+
+
+/** @brief THRMRSLT4H_REG register description at address offset 0x4f40
+  *
+  *  Thermal Result Register 4 High (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 THERM_BAT1TEMP_H :4; /**<  */
+    const HWREG_U8 BAT1TEMPCURSRC :4; /**<  */
+} sTHRMRSLT4H_REGStructure;
+
+
+/** @brief THRMRSLT4H_REG Bitfield widths
+*/
+#define lenTHRMRSLT4H_REG_THERM_BAT1TEMP_H 4
+#define lenTHRMRSLT4H_REG_BAT1TEMPCURSRC 4
+
+typedef enum
+{
+    THRMRSLT4H_REG_LSB_THERM_BAT1TEMP_H = 0,
+    THRMRSLT4H_REG_LSB_BAT1TEMPCURSRC = 4
+} eTHRMRSLT4H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT4H_REG_Content;
+    sTHRMRSLT4H_REGStructure THRMRSLT4H_REG_Structure;
+} uTHRMRSLT4H_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT4H_REG(HWREG_U8 value); /** Get complete register THRMRSLT4H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT4H_REG_THERM_BAT1TEMP_H(HWREG_U8 value); /**< Get element THERM_BAT1TEMP_H of register THRMRSLT4H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT4H_REG_BAT1TEMPCURSRC(HWREG_U8 value); /**< Get element BAT1TEMPCURSRC of register THRMRSLT4H_REG */
+
+
+/** @brief THRMRSLT4L_REG register description at address offset 0x4f41
+  *
+  *  Thermal Result Register 4 Low (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 THERM_BAT1TEMP_L :8; /**<  */
+} sTHRMRSLT4L_REGStructure;
+
+
+/** @brief THRMRSLT4L_REG Bitfield widths
+*/
+#define lenTHRMRSLT4L_REG_THERM_BAT1TEMP_L 8
+
+typedef enum
+{
+    THRMRSLT4L_REG_LSB_THERM_BAT1TEMP_L = 0
+} eTHRMRSLT4L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT4L_REG_Content;
+    sTHRMRSLT4L_REGStructure THRMRSLT4L_REG_Structure;
+} uTHRMRSLT4L_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT4L_REG(HWREG_U8 value); /** Get complete register THRMRSLT4L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT4L_REG_THERM_BAT1TEMP_L(HWREG_U8 value); /**< Get element THERM_BAT1TEMP_L of register THRMRSLT4L_REG */
+
+
+/** @brief THRMRSLT5H_REG register description at address offset 0x4f42
+  *
+  *  Thermal Result Register 5 High (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 PMICTEMP_H :4; /**<  */
+    const HWREG_U8 PMICTEMPCURSRC :4; /**<  */
+} sTHRMRSLT5H_REGStructure;
+
+
+/** @brief THRMRSLT5H_REG Bitfield widths
+*/
+#define lenTHRMRSLT5H_REG_PMICTEMP_H 4
+#define lenTHRMRSLT5H_REG_PMICTEMPCURSRC 4
+
+typedef enum
+{
+    THRMRSLT5H_REG_LSB_PMICTEMP_H = 0,
+    THRMRSLT5H_REG_LSB_PMICTEMPCURSRC = 4
+} eTHRMRSLT5H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT5H_REG_Content;
+    sTHRMRSLT5H_REGStructure THRMRSLT5H_REG_Structure;
+} uTHRMRSLT5H_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT5H_REG(HWREG_U8 value); /** Get complete register THRMRSLT5H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT5H_REG_PMICTEMP_H(HWREG_U8 value); /**< Get element PMICTEMP_H of register THRMRSLT5H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT5H_REG_PMICTEMPCURSRC(HWREG_U8 value); /**< Get element PMICTEMPCURSRC of register THRMRSLT5H_REG */
+
+
+/** @brief THRMRSLT5L_REG register description at address offset 0x4f43
+  *
+  *  Thermal Result Register 5 Low (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 PMICTEMP_L :8; /**<  */
+} sTHRMRSLT5L_REGStructure;
+
+
+/** @brief THRMRSLT5L_REG Bitfield widths
+*/
+#define lenTHRMRSLT5L_REG_PMICTEMP_L 8
+
+typedef enum
+{
+    THRMRSLT5L_REG_LSB_PMICTEMP_L = 0
+} eTHRMRSLT5L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMRSLT5L_REG_Content;
+    sTHRMRSLT5L_REGStructure THRMRSLT5L_REG_Structure;
+} uTHRMRSLT5L_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT5L_REG(HWREG_U8 value); /** Get complete register THRMRSLT5L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT5L_REG_PMICTEMP_L(HWREG_U8 value); /**< Get element PMICTEMP_L of register THRMRSLT5L_REG */
+
+
+/** @brief THRMZN0H_REG register description at address offset 0x4f44
+  *
+  *  Battery Thermal Zone 0 Limit Register High
+  */
+typedef struct
+{
+    HWREG_U8 TCOLD_H :1; /**<  */
+    HWREG_U8 Z0CURHYS :3; /**<  */
+    HWREG_U8 Z0HYS :4; /**<  */
+} sTHRMZN0H_REGStructure;
+
+
+/** @brief THRMZN0H_REG Bitfield widths
+*/
+#define lenTHRMZN0H_REG_TCOLD_H 1
+#define lenTHRMZN0H_REG_Z0CURHYS 3
+#define lenTHRMZN0H_REG_Z0HYS 4
+
+typedef enum
+{
+    THRMZN0H_REG_LSB_TCOLD_H = 0,
+    THRMZN0H_REG_LSB_Z0CURHYS = 1,
+    THRMZN0H_REG_LSB_Z0HYS = 4
+} eTHRMZN0H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMZN0H_REG_Content;
+    sTHRMZN0H_REGStructure THRMZN0H_REG_Structure;
+} uTHRMZN0H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMZN0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0H_REG(HWREG_U8 value); /** Get complete register THRMZN0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0H_REG_TCOLD_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TCOLD_H of register THRMZN0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0H_REG_TCOLD_H(HWREG_U8 value); /**< Get element TCOLD_H of register THRMZN0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0H_REG_Z0CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element Z0CURHYS of register THRMZN0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0H_REG_Z0CURHYS(HWREG_U8 value); /**< Get element Z0CURHYS of register THRMZN0H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0H_REG_Z0HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element Z0HYS of register THRMZN0H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0H_REG_Z0HYS(HWREG_U8 value); /**< Get element Z0HYS of register THRMZN0H_REG */
+
+
+/** @brief THRMZN0L_REG register description at address offset 0x4f45
+  *
+  *  Battery Thermal Zone 0 Limit Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TCOLD_L :8; /**<  */
+} sTHRMZN0L_REGStructure;
+
+
+/** @brief THRMZN0L_REG Bitfield widths
+*/
+#define lenTHRMZN0L_REG_TCOLD_L 8
+
+typedef enum
+{
+    THRMZN0L_REG_LSB_TCOLD_L = 0
+} eTHRMZN0L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMZN0L_REG_Content;
+    sTHRMZN0L_REGStructure THRMZN0L_REG_Structure;
+} uTHRMZN0L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMZN0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0L_REG(HWREG_U8 value); /** Get complete register THRMZN0L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0L_REG_TCOLD_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TCOLD_L of register THRMZN0L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0L_REG_TCOLD_L(HWREG_U8 value); /**< Get element TCOLD_L of register THRMZN0L_REG */
+
+
+/** @brief THRMZN1H_REG register description at address offset 0x4f46
+  *
+  *  Battery Thermal Zone 1 Limit Register High
+  */
+typedef struct
+{
+    HWREG_U8 TCOOL_H :1; /**<  */
+    HWREG_U8 Z1CURHYS :3; /**<  */
+    HWREG_U8 Z1HYS :4; /**<  */
+} sTHRMZN1H_REGStructure;
+
+
+/** @brief THRMZN1H_REG Bitfield widths
+*/
+#define lenTHRMZN1H_REG_TCOOL_H 1
+#define lenTHRMZN1H_REG_Z1CURHYS 3
+#define lenTHRMZN1H_REG_Z1HYS 4
+
+typedef enum
+{
+    THRMZN1H_REG_LSB_TCOOL_H = 0,
+    THRMZN1H_REG_LSB_Z1CURHYS = 1,
+    THRMZN1H_REG_LSB_Z1HYS = 4
+} eTHRMZN1H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMZN1H_REG_Content;
+    sTHRMZN1H_REGStructure THRMZN1H_REG_Structure;
+} uTHRMZN1H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMZN1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1H_REG(HWREG_U8 value); /** Get complete register THRMZN1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1H_REG_TCOOL_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TCOOL_H of register THRMZN1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1H_REG_TCOOL_H(HWREG_U8 value); /**< Get element TCOOL_H of register THRMZN1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1H_REG_Z1CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element Z1CURHYS of register THRMZN1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1H_REG_Z1CURHYS(HWREG_U8 value); /**< Get element Z1CURHYS of register THRMZN1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1H_REG_Z1HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element Z1HYS of register THRMZN1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1H_REG_Z1HYS(HWREG_U8 value); /**< Get element Z1HYS of register THRMZN1H_REG */
+
+
+/** @brief THRMZN1L_REG register description at address offset 0x4f47
+  *
+  *  Battery Thermal Zone 1 Limit Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TCOOL_L :8; /**<  */
+} sTHRMZN1L_REGStructure;
+
+
+/** @brief THRMZN1L_REG Bitfield widths
+*/
+#define lenTHRMZN1L_REG_TCOOL_L 8
+
+typedef enum
+{
+    THRMZN1L_REG_LSB_TCOOL_L = 0
+} eTHRMZN1L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMZN1L_REG_Content;
+    sTHRMZN1L_REGStructure THRMZN1L_REG_Structure;
+} uTHRMZN1L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMZN1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1L_REG(HWREG_U8 value); /** Get complete register THRMZN1L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1L_REG_TCOOL_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TCOOL_L of register THRMZN1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1L_REG_TCOOL_L(HWREG_U8 value); /**< Get element TCOOL_L of register THRMZN1L_REG */
+
+
+/** @brief THRMZN2H_REG register description at address offset 0x4f48
+  *
+  *  Battery Thermal Zone 2 Limit Register High
+  */
+typedef struct
+{
+    HWREG_U8 TWARM_H :1; /**<  */
+    HWREG_U8 Z2CURHYS :3; /**<  */
+    HWREG_U8 Z2HYS :4; /**<  */
+} sTHRMZN2H_REGStructure;
+
+
+/** @brief THRMZN2H_REG Bitfield widths
+*/
+#define lenTHRMZN2H_REG_TWARM_H 1
+#define lenTHRMZN2H_REG_Z2CURHYS 3
+#define lenTHRMZN2H_REG_Z2HYS 4
+
+typedef enum
+{
+    THRMZN2H_REG_LSB_TWARM_H = 0,
+    THRMZN2H_REG_LSB_Z2CURHYS = 1,
+    THRMZN2H_REG_LSB_Z2HYS = 4
+} eTHRMZN2H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMZN2H_REG_Content;
+    sTHRMZN2H_REGStructure THRMZN2H_REG_Structure;
+} uTHRMZN2H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMZN2H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2H_REG(HWREG_U8 value); /** Get complete register THRMZN2H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2H_REG_TWARM_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TWARM_H of register THRMZN2H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2H_REG_TWARM_H(HWREG_U8 value); /**< Get element TWARM_H of register THRMZN2H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2H_REG_Z2CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element Z2CURHYS of register THRMZN2H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2H_REG_Z2CURHYS(HWREG_U8 value); /**< Get element Z2CURHYS of register THRMZN2H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2H_REG_Z2HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element Z2HYS of register THRMZN2H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2H_REG_Z2HYS(HWREG_U8 value); /**< Get element Z2HYS of register THRMZN2H_REG */
+
+
+/** @brief THRMZN2L_REG register description at address offset 0x4f49
+  *
+  *  Battery Thermal Zone 2 Limit Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TWARM_L :8; /**<  */
+} sTHRMZN2L_REGStructure;
+
+
+/** @brief THRMZN2L_REG Bitfield widths
+*/
+#define lenTHRMZN2L_REG_TWARM_L 8
+
+typedef enum
+{
+    THRMZN2L_REG_LSB_TWARM_L = 0
+} eTHRMZN2L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMZN2L_REG_Content;
+    sTHRMZN2L_REGStructure THRMZN2L_REG_Structure;
+} uTHRMZN2L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMZN2L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2L_REG(HWREG_U8 value); /** Get complete register THRMZN2L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2L_REG_TWARM_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TWARM_L of register THRMZN2L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2L_REG_TWARM_L(HWREG_U8 value); /**< Get element TWARM_L of register THRMZN2L_REG */
+
+
+/** @brief THRMZN3H_REG register description at address offset 0x4f4a
+  *
+  *  Battery Thermal Zone 3 Limit Register High
+  */
+typedef struct
+{
+    HWREG_U8 THOT_H :1; /**<  */
+    HWREG_U8 Z3CURHYS :3; /**<  */
+    HWREG_U8 Z3HYS :4; /**<  */
+} sTHRMZN3H_REGStructure;
+
+
+/** @brief THRMZN3H_REG Bitfield widths
+*/
+#define lenTHRMZN3H_REG_THOT_H 1
+#define lenTHRMZN3H_REG_Z3CURHYS 3
+#define lenTHRMZN3H_REG_Z3HYS 4
+
+typedef enum
+{
+    THRMZN3H_REG_LSB_THOT_H = 0,
+    THRMZN3H_REG_LSB_Z3CURHYS = 1,
+    THRMZN3H_REG_LSB_Z3HYS = 4
+} eTHRMZN3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMZN3H_REG_Content;
+    sTHRMZN3H_REGStructure THRMZN3H_REG_Structure;
+} uTHRMZN3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMZN3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3H_REG(HWREG_U8 value); /** Get complete register THRMZN3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3H_REG_THOT_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element THOT_H of register THRMZN3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3H_REG_THOT_H(HWREG_U8 value); /**< Get element THOT_H of register THRMZN3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3H_REG_Z3CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element Z3CURHYS of register THRMZN3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3H_REG_Z3CURHYS(HWREG_U8 value); /**< Get element Z3CURHYS of register THRMZN3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3H_REG_Z3HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element Z3HYS of register THRMZN3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3H_REG_Z3HYS(HWREG_U8 value); /**< Get element Z3HYS of register THRMZN3H_REG */
+
+
+/** @brief THRMZN3L_REG register description at address offset 0x4f4b
+  *
+  *  Battery Thermal Zone 3 Limit Register Low
+  */
+typedef struct
+{
+    HWREG_U8 THOT_L :8; /**<  */
+} sTHRMZN3L_REGStructure;
+
+
+/** @brief THRMZN3L_REG Bitfield widths
+*/
+#define lenTHRMZN3L_REG_THOT_L 8
+
+typedef enum
+{
+    THRMZN3L_REG_LSB_THOT_L = 0
+} eTHRMZN3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMZN3L_REG_Content;
+    sTHRMZN3L_REGStructure THRMZN3L_REG_Structure;
+} uTHRMZN3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMZN3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3L_REG(HWREG_U8 value); /** Get complete register THRMZN3L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3L_REG_THOT_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element THOT_L of register THRMZN3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3L_REG_THOT_L(HWREG_U8 value); /**< Get element THOT_L of register THRMZN3L_REG */
+
+
+/** @brief THRMZN4H_REG register description at address offset 0x4f4c
+  *
+  *  Battery Thermal Zone 4 Limit Register High
+  */
+typedef struct
+{
+    HWREG_U8 TEMERGHIGH_H :1; /**<  */
+    HWREG_U8 Z4CURHYS :3; /**<  */
+    HWREG_U8 Z4HYS :4; /**<  */
+} sTHRMZN4H_REGStructure;
+
+
+/** @brief THRMZN4H_REG Bitfield widths
+*/
+#define lenTHRMZN4H_REG_TEMERGHIGH_H 1
+#define lenTHRMZN4H_REG_Z4CURHYS 3
+#define lenTHRMZN4H_REG_Z4HYS 4
+
+typedef enum
+{
+    THRMZN4H_REG_LSB_TEMERGHIGH_H = 0,
+    THRMZN4H_REG_LSB_Z4CURHYS = 1,
+    THRMZN4H_REG_LSB_Z4HYS = 4
+} eTHRMZN4H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMZN4H_REG_Content;
+    sTHRMZN4H_REGStructure THRMZN4H_REG_Structure;
+} uTHRMZN4H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMZN4H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4H_REG(HWREG_U8 value); /** Get complete register THRMZN4H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4H_REG_TEMERGHIGH_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TEMERGHIGH_H of register THRMZN4H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4H_REG_TEMERGHIGH_H(HWREG_U8 value); /**< Get element TEMERGHIGH_H of register THRMZN4H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4H_REG_Z4CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element Z4CURHYS of register THRMZN4H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4H_REG_Z4CURHYS(HWREG_U8 value); /**< Get element Z4CURHYS of register THRMZN4H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4H_REG_Z4HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element Z4HYS of register THRMZN4H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4H_REG_Z4HYS(HWREG_U8 value); /**< Get element Z4HYS of register THRMZN4H_REG */
+
+
+/** @brief THRMZN4L_REG register description at address offset 0x4f4d
+  *
+  *  Battery Thermal Zone 4 Limit Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TEMERGHIGH_L :8; /**<  */
+} sTHRMZN4L_REGStructure;
+
+
+/** @brief THRMZN4L_REG Bitfield widths
+*/
+#define lenTHRMZN4L_REG_TEMERGHIGH_L 8
+
+typedef enum
+{
+    THRMZN4L_REG_LSB_TEMERGHIGH_L = 0
+} eTHRMZN4L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMZN4L_REG_Content;
+    sTHRMZN4L_REGStructure THRMZN4L_REG_Structure;
+} uTHRMZN4L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMZN4L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4L_REG(HWREG_U8 value); /** Get complete register THRMZN4L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4L_REG_TEMERGHIGH_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TEMERGHIGH_L of register THRMZN4L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4L_REG_TEMERGHIGH_L(HWREG_U8 value); /**< Get element TEMERGHIGH_L of register THRMZN4L_REG */
+
+
+/** @brief BATCRITCOLDH_REG register description at address offset 0x4f4e
+  *
+  *  Battery Critical Thermal Limit Cold High
+  */
+typedef struct
+{
+    HWREG_U8 BATCRITCOLD_H :1; /**<  */
+    HWREG_U8 BATCRITCCURHYS :3; /**<  */
+    HWREG_U8 BATCRITCHYS :4; /**<  */
+} sBATCRITCOLDH_REGStructure;
+
+
+/** @brief BATCRITCOLDH_REG Bitfield widths
+*/
+#define lenBATCRITCOLDH_REG_BATCRITCOLD_H 1
+#define lenBATCRITCOLDH_REG_BATCRITCCURHYS 3
+#define lenBATCRITCOLDH_REG_BATCRITCHYS 4
+
+typedef enum
+{
+    BATCRITCOLDH_REG_LSB_BATCRITCOLD_H = 0,
+    BATCRITCOLDH_REG_LSB_BATCRITCCURHYS = 1,
+    BATCRITCOLDH_REG_LSB_BATCRITCHYS = 4
+} eBATCRITCOLDH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATCRITCOLDH_REG_Content;
+    sBATCRITCOLDH_REGStructure BATCRITCOLDH_REG_Structure;
+} uBATCRITCOLDH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATCRITCOLDH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDH_REG(HWREG_U8 value); /** Get complete register BATCRITCOLDH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDH_REG_BATCRITCOLD_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRITCOLD_H of register BATCRITCOLDH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDH_REG_BATCRITCOLD_H(HWREG_U8 value); /**< Get element BATCRITCOLD_H of register BATCRITCOLDH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDH_REG_BATCRITCCURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRITCCURHYS of register BATCRITCOLDH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDH_REG_BATCRITCCURHYS(HWREG_U8 value); /**< Get element BATCRITCCURHYS of register BATCRITCOLDH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDH_REG_BATCRITCHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRITCHYS of register BATCRITCOLDH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDH_REG_BATCRITCHYS(HWREG_U8 value); /**< Get element BATCRITCHYS of register BATCRITCOLDH_REG */
+
+
+/** @brief BATCRITCOLDL_REG register description at address offset 0x4f4f
+  *
+  *  Battery Critical Thermal Limit Cold Low
+  */
+typedef struct
+{
+    HWREG_U8 BATCRITCOLD_L :8; /**<  */
+} sBATCRITCOLDL_REGStructure;
+
+
+/** @brief BATCRITCOLDL_REG Bitfield widths
+*/
+#define lenBATCRITCOLDL_REG_BATCRITCOLD_L 8
+
+typedef enum
+{
+    BATCRITCOLDL_REG_LSB_BATCRITCOLD_L = 0
+} eBATCRITCOLDL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATCRITCOLDL_REG_Content;
+    sBATCRITCOLDL_REGStructure BATCRITCOLDL_REG_Structure;
+} uBATCRITCOLDL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATCRITCOLDL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDL_REG(HWREG_U8 value); /** Get complete register BATCRITCOLDL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDL_REG_BATCRITCOLD_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRITCOLD_L of register BATCRITCOLDL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDL_REG_BATCRITCOLD_L(HWREG_U8 value); /**< Get element BATCRITCOLD_L of register BATCRITCOLDL_REG */
+
+
+/** @brief BATCRITHOTH_REG register description at address offset 0x4f50
+  *
+  *  Battery Critical Thermal Limit Hot High
+  */
+typedef struct
+{
+    HWREG_U8 BATCRITHOT_H :1; /**<  */
+    HWREG_U8 BATCRITHCURHYS :3; /**<  */
+    HWREG_U8 BATCRITHHYS :4; /**<  */
+} sBATCRITHOTH_REGStructure;
+
+
+/** @brief BATCRITHOTH_REG Bitfield widths
+*/
+#define lenBATCRITHOTH_REG_BATCRITHOT_H 1
+#define lenBATCRITHOTH_REG_BATCRITHCURHYS 3
+#define lenBATCRITHOTH_REG_BATCRITHHYS 4
+
+typedef enum
+{
+    BATCRITHOTH_REG_LSB_BATCRITHOT_H = 0,
+    BATCRITHOTH_REG_LSB_BATCRITHCURHYS = 1,
+    BATCRITHOTH_REG_LSB_BATCRITHHYS = 4
+} eBATCRITHOTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATCRITHOTH_REG_Content;
+    sBATCRITHOTH_REGStructure BATCRITHOTH_REG_Structure;
+} uBATCRITHOTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATCRITHOTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTH_REG(HWREG_U8 value); /** Get complete register BATCRITHOTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTH_REG_BATCRITHOT_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRITHOT_H of register BATCRITHOTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTH_REG_BATCRITHOT_H(HWREG_U8 value); /**< Get element BATCRITHOT_H of register BATCRITHOTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTH_REG_BATCRITHCURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRITHCURHYS of register BATCRITHOTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTH_REG_BATCRITHCURHYS(HWREG_U8 value); /**< Get element BATCRITHCURHYS of register BATCRITHOTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTH_REG_BATCRITHHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRITHHYS of register BATCRITHOTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTH_REG_BATCRITHHYS(HWREG_U8 value); /**< Get element BATCRITHHYS of register BATCRITHOTH_REG */
+
+
+/** @brief BATCRITHOTL_REG register description at address offset 0x4f51
+  *
+  *  Battery Critical Thermal Limit Hot Low
+  */
+typedef struct
+{
+    HWREG_U8 BATCRITHOT_L :8; /**<  */
+} sBATCRITHOTL_REGStructure;
+
+
+/** @brief BATCRITHOTL_REG Bitfield widths
+*/
+#define lenBATCRITHOTL_REG_BATCRITHOT_L 8
+
+typedef enum
+{
+    BATCRITHOTL_REG_LSB_BATCRITHOT_L = 0
+} eBATCRITHOTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATCRITHOTL_REG_Content;
+    sBATCRITHOTL_REGStructure BATCRITHOTL_REG_Structure;
+} uBATCRITHOTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATCRITHOTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTL_REG(HWREG_U8 value); /** Get complete register BATCRITHOTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTL_REG_BATCRITHOT_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRITHOT_L of register BATCRITHOTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTL_REG_BATCRITHOT_L(HWREG_U8 value); /**< Get element BATCRITHOT_L of register BATCRITHOTL_REG */
+
+
+/** @brief BATCRITH_REG register description at address offset 0x4f52
+  *
+  *  Battery Critical Temperature Threshold High
+  */
+typedef struct
+{
+    HWREG_U8 BATCRIT_H :1; /**<  */
+    HWREG_U8 BATCRITCURHYS :3; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sBATCRITH_REGStructure;
+
+
+/** @brief BATCRITH_REG Bitfield widths
+*/
+#define lenBATCRITH_REG_BATCRIT_H 1
+#define lenBATCRITH_REG_BATCRITCURHYS 3
+
+typedef enum
+{
+    BATCRITH_REG_LSB_BATCRIT_H = 0,
+    BATCRITH_REG_LSB_BATCRITCURHYS = 1
+} eBATCRITH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATCRITH_REG_Content;
+    sBATCRITH_REGStructure BATCRITH_REG_Structure;
+} uBATCRITH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATCRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITH_REG(HWREG_U8 value); /** Get complete register BATCRITH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITH_REG_BATCRIT_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRIT_H of register BATCRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITH_REG_BATCRIT_H(HWREG_U8 value); /**< Get element BATCRIT_H of register BATCRITH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITH_REG_BATCRITCURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRITCURHYS of register BATCRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITH_REG_BATCRITCURHYS(HWREG_U8 value); /**< Get element BATCRITCURHYS of register BATCRITH_REG */
+
+
+/** @brief BATCRITL_REG register description at address offset 0x4f53
+  *
+  *  Battery Critical Temperature Threshold Low
+  */
+typedef struct
+{
+    HWREG_U8 BATCRIT_L :8; /**<  */
+} sBATCRITL_REGStructure;
+
+
+/** @brief BATCRITL_REG Bitfield widths
+*/
+#define lenBATCRITL_REG_BATCRIT_L 8
+
+typedef enum
+{
+    BATCRITL_REG_LSB_BATCRIT_L = 0
+} eBATCRITL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BATCRITL_REG_Content;
+    sBATCRITL_REGStructure BATCRITL_REG_Structure;
+} uBATCRITL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BATCRITL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITL_REG(HWREG_U8 value); /** Get complete register BATCRITL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITL_REG_BATCRIT_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BATCRIT_L of register BATCRITL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITL_REG_BATCRIT_L(HWREG_U8 value); /**< Get element BATCRIT_L of register BATCRITL_REG */
+
+
+/** @brief PMICCRITH_REG register description at address offset 0x4f54
+  *
+  *  PMIC Critical Temperature Threshold High
+  */
+typedef struct
+{
+    HWREG_U8 PMICCRIT_H :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sPMICCRITH_REGStructure;
+
+
+/** @brief PMICCRITH_REG Bitfield widths
+*/
+#define lenPMICCRITH_REG_PMICCRIT_H 4
+
+typedef enum
+{
+    PMICCRITH_REG_LSB_PMICCRIT_H = 0
+} ePMICCRITH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PMICCRITH_REG_Content;
+    sPMICCRITH_REGStructure PMICCRITH_REG_Structure;
+} uPMICCRITH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICCRITH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PMICCRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICCRITH_REG(HWREG_U8 value); /** Get complete register PMICCRITH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICCRITH_REG_PMICCRIT_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICCRIT_H of register PMICCRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICCRITH_REG_PMICCRIT_H(HWREG_U8 value); /**< Get element PMICCRIT_H of register PMICCRITH_REG */
+
+
+/** @brief PMICCRITL_REG register description at address offset 0x4f55
+  *
+  *  PMIC Critical Temperature Threshold Low
+  */
+typedef struct
+{
+    HWREG_U8 PMICCRIT_L :8; /**<  */
+} sPMICCRITL_REGStructure;
+
+
+/** @brief PMICCRITL_REG Bitfield widths
+*/
+#define lenPMICCRITL_REG_PMICCRIT_L 8
+
+typedef enum
+{
+    PMICCRITL_REG_LSB_PMICCRIT_L = 0
+} ePMICCRITL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PMICCRITL_REG_Content;
+    sPMICCRITL_REGStructure PMICCRITL_REG_Structure;
+} uPMICCRITL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICCRITL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PMICCRITL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICCRITL_REG(HWREG_U8 value); /** Get complete register PMICCRITL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICCRITL_REG_PMICCRIT_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICCRIT_L of register PMICCRITL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICCRITL_REG_PMICCRIT_L(HWREG_U8 value); /**< Get element PMICCRIT_L of register PMICCRITL_REG */
+
+
+/** @brief SYS0CRITH_REG register description at address offset 0x4f56
+  *
+  *  SYS0 Critical Temperature Threshold High
+  */
+typedef struct
+{
+    HWREG_U8 SYS0CRIT_H :1; /**<  */
+    HWREG_U8 SYS0CRITCURHYS :3; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sSYS0CRITH_REGStructure;
+
+
+/** @brief SYS0CRITH_REG Bitfield widths
+*/
+#define lenSYS0CRITH_REG_SYS0CRIT_H 1
+#define lenSYS0CRITH_REG_SYS0CRITCURHYS 3
+
+typedef enum
+{
+    SYS0CRITH_REG_LSB_SYS0CRIT_H = 0,
+    SYS0CRITH_REG_LSB_SYS0CRITCURHYS = 1
+} eSYS0CRITH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS0CRITH_REG_Content;
+    sSYS0CRITH_REGStructure SYS0CRITH_REG_Structure;
+} uSYS0CRITH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0CRITH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS0CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0CRITH_REG(HWREG_U8 value); /** Get complete register SYS0CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0CRITH_REG_SYS0CRIT_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0CRIT_H of register SYS0CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0CRITH_REG_SYS0CRIT_H(HWREG_U8 value); /**< Get element SYS0CRIT_H of register SYS0CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0CRITH_REG_SYS0CRITCURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0CRITCURHYS of register SYS0CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0CRITH_REG_SYS0CRITCURHYS(HWREG_U8 value); /**< Get element SYS0CRITCURHYS of register SYS0CRITH_REG */
+
+
+/** @brief SYS0CRITL_REG register description at address offset 0x4f57
+  *
+  *  SYS0 Critical Temperature Threshold Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS0CRIT_L :8; /**<  */
+} sSYS0CRITL_REGStructure;
+
+
+/** @brief SYS0CRITL_REG Bitfield widths
+*/
+#define lenSYS0CRITL_REG_SYS0CRIT_L 8
+
+typedef enum
+{
+    SYS0CRITL_REG_LSB_SYS0CRIT_L = 0
+} eSYS0CRITL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS0CRITL_REG_Content;
+    sSYS0CRITL_REGStructure SYS0CRITL_REG_Structure;
+} uSYS0CRITL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0CRITL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS0CRITL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0CRITL_REG(HWREG_U8 value); /** Get complete register SYS0CRITL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0CRITL_REG_SYS0CRIT_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0CRIT_L of register SYS0CRITL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0CRITL_REG_SYS0CRIT_L(HWREG_U8 value); /**< Get element SYS0CRIT_L of register SYS0CRITL_REG */
+
+
+/** @brief SYS1CRITH_REG register description at address offset 0x4f58
+  *
+  *  SYS1 Critical Temperature Threshold High
+  */
+typedef struct
+{
+    HWREG_U8 SYS1CRIT_H :1; /**<  */
+    HWREG_U8 SYS1CRITCURHYS :3; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sSYS1CRITH_REGStructure;
+
+
+/** @brief SYS1CRITH_REG Bitfield widths
+*/
+#define lenSYS1CRITH_REG_SYS1CRIT_H 1
+#define lenSYS1CRITH_REG_SYS1CRITCURHYS 3
+
+typedef enum
+{
+    SYS1CRITH_REG_LSB_SYS1CRIT_H = 0,
+    SYS1CRITH_REG_LSB_SYS1CRITCURHYS = 1
+} eSYS1CRITH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS1CRITH_REG_Content;
+    sSYS1CRITH_REGStructure SYS1CRITH_REG_Structure;
+} uSYS1CRITH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1CRITH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS1CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1CRITH_REG(HWREG_U8 value); /** Get complete register SYS1CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1CRITH_REG_SYS1CRIT_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1CRIT_H of register SYS1CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1CRITH_REG_SYS1CRIT_H(HWREG_U8 value); /**< Get element SYS1CRIT_H of register SYS1CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1CRITH_REG_SYS1CRITCURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1CRITCURHYS of register SYS1CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1CRITH_REG_SYS1CRITCURHYS(HWREG_U8 value); /**< Get element SYS1CRITCURHYS of register SYS1CRITH_REG */
+
+
+/** @brief SYS1CRITL_REG register description at address offset 0x4f59
+  *
+  *  SYS1 Critical Temperature Threshold Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS1CRIT_L :8; /**<  */
+} sSYS1CRITL_REGStructure;
+
+
+/** @brief SYS1CRITL_REG Bitfield widths
+*/
+#define lenSYS1CRITL_REG_SYS1CRIT_L 8
+
+typedef enum
+{
+    SYS1CRITL_REG_LSB_SYS1CRIT_L = 0
+} eSYS1CRITL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS1CRITL_REG_Content;
+    sSYS1CRITL_REGStructure SYS1CRITL_REG_Structure;
+} uSYS1CRITL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1CRITL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS1CRITL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1CRITL_REG(HWREG_U8 value); /** Get complete register SYS1CRITL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1CRITL_REG_SYS1CRIT_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1CRIT_L of register SYS1CRITL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1CRITL_REG_SYS1CRIT_L(HWREG_U8 value); /**< Get element SYS1CRIT_L of register SYS1CRITL_REG */
+
+
+/** @brief SYS2CRITH_REG register description at address offset 0x4f5a
+  *
+  *  SYS2 Critical Temperature Threshold High
+  */
+typedef struct
+{
+    HWREG_U8 SYS2CRIT_H :1; /**<  */
+    HWREG_U8 SYS2CRITCURHYS :3; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sSYS2CRITH_REGStructure;
+
+
+/** @brief SYS2CRITH_REG Bitfield widths
+*/
+#define lenSYS2CRITH_REG_SYS2CRIT_H 1
+#define lenSYS2CRITH_REG_SYS2CRITCURHYS 3
+
+typedef enum
+{
+    SYS2CRITH_REG_LSB_SYS2CRIT_H = 0,
+    SYS2CRITH_REG_LSB_SYS2CRITCURHYS = 1
+} eSYS2CRITH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS2CRITH_REG_Content;
+    sSYS2CRITH_REGStructure SYS2CRITH_REG_Structure;
+} uSYS2CRITH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2CRITH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS2CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2CRITH_REG(HWREG_U8 value); /** Get complete register SYS2CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2CRITH_REG_SYS2CRIT_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2CRIT_H of register SYS2CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2CRITH_REG_SYS2CRIT_H(HWREG_U8 value); /**< Get element SYS2CRIT_H of register SYS2CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2CRITH_REG_SYS2CRITCURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2CRITCURHYS of register SYS2CRITH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2CRITH_REG_SYS2CRITCURHYS(HWREG_U8 value); /**< Get element SYS2CRITCURHYS of register SYS2CRITH_REG */
+
+
+/** @brief SYS2CRITL_REG register description at address offset 0x4f5b
+  *
+  *  SYS2 Critical Temperature Threshold Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS2CRIT_L :8; /**<  */
+} sSYS2CRITL_REGStructure;
+
+
+/** @brief SYS2CRITL_REG Bitfield widths
+*/
+#define lenSYS2CRITL_REG_SYS2CRIT_L 8
+
+typedef enum
+{
+    SYS2CRITL_REG_LSB_SYS2CRIT_L = 0
+} eSYS2CRITL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS2CRITL_REG_Content;
+    sSYS2CRITL_REGStructure SYS2CRITL_REG_Structure;
+} uSYS2CRITL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2CRITL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS2CRITL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2CRITL_REG(HWREG_U8 value); /** Get complete register SYS2CRITL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2CRITL_REG_SYS2CRIT_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2CRIT_L of register SYS2CRITL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2CRITL_REG_SYS2CRIT_L(HWREG_U8 value); /**< Get element SYS2CRIT_L of register SYS2CRITL_REG */
+
+
+/** @brief SYS0ALERT3H_REG register description at address offset 0x4f5c
+  *
+  *  SYS0 Alert3 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 SYS0ALERT3_H :1; /**<  */
+    HWREG_U8 SYS0ALERT3_CURHYS :3; /**<  */
+    HWREG_U8 SYS0ALERT3_HYS :4; /**<  */
+} sSYS0ALERT3H_REGStructure;
+
+
+/** @brief SYS0ALERT3H_REG Bitfield widths
+*/
+#define lenSYS0ALERT3H_REG_SYS0ALERT3_H 1
+#define lenSYS0ALERT3H_REG_SYS0ALERT3_CURHYS 3
+#define lenSYS0ALERT3H_REG_SYS0ALERT3_HYS 4
+
+typedef enum
+{
+    SYS0ALERT3H_REG_LSB_SYS0ALERT3_H = 0,
+    SYS0ALERT3H_REG_LSB_SYS0ALERT3_CURHYS = 1,
+    SYS0ALERT3H_REG_LSB_SYS0ALERT3_HYS = 4
+} eSYS0ALERT3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS0ALERT3H_REG_Content;
+    sSYS0ALERT3H_REGStructure SYS0ALERT3H_REG_Structure;
+} uSYS0ALERT3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3H_REG(HWREG_U8 value); /** Get complete register SYS0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3H_REG_SYS0ALERT3_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT3_H of register SYS0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3H_REG_SYS0ALERT3_H(HWREG_U8 value); /**< Get element SYS0ALERT3_H of register SYS0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3H_REG_SYS0ALERT3_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT3_CURHYS of register SYS0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3H_REG_SYS0ALERT3_CURHYS(HWREG_U8 value); /**< Get element SYS0ALERT3_CURHYS of register SYS0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3H_REG_SYS0ALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT3_HYS of register SYS0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3H_REG_SYS0ALERT3_HYS(HWREG_U8 value); /**< Get element SYS0ALERT3_HYS of register SYS0ALERT3H_REG */
+
+
+/** @brief SYS0ALERT3L_REG register description at address offset 0x4f5d
+  *
+  *  SYS0 Alert3 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS0ALERT3_L :8; /**<  */
+} sSYS0ALERT3L_REGStructure;
+
+
+/** @brief SYS0ALERT3L_REG Bitfield widths
+*/
+#define lenSYS0ALERT3L_REG_SYS0ALERT3_L 8
+
+typedef enum
+{
+    SYS0ALERT3L_REG_LSB_SYS0ALERT3_L = 0
+} eSYS0ALERT3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS0ALERT3L_REG_Content;
+    sSYS0ALERT3L_REGStructure SYS0ALERT3L_REG_Structure;
+} uSYS0ALERT3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS0ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3L_REG(HWREG_U8 value); /** Get complete register SYS0ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3L_REG_SYS0ALERT3_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0ALERT3_L of register SYS0ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3L_REG_SYS0ALERT3_L(HWREG_U8 value); /**< Get element SYS0ALERT3_L of register SYS0ALERT3L_REG */
+
+
+/** @brief SYS1ALERT3H_REG register description at address offset 0x4f5e
+  *
+  *  SYS1 Alert3 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 SYS1ALERT3_H :1; /**<  */
+    HWREG_U8 SYS1ALERT3_CURHYS :3; /**<  */
+    HWREG_U8 SYS1ALERT3_HYS :4; /**<  */
+} sSYS1ALERT3H_REGStructure;
+
+
+/** @brief SYS1ALERT3H_REG Bitfield widths
+*/
+#define lenSYS1ALERT3H_REG_SYS1ALERT3_H 1
+#define lenSYS1ALERT3H_REG_SYS1ALERT3_CURHYS 3
+#define lenSYS1ALERT3H_REG_SYS1ALERT3_HYS 4
+
+typedef enum
+{
+    SYS1ALERT3H_REG_LSB_SYS1ALERT3_H = 0,
+    SYS1ALERT3H_REG_LSB_SYS1ALERT3_CURHYS = 1,
+    SYS1ALERT3H_REG_LSB_SYS1ALERT3_HYS = 4
+} eSYS1ALERT3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS1ALERT3H_REG_Content;
+    sSYS1ALERT3H_REGStructure SYS1ALERT3H_REG_Structure;
+} uSYS1ALERT3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3H_REG(HWREG_U8 value); /** Get complete register SYS1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3H_REG_SYS1ALERT3_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT3_H of register SYS1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3H_REG_SYS1ALERT3_H(HWREG_U8 value); /**< Get element SYS1ALERT3_H of register SYS1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3H_REG_SYS1ALERT3_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT3_CURHYS of register SYS1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3H_REG_SYS1ALERT3_CURHYS(HWREG_U8 value); /**< Get element SYS1ALERT3_CURHYS of register SYS1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3H_REG_SYS1ALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT3_HYS of register SYS1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3H_REG_SYS1ALERT3_HYS(HWREG_U8 value); /**< Get element SYS1ALERT3_HYS of register SYS1ALERT3H_REG */
+
+
+/** @brief SYS1ALERT3L_REG register description at address offset 0x4f5f
+  *
+  *  SYS1 Alert3 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS1ALERT3_L :8; /**<  */
+} sSYS1ALERT3L_REGStructure;
+
+
+/** @brief SYS1ALERT3L_REG Bitfield widths
+*/
+#define lenSYS1ALERT3L_REG_SYS1ALERT3_L 8
+
+typedef enum
+{
+    SYS1ALERT3L_REG_LSB_SYS1ALERT3_L = 0
+} eSYS1ALERT3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS1ALERT3L_REG_Content;
+    sSYS1ALERT3L_REGStructure SYS1ALERT3L_REG_Structure;
+} uSYS1ALERT3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS1ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3L_REG(HWREG_U8 value); /** Get complete register SYS1ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3L_REG_SYS1ALERT3_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1ALERT3_L of register SYS1ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3L_REG_SYS1ALERT3_L(HWREG_U8 value); /**< Get element SYS1ALERT3_L of register SYS1ALERT3L_REG */
+
+
+/** @brief SYS2ALERT3H_REG register description at address offset 0x4f60
+  *
+  *  SYS2 Alert3 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 SYS2ALERT3_H :1; /**<  */
+    HWREG_U8 SYS2ALERT3_CURHYS :3; /**<  */
+    HWREG_U8 SYS2ALERT3_HYS :4; /**<  */
+} sSYS2ALERT3H_REGStructure;
+
+
+/** @brief SYS2ALERT3H_REG Bitfield widths
+*/
+#define lenSYS2ALERT3H_REG_SYS2ALERT3_H 1
+#define lenSYS2ALERT3H_REG_SYS2ALERT3_CURHYS 3
+#define lenSYS2ALERT3H_REG_SYS2ALERT3_HYS 4
+
+typedef enum
+{
+    SYS2ALERT3H_REG_LSB_SYS2ALERT3_H = 0,
+    SYS2ALERT3H_REG_LSB_SYS2ALERT3_CURHYS = 1,
+    SYS2ALERT3H_REG_LSB_SYS2ALERT3_HYS = 4
+} eSYS2ALERT3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS2ALERT3H_REG_Content;
+    sSYS2ALERT3H_REGStructure SYS2ALERT3H_REG_Structure;
+} uSYS2ALERT3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS2ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3H_REG(HWREG_U8 value); /** Get complete register SYS2ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3H_REG_SYS2ALERT3_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT3_H of register SYS2ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3H_REG_SYS2ALERT3_H(HWREG_U8 value); /**< Get element SYS2ALERT3_H of register SYS2ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3H_REG_SYS2ALERT3_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT3_CURHYS of register SYS2ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3H_REG_SYS2ALERT3_CURHYS(HWREG_U8 value); /**< Get element SYS2ALERT3_CURHYS of register SYS2ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3H_REG_SYS2ALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT3_HYS of register SYS2ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3H_REG_SYS2ALERT3_HYS(HWREG_U8 value); /**< Get element SYS2ALERT3_HYS of register SYS2ALERT3H_REG */
+
+
+/** @brief SYS2ALERT3L_REG register description at address offset 0x4f61
+  *
+  *  SYS2 Alert3 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 SYS2ALERT3_L :8; /**<  */
+} sSYS2ALERT3L_REGStructure;
+
+
+/** @brief SYS2ALERT3L_REG Bitfield widths
+*/
+#define lenSYS2ALERT3L_REG_SYS2ALERT3_L 8
+
+typedef enum
+{
+    SYS2ALERT3L_REG_LSB_SYS2ALERT3_L = 0
+} eSYS2ALERT3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SYS2ALERT3L_REG_Content;
+    sSYS2ALERT3L_REGStructure SYS2ALERT3L_REG_Structure;
+} uSYS2ALERT3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SYS2ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3L_REG(HWREG_U8 value); /** Get complete register SYS2ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3L_REG_SYS2ALERT3_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2ALERT3_L of register SYS2ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3L_REG_SYS2ALERT3_L(HWREG_U8 value); /**< Get element SYS2ALERT3_L of register SYS2ALERT3L_REG */
+
+
+/** @brief PMICALERT3H_REG register description at address offset 0x4f62
+  *
+  *  PMIC Alert3 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 PMICALERT3_H :4; /**<  */
+    HWREG_U8 PMICALERT3_HYS :4; /**<  */
+} sPMICALERT3H_REGStructure;
+
+
+/** @brief PMICALERT3H_REG Bitfield widths
+*/
+#define lenPMICALERT3H_REG_PMICALERT3_H 4
+#define lenPMICALERT3H_REG_PMICALERT3_HYS 4
+
+typedef enum
+{
+    PMICALERT3H_REG_LSB_PMICALERT3_H = 0,
+    PMICALERT3H_REG_LSB_PMICALERT3_HYS = 4
+} ePMICALERT3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PMICALERT3H_REG_Content;
+    sPMICALERT3H_REGStructure PMICALERT3H_REG_Structure;
+} uPMICALERT3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PMICALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT3H_REG(HWREG_U8 value); /** Get complete register PMICALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT3H_REG_PMICALERT3_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICALERT3_H of register PMICALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT3H_REG_PMICALERT3_H(HWREG_U8 value); /**< Get element PMICALERT3_H of register PMICALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT3H_REG_PMICALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICALERT3_HYS of register PMICALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT3H_REG_PMICALERT3_HYS(HWREG_U8 value); /**< Get element PMICALERT3_HYS of register PMICALERT3H_REG */
+
+
+/** @brief PMICALERT3L_REG register description at address offset 0x4f63
+  *
+  *  PMIC Alert3 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 PMICALERT3_L :8; /**<  */
+} sPMICALERT3L_REGStructure;
+
+
+/** @brief PMICALERT3L_REG Bitfield widths
+*/
+#define lenPMICALERT3L_REG_PMICALERT3_L 8
+
+typedef enum
+{
+    PMICALERT3L_REG_LSB_PMICALERT3_L = 0
+} ePMICALERT3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PMICALERT3L_REG_Content;
+    sPMICALERT3L_REGStructure PMICALERT3L_REG_Structure;
+} uPMICALERT3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PMICALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT3L_REG(HWREG_U8 value); /** Get complete register PMICALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT3L_REG_PMICALERT3_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICALERT3_L of register PMICALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT3L_REG_PMICALERT3_L(HWREG_U8 value); /**< Get element PMICALERT3_L of register PMICALERT3L_REG */
+
+
+/** @brief BAT0ALERT3H_REG register description at address offset 0x4f64
+  *
+  *  BAT0 Alert3 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 BAT0ALERT3_H :1; /**<  */
+    HWREG_U8 BAT0ALERT3_CURHYS :3; /**<  */
+    HWREG_U8 BAT0ALERT3_HYS :4; /**<  */
+} sBAT0ALERT3H_REGStructure;
+
+
+/** @brief BAT0ALERT3H_REG Bitfield widths
+*/
+#define lenBAT0ALERT3H_REG_BAT0ALERT3_H 1
+#define lenBAT0ALERT3H_REG_BAT0ALERT3_CURHYS 3
+#define lenBAT0ALERT3H_REG_BAT0ALERT3_HYS 4
+
+typedef enum
+{
+    BAT0ALERT3H_REG_LSB_BAT0ALERT3_H = 0,
+    BAT0ALERT3H_REG_LSB_BAT0ALERT3_CURHYS = 1,
+    BAT0ALERT3H_REG_LSB_BAT0ALERT3_HYS = 4
+} eBAT0ALERT3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BAT0ALERT3H_REG_Content;
+    sBAT0ALERT3H_REGStructure BAT0ALERT3H_REG_Structure;
+} uBAT0ALERT3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BAT0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3H_REG(HWREG_U8 value); /** Get complete register BAT0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3H_REG_BAT0ALERT3_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0ALERT3_H of register BAT0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3H_REG_BAT0ALERT3_H(HWREG_U8 value); /**< Get element BAT0ALERT3_H of register BAT0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3H_REG_BAT0ALERT3_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0ALERT3_CURHYS of register BAT0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3H_REG_BAT0ALERT3_CURHYS(HWREG_U8 value); /**< Get element BAT0ALERT3_CURHYS of register BAT0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3H_REG_BAT0ALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0ALERT3_HYS of register BAT0ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3H_REG_BAT0ALERT3_HYS(HWREG_U8 value); /**< Get element BAT0ALERT3_HYS of register BAT0ALERT3H_REG */
+
+
+/** @brief BAT0ALERT3L_REG register description at address offset 0x4f65
+  *
+  *  BAT0 Alert3 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 BAT0ALERT3_L :8; /**<  */
+} sBAT0ALERT3L_REGStructure;
+
+
+/** @brief BAT0ALERT3L_REG Bitfield widths
+*/
+#define lenBAT0ALERT3L_REG_BAT0ALERT3_L 8
+
+typedef enum
+{
+    BAT0ALERT3L_REG_LSB_BAT0ALERT3_L = 0
+} eBAT0ALERT3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BAT0ALERT3L_REG_Content;
+    sBAT0ALERT3L_REGStructure BAT0ALERT3L_REG_Structure;
+} uBAT0ALERT3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BAT0ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3L_REG(HWREG_U8 value); /** Get complete register BAT0ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3L_REG_BAT0ALERT3_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0ALERT3_L of register BAT0ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3L_REG_BAT0ALERT3_L(HWREG_U8 value); /**< Get element BAT0ALERT3_L of register BAT0ALERT3L_REG */
+
+
+/** @brief BAT1ALERT3H_REG register description at address offset 0x4f66
+  *
+  *  BAT1 Alert3 Threshold Register High
+  */
+typedef struct
+{
+    HWREG_U8 BAT1ALERT3_H :1; /**<  */
+    HWREG_U8 BAT1ALERT3_CURHYS :3; /**<  */
+    HWREG_U8 BAT1ALERT3_HYS :4; /**<  */
+} sBAT1ALERT3H_REGStructure;
+
+
+/** @brief BAT1ALERT3H_REG Bitfield widths
+*/
+#define lenBAT1ALERT3H_REG_BAT1ALERT3_H 1
+#define lenBAT1ALERT3H_REG_BAT1ALERT3_CURHYS 3
+#define lenBAT1ALERT3H_REG_BAT1ALERT3_HYS 4
+
+typedef enum
+{
+    BAT1ALERT3H_REG_LSB_BAT1ALERT3_H = 0,
+    BAT1ALERT3H_REG_LSB_BAT1ALERT3_CURHYS = 1,
+    BAT1ALERT3H_REG_LSB_BAT1ALERT3_HYS = 4
+} eBAT1ALERT3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BAT1ALERT3H_REG_Content;
+    sBAT1ALERT3H_REGStructure BAT1ALERT3H_REG_Structure;
+} uBAT1ALERT3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BAT1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3H_REG(HWREG_U8 value); /** Get complete register BAT1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3H_REG_BAT1ALERT3_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1ALERT3_H of register BAT1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3H_REG_BAT1ALERT3_H(HWREG_U8 value); /**< Get element BAT1ALERT3_H of register BAT1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3H_REG_BAT1ALERT3_CURHYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1ALERT3_CURHYS of register BAT1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3H_REG_BAT1ALERT3_CURHYS(HWREG_U8 value); /**< Get element BAT1ALERT3_CURHYS of register BAT1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3H_REG_BAT1ALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1ALERT3_HYS of register BAT1ALERT3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3H_REG_BAT1ALERT3_HYS(HWREG_U8 value); /**< Get element BAT1ALERT3_HYS of register BAT1ALERT3H_REG */
+
+
+/** @brief BAT1ALERT3L_REG register description at address offset 0x4f67
+  *
+  *  BAT1 Alert3 Threshold Register Low
+  */
+typedef struct
+{
+    HWREG_U8 BAT1ALERT3_L :8; /**<  */
+} sBAT1ALERT3L_REGStructure;
+
+
+/** @brief BAT1ALERT3L_REG Bitfield widths
+*/
+#define lenBAT1ALERT3L_REG_BAT1ALERT3_L 8
+
+typedef enum
+{
+    BAT1ALERT3L_REG_LSB_BAT1ALERT3_L = 0
+} eBAT1ALERT3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 BAT1ALERT3L_REG_Content;
+    sBAT1ALERT3L_REGStructure BAT1ALERT3L_REG_Structure;
+} uBAT1ALERT3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register BAT1ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3L_REG(HWREG_U8 value); /** Get complete register BAT1ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3L_REG_BAT1ALERT3_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1ALERT3_L of register BAT1ALERT3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3L_REG_BAT1ALERT3_L(HWREG_U8 value); /**< Get element BAT1ALERT3_L of register BAT1ALERT3L_REG */
+
+
+/** @brief THRMCRITEN_REG register description at address offset 0x4f68
+  *
+  *  Thermal Critical Shutdown Enable Register
+  */
+typedef struct
+{
+    HWREG_U8 SYS0_CRIT_EN :1; /**<  */
+    HWREG_U8 SYS1_CRIT_EN :1; /**<  */
+    HWREG_U8 SYS2_CRIT_EN :1; /**<  */
+    HWREG_U8 PMIC_CRIT_EN :1; /**<  */
+    HWREG_U8 BAT_CRIT_EN :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sTHRMCRITEN_REGStructure;
+
+
+/** @brief THRMCRITEN_REG Bitfield widths
+*/
+#define lenTHRMCRITEN_REG_SYS0_CRIT_EN 1
+#define lenTHRMCRITEN_REG_SYS1_CRIT_EN 1
+#define lenTHRMCRITEN_REG_SYS2_CRIT_EN 1
+#define lenTHRMCRITEN_REG_PMIC_CRIT_EN 1
+#define lenTHRMCRITEN_REG_BAT_CRIT_EN 1
+
+typedef enum
+{
+    THRMCRITEN_REG_LSB_SYS0_CRIT_EN = 0,
+    THRMCRITEN_REG_LSB_SYS1_CRIT_EN = 1,
+    THRMCRITEN_REG_LSB_SYS2_CRIT_EN = 2,
+    THRMCRITEN_REG_LSB_PMIC_CRIT_EN = 3,
+    THRMCRITEN_REG_LSB_BAT_CRIT_EN = 4
+} eTHRMCRITEN_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMCRITEN_REG_Content;
+    sTHRMCRITEN_REGStructure THRMCRITEN_REG_Structure;
+} uTHRMCRITEN_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG(HWREG_U8 value); /** Get complete register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG_SYS0_CRIT_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0_CRIT_EN of register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG_SYS0_CRIT_EN(HWREG_U8 value); /**< Get element SYS0_CRIT_EN of register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG_SYS1_CRIT_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1_CRIT_EN of register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG_SYS1_CRIT_EN(HWREG_U8 value); /**< Get element SYS1_CRIT_EN of register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG_SYS2_CRIT_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2_CRIT_EN of register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG_SYS2_CRIT_EN(HWREG_U8 value); /**< Get element SYS2_CRIT_EN of register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG_PMIC_CRIT_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMIC_CRIT_EN of register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG_PMIC_CRIT_EN(HWREG_U8 value); /**< Get element PMIC_CRIT_EN of register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG_BAT_CRIT_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT_CRIT_EN of register THRMCRITEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG_BAT_CRIT_EN(HWREG_U8 value); /**< Get element BAT_CRIT_EN of register THRMCRITEN_REG */
+
+
+/** @brief THRMALERT3EN_REG register description at address offset 0x4f69
+  *
+  *  Thermal Alert3 Enable Register
+  */
+typedef struct
+{
+    HWREG_U8 SYS0_A3_EN :1; /**<  */
+    HWREG_U8 SYS1_A3_EN :1; /**<  */
+    HWREG_U8 SYS2_A3_EN :1; /**<  */
+    HWREG_U8 PMIC_A3_EN :1; /**<  */
+    HWREG_U8 BAT0_A3_EN :1; /**<  */
+    HWREG_U8 BAT1_A3_EN :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sTHRMALERT3EN_REGStructure;
+
+
+/** @brief THRMALERT3EN_REG Bitfield widths
+*/
+#define lenTHRMALERT3EN_REG_SYS0_A3_EN 1
+#define lenTHRMALERT3EN_REG_SYS1_A3_EN 1
+#define lenTHRMALERT3EN_REG_SYS2_A3_EN 1
+#define lenTHRMALERT3EN_REG_PMIC_A3_EN 1
+#define lenTHRMALERT3EN_REG_BAT0_A3_EN 1
+#define lenTHRMALERT3EN_REG_BAT1_A3_EN 1
+
+typedef enum
+{
+    THRMALERT3EN_REG_LSB_SYS0_A3_EN = 0,
+    THRMALERT3EN_REG_LSB_SYS1_A3_EN = 1,
+    THRMALERT3EN_REG_LSB_SYS2_A3_EN = 2,
+    THRMALERT3EN_REG_LSB_PMIC_A3_EN = 3,
+    THRMALERT3EN_REG_LSB_BAT0_A3_EN = 4,
+    THRMALERT3EN_REG_LSB_BAT1_A3_EN = 5
+} eTHRMALERT3EN_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMALERT3EN_REG_Content;
+    sTHRMALERT3EN_REGStructure THRMALERT3EN_REG_Structure;
+} uTHRMALERT3EN_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG(HWREG_U8 value); /** Get complete register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_SYS0_A3_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_SYS0_A3_EN(HWREG_U8 value); /**< Get element SYS0_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_SYS1_A3_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_SYS1_A3_EN(HWREG_U8 value); /**< Get element SYS1_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_SYS2_A3_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_SYS2_A3_EN(HWREG_U8 value); /**< Get element SYS2_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_PMIC_A3_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMIC_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_PMIC_A3_EN(HWREG_U8 value); /**< Get element PMIC_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_BAT0_A3_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_BAT0_A3_EN(HWREG_U8 value); /**< Get element BAT0_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_BAT1_A3_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1_A3_EN of register THRMALERT3EN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_BAT1_A3_EN(HWREG_U8 value); /**< Get element BAT1_A3_EN of register THRMALERT3EN_REG */
+
+
+/** @brief THRMALERT3PAEN_REG register description at address offset 0x4f6a
+  *
+  *  Thermal Alert3 Policy Action Enable Register
+  */
+typedef struct
+{
+    HWREG_U8 SYS0_A3P_EN :1; /**<  */
+    HWREG_U8 SYS1_A3P_EN :1; /**<  */
+    HWREG_U8 SYS2_A3P_EN :1; /**<  */
+    HWREG_U8 PMIC_A3P_EN :1; /**<  */
+    HWREG_U8 BAT0_A3P_EN :1; /**<  */
+    HWREG_U8 BAT1_A3P_EN :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sTHRMALERT3PAEN_REGStructure;
+
+
+/** @brief THRMALERT3PAEN_REG Bitfield widths
+*/
+#define lenTHRMALERT3PAEN_REG_SYS0_A3P_EN 1
+#define lenTHRMALERT3PAEN_REG_SYS1_A3P_EN 1
+#define lenTHRMALERT3PAEN_REG_SYS2_A3P_EN 1
+#define lenTHRMALERT3PAEN_REG_PMIC_A3P_EN 1
+#define lenTHRMALERT3PAEN_REG_BAT0_A3P_EN 1
+#define lenTHRMALERT3PAEN_REG_BAT1_A3P_EN 1
+
+typedef enum
+{
+    THRMALERT3PAEN_REG_LSB_SYS0_A3P_EN = 0,
+    THRMALERT3PAEN_REG_LSB_SYS1_A3P_EN = 1,
+    THRMALERT3PAEN_REG_LSB_SYS2_A3P_EN = 2,
+    THRMALERT3PAEN_REG_LSB_PMIC_A3P_EN = 3,
+    THRMALERT3PAEN_REG_LSB_BAT0_A3P_EN = 4,
+    THRMALERT3PAEN_REG_LSB_BAT1_A3P_EN = 5
+} eTHRMALERT3PAEN_REGLsb;
+
+typedef union
+{
+    HWREG_U8 THRMALERT3PAEN_REG_Content;
+    sTHRMALERT3PAEN_REGStructure THRMALERT3PAEN_REG_Structure;
+} uTHRMALERT3PAEN_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG(HWREG_U8 value); /** Get complete register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_SYS0_A3P_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS0_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_SYS0_A3P_EN(HWREG_U8 value); /**< Get element SYS0_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_SYS1_A3P_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS1_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_SYS1_A3P_EN(HWREG_U8 value); /**< Get element SYS1_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_SYS2_A3P_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SYS2_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_SYS2_A3P_EN(HWREG_U8 value); /**< Get element SYS2_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_PMIC_A3P_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMIC_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_PMIC_A3P_EN(HWREG_U8 value); /**< Get element PMIC_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_BAT0_A3P_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT0_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_BAT0_A3P_EN(HWREG_U8 value); /**< Get element BAT0_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_BAT1_A3P_EN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BAT1_A3P_EN of register THRMALERT3PAEN_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_BAT1_A3P_EN(HWREG_U8 value); /**< Get element BAT1_A3P_EN of register THRMALERT3PAEN_REG */
+
+
+/** @brief CM_VCC_MODE_CTRL_REG register description at address offset 0x4f6b
+  *
+  *  Mode Control
+  */
+typedef struct
+{
+    const HWREG_U8 :8; /**< Unused bitfield */
+} sCM_VCC_MODE_CTRL_REGStructure;
+
+
+/** @brief CM_VCC_MODE_CTRL_REG Bitfield widths
+*/
+
+
+typedef union
+{
+    HWREG_U8 CM_VCC_MODE_CTRL_REG_Content;
+    sCM_VCC_MODE_CTRL_REGStructure CM_VCC_MODE_CTRL_REG_Structure;
+} uCM_VCC_MODE_CTRL_REG;
+
+
+
+/** @brief CM_VPA_MODE_CTRL_REG register description at address offset 0x4f6d
+  *
+  *  Mode Control
+  */
+typedef struct
+{
+    HWREG_U8 VPA_CM_EN :1; /**<  */
+    HWREG_U8 VPA_CLR_DATA :1; /**<  */
+    HWREG_U8 VPA_CM_MODE :2; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sCM_VPA_MODE_CTRL_REGStructure;
+
+
+/** @brief CM_VPA_MODE_CTRL_REG Bitfield widths
+*/
+#define lenCM_VPA_MODE_CTRL_REG_VPA_CM_EN 1
+#define lenCM_VPA_MODE_CTRL_REG_VPA_CLR_DATA 1
+#define lenCM_VPA_MODE_CTRL_REG_VPA_CM_MODE 2
+
+typedef enum
+{
+    CM_VPA_MODE_CTRL_REG_LSB_VPA_CM_EN = 0,
+    CM_VPA_MODE_CTRL_REG_LSB_VPA_CLR_DATA = 1,
+    CM_VPA_MODE_CTRL_REG_LSB_VPA_CM_MODE = 2
+} eCM_VPA_MODE_CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VPA_MODE_CTRL_REG_Content;
+    sCM_VPA_MODE_CTRL_REGStructure CM_VPA_MODE_CTRL_REG_Structure;
+} uCM_VPA_MODE_CTRL_REG;
+
+typedef enum
+{
+    CM_VPA_MODE_CTRL_REG_VPA_CM_EN_CM_DIS = 0,
+    CM_VPA_MODE_CTRL_REG_VPA_CM_EN_CM_EN = 1
+} eCM_VPA_MODE_CTRL_REG_VPA_CM_EN;
+
+typedef enum
+{
+    CM_VPA_MODE_CTRL_REG_VPA_CLR_DATA_CLR_DIS = 0,
+    CM_VPA_MODE_CTRL_REG_VPA_CLR_DATA_CLR_EN = 1
+} eCM_VPA_MODE_CTRL_REG_VPA_CLR_DATA;
+
+typedef enum
+{
+    CM_VPA_MODE_CTRL_REG_VPA_CM_MODE_MD_CONT = 0,
+    CM_VPA_MODE_CTRL_REG_VPA_CM_MODE_MD_AVE = 1,
+    CM_VPA_MODE_CTRL_REG_VPA_CM_MODE_MD_COUNT = 2,
+    CM_VPA_MODE_CTRL_REG_VPA_CM_MODE_MD_HGH = 3
+} eCM_VPA_MODE_CTRL_REG_VPA_CM_MODE;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPA_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VPA_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPA_MODE_CTRL_REG(HWREG_U8 value); /** Get complete register CM_VPA_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPA_MODE_CTRL_REG_VPA_CM_EN(HWREG_U8 _reg, eCM_VPA_MODE_CTRL_REG_VPA_CM_EN value); /**< Set element VPA_CM_EN of register CM_VPA_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VPA_MODE_CTRL_REG_VPA_CM_EN getPmic_CM_VPA_MODE_CTRL_REG_VPA_CM_EN(HWREG_U8 value); /**< Get element VPA_CM_EN of register CM_VPA_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPA_MODE_CTRL_REG_VPA_CLR_DATA(HWREG_U8 _reg, eCM_VPA_MODE_CTRL_REG_VPA_CLR_DATA value); /**< Set element VPA_CLR_DATA of register CM_VPA_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPA_MODE_CTRL_REG_VPA_CM_MODE(HWREG_U8 _reg, eCM_VPA_MODE_CTRL_REG_VPA_CM_MODE value); /**< Set element VPA_CM_MODE of register CM_VPA_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VPA_MODE_CTRL_REG_VPA_CM_MODE getPmic_CM_VPA_MODE_CTRL_REG_VPA_CM_MODE(HWREG_U8 value); /**< Get element VPA_CM_MODE of register CM_VPA_MODE_CTRL_REG */
+
+
+/** @brief CM_VNN_MODE_CTRL_REG register description at address offset 0x4f6e
+  *
+  *  Mode Control
+  */
+typedef struct
+{
+    HWREG_U8 VNN_CM_EN :1; /**<  */
+    HWREG_U8 VNN_CLR_DATA :1; /**<  */
+    HWREG_U8 VNN_CM_MODE :2; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sCM_VNN_MODE_CTRL_REGStructure;
+
+
+/** @brief CM_VNN_MODE_CTRL_REG Bitfield widths
+*/
+#define lenCM_VNN_MODE_CTRL_REG_VNN_CM_EN 1
+#define lenCM_VNN_MODE_CTRL_REG_VNN_CLR_DATA 1
+#define lenCM_VNN_MODE_CTRL_REG_VNN_CM_MODE 2
+
+typedef enum
+{
+    CM_VNN_MODE_CTRL_REG_LSB_VNN_CM_EN = 0,
+    CM_VNN_MODE_CTRL_REG_LSB_VNN_CLR_DATA = 1,
+    CM_VNN_MODE_CTRL_REG_LSB_VNN_CM_MODE = 2
+} eCM_VNN_MODE_CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VNN_MODE_CTRL_REG_Content;
+    sCM_VNN_MODE_CTRL_REGStructure CM_VNN_MODE_CTRL_REG_Structure;
+} uCM_VNN_MODE_CTRL_REG;
+
+typedef enum
+{
+    CM_VNN_MODE_CTRL_REG_VNN_CM_EN_CM_DIS = 0,
+    CM_VNN_MODE_CTRL_REG_VNN_CM_EN_CM_EN = 1
+} eCM_VNN_MODE_CTRL_REG_VNN_CM_EN;
+
+typedef enum
+{
+    CM_VNN_MODE_CTRL_REG_VNN_CLR_DATA_CLR_DIS = 0,
+    CM_VNN_MODE_CTRL_REG_VNN_CLR_DATA_CLR_EN = 1
+} eCM_VNN_MODE_CTRL_REG_VNN_CLR_DATA;
+
+typedef enum
+{
+    CM_VNN_MODE_CTRL_REG_VNN_CM_MODE_MD_CONT = 0,
+    CM_VNN_MODE_CTRL_REG_VNN_CM_MODE_MD_AVE = 1,
+    CM_VNN_MODE_CTRL_REG_VNN_CM_MODE_MD_COUNT = 2,
+    CM_VNN_MODE_CTRL_REG_VNN_CM_MODE_MD_HGH = 3
+} eCM_VNN_MODE_CTRL_REG_VNN_CM_MODE;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VNN_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VNN_MODE_CTRL_REG(HWREG_U8 value); /** Get complete register CM_VNN_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_MODE_CTRL_REG_VNN_CM_EN(HWREG_U8 _reg, eCM_VNN_MODE_CTRL_REG_VNN_CM_EN value); /**< Set element VNN_CM_EN of register CM_VNN_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VNN_MODE_CTRL_REG_VNN_CM_EN getPmic_CM_VNN_MODE_CTRL_REG_VNN_CM_EN(HWREG_U8 value); /**< Get element VNN_CM_EN of register CM_VNN_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_MODE_CTRL_REG_VNN_CLR_DATA(HWREG_U8 _reg, eCM_VNN_MODE_CTRL_REG_VNN_CLR_DATA value); /**< Set element VNN_CLR_DATA of register CM_VNN_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_MODE_CTRL_REG_VNN_CM_MODE(HWREG_U8 _reg, eCM_VNN_MODE_CTRL_REG_VNN_CM_MODE value); /**< Set element VNN_CM_MODE of register CM_VNN_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VNN_MODE_CTRL_REG_VNN_CM_MODE getPmic_CM_VNN_MODE_CTRL_REG_VNN_CM_MODE(HWREG_U8 value); /**< Get element VNN_CM_MODE of register CM_VNN_MODE_CTRL_REG */
+
+
+/** @brief CM_VDD1_MODE_CTRL_REG register description at address offset 0x4f70
+  *
+  *  Mode Control
+  */
+typedef struct
+{
+    HWREG_U8 VDD1_CM_EN :1; /**<  */
+    HWREG_U8 VDD1_CLR_DATA :1; /**<  */
+    HWREG_U8 VDD1_CM_MODE :2; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sCM_VDD1_MODE_CTRL_REGStructure;
+
+
+/** @brief CM_VDD1_MODE_CTRL_REG Bitfield widths
+*/
+#define lenCM_VDD1_MODE_CTRL_REG_VDD1_CM_EN 1
+#define lenCM_VDD1_MODE_CTRL_REG_VDD1_CLR_DATA 1
+#define lenCM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE 2
+
+typedef enum
+{
+    CM_VDD1_MODE_CTRL_REG_LSB_VDD1_CM_EN = 0,
+    CM_VDD1_MODE_CTRL_REG_LSB_VDD1_CLR_DATA = 1,
+    CM_VDD1_MODE_CTRL_REG_LSB_VDD1_CM_MODE = 2
+} eCM_VDD1_MODE_CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VDD1_MODE_CTRL_REG_Content;
+    sCM_VDD1_MODE_CTRL_REGStructure CM_VDD1_MODE_CTRL_REG_Structure;
+} uCM_VDD1_MODE_CTRL_REG;
+
+typedef enum
+{
+    CM_VDD1_MODE_CTRL_REG_VDD1_CM_EN_CM_DIS = 0,
+    CM_VDD1_MODE_CTRL_REG_VDD1_CM_EN_CM_EN = 1
+} eCM_VDD1_MODE_CTRL_REG_VDD1_CM_EN;
+
+typedef enum
+{
+    CM_VDD1_MODE_CTRL_REG_VDD1_CLR_DATA_CLR_DIS = 0,
+    CM_VDD1_MODE_CTRL_REG_VDD1_CLR_DATA_CLR_EN = 1
+} eCM_VDD1_MODE_CTRL_REG_VDD1_CLR_DATA;
+
+typedef enum
+{
+    CM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE_MD_CONT = 0,
+    CM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE_MD_AVE = 1,
+    CM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE_MD_COUNT = 2,
+    CM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE_MD_HGH = 3
+} eCM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VDD1_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD1_MODE_CTRL_REG(HWREG_U8 value); /** Get complete register CM_VDD1_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_MODE_CTRL_REG_VDD1_CM_EN(HWREG_U8 _reg, eCM_VDD1_MODE_CTRL_REG_VDD1_CM_EN value); /**< Set element VDD1_CM_EN of register CM_VDD1_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VDD1_MODE_CTRL_REG_VDD1_CM_EN getPmic_CM_VDD1_MODE_CTRL_REG_VDD1_CM_EN(HWREG_U8 value); /**< Get element VDD1_CM_EN of register CM_VDD1_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_MODE_CTRL_REG_VDD1_CLR_DATA(HWREG_U8 _reg, eCM_VDD1_MODE_CTRL_REG_VDD1_CLR_DATA value); /**< Set element VDD1_CLR_DATA of register CM_VDD1_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE(HWREG_U8 _reg, eCM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE value); /**< Set element VDD1_CM_MODE of register CM_VDD1_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE getPmic_CM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE(HWREG_U8 value); /**< Get element VDD1_CM_MODE of register CM_VDD1_MODE_CTRL_REG */
+
+
+/** @brief CM_VDD2_MODE_CTRL_REG register description at address offset 0x4f71
+  *
+  *  Mode Control
+  */
+typedef struct
+{
+    HWREG_U8 VDD2_CM_EN :1; /**<  */
+    HWREG_U8 VDD2_CLR_DATA :1; /**<  */
+    HWREG_U8 VDD2_CM_MODE :2; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sCM_VDD2_MODE_CTRL_REGStructure;
+
+
+/** @brief CM_VDD2_MODE_CTRL_REG Bitfield widths
+*/
+#define lenCM_VDD2_MODE_CTRL_REG_VDD2_CM_EN 1
+#define lenCM_VDD2_MODE_CTRL_REG_VDD2_CLR_DATA 1
+#define lenCM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE 2
+
+typedef enum
+{
+    CM_VDD2_MODE_CTRL_REG_LSB_VDD2_CM_EN = 0,
+    CM_VDD2_MODE_CTRL_REG_LSB_VDD2_CLR_DATA = 1,
+    CM_VDD2_MODE_CTRL_REG_LSB_VDD2_CM_MODE = 2
+} eCM_VDD2_MODE_CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VDD2_MODE_CTRL_REG_Content;
+    sCM_VDD2_MODE_CTRL_REGStructure CM_VDD2_MODE_CTRL_REG_Structure;
+} uCM_VDD2_MODE_CTRL_REG;
+
+typedef enum
+{
+    CM_VDD2_MODE_CTRL_REG_VDD2_CM_EN_CM_DIS = 0,
+    CM_VDD2_MODE_CTRL_REG_VDD2_CM_EN_CM_EN = 1
+} eCM_VDD2_MODE_CTRL_REG_VDD2_CM_EN;
+
+typedef enum
+{
+    CM_VDD2_MODE_CTRL_REG_VDD2_CLR_DATA_CLR_DIS = 0,
+    CM_VDD2_MODE_CTRL_REG_VDD2_CLR_DATA_CLR_EN = 1
+} eCM_VDD2_MODE_CTRL_REG_VDD2_CLR_DATA;
+
+typedef enum
+{
+    CM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE_MD_CONT = 0,
+    CM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE_MD_AVE = 1,
+    CM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE_MD_COUNT = 2,
+    CM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE_MD_HGH = 3
+} eCM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VDD2_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD2_MODE_CTRL_REG(HWREG_U8 value); /** Get complete register CM_VDD2_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_MODE_CTRL_REG_VDD2_CM_EN(HWREG_U8 _reg, eCM_VDD2_MODE_CTRL_REG_VDD2_CM_EN value); /**< Set element VDD2_CM_EN of register CM_VDD2_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VDD2_MODE_CTRL_REG_VDD2_CM_EN getPmic_CM_VDD2_MODE_CTRL_REG_VDD2_CM_EN(HWREG_U8 value); /**< Get element VDD2_CM_EN of register CM_VDD2_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_MODE_CTRL_REG_VDD2_CLR_DATA(HWREG_U8 _reg, eCM_VDD2_MODE_CTRL_REG_VDD2_CLR_DATA value); /**< Set element VDD2_CLR_DATA of register CM_VDD2_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE(HWREG_U8 _reg, eCM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE value); /**< Set element VDD2_CM_MODE of register CM_VDD2_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE getPmic_CM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE(HWREG_U8 value); /**< Get element VDD2_CM_MODE of register CM_VDD2_MODE_CTRL_REG */
+
+
+/** @brief CM_VPROG1_MODE_CTRL_REG register description at address offset 0x4f75
+  *
+  *  Mode Control
+  */
+typedef struct
+{
+    HWREG_U8 VPROG1_CM_EN :1; /**<  */
+    HWREG_U8 VPROG1_CLR_DATA :1; /**<  */
+    HWREG_U8 VPROG1_CM_MODE :2; /**<  */
+    HWREG_U8 VPROG1_CM_ACC :2; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sCM_VPROG1_MODE_CTRL_REGStructure;
+
+
+/** @brief CM_VPROG1_MODE_CTRL_REG Bitfield widths
+*/
+#define lenCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN 1
+#define lenCM_VPROG1_MODE_CTRL_REG_VPROG1_CLR_DATA 1
+#define lenCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE 2
+#define lenCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC 2
+
+typedef enum
+{
+    CM_VPROG1_MODE_CTRL_REG_LSB_VPROG1_CM_EN = 0,
+    CM_VPROG1_MODE_CTRL_REG_LSB_VPROG1_CLR_DATA = 1,
+    CM_VPROG1_MODE_CTRL_REG_LSB_VPROG1_CM_MODE = 2,
+    CM_VPROG1_MODE_CTRL_REG_LSB_VPROG1_CM_ACC = 4
+} eCM_VPROG1_MODE_CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VPROG1_MODE_CTRL_REG_Content;
+    sCM_VPROG1_MODE_CTRL_REGStructure CM_VPROG1_MODE_CTRL_REG_Structure;
+} uCM_VPROG1_MODE_CTRL_REG;
+
+typedef enum
+{
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN_CM_DIS = 0,
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN_CM_EN = 1
+} eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN;
+
+typedef enum
+{
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CLR_DATA_CLR_DIS = 0,
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CLR_DATA_CLR_EN = 1
+} eCM_VPROG1_MODE_CTRL_REG_VPROG1_CLR_DATA;
+
+typedef enum
+{
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE_MD_CONT = 0,
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE_MD_AVE = 1,
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE_MD_COUNT = 2,
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE_MD_HGH = 3
+} eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE;
+
+typedef enum
+{
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC_P100 = 0,
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC_P75 = 1,
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC_P50 = 2,
+    CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC_RES = 3
+} eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VPROG1_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG1_MODE_CTRL_REG(HWREG_U8 value); /** Get complete register CM_VPROG1_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN(HWREG_U8 _reg, eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN value); /**< Set element VPROG1_CM_EN of register CM_VPROG1_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN getPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN(HWREG_U8 value); /**< Get element VPROG1_CM_EN of register CM_VPROG1_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CLR_DATA(HWREG_U8 _reg, eCM_VPROG1_MODE_CTRL_REG_VPROG1_CLR_DATA value); /**< Set element VPROG1_CLR_DATA of register CM_VPROG1_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE(HWREG_U8 _reg, eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE value); /**< Set element VPROG1_CM_MODE of register CM_VPROG1_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE getPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE(HWREG_U8 value); /**< Get element VPROG1_CM_MODE of register CM_VPROG1_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC(HWREG_U8 _reg, eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC value); /**< Set element VPROG1_CM_ACC of register CM_VPROG1_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC getPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC(HWREG_U8 value); /**< Get element VPROG1_CM_ACC of register CM_VPROG1_MODE_CTRL_REG */
+
+
+/** @brief CM_VPROG2_MODE_CTRL_REG register description at address offset 0x4f79
+  *
+  *  Mode Control
+  */
+typedef struct
+{
+    HWREG_U8 VPROG2_CM_EN :1; /**<  */
+    HWREG_U8 VPROG2_CLR_DATA :1; /**<  */
+    HWREG_U8 VPROG2_CM_MODE :2; /**<  */
+    HWREG_U8 VPROG2_CM_ACC :2; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sCM_VPROG2_MODE_CTRL_REGStructure;
+
+
+/** @brief CM_VPROG2_MODE_CTRL_REG Bitfield widths
+*/
+#define lenCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN 1
+#define lenCM_VPROG2_MODE_CTRL_REG_VPROG2_CLR_DATA 1
+#define lenCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE 2
+#define lenCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC 2
+
+typedef enum
+{
+    CM_VPROG2_MODE_CTRL_REG_LSB_VPROG2_CM_EN = 0,
+    CM_VPROG2_MODE_CTRL_REG_LSB_VPROG2_CLR_DATA = 1,
+    CM_VPROG2_MODE_CTRL_REG_LSB_VPROG2_CM_MODE = 2,
+    CM_VPROG2_MODE_CTRL_REG_LSB_VPROG2_CM_ACC = 4
+} eCM_VPROG2_MODE_CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VPROG2_MODE_CTRL_REG_Content;
+    sCM_VPROG2_MODE_CTRL_REGStructure CM_VPROG2_MODE_CTRL_REG_Structure;
+} uCM_VPROG2_MODE_CTRL_REG;
+
+typedef enum
+{
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN_CM_DIS = 0,
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN_CM_EN = 1
+} eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN;
+
+typedef enum
+{
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CLR_DATA_CLR_DIS = 0,
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CLR_DATA_CLR_EN = 1
+} eCM_VPROG2_MODE_CTRL_REG_VPROG2_CLR_DATA;
+
+typedef enum
+{
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE_MD_CONT = 0,
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE_MD_AVE = 1,
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE_MD_COUNT = 2,
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE_MD_HGH = 3
+} eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE;
+
+typedef enum
+{
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC_P100 = 0,
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC_P75 = 1,
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC_P50 = 2,
+    CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC_RES = 3
+} eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG2_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VPROG2_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG2_MODE_CTRL_REG(HWREG_U8 value); /** Get complete register CM_VPROG2_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN(HWREG_U8 _reg, eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN value); /**< Set element VPROG2_CM_EN of register CM_VPROG2_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN getPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN(HWREG_U8 value); /**< Get element VPROG2_CM_EN of register CM_VPROG2_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CLR_DATA(HWREG_U8 _reg, eCM_VPROG2_MODE_CTRL_REG_VPROG2_CLR_DATA value); /**< Set element VPROG2_CLR_DATA of register CM_VPROG2_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE(HWREG_U8 _reg, eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE value); /**< Set element VPROG2_CM_MODE of register CM_VPROG2_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE getPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE(HWREG_U8 value); /**< Get element VPROG2_CM_MODE of register CM_VPROG2_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC(HWREG_U8 _reg, eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC value); /**< Set element VPROG2_CM_ACC of register CM_VPROG2_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC getPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC(HWREG_U8 value); /**< Get element VPROG2_CM_ACC of register CM_VPROG2_MODE_CTRL_REG */
+
+
+/** @brief CM_VPROG3_MODE_CTRL_REG register description at address offset 0x4f7c
+  *
+  *  Mode Control
+  */
+typedef struct
+{
+    HWREG_U8 VPROG3_CM_EN :1; /**<  */
+    HWREG_U8 VPROG3_CLR_DATA :1; /**<  */
+    HWREG_U8 VPROG3_CM_MODE :2; /**<  */
+    HWREG_U8 VPROG3_CM_ACC :2; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sCM_VPROG3_MODE_CTRL_REGStructure;
+
+
+/** @brief CM_VPROG3_MODE_CTRL_REG Bitfield widths
+*/
+#define lenCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN 1
+#define lenCM_VPROG3_MODE_CTRL_REG_VPROG3_CLR_DATA 1
+#define lenCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE 2
+#define lenCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_ACC 2
+
+typedef enum
+{
+    CM_VPROG3_MODE_CTRL_REG_LSB_VPROG3_CM_EN = 0,
+    CM_VPROG3_MODE_CTRL_REG_LSB_VPROG3_CLR_DATA = 1,
+    CM_VPROG3_MODE_CTRL_REG_LSB_VPROG3_CM_MODE = 2,
+    CM_VPROG3_MODE_CTRL_REG_LSB_VPROG3_CM_ACC = 4
+} eCM_VPROG3_MODE_CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VPROG3_MODE_CTRL_REG_Content;
+    sCM_VPROG3_MODE_CTRL_REGStructure CM_VPROG3_MODE_CTRL_REG_Structure;
+} uCM_VPROG3_MODE_CTRL_REG;
+
+typedef enum
+{
+    CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN_CM_DIS = 0,
+    CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN_CM_EN = 1
+} eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN;
+
+typedef enum
+{
+    CM_VPROG3_MODE_CTRL_REG_VPROG3_CLR_DATA_CLR_DIS = 0,
+    CM_VPROG3_MODE_CTRL_REG_VPROG3_CLR_DATA_CLR_EN = 1
+} eCM_VPROG3_MODE_CTRL_REG_VPROG3_CLR_DATA;
+
+typedef enum
+{
+    CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE_MD_CONT = 0,
+    CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE_MD_AVE = 1,
+    CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE_MD_COUNT = 2,
+    CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE_MD_HGH = 3
+} eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VPROG3_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG3_MODE_CTRL_REG(HWREG_U8 value); /** Get complete register CM_VPROG3_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN(HWREG_U8 _reg, eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN value); /**< Set element VPROG3_CM_EN of register CM_VPROG3_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN getPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN(HWREG_U8 value); /**< Get element VPROG3_CM_EN of register CM_VPROG3_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CLR_DATA(HWREG_U8 _reg, eCM_VPROG3_MODE_CTRL_REG_VPROG3_CLR_DATA value); /**< Set element VPROG3_CLR_DATA of register CM_VPROG3_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE(HWREG_U8 _reg, eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE value); /**< Set element VPROG3_CM_MODE of register CM_VPROG3_MODE_CTRL_REG */
+__HWREG_INLINE__ eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE getPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE(HWREG_U8 value); /**< Get element VPROG3_CM_MODE of register CM_VPROG3_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_ACC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VPROG3_CM_ACC of register CM_VPROG3_MODE_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_ACC(HWREG_U8 value); /**< Get element VPROG3_CM_ACC of register CM_VPROG3_MODE_CTRL_REG */
+
+
+/** @brief CM_TSPAN_CTRL_REG register description at address offset 0x4f7e
+  *
+  *  Time Span
+  */
+typedef struct
+{
+    HWREG_U8 TSPAN :4; /**<  */
+    HWREG_U8 TSPAN_EN :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sCM_TSPAN_CTRL_REGStructure;
+
+
+/** @brief CM_TSPAN_CTRL_REG Bitfield widths
+*/
+#define lenCM_TSPAN_CTRL_REG_TSPAN 4
+#define lenCM_TSPAN_CTRL_REG_TSPAN_EN 1
+
+typedef enum
+{
+    CM_TSPAN_CTRL_REG_LSB_TSPAN = 0,
+    CM_TSPAN_CTRL_REG_LSB_TSPAN_EN = 4
+} eCM_TSPAN_CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_TSPAN_CTRL_REG_Content;
+    sCM_TSPAN_CTRL_REGStructure CM_TSPAN_CTRL_REG_Structure;
+} uCM_TSPAN_CTRL_REG;
+
+typedef enum
+{
+    CM_TSPAN_CTRL_REG_TSPAN_EN_NOLIMIT = 0,
+    CM_TSPAN_CTRL_REG_TSPAN_EN_TIMESPAN = 1
+} eCM_TSPAN_CTRL_REG_TSPAN_EN;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_TSPAN_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_TSPAN_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_TSPAN_CTRL_REG(HWREG_U8 value); /** Get complete register CM_TSPAN_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_TSPAN_CTRL_REG_TSPAN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TSPAN of register CM_TSPAN_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_TSPAN_CTRL_REG_TSPAN(HWREG_U8 value); /**< Get element TSPAN of register CM_TSPAN_CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_TSPAN_CTRL_REG_TSPAN_EN(HWREG_U8 _reg, eCM_TSPAN_CTRL_REG_TSPAN_EN value); /**< Set element TSPAN_EN of register CM_TSPAN_CTRL_REG */
+__HWREG_INLINE__ eCM_TSPAN_CTRL_REG_TSPAN_EN getPmic_CM_TSPAN_CTRL_REG_TSPAN_EN(HWREG_U8 value); /**< Get element TSPAN_EN of register CM_TSPAN_CTRL_REG */
+
+
+/** @brief CM_LDO1_THRSHLD_REG register description at address offset 0x4f7f
+  *
+  *  LDO Threshold 1
+  */
+typedef struct
+{
+    HWREG_U8 VPROG1_CM_THRSHLD :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sCM_LDO1_THRSHLD_REGStructure;
+
+
+/** @brief CM_LDO1_THRSHLD_REG Bitfield widths
+*/
+#define lenCM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD 2
+
+typedef enum
+{
+    CM_LDO1_THRSHLD_REG_LSB_VPROG1_CM_THRSHLD = 0
+} eCM_LDO1_THRSHLD_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_LDO1_THRSHLD_REG_Content;
+    sCM_LDO1_THRSHLD_REGStructure CM_LDO1_THRSHLD_REG_Structure;
+} uCM_LDO1_THRSHLD_REG;
+
+typedef enum
+{
+    CM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD_P50 = 0,
+    CM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD_P75 = 1,
+    CM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD_P90 = 2
+} eCM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO1_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_LDO1_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_LDO1_THRSHLD_REG(HWREG_U8 value); /** Get complete register CM_LDO1_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD(HWREG_U8 _reg, eCM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD value); /**< Set element VPROG1_CM_THRSHLD of register CM_LDO1_THRSHLD_REG */
+__HWREG_INLINE__ eCM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD getPmic_CM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD(HWREG_U8 value); /**< Get element VPROG1_CM_THRSHLD of register CM_LDO1_THRSHLD_REG */
+
+
+/** @brief CM_LDO2_THRSHLD_REG register description at address offset 0x4f80
+  *
+  *  LDO Threshold 2
+  */
+typedef struct
+{
+    HWREG_U8 VPROG2A_CM_THRSHL :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sCM_LDO2_THRSHLD_REGStructure;
+
+
+/** @brief CM_LDO2_THRSHLD_REG Bitfield widths
+*/
+#define lenCM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL 2
+
+typedef enum
+{
+    CM_LDO2_THRSHLD_REG_LSB_VPROG2A_CM_THRSHL = 0
+} eCM_LDO2_THRSHLD_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_LDO2_THRSHLD_REG_Content;
+    sCM_LDO2_THRSHLD_REGStructure CM_LDO2_THRSHLD_REG_Structure;
+} uCM_LDO2_THRSHLD_REG;
+
+typedef enum
+{
+    CM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL_P50 = 0,
+    CM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL_P75 = 1,
+    CM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL_P90 = 2
+} eCM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO2_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_LDO2_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_LDO2_THRSHLD_REG(HWREG_U8 value); /** Get complete register CM_LDO2_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL(HWREG_U8 _reg, eCM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL value); /**< Set element VPROG2A_CM_THRSHL of register CM_LDO2_THRSHLD_REG */
+__HWREG_INLINE__ eCM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL getPmic_CM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL(HWREG_U8 value); /**< Get element VPROG2A_CM_THRSHL of register CM_LDO2_THRSHLD_REG */
+
+
+/** @brief CM_LDO3_THRSHLD_REG register description at address offset 0x4f81
+  *
+  *  LDO Threshold 3
+  */
+typedef struct
+{
+    HWREG_U8 VPROG3_CM_THRSHLD :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sCM_LDO3_THRSHLD_REGStructure;
+
+
+/** @brief CM_LDO3_THRSHLD_REG Bitfield widths
+*/
+#define lenCM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD 2
+
+typedef enum
+{
+    CM_LDO3_THRSHLD_REG_LSB_VPROG3_CM_THRSHLD = 0
+} eCM_LDO3_THRSHLD_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_LDO3_THRSHLD_REG_Content;
+    sCM_LDO3_THRSHLD_REGStructure CM_LDO3_THRSHLD_REG_Structure;
+} uCM_LDO3_THRSHLD_REG;
+
+typedef enum
+{
+    CM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD_P50 = 0,
+    CM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD_P75 = 1,
+    CM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD_P90 = 2
+} eCM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO3_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_LDO3_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_LDO3_THRSHLD_REG(HWREG_U8 value); /** Get complete register CM_LDO3_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD(HWREG_U8 _reg, eCM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD value); /**< Set element VPROG3_CM_THRSHLD of register CM_LDO3_THRSHLD_REG */
+__HWREG_INLINE__ eCM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD getPmic_CM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD(HWREG_U8 value); /**< Get element VPROG3_CM_THRSHLD of register CM_LDO3_THRSHLD_REG */
+
+
+/** @brief CM_SMPS0_THRSHLD_REG register description at address offset 0x4f82
+  *
+  *  Switched Mode Power Supply Threshold 0
+  */
+typedef struct
+{
+    HWREG_U8 VCC_CM_THRSHLD :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sCM_SMPS0_THRSHLD_REGStructure;
+
+
+/** @brief CM_SMPS0_THRSHLD_REG Bitfield widths
+*/
+#define lenCM_SMPS0_THRSHLD_REG_VCC_CM_THRSHLD 4
+
+typedef enum
+{
+    CM_SMPS0_THRSHLD_REG_LSB_VCC_CM_THRSHLD = 0
+} eCM_SMPS0_THRSHLD_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_SMPS0_THRSHLD_REG_Content;
+    sCM_SMPS0_THRSHLD_REGStructure CM_SMPS0_THRSHLD_REG_Structure;
+} uCM_SMPS0_THRSHLD_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS0_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_SMPS0_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS0_THRSHLD_REG(HWREG_U8 value); /** Get complete register CM_SMPS0_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS0_THRSHLD_REG_VCC_CM_THRSHLD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VCC_CM_THRSHLD of register CM_SMPS0_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS0_THRSHLD_REG_VCC_CM_THRSHLD(HWREG_U8 value); /**< Get element VCC_CM_THRSHLD of register CM_SMPS0_THRSHLD_REG */
+
+
+/** @brief CM_SMPS1_THRSHLD_REG register description at address offset 0x4f83
+  *
+  *  Switched Mode Power Supply Threshold 1
+  */
+typedef struct
+{
+    HWREG_U8 VCC_PA_THRSHLD :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sCM_SMPS1_THRSHLD_REGStructure;
+
+
+/** @brief CM_SMPS1_THRSHLD_REG Bitfield widths
+*/
+#define lenCM_SMPS1_THRSHLD_REG_VCC_PA_THRSHLD 4
+
+typedef enum
+{
+    CM_SMPS1_THRSHLD_REG_LSB_VCC_PA_THRSHLD = 0
+} eCM_SMPS1_THRSHLD_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_SMPS1_THRSHLD_REG_Content;
+    sCM_SMPS1_THRSHLD_REGStructure CM_SMPS1_THRSHLD_REG_Structure;
+} uCM_SMPS1_THRSHLD_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS1_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_SMPS1_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS1_THRSHLD_REG(HWREG_U8 value); /** Get complete register CM_SMPS1_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS1_THRSHLD_REG_VCC_PA_THRSHLD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VCC_PA_THRSHLD of register CM_SMPS1_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS1_THRSHLD_REG_VCC_PA_THRSHLD(HWREG_U8 value); /**< Get element VCC_PA_THRSHLD of register CM_SMPS1_THRSHLD_REG */
+
+
+/** @brief CM_SMPS2_THRSHLD_REG register description at address offset 0x4f84
+  *
+  *  Switched Mode Power Supply Threshold 2
+  */
+typedef struct
+{
+    HWREG_U8 VNN_CM_THRSHLD :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sCM_SMPS2_THRSHLD_REGStructure;
+
+
+/** @brief CM_SMPS2_THRSHLD_REG Bitfield widths
+*/
+#define lenCM_SMPS2_THRSHLD_REG_VNN_CM_THRSHLD 4
+
+typedef enum
+{
+    CM_SMPS2_THRSHLD_REG_LSB_VNN_CM_THRSHLD = 0
+} eCM_SMPS2_THRSHLD_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_SMPS2_THRSHLD_REG_Content;
+    sCM_SMPS2_THRSHLD_REGStructure CM_SMPS2_THRSHLD_REG_Structure;
+} uCM_SMPS2_THRSHLD_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS2_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_SMPS2_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS2_THRSHLD_REG(HWREG_U8 value); /** Get complete register CM_SMPS2_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS2_THRSHLD_REG_VNN_CM_THRSHLD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VNN_CM_THRSHLD of register CM_SMPS2_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS2_THRSHLD_REG_VNN_CM_THRSHLD(HWREG_U8 value); /**< Get element VNN_CM_THRSHLD of register CM_SMPS2_THRSHLD_REG */
+
+
+/** @brief CM_SMPS3_THRSHLD_REG register description at address offset 0x4f85
+  *
+  *  Switched Mode Power Supply Threshold 3
+  */
+typedef struct
+{
+    HWREG_U8 VDD1_CM_THRSHLD :4; /**<  */
+    HWREG_U8 VDD2_CM_THRSHLD :4; /**<  */
+} sCM_SMPS3_THRSHLD_REGStructure;
+
+
+/** @brief CM_SMPS3_THRSHLD_REG Bitfield widths
+*/
+#define lenCM_SMPS3_THRSHLD_REG_VDD1_CM_THRSHLD 4
+#define lenCM_SMPS3_THRSHLD_REG_VDD2_CM_THRSHLD 4
+
+typedef enum
+{
+    CM_SMPS3_THRSHLD_REG_LSB_VDD1_CM_THRSHLD = 0,
+    CM_SMPS3_THRSHLD_REG_LSB_VDD2_CM_THRSHLD = 4
+} eCM_SMPS3_THRSHLD_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_SMPS3_THRSHLD_REG_Content;
+    sCM_SMPS3_THRSHLD_REGStructure CM_SMPS3_THRSHLD_REG_Structure;
+} uCM_SMPS3_THRSHLD_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS3_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_SMPS3_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS3_THRSHLD_REG(HWREG_U8 value); /** Get complete register CM_SMPS3_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS3_THRSHLD_REG_VDD1_CM_THRSHLD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDD1_CM_THRSHLD of register CM_SMPS3_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS3_THRSHLD_REG_VDD1_CM_THRSHLD(HWREG_U8 value); /**< Get element VDD1_CM_THRSHLD of register CM_SMPS3_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS3_THRSHLD_REG_VDD2_CM_THRSHLD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDD2_CM_THRSHLD of register CM_SMPS3_THRSHLD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS3_THRSHLD_REG_VDD2_CM_THRSHLD(HWREG_U8 value); /**< Get element VDD2_CM_THRSHLD of register CM_SMPS3_THRSHLD_REG */
+
+
+/** @brief CM_SMPS4_THRSHLD_REG register description at address offset 0x4f86
+  *
+  *  Switched Mode Power Supply Threshold 4
+  */
+typedef struct
+{
+    const HWREG_U8 :8; /**< Unused bitfield */
+} sCM_SMPS4_THRSHLD_REGStructure;
+
+
+/** @brief CM_SMPS4_THRSHLD_REG Bitfield widths
+*/
+
+
+typedef union
+{
+    HWREG_U8 CM_SMPS4_THRSHLD_REG_Content;
+    sCM_SMPS4_THRSHLD_REGStructure CM_SMPS4_THRSHLD_REG_Structure;
+} uCM_SMPS4_THRSHLD_REG;
+
+
+
+/** @brief CM_SMPS5_THRSHLD_REG register description at address offset 0x4f87
+  *
+  *  Switched Mode Power Supply Threshold 5
+  */
+typedef struct
+{
+    const HWREG_U8 :8; /**< Unused bitfield */
+} sCM_SMPS5_THRSHLD_REGStructure;
+
+
+/** @brief CM_SMPS5_THRSHLD_REG Bitfield widths
+*/
+
+
+typedef union
+{
+    HWREG_U8 CM_SMPS5_THRSHLD_REG_Content;
+    sCM_SMPS5_THRSHLD_REGStructure CM_SMPS5_THRSHLD_REG_Structure;
+} uCM_SMPS5_THRSHLD_REG;
+
+
+
+/** @brief CM_VCC_DATA_REG register description at address offset 0x4f88
+  *
+  *  Value of VCC0 current measurement
+  */
+typedef struct
+{
+    const HWREG_U8 :8; /**< Unused bitfield */
+} sCM_VCC_DATA_REGStructure;
+
+
+/** @brief CM_VCC_DATA_REG Bitfield widths
+*/
+
+
+typedef union
+{
+    HWREG_U8 CM_VCC_DATA_REG_Content;
+    sCM_VCC_DATA_REGStructure CM_VCC_DATA_REG_Structure;
+} uCM_VCC_DATA_REG;
+
+
+
+/** @brief CM_VPA_DATA_REG register description at address offset 0x4f8a
+  *
+  *  Value of VCC current measurement
+  */
+typedef struct
+{
+    const HWREG_U8 VPA_CM_DATA :8; /**<  */
+} sCM_VPA_DATA_REGStructure;
+
+
+/** @brief CM_VPA_DATA_REG Bitfield widths
+*/
+#define lenCM_VPA_DATA_REG_VPA_CM_DATA 8
+
+typedef enum
+{
+    CM_VPA_DATA_REG_LSB_VPA_CM_DATA = 0
+} eCM_VPA_DATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VPA_DATA_REG_Content;
+    sCM_VPA_DATA_REGStructure CM_VPA_DATA_REG_Structure;
+} uCM_VPA_DATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPA_DATA_REG(HWREG_U8 value); /** Get complete register CM_VPA_DATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPA_DATA_REG_VPA_CM_DATA(HWREG_U8 value); /**< Get element VPA_CM_DATA of register CM_VPA_DATA_REG */
+
+
+/** @brief CM_VNN_DATA_REG register description at address offset 0x4f8b
+  *
+  *  Value of VNN current measurement
+  */
+typedef struct
+{
+    const HWREG_U8 VNN_CM_DATA :8; /**<  */
+} sCM_VNN_DATA_REGStructure;
+
+
+/** @brief CM_VNN_DATA_REG Bitfield widths
+*/
+#define lenCM_VNN_DATA_REG_VNN_CM_DATA 8
+
+typedef enum
+{
+    CM_VNN_DATA_REG_LSB_VNN_CM_DATA = 0
+} eCM_VNN_DATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VNN_DATA_REG_Content;
+    sCM_VNN_DATA_REGStructure CM_VNN_DATA_REG_Structure;
+} uCM_VNN_DATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VNN_DATA_REG(HWREG_U8 value); /** Get complete register CM_VNN_DATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VNN_DATA_REG_VNN_CM_DATA(HWREG_U8 value); /**< Get element VNN_CM_DATA of register CM_VNN_DATA_REG */
+
+
+/** @brief CM_VDD1_DATA_REG register description at address offset 0x4f8d
+  *
+  *  Value of VDD1 current measurement
+  */
+typedef struct
+{
+    const HWREG_U8 VDD1_CM_DATA :8; /**<  */
+} sCM_VDD1_DATA_REGStructure;
+
+
+/** @brief CM_VDD1_DATA_REG Bitfield widths
+*/
+#define lenCM_VDD1_DATA_REG_VDD1_CM_DATA 8
+
+typedef enum
+{
+    CM_VDD1_DATA_REG_LSB_VDD1_CM_DATA = 0
+} eCM_VDD1_DATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VDD1_DATA_REG_Content;
+    sCM_VDD1_DATA_REGStructure CM_VDD1_DATA_REG_Structure;
+} uCM_VDD1_DATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD1_DATA_REG(HWREG_U8 value); /** Get complete register CM_VDD1_DATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD1_DATA_REG_VDD1_CM_DATA(HWREG_U8 value); /**< Get element VDD1_CM_DATA of register CM_VDD1_DATA_REG */
+
+
+/** @brief CM_VDD2_DATA_REG register description at address offset 0x4f8e
+  *
+  *  Value of VDD2 current measurement
+  */
+typedef struct
+{
+    const HWREG_U8 VDD2_CM_DATA :8; /**<  */
+} sCM_VDD2_DATA_REGStructure;
+
+
+/** @brief CM_VDD2_DATA_REG Bitfield widths
+*/
+#define lenCM_VDD2_DATA_REG_VDD2_CM_DATA 8
+
+typedef enum
+{
+    CM_VDD2_DATA_REG_LSB_VDD2_CM_DATA = 0
+} eCM_VDD2_DATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VDD2_DATA_REG_Content;
+    sCM_VDD2_DATA_REGStructure CM_VDD2_DATA_REG_Structure;
+} uCM_VDD2_DATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD2_DATA_REG(HWREG_U8 value); /** Get complete register CM_VDD2_DATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD2_DATA_REG_VDD2_CM_DATA(HWREG_U8 value); /**< Get element VDD2_CM_DATA of register CM_VDD2_DATA_REG */
+
+
+/** @brief CM_PROG1_DATA_REG register description at address offset 0x4f92
+  *
+  *  Value of VPROG1A current measurement
+  */
+typedef struct
+{
+    const HWREG_U8 VPROG1_CM_DATA :8; /**<  */
+} sCM_PROG1_DATA_REGStructure;
+
+
+/** @brief CM_PROG1_DATA_REG Bitfield widths
+*/
+#define lenCM_PROG1_DATA_REG_VPROG1_CM_DATA 8
+
+typedef enum
+{
+    CM_PROG1_DATA_REG_LSB_VPROG1_CM_DATA = 0
+} eCM_PROG1_DATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_PROG1_DATA_REG_Content;
+    sCM_PROG1_DATA_REGStructure CM_PROG1_DATA_REG_Structure;
+} uCM_PROG1_DATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG1_DATA_REG(HWREG_U8 value); /** Get complete register CM_PROG1_DATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG1_DATA_REG_VPROG1_CM_DATA(HWREG_U8 value); /**< Get element VPROG1_CM_DATA of register CM_PROG1_DATA_REG */
+
+
+/** @brief CM_PROG2_DATA_REG register description at address offset 0x4f96
+  *
+  *  Value of VPROG2A current measurement
+  */
+typedef struct
+{
+    const HWREG_U8 VPROG2_CM_DATA :8; /**<  */
+} sCM_PROG2_DATA_REGStructure;
+
+
+/** @brief CM_PROG2_DATA_REG Bitfield widths
+*/
+#define lenCM_PROG2_DATA_REG_VPROG2_CM_DATA 8
+
+typedef enum
+{
+    CM_PROG2_DATA_REG_LSB_VPROG2_CM_DATA = 0
+} eCM_PROG2_DATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_PROG2_DATA_REG_Content;
+    sCM_PROG2_DATA_REGStructure CM_PROG2_DATA_REG_Structure;
+} uCM_PROG2_DATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG2_DATA_REG(HWREG_U8 value); /** Get complete register CM_PROG2_DATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG2_DATA_REG_VPROG2_CM_DATA(HWREG_U8 value); /**< Get element VPROG2_CM_DATA of register CM_PROG2_DATA_REG */
+
+
+/** @brief CM_PROG3_DATA_REG register description at address offset 0x4f99
+  *
+  *  Value of VPROG3 current measurement
+  */
+typedef struct
+{
+    const HWREG_U8 VPROG3_CM_DATA :8; /**<  */
+} sCM_PROG3_DATA_REGStructure;
+
+
+/** @brief CM_PROG3_DATA_REG Bitfield widths
+*/
+#define lenCM_PROG3_DATA_REG_VPROG3_CM_DATA 8
+
+typedef enum
+{
+    CM_PROG3_DATA_REG_LSB_VPROG3_CM_DATA = 0
+} eCM_PROG3_DATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_PROG3_DATA_REG_Content;
+    sCM_PROG3_DATA_REGStructure CM_PROG3_DATA_REG_Structure;
+} uCM_PROG3_DATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG3_DATA_REG(HWREG_U8 value); /** Get complete register CM_PROG3_DATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG3_DATA_REG_VPROG3_CM_DATA(HWREG_U8 value); /**< Get element VPROG3_CM_DATA of register CM_PROG3_DATA_REG */
+
+
+/** @brief CM_VCC_INT_LVL_REG register description at address offset 0x4f9d
+  *
+  *  Set value which triggers an interrupt
+  */
+typedef struct
+{
+    HWREG_U8 VCC_CM_INT_LVL :8; /**<  */
+} sCM_VCC_INT_LVL_REGStructure;
+
+
+/** @brief CM_VCC_INT_LVL_REG Bitfield widths
+*/
+#define lenCM_VCC_INT_LVL_REG_VCC_CM_INT_LVL 8
+
+typedef enum
+{
+    CM_VCC_INT_LVL_REG_LSB_VCC_CM_INT_LVL = 0
+} eCM_VCC_INT_LVL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VCC_INT_LVL_REG_Content;
+    sCM_VCC_INT_LVL_REGStructure CM_VCC_INT_LVL_REG_Structure;
+} uCM_VCC_INT_LVL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VCC_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VCC_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VCC_INT_LVL_REG(HWREG_U8 value); /** Get complete register CM_VCC_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VCC_INT_LVL_REG_VCC_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VCC_CM_INT_LVL of register CM_VCC_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VCC_INT_LVL_REG_VCC_CM_INT_LVL(HWREG_U8 value); /**< Get element VCC_CM_INT_LVL of register CM_VCC_INT_LVL_REG */
+
+
+/** @brief CM_VNN_INT_LVL_REG register description at address offset 0x4f9e
+  *
+  *  Set value which triggers an interrupt
+  */
+typedef struct
+{
+    HWREG_U8 VNN_CM_INT_LVL :8; /**<  */
+} sCM_VNN_INT_LVL_REGStructure;
+
+
+/** @brief CM_VNN_INT_LVL_REG Bitfield widths
+*/
+#define lenCM_VNN_INT_LVL_REG_VNN_CM_INT_LVL 8
+
+typedef enum
+{
+    CM_VNN_INT_LVL_REG_LSB_VNN_CM_INT_LVL = 0
+} eCM_VNN_INT_LVL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VNN_INT_LVL_REG_Content;
+    sCM_VNN_INT_LVL_REGStructure CM_VNN_INT_LVL_REG_Structure;
+} uCM_VNN_INT_LVL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VNN_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VNN_INT_LVL_REG(HWREG_U8 value); /** Get complete register CM_VNN_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_INT_LVL_REG_VNN_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VNN_CM_INT_LVL of register CM_VNN_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VNN_INT_LVL_REG_VNN_CM_INT_LVL(HWREG_U8 value); /**< Get element VNN_CM_INT_LVL of register CM_VNN_INT_LVL_REG */
+
+
+/** @brief CM_VPA_INT_LVL_REG register description at address offset 0x4f9f
+  *
+  *  Set value which triggers an interrupt
+  */
+typedef struct
+{
+    const HWREG_U8 :8; /**< Unused bitfield */
+} sCM_VPA_INT_LVL_REGStructure;
+
+
+/** @brief CM_VPA_INT_LVL_REG Bitfield widths
+*/
+
+
+typedef union
+{
+    HWREG_U8 CM_VPA_INT_LVL_REG_Content;
+    sCM_VPA_INT_LVL_REGStructure CM_VPA_INT_LVL_REG_Structure;
+} uCM_VPA_INT_LVL_REG;
+
+
+
+/** @brief CM_VDD2_INT_LVL_REG register description at address offset 0x4fa1
+  *
+  *  Set value which triggers an interrupt
+  */
+typedef struct
+{
+    HWREG_U8 VDD2_CM_INT_LVL :8; /**<  */
+} sCM_VDD2_INT_LVL_REGStructure;
+
+
+/** @brief CM_VDD2_INT_LVL_REG Bitfield widths
+*/
+#define lenCM_VDD2_INT_LVL_REG_VDD2_CM_INT_LVL 8
+
+typedef enum
+{
+    CM_VDD2_INT_LVL_REG_LSB_VDD2_CM_INT_LVL = 0
+} eCM_VDD2_INT_LVL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VDD2_INT_LVL_REG_Content;
+    sCM_VDD2_INT_LVL_REGStructure CM_VDD2_INT_LVL_REG_Structure;
+} uCM_VDD2_INT_LVL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VDD2_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD2_INT_LVL_REG(HWREG_U8 value); /** Get complete register CM_VDD2_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_INT_LVL_REG_VDD2_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDD2_CM_INT_LVL of register CM_VDD2_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD2_INT_LVL_REG_VDD2_CM_INT_LVL(HWREG_U8 value); /**< Get element VDD2_CM_INT_LVL of register CM_VDD2_INT_LVL_REG */
+
+
+/** @brief CM_VDD1_INT_LVL_REG register description at address offset 0x4fa2
+  *
+  *  Set value which triggers an interrupt
+  */
+typedef struct
+{
+    HWREG_U8 VDD1_CM_INT_LVL :8; /**<  */
+} sCM_VDD1_INT_LVL_REGStructure;
+
+
+/** @brief CM_VDD1_INT_LVL_REG Bitfield widths
+*/
+#define lenCM_VDD1_INT_LVL_REG_VDD1_CM_INT_LVL 8
+
+typedef enum
+{
+    CM_VDD1_INT_LVL_REG_LSB_VDD1_CM_INT_LVL = 0
+} eCM_VDD1_INT_LVL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VDD1_INT_LVL_REG_Content;
+    sCM_VDD1_INT_LVL_REGStructure CM_VDD1_INT_LVL_REG_Structure;
+} uCM_VDD1_INT_LVL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VDD1_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD1_INT_LVL_REG(HWREG_U8 value); /** Get complete register CM_VDD1_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_INT_LVL_REG_VDD1_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDD1_CM_INT_LVL of register CM_VDD1_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD1_INT_LVL_REG_VDD1_CM_INT_LVL(HWREG_U8 value); /**< Get element VDD1_CM_INT_LVL of register CM_VDD1_INT_LVL_REG */
+
+
+/** @brief CM_VPROG1_INT_LVL_REG register description at address offset 0x4fa5
+  *
+  *  Set value which triggers an interrupt
+  */
+typedef struct
+{
+    HWREG_U8 VPROG1_CM_INT_LVL :8; /**<  */
+} sCM_VPROG1_INT_LVL_REGStructure;
+
+
+/** @brief CM_VPROG1_INT_LVL_REG Bitfield widths
+*/
+#define lenCM_VPROG1_INT_LVL_REG_VPROG1_CM_INT_LVL 8
+
+typedef enum
+{
+    CM_VPROG1_INT_LVL_REG_LSB_VPROG1_CM_INT_LVL = 0
+} eCM_VPROG1_INT_LVL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VPROG1_INT_LVL_REG_Content;
+    sCM_VPROG1_INT_LVL_REGStructure CM_VPROG1_INT_LVL_REG_Structure;
+} uCM_VPROG1_INT_LVL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VPROG1_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG1_INT_LVL_REG(HWREG_U8 value); /** Get complete register CM_VPROG1_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_INT_LVL_REG_VPROG1_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VPROG1_CM_INT_LVL of register CM_VPROG1_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG1_INT_LVL_REG_VPROG1_CM_INT_LVL(HWREG_U8 value); /**< Get element VPROG1_CM_INT_LVL of register CM_VPROG1_INT_LVL_REG */
+
+
+/** @brief CM_VPROG3_INT_LVL_REG register description at address offset 0x4fac
+  *
+  *  Set value which triggers an interrupt
+  */
+typedef struct
+{
+    HWREG_U8 VPROG3_CM_INT_LVL :8; /**<  */
+} sCM_VPROG3_INT_LVL_REGStructure;
+
+
+/** @brief CM_VPROG3_INT_LVL_REG Bitfield widths
+*/
+#define lenCM_VPROG3_INT_LVL_REG_VPROG3_CM_INT_LVL 8
+
+typedef enum
+{
+    CM_VPROG3_INT_LVL_REG_LSB_VPROG3_CM_INT_LVL = 0
+} eCM_VPROG3_INT_LVL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VPROG3_INT_LVL_REG_Content;
+    sCM_VPROG3_INT_LVL_REGStructure CM_VPROG3_INT_LVL_REG_Structure;
+} uCM_VPROG3_INT_LVL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CM_VPROG3_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG3_INT_LVL_REG(HWREG_U8 value); /** Get complete register CM_VPROG3_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_INT_LVL_REG_VPROG3_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VPROG3_CM_INT_LVL of register CM_VPROG3_INT_LVL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG3_INT_LVL_REG_VPROG3_CM_INT_LVL(HWREG_U8 value); /**< Get element VPROG3_CM_INT_LVL of register CM_VPROG3_INT_LVL_REG */
+
+
+/** @brief CM_VROCIRQSTAT0_REG register description at address offset 0x4fae
+  *
+  *  DCDC VRs Over Current IRQ Status Register 0
+  */
+typedef struct
+{
+    const HWREG_U8 SVCC :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    const HWREG_U8 SVPA :1; /**<  */
+    const HWREG_U8 SVNN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    const HWREG_U8 SVDD1 :1; /**<  */
+    const HWREG_U8 SVDD2 :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sCM_VROCIRQSTAT0_REGStructure;
+
+
+/** @brief CM_VROCIRQSTAT0_REG Bitfield widths
+*/
+#define lenCM_VROCIRQSTAT0_REG_SVCC 1
+#define lenCM_VROCIRQSTAT0_REG_SVPA 1
+#define lenCM_VROCIRQSTAT0_REG_SVNN 1
+#define lenCM_VROCIRQSTAT0_REG_SVDD1 1
+#define lenCM_VROCIRQSTAT0_REG_SVDD2 1
+
+typedef enum
+{
+    CM_VROCIRQSTAT0_REG_LSB_SVCC = 0,
+    CM_VROCIRQSTAT0_REG_LSB_SVPA = 2,
+    CM_VROCIRQSTAT0_REG_LSB_SVNN = 3,
+    CM_VROCIRQSTAT0_REG_LSB_SVDD1 = 5,
+    CM_VROCIRQSTAT0_REG_LSB_SVDD2 = 6
+} eCM_VROCIRQSTAT0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VROCIRQSTAT0_REG_Content;
+    sCM_VROCIRQSTAT0_REGStructure CM_VROCIRQSTAT0_REG_Structure;
+} uCM_VROCIRQSTAT0_REG;
+
+typedef enum
+{
+    CM_VROCIRQSTAT0_REG_SVCC_IA = 1,
+    CM_VROCIRQSTAT0_REG_SVCC_NA = 0
+} eCM_VROCIRQSTAT0_REG_SVCC;
+
+typedef enum
+{
+    CM_VROCIRQSTAT0_REG_SVPA_IA = 1,
+    CM_VROCIRQSTAT0_REG_SVPA_NA = 0
+} eCM_VROCIRQSTAT0_REG_SVPA;
+
+typedef enum
+{
+    CM_VROCIRQSTAT0_REG_SVNN_IA = 1,
+    CM_VROCIRQSTAT0_REG_SVNN_NA = 0
+} eCM_VROCIRQSTAT0_REG_SVNN;
+
+typedef enum
+{
+    CM_VROCIRQSTAT0_REG_SVDD1_IA = 1,
+    CM_VROCIRQSTAT0_REG_SVDD1_NA = 0
+} eCM_VROCIRQSTAT0_REG_SVDD1;
+
+typedef enum
+{
+    CM_VROCIRQSTAT0_REG_SVDD2_IA = 1,
+    CM_VROCIRQSTAT0_REG_SVDD2_NA = 0
+} eCM_VROCIRQSTAT0_REG_SVDD2;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VROCIRQSTAT0_REG(HWREG_U8 value); /** Get complete register CM_VROCIRQSTAT0_REG */
+__HWREG_INLINE__ eCM_VROCIRQSTAT0_REG_SVCC getPmic_CM_VROCIRQSTAT0_REG_SVCC(HWREG_U8 value); /**< Get element SVCC of register CM_VROCIRQSTAT0_REG */
+__HWREG_INLINE__ eCM_VROCIRQSTAT0_REG_SVPA getPmic_CM_VROCIRQSTAT0_REG_SVPA(HWREG_U8 value); /**< Get element SVPA of register CM_VROCIRQSTAT0_REG */
+__HWREG_INLINE__ eCM_VROCIRQSTAT0_REG_SVNN getPmic_CM_VROCIRQSTAT0_REG_SVNN(HWREG_U8 value); /**< Get element SVNN of register CM_VROCIRQSTAT0_REG */
+__HWREG_INLINE__ eCM_VROCIRQSTAT0_REG_SVDD1 getPmic_CM_VROCIRQSTAT0_REG_SVDD1(HWREG_U8 value); /**< Get element SVDD1 of register CM_VROCIRQSTAT0_REG */
+__HWREG_INLINE__ eCM_VROCIRQSTAT0_REG_SVDD2 getPmic_CM_VROCIRQSTAT0_REG_SVDD2(HWREG_U8 value); /**< Get element SVDD2 of register CM_VROCIRQSTAT0_REG */
+
+
+/** @brief CM_VROCIRQSTAT1_REG register description at address offset 0x4faf
+  *
+  *  DCDC VRs Over Current IRQ Status Register 1
+  */
+typedef struct
+{
+    const HWREG_U8 :8; /**< Unused bitfield */
+} sCM_VROCIRQSTAT1_REGStructure;
+
+
+/** @brief CM_VROCIRQSTAT1_REG Bitfield widths
+*/
+
+
+typedef union
+{
+    HWREG_U8 CM_VROCIRQSTAT1_REG_Content;
+    sCM_VROCIRQSTAT1_REGStructure CM_VROCIRQSTAT1_REG_Structure;
+} uCM_VROCIRQSTAT1_REG;
+
+
+
+/** @brief CM_VROCIRQSTAT2_REG register description at address offset 0x4fb0
+  *
+  *  LDO VRs Over Current IRQ Status Register 2
+  */
+typedef struct
+{
+    const HWREG_U8 SVPROG1 :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+    const HWREG_U8 SVPROG2 :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sCM_VROCIRQSTAT2_REGStructure;
+
+
+/** @brief CM_VROCIRQSTAT2_REG Bitfield widths
+*/
+#define lenCM_VROCIRQSTAT2_REG_SVPROG1 1
+#define lenCM_VROCIRQSTAT2_REG_SVPROG2 1
+
+typedef enum
+{
+    CM_VROCIRQSTAT2_REG_LSB_SVPROG1 = 0,
+    CM_VROCIRQSTAT2_REG_LSB_SVPROG2 = 4
+} eCM_VROCIRQSTAT2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VROCIRQSTAT2_REG_Content;
+    sCM_VROCIRQSTAT2_REGStructure CM_VROCIRQSTAT2_REG_Structure;
+} uCM_VROCIRQSTAT2_REG;
+
+typedef enum
+{
+    CM_VROCIRQSTAT2_REG_SVPROG1_IA = 1,
+    CM_VROCIRQSTAT2_REG_SVPROG1_NA = 0
+} eCM_VROCIRQSTAT2_REG_SVPROG1;
+
+typedef enum
+{
+    CM_VROCIRQSTAT2_REG_SVPROG2_IA = 1,
+    CM_VROCIRQSTAT2_REG_SVPROG2_NA = 0
+} eCM_VROCIRQSTAT2_REG_SVPROG2;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VROCIRQSTAT2_REG(HWREG_U8 value); /** Get complete register CM_VROCIRQSTAT2_REG */
+__HWREG_INLINE__ eCM_VROCIRQSTAT2_REG_SVPROG1 getPmic_CM_VROCIRQSTAT2_REG_SVPROG1(HWREG_U8 value); /**< Get element SVPROG1 of register CM_VROCIRQSTAT2_REG */
+__HWREG_INLINE__ eCM_VROCIRQSTAT2_REG_SVPROG2 getPmic_CM_VROCIRQSTAT2_REG_SVPROG2(HWREG_U8 value); /**< Get element SVPROG2 of register CM_VROCIRQSTAT2_REG */
+
+
+/** @brief CM_VROCIRQSTAT3_REG register description at address offset 0x4fb1
+  *
+  *  LDO VRs Over Current IRQ Status Register 3
+  */
+typedef struct
+{
+    const HWREG_U8 SVPROG3 :1; /**<  */
+    const HWREG_U8 :7; /**< Unused bitfield */
+} sCM_VROCIRQSTAT3_REGStructure;
+
+
+/** @brief CM_VROCIRQSTAT3_REG Bitfield widths
+*/
+#define lenCM_VROCIRQSTAT3_REG_SVPROG3 1
+
+typedef enum
+{
+    CM_VROCIRQSTAT3_REG_LSB_SVPROG3 = 0
+} eCM_VROCIRQSTAT3_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CM_VROCIRQSTAT3_REG_Content;
+    sCM_VROCIRQSTAT3_REGStructure CM_VROCIRQSTAT3_REG_Structure;
+} uCM_VROCIRQSTAT3_REG;
+
+typedef enum
+{
+    CM_VROCIRQSTAT3_REG_SVPROG3_IA = 1,
+    CM_VROCIRQSTAT3_REG_SVPROG3_NA = 0
+} eCM_VROCIRQSTAT3_REG_SVPROG3;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VROCIRQSTAT3_REG(HWREG_U8 value); /** Get complete register CM_VROCIRQSTAT3_REG */
+__HWREG_INLINE__ eCM_VROCIRQSTAT3_REG_SVPROG3 getPmic_CM_VROCIRQSTAT3_REG_SVPROG3(HWREG_U8 value); /**< Get element SVPROG3 of register CM_VROCIRQSTAT3_REG */
+
+
+/** @brief VRTCCTRL_REG register description at address offset 0x4fb5
+  *
+  *  VRTC Reset
+  */
+typedef struct
+{
+    HWREG_U8 VRTCRST :1; /**<  */
+    HWREG_U8 VRTCRLD :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sVRTCCTRL_REGStructure;
+
+
+/** @brief VRTCCTRL_REG Bitfield widths
+*/
+#define lenVRTCCTRL_REG_VRTCRST 1
+#define lenVRTCCTRL_REG_VRTCRLD 1
+
+typedef enum
+{
+    VRTCCTRL_REG_LSB_VRTCRST = 0,
+    VRTCCTRL_REG_LSB_VRTCRLD = 1
+} eVRTCCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VRTCCTRL_REG_Content;
+    sVRTCCTRL_REGStructure VRTCCTRL_REG_Structure;
+} uVRTCCTRL_REG;
+
+typedef enum
+{
+    VRTCCTRL_REG_VRTCRLD_LOADED = 0,
+    VRTCCTRL_REG_VRTCRLD_RELOAD = 1
+} eVRTCCTRL_REG_VRTCRLD;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VRTCCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VRTCCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VRTCCTRL_REG(HWREG_U8 value); /** Get complete register VRTCCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VRTCCTRL_REG_VRTCRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VRTCRST of register VRTCCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VRTCCTRL_REG_VRTCRLD(HWREG_U8 _reg, eVRTCCTRL_REG_VRTCRLD value); /**< Set element VRTCRLD of register VRTCCTRL_REG */
+__HWREG_INLINE__ eVRTCCTRL_REG_VRTCRLD getPmic_VRTCCTRL_REG_VRTCRLD(HWREG_U8 value); /**< Get element VRTCRLD of register VRTCCTRL_REG */
+
+
+/** @brief TMUIRQ_REG register description at address offset 0x4fb6
+  *
+  *  TMU Interrupt Register
+  */
+typedef struct
+{
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 WAF :1; /**<  */
+    HWREG_U8 AF :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sTMUIRQ_REGStructure;
+
+
+/** @brief TMUIRQ_REG Bitfield widths
+*/
+#define lenTMUIRQ_REG_WAF 1
+#define lenTMUIRQ_REG_AF 1
+
+typedef enum
+{
+    TMUIRQ_REG_LSB_WAF = 1,
+    TMUIRQ_REG_LSB_AF = 2
+} eTMUIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TMUIRQ_REG_Content;
+    sTMUIRQ_REGStructure TMUIRQ_REG_Structure;
+} uTMUIRQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUIRQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TMUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUIRQ_REG(HWREG_U8 value); /** Get complete register TMUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUIRQ_REG_WAF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element WAF of register TMUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUIRQ_REG_WAF(HWREG_U8 value); /**< Get element WAF of register TMUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUIRQ_REG_AF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element AF of register TMUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUIRQ_REG_AF(HWREG_U8 value); /**< Get element AF of register TMUIRQ_REG */
+
+
+/** @brief MTMUIRQ_REG register description at address offset 0x4fb7
+  *
+  *  TMU Interrupt Mask Register
+  */
+typedef struct
+{
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 MWA :1; /**<  */
+    HWREG_U8 MA :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sMTMUIRQ_REGStructure;
+
+
+/** @brief MTMUIRQ_REG Bitfield widths
+*/
+#define lenMTMUIRQ_REG_MWA 1
+#define lenMTMUIRQ_REG_MA 1
+
+typedef enum
+{
+    MTMUIRQ_REG_LSB_MWA = 1,
+    MTMUIRQ_REG_LSB_MA = 2
+} eMTMUIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MTMUIRQ_REG_Content;
+    sMTMUIRQ_REGStructure MTMUIRQ_REG_Structure;
+} uMTMUIRQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTMUIRQ_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MTMUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTMUIRQ_REG(HWREG_U8 value); /** Get complete register MTMUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTMUIRQ_REG_MWA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MWA of register MTMUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTMUIRQ_REG_MWA(HWREG_U8 value); /**< Get element MWA of register MTMUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MTMUIRQ_REG_MA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MA of register MTMUIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MTMUIRQ_REG_MA(HWREG_U8 value); /**< Get element MA of register MTMUIRQ_REG */
+
+
+/** @brief TMUSTATUS_REG register description at address offset 0x4fb8
+  *
+  *  TMU Status Register
+  */
+typedef struct
+{
+    const HWREG_U8 :1; /**< Unused bitfield */
+    const HWREG_U8 VRT :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTMUSTATUS_REGStructure;
+
+
+/** @brief TMUSTATUS_REG Bitfield widths
+*/
+#define lenTMUSTATUS_REG_VRT 1
+
+typedef enum
+{
+    TMUSTATUS_REG_LSB_VRT = 1
+} eTMUSTATUS_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TMUSTATUS_REG_Content;
+    sTMUSTATUS_REGStructure TMUSTATUS_REG_Structure;
+} uTMUSTATUS_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUSTATUS_REG(HWREG_U8 value); /** Get complete register TMUSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUSTATUS_REG_VRT(HWREG_U8 value); /**< Get element VRT of register TMUSTATUS_REG */
+
+
+/** @brief TMUCONFIG_REG register description at address offset 0x4fb9
+  *
+  *  TMU Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 RSTTMU :1; /**<  */
+    HWREG_U8 SETVRT :1; /**<  */
+    HWREG_U8 RTCWAKEEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 HF :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 DSE :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sTMUCONFIG_REGStructure;
+
+
+/** @brief TMUCONFIG_REG Bitfield widths
+*/
+#define lenTMUCONFIG_REG_RSTTMU 1
+#define lenTMUCONFIG_REG_SETVRT 1
+#define lenTMUCONFIG_REG_RTCWAKEEN 1
+#define lenTMUCONFIG_REG_HF 1
+#define lenTMUCONFIG_REG_DSE 1
+
+typedef enum
+{
+    TMUCONFIG_REG_LSB_RSTTMU = 0,
+    TMUCONFIG_REG_LSB_SETVRT = 1,
+    TMUCONFIG_REG_LSB_RTCWAKEEN = 2,
+    TMUCONFIG_REG_LSB_HF = 4,
+    TMUCONFIG_REG_LSB_DSE = 6
+} eTMUCONFIG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TMUCONFIG_REG_Content;
+    sTMUCONFIG_REGStructure TMUCONFIG_REG_Structure;
+} uTMUCONFIG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TMUCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUCONFIG_REG(HWREG_U8 value); /** Get complete register TMUCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG_RSTTMU(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RSTTMU of register TMUCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG_SETVRT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SETVRT of register TMUCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG_RTCWAKEEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element RTCWAKEEN of register TMUCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUCONFIG_REG_RTCWAKEEN(HWREG_U8 value); /**< Get element RTCWAKEEN of register TMUCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG_HF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element HF of register TMUCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUCONFIG_REG_HF(HWREG_U8 value); /**< Get element HF of register TMUCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG_DSE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DSE of register TMUCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUCONFIG_REG_DSE(HWREG_U8 value); /**< Get element DSE of register TMUCONFIG_REG */
+
+
+/** @brief SECONDS_REG register description at address offset 0x4fba
+  *
+  *  Wall-Clock Timer Seconds Register
+  */
+typedef struct
+{
+    const HWREG_U8 SECONDS :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sSECONDS_REGStructure;
+
+
+/** @brief SECONDS_REG Bitfield widths
+*/
+#define lenSECONDS_REG_SECONDS 6
+
+typedef enum
+{
+    SECONDS_REG_LSB_SECONDS = 0
+} eSECONDS_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SECONDS_REG_Content;
+    sSECONDS_REGStructure SECONDS_REG_Structure;
+} uSECONDS_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDS_REG(HWREG_U8 value); /** Get complete register SECONDS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDS_REG_SECONDS(HWREG_U8 value); /**< Get element SECONDS of register SECONDS_REG */
+
+
+/** @brief SECONDSSA_REG register description at address offset 0x4fbb
+  *
+  *  System Alarm Seconds Register
+  */
+typedef struct
+{
+    HWREG_U8 SECONDS_SA :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sSECONDSSA_REGStructure;
+
+
+/** @brief SECONDSSA_REG Bitfield widths
+*/
+#define lenSECONDSSA_REG_SECONDS_SA 6
+
+typedef enum
+{
+    SECONDSSA_REG_LSB_SECONDS_SA = 0
+} eSECONDSSA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SECONDSSA_REG_Content;
+    sSECONDSSA_REGStructure SECONDSSA_REG_Structure;
+} uSECONDSSA_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SECONDSSA_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SECONDSSA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDSSA_REG(HWREG_U8 value); /** Get complete register SECONDSSA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SECONDSSA_REG_SECONDS_SA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SECONDS_SA of register SECONDSSA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDSSA_REG_SECONDS_SA(HWREG_U8 value); /**< Get element SECONDS_SA of register SECONDSSA_REG */
+
+
+/** @brief SECONDSWA_REG register description at address offset 0x4fbc
+  *
+  *  Wake Alarm Seconds Register
+  */
+typedef struct
+{
+    HWREG_U8 SECONDS_WA :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sSECONDSWA_REGStructure;
+
+
+/** @brief SECONDSWA_REG Bitfield widths
+*/
+#define lenSECONDSWA_REG_SECONDS_WA 6
+
+typedef enum
+{
+    SECONDSWA_REG_LSB_SECONDS_WA = 0
+} eSECONDSWA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SECONDSWA_REG_Content;
+    sSECONDSWA_REGStructure SECONDSWA_REG_Structure;
+} uSECONDSWA_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SECONDSWA_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register SECONDSWA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDSWA_REG(HWREG_U8 value); /** Get complete register SECONDSWA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_SECONDSWA_REG_SECONDS_WA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SECONDS_WA of register SECONDSWA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDSWA_REG_SECONDS_WA(HWREG_U8 value); /**< Get element SECONDS_WA of register SECONDSWA_REG */
+
+
+/** @brief MINUTES_REG register description at address offset 0x4fbd
+  *
+  *  Wall-Clock Timer Minutes Register
+  */
+typedef struct
+{
+    const HWREG_U8 MINUTES :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sMINUTES_REGStructure;
+
+
+/** @brief MINUTES_REG Bitfield widths
+*/
+#define lenMINUTES_REG_MINUTES 6
+
+typedef enum
+{
+    MINUTES_REG_LSB_MINUTES = 0
+} eMINUTES_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MINUTES_REG_Content;
+    sMINUTES_REGStructure MINUTES_REG_Structure;
+} uMINUTES_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTES_REG(HWREG_U8 value); /** Get complete register MINUTES_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTES_REG_MINUTES(HWREG_U8 value); /**< Get element MINUTES of register MINUTES_REG */
+
+
+/** @brief MINUTESSA_REG register description at address offset 0x4fbe
+  *
+  *  System Alarm Minutes Register
+  */
+typedef struct
+{
+    HWREG_U8 MINUTES_SA :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sMINUTESSA_REGStructure;
+
+
+/** @brief MINUTESSA_REG Bitfield widths
+*/
+#define lenMINUTESSA_REG_MINUTES_SA 6
+
+typedef enum
+{
+    MINUTESSA_REG_LSB_MINUTES_SA = 0
+} eMINUTESSA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MINUTESSA_REG_Content;
+    sMINUTESSA_REGStructure MINUTESSA_REG_Structure;
+} uMINUTESSA_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MINUTESSA_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MINUTESSA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTESSA_REG(HWREG_U8 value); /** Get complete register MINUTESSA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MINUTESSA_REG_MINUTES_SA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MINUTES_SA of register MINUTESSA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTESSA_REG_MINUTES_SA(HWREG_U8 value); /**< Get element MINUTES_SA of register MINUTESSA_REG */
+
+
+/** @brief MINUTESWA_REG register description at address offset 0x4fbf
+  *
+  *  Wake Alarm Minutes Register
+  */
+typedef struct
+{
+    HWREG_U8 MINUTES_WA :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sMINUTESWA_REGStructure;
+
+
+/** @brief MINUTESWA_REG Bitfield widths
+*/
+#define lenMINUTESWA_REG_MINUTES_WA 6
+
+typedef enum
+{
+    MINUTESWA_REG_LSB_MINUTES_WA = 0
+} eMINUTESWA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MINUTESWA_REG_Content;
+    sMINUTESWA_REGStructure MINUTESWA_REG_Structure;
+} uMINUTESWA_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MINUTESWA_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MINUTESWA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTESWA_REG(HWREG_U8 value); /** Get complete register MINUTESWA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_MINUTESWA_REG_MINUTES_WA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MINUTES_WA of register MINUTESWA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTESWA_REG_MINUTES_WA(HWREG_U8 value); /**< Get element MINUTES_WA of register MINUTESWA_REG */
+
+
+/** @brief HOURS_REG register description at address offset 0x4fc0
+  *
+  *  Wall-Clock Timer Hours Register
+  */
+typedef struct
+{
+    const HWREG_U8 HOURS :5; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+    const HWREG_U8 HOURS_AM_PM :1; /**<  */
+} sHOURS_REGStructure;
+
+
+/** @brief HOURS_REG Bitfield widths
+*/
+#define lenHOURS_REG_HOURS 5
+#define lenHOURS_REG_HOURS_AM_PM 1
+
+typedef enum
+{
+    HOURS_REG_LSB_HOURS = 0,
+    HOURS_REG_LSB_HOURS_AM_PM = 7
+} eHOURS_REGLsb;
+
+typedef union
+{
+    HWREG_U8 HOURS_REG_Content;
+    sHOURS_REGStructure HOURS_REG_Structure;
+} uHOURS_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURS_REG(HWREG_U8 value); /** Get complete register HOURS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURS_REG_HOURS(HWREG_U8 value); /**< Get element HOURS of register HOURS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURS_REG_HOURS_AM_PM(HWREG_U8 value); /**< Get element HOURS_AM_PM of register HOURS_REG */
+
+
+/** @brief HOURSSA_REG register description at address offset 0x4fc1
+  *
+  *  System Alarm Hours Register
+  */
+typedef struct
+{
+    HWREG_U8 HOURS_SA :5; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+    HWREG_U8 HOURSSA_AM_PM :1; /**<  */
+} sHOURSSA_REGStructure;
+
+
+/** @brief HOURSSA_REG Bitfield widths
+*/
+#define lenHOURSSA_REG_HOURS_SA 5
+#define lenHOURSSA_REG_HOURSSA_AM_PM 1
+
+typedef enum
+{
+    HOURSSA_REG_LSB_HOURS_SA = 0,
+    HOURSSA_REG_LSB_HOURSSA_AM_PM = 7
+} eHOURSSA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 HOURSSA_REG_Content;
+    sHOURSSA_REGStructure HOURSSA_REG_Structure;
+} uHOURSSA_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSSA_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register HOURSSA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSSA_REG(HWREG_U8 value); /** Get complete register HOURSSA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSSA_REG_HOURS_SA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element HOURS_SA of register HOURSSA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSSA_REG_HOURS_SA(HWREG_U8 value); /**< Get element HOURS_SA of register HOURSSA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSSA_REG_HOURSSA_AM_PM(HWREG_U8 _reg, HWREG_U8 value); /**< Set element HOURSSA_AM_PM of register HOURSSA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSSA_REG_HOURSSA_AM_PM(HWREG_U8 value); /**< Get element HOURSSA_AM_PM of register HOURSSA_REG */
+
+
+/** @brief HOURSWA_REG register description at address offset 0x4fc2
+  *
+  *  Wake Alarm Hours Register
+  */
+typedef struct
+{
+    HWREG_U8 HOURS_WA :5; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+    HWREG_U8 HOURSWA_AM_PM :1; /**<  */
+} sHOURSWA_REGStructure;
+
+
+/** @brief HOURSWA_REG Bitfield widths
+*/
+#define lenHOURSWA_REG_HOURS_WA 5
+#define lenHOURSWA_REG_HOURSWA_AM_PM 1
+
+typedef enum
+{
+    HOURSWA_REG_LSB_HOURS_WA = 0,
+    HOURSWA_REG_LSB_HOURSWA_AM_PM = 7
+} eHOURSWA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 HOURSWA_REG_Content;
+    sHOURSWA_REGStructure HOURSWA_REG_Structure;
+} uHOURSWA_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSWA_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register HOURSWA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSWA_REG(HWREG_U8 value); /** Get complete register HOURSWA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSWA_REG_HOURS_WA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element HOURS_WA of register HOURSWA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSWA_REG_HOURS_WA(HWREG_U8 value); /**< Get element HOURS_WA of register HOURSWA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSWA_REG_HOURSWA_AM_PM(HWREG_U8 _reg, HWREG_U8 value); /**< Set element HOURSWA_AM_PM of register HOURSWA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSWA_REG_HOURSWA_AM_PM(HWREG_U8 value); /**< Get element HOURSWA_AM_PM of register HOURSWA_REG */
+
+
+/** @brief DWEEK_REG register description at address offset 0x4fc3
+  *
+  *  Wall-Clock Timer Day of Week Register
+  */
+typedef struct
+{
+    const HWREG_U8 DWEEK :3; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sDWEEK_REGStructure;
+
+
+/** @brief DWEEK_REG Bitfield widths
+*/
+#define lenDWEEK_REG_DWEEK 3
+
+typedef enum
+{
+    DWEEK_REG_LSB_DWEEK = 0
+} eDWEEK_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DWEEK_REG_Content;
+    sDWEEK_REGStructure DWEEK_REG_Structure;
+} uDWEEK_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DWEEK_REG(HWREG_U8 value); /** Get complete register DWEEK_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DWEEK_REG_DWEEK(HWREG_U8 value); /**< Get element DWEEK of register DWEEK_REG */
+
+
+/** @brief DMONTH_REG register description at address offset 0x4fc4
+  *
+  *  Wall-Clock Timer Day of Month Register
+  */
+typedef struct
+{
+    const HWREG_U8 DMONTH :5; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sDMONTH_REGStructure;
+
+
+/** @brief DMONTH_REG Bitfield widths
+*/
+#define lenDMONTH_REG_DMONTH 5
+
+typedef enum
+{
+    DMONTH_REG_LSB_DMONTH = 0
+} eDMONTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DMONTH_REG_Content;
+    sDMONTH_REGStructure DMONTH_REG_Structure;
+} uDMONTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DMONTH_REG(HWREG_U8 value); /** Get complete register DMONTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DMONTH_REG_DMONTH(HWREG_U8 value); /**< Get element DMONTH of register DMONTH_REG */
+
+
+/** @brief MONTH_REG register description at address offset 0x4fc5
+  *
+  *  Wall-Clock Timer Month Register
+  */
+typedef struct
+{
+    const HWREG_U8 MONTH :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sMONTH_REGStructure;
+
+
+/** @brief MONTH_REG Bitfield widths
+*/
+#define lenMONTH_REG_MONTH 4
+
+typedef enum
+{
+    MONTH_REG_LSB_MONTH = 0
+} eMONTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MONTH_REG_Content;
+    sMONTH_REGStructure MONTH_REG_Structure;
+} uMONTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MONTH_REG(HWREG_U8 value); /** Get complete register MONTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MONTH_REG_MONTH(HWREG_U8 value); /**< Get element MONTH of register MONTH_REG */
+
+
+/** @brief YEAR_REG register description at address offset 0x4fc6
+  *
+  *  Wall-Clock Timer Year Register
+  */
+typedef struct
+{
+    const HWREG_U8 YEAR :7; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sYEAR_REGStructure;
+
+
+/** @brief YEAR_REG Bitfield widths
+*/
+#define lenYEAR_REG_YEAR 7
+
+typedef enum
+{
+    YEAR_REG_LSB_YEAR = 0
+} eYEAR_REGLsb;
+
+typedef union
+{
+    HWREG_U8 YEAR_REG_Content;
+    sYEAR_REGStructure YEAR_REG_Structure;
+} uYEAR_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_YEAR_REG(HWREG_U8 value); /** Get complete register YEAR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_YEAR_REG_YEAR(HWREG_U8 value); /**< Get element YEAR of register YEAR_REG */
+
+
+/** @brief STCB1_REG register description at address offset 0x4fc7
+  *
+  *  Secure Time Counter Register 1
+  */
+typedef struct
+{
+    const HWREG_U8 STC_B1 :8; /**<  */
+} sSTCB1_REGStructure;
+
+
+/** @brief STCB1_REG Bitfield widths
+*/
+#define lenSTCB1_REG_STC_B1 8
+
+typedef enum
+{
+    STCB1_REG_LSB_STC_B1 = 0
+} eSTCB1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 STCB1_REG_Content;
+    sSTCB1_REGStructure STCB1_REG_Structure;
+} uSTCB1_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB1_REG(HWREG_U8 value); /** Get complete register STCB1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB1_REG_STC_B1(HWREG_U8 value); /**< Get element STC_B1 of register STCB1_REG */
+
+
+/** @brief STCB2_REG register description at address offset 0x4fc8
+  *
+  *  Secure Time Counter Register 2
+  */
+typedef struct
+{
+    const HWREG_U8 STC_B2 :8; /**<  */
+} sSTCB2_REGStructure;
+
+
+/** @brief STCB2_REG Bitfield widths
+*/
+#define lenSTCB2_REG_STC_B2 8
+
+typedef enum
+{
+    STCB2_REG_LSB_STC_B2 = 0
+} eSTCB2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 STCB2_REG_Content;
+    sSTCB2_REGStructure STCB2_REG_Structure;
+} uSTCB2_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB2_REG(HWREG_U8 value); /** Get complete register STCB2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB2_REG_STC_B2(HWREG_U8 value); /**< Get element STC_B2 of register STCB2_REG */
+
+
+/** @brief STCB3_REG register description at address offset 0x4fc9
+  *
+  *  Secure Time Counter Register 3
+  */
+typedef struct
+{
+    const HWREG_U8 STC_B3 :8; /**<  */
+} sSTCB3_REGStructure;
+
+
+/** @brief STCB3_REG Bitfield widths
+*/
+#define lenSTCB3_REG_STC_B3 8
+
+typedef enum
+{
+    STCB3_REG_LSB_STC_B3 = 0
+} eSTCB3_REGLsb;
+
+typedef union
+{
+    HWREG_U8 STCB3_REG_Content;
+    sSTCB3_REGStructure STCB3_REG_Structure;
+} uSTCB3_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB3_REG(HWREG_U8 value); /** Get complete register STCB3_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB3_REG_STC_B3(HWREG_U8 value); /**< Get element STC_B3 of register STCB3_REG */
+
+
+/** @brief STCB4_REG register description at address offset 0x4fca
+  *
+  *  Secure Time Counter Register 4
+  */
+typedef struct
+{
+    const HWREG_U8 STC_B4 :8; /**<  */
+} sSTCB4_REGStructure;
+
+
+/** @brief STCB4_REG Bitfield widths
+*/
+#define lenSTCB4_REG_STC_B4 8
+
+typedef enum
+{
+    STCB4_REG_LSB_STC_B4 = 0
+} eSTCB4_REGLsb;
+
+typedef union
+{
+    HWREG_U8 STCB4_REG_Content;
+    sSTCB4_REGStructure STCB4_REG_Structure;
+} uSTCB4_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB4_REG(HWREG_U8 value); /** Get complete register STCB4_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB4_REG_STC_B4(HWREG_U8 value); /**< Get element STC_B4 of register STCB4_REG */
+
+
+/** @brief DMONTHWA_REG register description at address offset 0x4fcb
+  *
+  *  Wake Alarm Day of the Month Register
+  */
+typedef struct
+{
+    HWREG_U8 DMONTH_WA :5; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sDMONTHWA_REGStructure;
+
+
+/** @brief DMONTHWA_REG Bitfield widths
+*/
+#define lenDMONTHWA_REG_DMONTH_WA 5
+
+typedef enum
+{
+    DMONTHWA_REG_LSB_DMONTH_WA = 0
+} eDMONTHWA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DMONTHWA_REG_Content;
+    sDMONTHWA_REGStructure DMONTHWA_REG_Structure;
+} uDMONTHWA_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DMONTHWA_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register DMONTHWA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DMONTHWA_REG(HWREG_U8 value); /** Get complete register DMONTHWA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_DMONTHWA_REG_DMONTH_WA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DMONTH_WA of register DMONTHWA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DMONTHWA_REG_DMONTH_WA(HWREG_U8 value); /**< Get element DMONTH_WA of register DMONTHWA_REG */
+
+
+/** @brief CLKCONFIG_REG register description at address offset 0x4fcc
+  *
+  *  Clock Configuration Register
+  */
+typedef struct
+{
+    HWREG_U8 SLP0D :1; /**<  */
+    HWREG_U8 SLP0DLVL :1; /**<  */
+    HWREG_U8 SLP1D :1; /**<  */
+    HWREG_U8 SLP1DLVL :1; /**<  */
+    HWREG_U8 SLP2D :1; /**<  */
+    HWREG_U8 SLP2DLVL :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sCLKCONFIG_REGStructure;
+
+
+/** @brief CLKCONFIG_REG Bitfield widths
+*/
+#define lenCLKCONFIG_REG_SLP0D 1
+#define lenCLKCONFIG_REG_SLP0DLVL 1
+#define lenCLKCONFIG_REG_SLP1D 1
+#define lenCLKCONFIG_REG_SLP1DLVL 1
+#define lenCLKCONFIG_REG_SLP2D 1
+#define lenCLKCONFIG_REG_SLP2DLVL 1
+
+typedef enum
+{
+    CLKCONFIG_REG_LSB_SLP0D = 0,
+    CLKCONFIG_REG_LSB_SLP0DLVL = 1,
+    CLKCONFIG_REG_LSB_SLP1D = 2,
+    CLKCONFIG_REG_LSB_SLP1DLVL = 3,
+    CLKCONFIG_REG_LSB_SLP2D = 4,
+    CLKCONFIG_REG_LSB_SLP2DLVL = 5
+} eCLKCONFIG_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CLKCONFIG_REG_Content;
+    sCLKCONFIG_REGStructure CLKCONFIG_REG_Structure;
+} uCLKCONFIG_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG(HWREG_U8 value); /** Get complete register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP0D(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SLP0D of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP0D(HWREG_U8 value); /**< Get element SLP0D of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP0DLVL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SLP0DLVL of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP0DLVL(HWREG_U8 value); /**< Get element SLP0DLVL of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP1D(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SLP1D of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP1D(HWREG_U8 value); /**< Get element SLP1D of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP1DLVL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SLP1DLVL of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP1DLVL(HWREG_U8 value); /**< Get element SLP1DLVL of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP2D(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SLP2D of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP2D(HWREG_U8 value); /**< Get element SLP2D of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP2DLVL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SLP2DLVL of register CLKCONFIG_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP2DLVL(HWREG_U8 value); /**< Get element SLP2DLVL of register CLKCONFIG_REG */
+
+
+/** @brief FLLCTRL_REG register description at address offset 0x4fcd
+  *
+  *  FLL Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DAC_SEL_CURRENT :3; /**<  */
+    HWREG_U8 REF_CLK_SEL :1; /**<  */
+    HWREG_U8 MULT_MINUS_ONE :4; /**<  */
+} sFLLCTRL_REGStructure;
+
+
+/** @brief FLLCTRL_REG Bitfield widths
+*/
+#define lenFLLCTRL_REG_DAC_SEL_CURRENT 3
+#define lenFLLCTRL_REG_REF_CLK_SEL 1
+#define lenFLLCTRL_REG_MULT_MINUS_ONE 4
+
+typedef enum
+{
+    FLLCTRL_REG_LSB_DAC_SEL_CURRENT = 0,
+    FLLCTRL_REG_LSB_REF_CLK_SEL = 3,
+    FLLCTRL_REG_LSB_MULT_MINUS_ONE = 4
+} eFLLCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 FLLCTRL_REG_Content;
+    sFLLCTRL_REGStructure FLLCTRL_REG_Structure;
+} uFLLCTRL_REG;
+
+typedef enum
+{
+    FLLCTRL_REG_REF_CLK_SEL_RTC = 0,
+    FLLCTRL_REG_REF_CLK_SEL_TCK = 1
+} eFLLCTRL_REG_REF_CLK_SEL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register FLLCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLCTRL_REG(HWREG_U8 value); /** Get complete register FLLCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLCTRL_REG_DAC_SEL_CURRENT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DAC_SEL_CURRENT of register FLLCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLCTRL_REG_DAC_SEL_CURRENT(HWREG_U8 value); /**< Get element DAC_SEL_CURRENT of register FLLCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLCTRL_REG_REF_CLK_SEL(HWREG_U8 _reg, eFLLCTRL_REG_REF_CLK_SEL value); /**< Set element REF_CLK_SEL of register FLLCTRL_REG */
+__HWREG_INLINE__ eFLLCTRL_REG_REF_CLK_SEL getPmic_FLLCTRL_REG_REF_CLK_SEL(HWREG_U8 value); /**< Get element REF_CLK_SEL of register FLLCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLCTRL_REG_MULT_MINUS_ONE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element MULT_MINUS_ONE of register FLLCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLCTRL_REG_MULT_MINUS_ONE(HWREG_U8 value); /**< Get element MULT_MINUS_ONE of register FLLCTRL_REG */
+
+
+/** @brief FLLDACSH_REG register description at address offset 0x4fce
+  *
+  *  FLL DAC Start Value Register (MSB)
+  */
+typedef struct
+{
+    HWREG_U8 START_H :1; /**<  */
+    const HWREG_U8 :7; /**< Unused bitfield */
+} sFLLDACSH_REGStructure;
+
+
+/** @brief FLLDACSH_REG Bitfield widths
+*/
+#define lenFLLDACSH_REG_START_H 1
+
+typedef enum
+{
+    FLLDACSH_REG_LSB_START_H = 0
+} eFLLDACSH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 FLLDACSH_REG_Content;
+    sFLLDACSH_REGStructure FLLDACSH_REG_Structure;
+} uFLLDACSH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLDACSH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register FLLDACSH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDACSH_REG(HWREG_U8 value); /** Get complete register FLLDACSH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLDACSH_REG_START_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element START_H of register FLLDACSH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDACSH_REG_START_H(HWREG_U8 value); /**< Get element START_H of register FLLDACSH_REG */
+
+
+/** @brief FLLDACSL_REG register description at address offset 0x4fcf
+  *
+  *  FLL DAC Start Value Register (LSB)
+  */
+typedef struct
+{
+    HWREG_U8 START_L :8; /**<  */
+} sFLLDACSL_REGStructure;
+
+
+/** @brief FLLDACSL_REG Bitfield widths
+*/
+#define lenFLLDACSL_REG_START_L 8
+
+typedef enum
+{
+    FLLDACSL_REG_LSB_START_L = 0
+} eFLLDACSL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 FLLDACSL_REG_Content;
+    sFLLDACSL_REGStructure FLLDACSL_REG_Structure;
+} uFLLDACSL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLDACSL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register FLLDACSL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDACSL_REG(HWREG_U8 value); /** Get complete register FLLDACSL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLDACSL_REG_START_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element START_L of register FLLDACSL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDACSL_REG_START_L(HWREG_U8 value); /**< Get element START_L of register FLLDACSL_REG */
+
+
+/** @brief FLLDAC_STATUSH_REG register description at address offset 0x4fd0
+  *
+  *  DAC Status High Register
+  */
+typedef struct
+{
+    const HWREG_U8 DAC_H :1; /**<  */
+    const HWREG_U8 :7; /**< Unused bitfield */
+} sFLLDAC_STATUSH_REGStructure;
+
+
+/** @brief FLLDAC_STATUSH_REG Bitfield widths
+*/
+#define lenFLLDAC_STATUSH_REG_DAC_H 1
+
+typedef enum
+{
+    FLLDAC_STATUSH_REG_LSB_DAC_H = 0
+} eFLLDAC_STATUSH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 FLLDAC_STATUSH_REG_Content;
+    sFLLDAC_STATUSH_REGStructure FLLDAC_STATUSH_REG_Structure;
+} uFLLDAC_STATUSH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDAC_STATUSH_REG(HWREG_U8 value); /** Get complete register FLLDAC_STATUSH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDAC_STATUSH_REG_DAC_H(HWREG_U8 value); /**< Get element DAC_H of register FLLDAC_STATUSH_REG */
+
+
+/** @brief FLLDAC_STATUSL_REG register description at address offset 0x4fd1
+  *
+  *  DAC Status Low Register
+  */
+typedef struct
+{
+    const HWREG_U8 DAC_L :8; /**<  */
+} sFLLDAC_STATUSL_REGStructure;
+
+
+/** @brief FLLDAC_STATUSL_REG Bitfield widths
+*/
+#define lenFLLDAC_STATUSL_REG_DAC_L 8
+
+typedef enum
+{
+    FLLDAC_STATUSL_REG_LSB_DAC_L = 0
+} eFLLDAC_STATUSL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 FLLDAC_STATUSL_REG_Content;
+    sFLLDAC_STATUSL_REGStructure FLLDAC_STATUSL_REG_Structure;
+} uFLLDAC_STATUSL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDAC_STATUSL_REG(HWREG_U8 value); /** Get complete register FLLDAC_STATUSL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDAC_STATUSL_REG_DAC_L(HWREG_U8 value); /**< Get element DAC_L of register FLLDAC_STATUSL_REG */
+
+
+/** @brief FLLFRQDIV_REG register description at address offset 0x4fd2
+  *
+  *  DCDC Frequecy Divisior Register
+  */
+typedef struct
+{
+    HWREG_U8 FREQU_DIV_DCDC :8; /**<  */
+} sFLLFRQDIV_REGStructure;
+
+
+/** @brief FLLFRQDIV_REG Bitfield widths
+*/
+#define lenFLLFRQDIV_REG_FREQU_DIV_DCDC 8
+
+typedef enum
+{
+    FLLFRQDIV_REG_LSB_FREQU_DIV_DCDC = 0
+} eFLLFRQDIV_REGLsb;
+
+typedef union
+{
+    HWREG_U8 FLLFRQDIV_REG_Content;
+    sFLLFRQDIV_REGStructure FLLFRQDIV_REG_Structure;
+} uFLLFRQDIV_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLFRQDIV_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register FLLFRQDIV_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLFRQDIV_REG(HWREG_U8 value); /** Get complete register FLLFRQDIV_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLFRQDIV_REG_FREQU_DIV_DCDC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element FREQU_DIV_DCDC of register FLLFRQDIV_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLFRQDIV_REG_FREQU_DIV_DCDC(HWREG_U8 value); /**< Get element FREQU_DIV_DCDC of register FLLFRQDIV_REG */
+
+
+/** @brief CLK32CTRL_REG register description at address offset 0x4fd3
+  *
+  *  32kHz Oscillator Control Register
+  */
+typedef struct
+{
+    HWREG_U8 OSCBYP :1; /**<  */
+    HWREG_U8 OSCPD :1; /**<  */
+    HWREG_U8 SHAPERDIS :1; /**<  */
+    HWREG_U8 CLOAD_XTAL :3; /**<  */
+    HWREG_U8 EDGE_SEL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sCLK32CTRL_REGStructure;
+
+
+/** @brief CLK32CTRL_REG Bitfield widths
+*/
+#define lenCLK32CTRL_REG_OSCBYP 1
+#define lenCLK32CTRL_REG_OSCPD 1
+#define lenCLK32CTRL_REG_SHAPERDIS 1
+#define lenCLK32CTRL_REG_CLOAD_XTAL 3
+#define lenCLK32CTRL_REG_EDGE_SEL 1
+
+typedef enum
+{
+    CLK32CTRL_REG_LSB_OSCBYP = 0,
+    CLK32CTRL_REG_LSB_OSCPD = 1,
+    CLK32CTRL_REG_LSB_SHAPERDIS = 2,
+    CLK32CTRL_REG_LSB_CLOAD_XTAL = 3,
+    CLK32CTRL_REG_LSB_EDGE_SEL = 6
+} eCLK32CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CLK32CTRL_REG_Content;
+    sCLK32CTRL_REGStructure CLK32CTRL_REG_Structure;
+} uCLK32CTRL_REG;
+
+typedef enum
+{
+    CLK32CTRL_REG_OSCBYP_CRYSTAL = 0,
+    CLK32CTRL_REG_OSCBYP_BYPASS = 1
+} eCLK32CTRL_REG_OSCBYP;
+
+typedef enum
+{
+    CLK32CTRL_REG_EDGE_SEL_RSING = 0,
+    CLK32CTRL_REG_EDGE_SEL_FALLING = 1
+} eCLK32CTRL_REG_EDGE_SEL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CLK32CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLK32CTRL_REG(HWREG_U8 value); /** Get complete register CLK32CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG_OSCBYP(HWREG_U8 _reg, eCLK32CTRL_REG_OSCBYP value); /**< Set element OSCBYP of register CLK32CTRL_REG */
+__HWREG_INLINE__ eCLK32CTRL_REG_OSCBYP getPmic_CLK32CTRL_REG_OSCBYP(HWREG_U8 value); /**< Get element OSCBYP of register CLK32CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG_OSCPD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element OSCPD of register CLK32CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLK32CTRL_REG_OSCPD(HWREG_U8 value); /**< Get element OSCPD of register CLK32CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG_SHAPERDIS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SHAPERDIS of register CLK32CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLK32CTRL_REG_SHAPERDIS(HWREG_U8 value); /**< Get element SHAPERDIS of register CLK32CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG_CLOAD_XTAL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CLOAD_XTAL of register CLK32CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CLK32CTRL_REG_CLOAD_XTAL(HWREG_U8 value); /**< Get element CLOAD_XTAL of register CLK32CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG_EDGE_SEL(HWREG_U8 _reg, eCLK32CTRL_REG_EDGE_SEL value); /**< Set element EDGE_SEL of register CLK32CTRL_REG */
+__HWREG_INLINE__ eCLK32CTRL_REG_EDGE_SEL getPmic_CLK32CTRL_REG_EDGE_SEL(HWREG_U8 value); /**< Get element EDGE_SEL of register CLK32CTRL_REG */
+
+
+/** @brief GPLEDCTRL_REG register description at address offset 0x4fdf
+  *
+  *  General Purpose LED Control Register Definition
+  */
+typedef struct
+{
+    HWREG_U8 GPLEDON :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 GPLEDI :2; /**<  */
+    HWREG_U8 GPLEDF :2; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sGPLEDCTRL_REGStructure;
+
+
+/** @brief GPLEDCTRL_REG Bitfield widths
+*/
+#define lenGPLEDCTRL_REG_GPLEDON 1
+#define lenGPLEDCTRL_REG_GPLEDI 2
+#define lenGPLEDCTRL_REG_GPLEDF 2
+
+typedef enum
+{
+    GPLEDCTRL_REG_LSB_GPLEDON = 0,
+    GPLEDCTRL_REG_LSB_GPLEDI = 2,
+    GPLEDCTRL_REG_LSB_GPLEDF = 4
+} eGPLEDCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPLEDCTRL_REG_Content;
+    sGPLEDCTRL_REGStructure GPLEDCTRL_REG_Structure;
+} uGPLEDCTRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDCTRL_REG(HWREG_U8 value); /** Get complete register GPLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDCTRL_REG_GPLEDON(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPLEDON of register GPLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDCTRL_REG_GPLEDON(HWREG_U8 value); /**< Get element GPLEDON of register GPLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDCTRL_REG_GPLEDI(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPLEDI of register GPLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDCTRL_REG_GPLEDI(HWREG_U8 value); /**< Get element GPLEDI of register GPLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDCTRL_REG_GPLEDF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPLEDF of register GPLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDCTRL_REG_GPLEDF(HWREG_U8 value); /**< Get element GPLEDF of register GPLEDCTRL_REG */
+
+
+/** @brief GPLEDFSM_REG register description at address offset 0x4fe0
+  *
+  *  GPLED State Machine Breathing Settings
+  */
+typedef struct
+{
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 GPLEDFF :2; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sGPLEDFSM_REGStructure;
+
+
+/** @brief GPLEDFSM_REG Bitfield widths
+*/
+#define lenGPLEDFSM_REG_GPLEDFF 2
+
+typedef enum
+{
+    GPLEDFSM_REG_LSB_GPLEDFF = 1
+} eGPLEDFSM_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPLEDFSM_REG_Content;
+    sGPLEDFSM_REGStructure GPLEDFSM_REG_Structure;
+} uGPLEDFSM_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDFSM_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPLEDFSM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDFSM_REG(HWREG_U8 value); /** Get complete register GPLEDFSM_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDFSM_REG_GPLEDFF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPLEDFF of register GPLEDFSM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDFSM_REG_GPLEDFF(HWREG_U8 value); /**< Get element GPLEDFF of register GPLEDFSM_REG */
+
+
+/** @brief GPLEDPWM_REG register description at address offset 0x4fe1
+  *
+  *  GPLED PWM Register Definition
+  */
+typedef struct
+{
+    HWREG_U8 GPLEDDUTY :8; /**<  */
+} sGPLEDPWM_REGStructure;
+
+
+/** @brief GPLEDPWM_REG Bitfield widths
+*/
+#define lenGPLEDPWM_REG_GPLEDDUTY 8
+
+typedef enum
+{
+    GPLEDPWM_REG_LSB_GPLEDDUTY = 0
+} eGPLEDPWM_REGLsb;
+
+typedef union
+{
+    HWREG_U8 GPLEDPWM_REG_Content;
+    sGPLEDPWM_REGStructure GPLEDPWM_REG_Structure;
+} uGPLEDPWM_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDPWM_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register GPLEDPWM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDPWM_REG(HWREG_U8 value); /** Get complete register GPLEDPWM_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDPWM_REG_GPLEDDUTY(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPLEDDUTY of register GPLEDPWM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDPWM_REG_GPLEDDUTY(HWREG_U8 value); /**< Get element GPLEDDUTY of register GPLEDPWM_REG */
+
+
+/** @brief INTVREFCTRL_REG register description at address offset 0x4fe2
+  *
+  *  Internal VREF Control Register
+  */
+typedef struct
+{
+    HWREG_U8 MODEHPBG :2; /**<  */
+    HWREG_U8 FILTER_BYPASS :1; /**<  */
+    HWREG_U8 FAST_SETTLE :1; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sINTVREFCTRL_REGStructure;
+
+
+/** @brief INTVREFCTRL_REG Bitfield widths
+*/
+#define lenINTVREFCTRL_REG_MODEHPBG 2
+#define lenINTVREFCTRL_REG_FILTER_BYPASS 1
+#define lenINTVREFCTRL_REG_FAST_SETTLE 1
+
+typedef enum
+{
+    INTVREFCTRL_REG_LSB_MODEHPBG = 0,
+    INTVREFCTRL_REG_LSB_FILTER_BYPASS = 2,
+    INTVREFCTRL_REG_LSB_FAST_SETTLE = 3
+} eINTVREFCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 INTVREFCTRL_REG_Content;
+    sINTVREFCTRL_REGStructure INTVREFCTRL_REG_Structure;
+} uINTVREFCTRL_REG;
+
+typedef enum
+{
+    INTVREFCTRL_REG_MODEHPBG_AUTOMODE = 0,
+    INTVREFCTRL_REG_MODEHPBG_HPBGMODE = 1,
+    INTVREFCTRL_REG_MODEHPBG_LPBGMODE = 2
+} eINTVREFCTRL_REG_MODEHPBG;
+
+typedef enum
+{
+    INTVREFCTRL_REG_FILTER_BYPASS_BYPASS = 1,
+    INTVREFCTRL_REG_FILTER_BYPASS_NORMAL = 0
+} eINTVREFCTRL_REG_FILTER_BYPASS;
+
+typedef enum
+{
+    INTVREFCTRL_REG_FAST_SETTLE_FAST = 1,
+    INTVREFCTRL_REG_FAST_SETTLE_NORMAL = 0
+} eINTVREFCTRL_REG_FAST_SETTLE;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_INTVREFCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register INTVREFCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_INTVREFCTRL_REG(HWREG_U8 value); /** Get complete register INTVREFCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_INTVREFCTRL_REG_MODEHPBG(HWREG_U8 _reg, eINTVREFCTRL_REG_MODEHPBG value); /**< Set element MODEHPBG of register INTVREFCTRL_REG */
+__HWREG_INLINE__ eINTVREFCTRL_REG_MODEHPBG getPmic_INTVREFCTRL_REG_MODEHPBG(HWREG_U8 value); /**< Get element MODEHPBG of register INTVREFCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_INTVREFCTRL_REG_FILTER_BYPASS(HWREG_U8 _reg, eINTVREFCTRL_REG_FILTER_BYPASS value); /**< Set element FILTER_BYPASS of register INTVREFCTRL_REG */
+__HWREG_INLINE__ eINTVREFCTRL_REG_FILTER_BYPASS getPmic_INTVREFCTRL_REG_FILTER_BYPASS(HWREG_U8 value); /**< Get element FILTER_BYPASS of register INTVREFCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_INTVREFCTRL_REG_FAST_SETTLE(HWREG_U8 _reg, eINTVREFCTRL_REG_FAST_SETTLE value); /**< Set element FAST_SETTLE of register INTVREFCTRL_REG */
+__HWREG_INLINE__ eINTVREFCTRL_REG_FAST_SETTLE getPmic_INTVREFCTRL_REG_FAST_SETTLE(HWREG_U8 value); /**< Get element FAST_SETTLE of register INTVREFCTRL_REG */
+
+
+/** @brief IREFTRIM_REG register description at address offset 0x4fe3
+  *
+  *  Internal IREF Trimming Register
+  */
+typedef struct
+{
+    HWREG_U8 IREFTRIM :6; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sIREFTRIM_REGStructure;
+
+
+/** @brief IREFTRIM_REG Bitfield widths
+*/
+#define lenIREFTRIM_REG_IREFTRIM 6
+
+typedef enum
+{
+    IREFTRIM_REG_LSB_IREFTRIM = 0
+} eIREFTRIM_REGLsb;
+
+typedef union
+{
+    HWREG_U8 IREFTRIM_REG_Content;
+    sIREFTRIM_REGStructure IREFTRIM_REG_Structure;
+} uIREFTRIM_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_IREFTRIM_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register IREFTRIM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IREFTRIM_REG(HWREG_U8 value); /** Get complete register IREFTRIM_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_IREFTRIM_REG_IREFTRIM(HWREG_U8 _reg, HWREG_U8 value); /**< Set element IREFTRIM of register IREFTRIM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_IREFTRIM_REG_IREFTRIM(HWREG_U8 value); /**< Get element IREFTRIM of register IREFTRIM_REG */
+
+
+/** @brief VREFTRIM0_REG register description at address offset 0x4fe4
+  *
+  *  Internal VREF Trimming Register
+  */
+typedef struct
+{
+    HWREG_U8 HPBGTRIM :7; /**<  */
+    HWREG_U8 SPARE07 :1; /**<  */
+} sVREFTRIM0_REGStructure;
+
+
+/** @brief VREFTRIM0_REG Bitfield widths
+*/
+#define lenVREFTRIM0_REG_HPBGTRIM 7
+#define lenVREFTRIM0_REG_SPARE07 1
+
+typedef enum
+{
+    VREFTRIM0_REG_LSB_HPBGTRIM = 0,
+    VREFTRIM0_REG_LSB_SPARE07 = 7
+} eVREFTRIM0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VREFTRIM0_REG_Content;
+    sVREFTRIM0_REGStructure VREFTRIM0_REG_Structure;
+} uVREFTRIM0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VREFTRIM0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM0_REG(HWREG_U8 value); /** Get complete register VREFTRIM0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM0_REG_HPBGTRIM(HWREG_U8 _reg, HWREG_U8 value); /**< Set element HPBGTRIM of register VREFTRIM0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM0_REG_HPBGTRIM(HWREG_U8 value); /**< Get element HPBGTRIM of register VREFTRIM0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM0_REG_SPARE07(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SPARE07 of register VREFTRIM0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM0_REG_SPARE07(HWREG_U8 value); /**< Get element SPARE07 of register VREFTRIM0_REG */
+
+
+/** @brief VREFTRIM1_REG register description at address offset 0x4fe5
+  *
+  *  Internal VREF Trimming Register
+  */
+typedef struct
+{
+    HWREG_U8 LPBGTRIM :7; /**<  */
+    HWREG_U8 SPARE07 :1; /**<  */
+} sVREFTRIM1_REGStructure;
+
+
+/** @brief VREFTRIM1_REG Bitfield widths
+*/
+#define lenVREFTRIM1_REG_LPBGTRIM 7
+#define lenVREFTRIM1_REG_SPARE07 1
+
+typedef enum
+{
+    VREFTRIM1_REG_LSB_LPBGTRIM = 0,
+    VREFTRIM1_REG_LSB_SPARE07 = 7
+} eVREFTRIM1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VREFTRIM1_REG_Content;
+    sVREFTRIM1_REGStructure VREFTRIM1_REG_Structure;
+} uVREFTRIM1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VREFTRIM1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM1_REG(HWREG_U8 value); /** Get complete register VREFTRIM1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM1_REG_LPBGTRIM(HWREG_U8 _reg, HWREG_U8 value); /**< Set element LPBGTRIM of register VREFTRIM1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM1_REG_LPBGTRIM(HWREG_U8 value); /**< Get element LPBGTRIM of register VREFTRIM1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM1_REG_SPARE07(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SPARE07 of register VREFTRIM1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM1_REG_SPARE07(HWREG_U8 value); /**< Get element SPARE07 of register VREFTRIM1_REG */
+
+
+/** @brief CC_THRH_REG register description at address offset 0x4fe6
+  *
+  *  Coulomb Counter Delta Threshold Register (MSB)
+  */
+typedef struct
+{
+    HWREG_U8 CC_THRH :8; /**<  */
+} sCC_THRH_REGStructure;
+
+
+/** @brief CC_THRH_REG Bitfield widths
+*/
+#define lenCC_THRH_REG_CC_THRH 8
+
+typedef enum
+{
+    CC_THRH_REG_LSB_CC_THRH = 0
+} eCC_THRH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_THRH_REG_Content;
+    sCC_THRH_REGStructure CC_THRH_REG_Structure;
+} uCC_THRH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_THRH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CC_THRH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_THRH_REG(HWREG_U8 value); /** Get complete register CC_THRH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_THRH_REG_CC_THRH(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CC_THRH of register CC_THRH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_THRH_REG_CC_THRH(HWREG_U8 value); /**< Get element CC_THRH of register CC_THRH_REG */
+
+
+/** @brief CC_THRL_REG register description at address offset 0x4fe7
+  *
+  *  Coulomb Counter Delta Threshold Register (LSB)
+  */
+typedef struct
+{
+    HWREG_U8 CC_THRL :8; /**<  */
+} sCC_THRL_REGStructure;
+
+
+/** @brief CC_THRL_REG Bitfield widths
+*/
+#define lenCC_THRL_REG_CC_THRL 8
+
+typedef enum
+{
+    CC_THRL_REG_LSB_CC_THRL = 0
+} eCC_THRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_THRL_REG_Content;
+    sCC_THRL_REGStructure CC_THRL_REG_Structure;
+} uCC_THRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_THRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CC_THRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_THRL_REG(HWREG_U8 value); /** Get complete register CC_THRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_THRL_REG_CC_THRL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CC_THRL of register CC_THRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_THRL_REG_CC_THRL(HWREG_U8 value); /**< Get element CC_THRL of register CC_THRL_REG */
+
+
+/** @brief CC_CURR_SHRTH_REG register description at address offset 0x4fe8
+  *
+  *  Average Current Short (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 CC_CURR_SHRTH :5; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sCC_CURR_SHRTH_REGStructure;
+
+
+/** @brief CC_CURR_SHRTH_REG Bitfield widths
+*/
+#define lenCC_CURR_SHRTH_REG_CC_CURR_SHRTH 5
+
+typedef enum
+{
+    CC_CURR_SHRTH_REG_LSB_CC_CURR_SHRTH = 0
+} eCC_CURR_SHRTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_CURR_SHRTH_REG_Content;
+    sCC_CURR_SHRTH_REGStructure CC_CURR_SHRTH_REG_Structure;
+} uCC_CURR_SHRTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_SHRTH_REG(HWREG_U8 value); /** Get complete register CC_CURR_SHRTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_SHRTH_REG_CC_CURR_SHRTH(HWREG_U8 value); /**< Get element CC_CURR_SHRTH of register CC_CURR_SHRTH_REG */
+
+
+/** @brief CC_CURR_SHRTL_REG register description at address offset 0x4fe9
+  *
+  *  Average Current Short (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 CC_CURR_SHRTL :8; /**<  */
+} sCC_CURR_SHRTL_REGStructure;
+
+
+/** @brief CC_CURR_SHRTL_REG Bitfield widths
+*/
+#define lenCC_CURR_SHRTL_REG_CC_CURR_SHRTL 8
+
+typedef enum
+{
+    CC_CURR_SHRTL_REG_LSB_CC_CURR_SHRTL = 0
+} eCC_CURR_SHRTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_CURR_SHRTL_REG_Content;
+    sCC_CURR_SHRTL_REGStructure CC_CURR_SHRTL_REG_Structure;
+} uCC_CURR_SHRTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_SHRTL_REG(HWREG_U8 value); /** Get complete register CC_CURR_SHRTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_SHRTL_REG_CC_CURR_SHRTL(HWREG_U8 value); /**< Get element CC_CURR_SHRTL of register CC_CURR_SHRTL_REG */
+
+
+/** @brief CC_CURR_LNGH_REG register description at address offset 0x4fea
+  *
+  *  Average Current Long (MSB)
+  */
+typedef struct
+{
+    const HWREG_U8 CC_CURR_LNGH :5; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sCC_CURR_LNGH_REGStructure;
+
+
+/** @brief CC_CURR_LNGH_REG Bitfield widths
+*/
+#define lenCC_CURR_LNGH_REG_CC_CURR_LNGH 5
+
+typedef enum
+{
+    CC_CURR_LNGH_REG_LSB_CC_CURR_LNGH = 0
+} eCC_CURR_LNGH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_CURR_LNGH_REG_Content;
+    sCC_CURR_LNGH_REGStructure CC_CURR_LNGH_REG_Structure;
+} uCC_CURR_LNGH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_LNGH_REG(HWREG_U8 value); /** Get complete register CC_CURR_LNGH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_LNGH_REG_CC_CURR_LNGH(HWREG_U8 value); /**< Get element CC_CURR_LNGH of register CC_CURR_LNGH_REG */
+
+
+/** @brief CC_CURR_LNGL_REG register description at address offset 0x4feb
+  *
+  *  Average Current Short (LSB)
+  */
+typedef struct
+{
+    const HWREG_U8 CC_CURR_LNGL :8; /**<  */
+} sCC_CURR_LNGL_REGStructure;
+
+
+/** @brief CC_CURR_LNGL_REG Bitfield widths
+*/
+#define lenCC_CURR_LNGL_REG_CC_CURR_LNGL 8
+
+typedef enum
+{
+    CC_CURR_LNGL_REG_LSB_CC_CURR_LNGL = 0
+} eCC_CURR_LNGL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_CURR_LNGL_REG_Content;
+    sCC_CURR_LNGL_REGStructure CC_CURR_LNGL_REG_Structure;
+} uCC_CURR_LNGL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_LNGL_REG(HWREG_U8 value); /** Get complete register CC_CURR_LNGL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_LNGL_REG_CC_CURR_LNGL(HWREG_U8 value); /**< Get element CC_CURR_LNGL of register CC_CURR_LNGL_REG */
+
+
+/** @brief CC_CTRL0_REG register description at address offset 0x4fec
+  *
+  *  Coulomb Counter Control Register 0
+  */
+typedef struct
+{
+    HWREG_U8 CC_OFF :1; /**<  */
+    HWREG_U8 CC_CBT :1; /**<  */
+    HWREG_U8 CC_ACLR :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 CC_LOW_PRECISION :1; /**<  */
+    HWREG_U8 CC_CHOP_TST :1; /**<  */
+    HWREG_U8 CC_VREF_TST :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sCC_CTRL0_REGStructure;
+
+
+/** @brief CC_CTRL0_REG Bitfield widths
+*/
+#define lenCC_CTRL0_REG_CC_OFF 1
+#define lenCC_CTRL0_REG_CC_CBT 1
+#define lenCC_CTRL0_REG_CC_ACLR 1
+#define lenCC_CTRL0_REG_CC_LOW_PRECISION 1
+#define lenCC_CTRL0_REG_CC_CHOP_TST 1
+#define lenCC_CTRL0_REG_CC_VREF_TST 1
+
+typedef enum
+{
+    CC_CTRL0_REG_LSB_CC_OFF = 0,
+    CC_CTRL0_REG_LSB_CC_CBT = 1,
+    CC_CTRL0_REG_LSB_CC_ACLR = 2,
+    CC_CTRL0_REG_LSB_CC_LOW_PRECISION = 4,
+    CC_CTRL0_REG_LSB_CC_CHOP_TST = 5,
+    CC_CTRL0_REG_LSB_CC_VREF_TST = 6
+} eCC_CTRL0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_CTRL0_REG_Content;
+    sCC_CTRL0_REGStructure CC_CTRL0_REG_Structure;
+} uCC_CTRL0_REG;
+
+typedef enum
+{
+    CC_CTRL0_REG_CC_OFF_ON = 0,
+    CC_CTRL0_REG_CC_OFF_OFF = 1
+} eCC_CTRL0_REG_CC_OFF;
+
+typedef enum
+{
+    CC_CTRL0_REG_CC_CBT_S1 = 0,
+    CC_CTRL0_REG_CC_CBT_S05 = 1
+} eCC_CTRL0_REG_CC_CBT;
+
+typedef enum
+{
+    CC_CTRL0_REG_CC_LOW_PRECISION_HIGH = 0,
+    CC_CTRL0_REG_CC_LOW_PRECISION_LOW = 1
+} eCC_CTRL0_REG_CC_LOW_PRECISION;
+
+typedef enum
+{
+    CC_CTRL0_REG_CC_CHOP_TST_OFF = 0,
+    CC_CTRL0_REG_CC_CHOP_TST_ON = 1
+} eCC_CTRL0_REG_CC_CHOP_TST;
+
+typedef enum
+{
+    CC_CTRL0_REG_CC_VREF_TST_OFF = 0,
+    CC_CTRL0_REG_CC_VREF_TST_ON = 1
+} eCC_CTRL0_REG_CC_VREF_TST;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CC_CTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CTRL0_REG(HWREG_U8 value); /** Get complete register CC_CTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_OFF(HWREG_U8 _reg, eCC_CTRL0_REG_CC_OFF value); /**< Set element CC_OFF of register CC_CTRL0_REG */
+__HWREG_INLINE__ eCC_CTRL0_REG_CC_OFF getPmic_CC_CTRL0_REG_CC_OFF(HWREG_U8 value); /**< Get element CC_OFF of register CC_CTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_CBT(HWREG_U8 _reg, eCC_CTRL0_REG_CC_CBT value); /**< Set element CC_CBT of register CC_CTRL0_REG */
+__HWREG_INLINE__ eCC_CTRL0_REG_CC_CBT getPmic_CC_CTRL0_REG_CC_CBT(HWREG_U8 value); /**< Get element CC_CBT of register CC_CTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_ACLR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CC_ACLR of register CC_CTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_LOW_PRECISION(HWREG_U8 _reg, eCC_CTRL0_REG_CC_LOW_PRECISION value); /**< Set element CC_LOW_PRECISION of register CC_CTRL0_REG */
+__HWREG_INLINE__ eCC_CTRL0_REG_CC_LOW_PRECISION getPmic_CC_CTRL0_REG_CC_LOW_PRECISION(HWREG_U8 value); /**< Get element CC_LOW_PRECISION of register CC_CTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_CHOP_TST(HWREG_U8 _reg, eCC_CTRL0_REG_CC_CHOP_TST value); /**< Set element CC_CHOP_TST of register CC_CTRL0_REG */
+__HWREG_INLINE__ eCC_CTRL0_REG_CC_CHOP_TST getPmic_CC_CTRL0_REG_CC_CHOP_TST(HWREG_U8 value); /**< Get element CC_CHOP_TST of register CC_CTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_VREF_TST(HWREG_U8 _reg, eCC_CTRL0_REG_CC_VREF_TST value); /**< Set element CC_VREF_TST of register CC_CTRL0_REG */
+__HWREG_INLINE__ eCC_CTRL0_REG_CC_VREF_TST getPmic_CC_CTRL0_REG_CC_VREF_TST(HWREG_U8 value); /**< Get element CC_VREF_TST of register CC_CTRL0_REG */
+
+
+/** @brief CC_CTRL1_REG register description at address offset 0x4fed
+  *
+  *  Coulomb Counter Control Register 1
+  */
+typedef struct
+{
+    HWREG_U8 CC_CHO_EN :1; /**<  */
+    HWREG_U8 CC_CALI :1; /**<  */
+    HWREG_U8 CC_CHO_PRD :3; /**<  */
+    HWREG_U8 CC_NO_CHO_CFG :1; /**<  */
+    HWREG_U8 CC_CHO_SCM :1; /**<  */
+    HWREG_U8 CC_SPARE :1; /**<  */
+} sCC_CTRL1_REGStructure;
+
+
+/** @brief CC_CTRL1_REG Bitfield widths
+*/
+#define lenCC_CTRL1_REG_CC_CHO_EN 1
+#define lenCC_CTRL1_REG_CC_CALI 1
+#define lenCC_CTRL1_REG_CC_CHO_PRD 3
+#define lenCC_CTRL1_REG_CC_NO_CHO_CFG 1
+#define lenCC_CTRL1_REG_CC_CHO_SCM 1
+#define lenCC_CTRL1_REG_CC_SPARE 1
+
+typedef enum
+{
+    CC_CTRL1_REG_LSB_CC_CHO_EN = 0,
+    CC_CTRL1_REG_LSB_CC_CALI = 1,
+    CC_CTRL1_REG_LSB_CC_CHO_PRD = 2,
+    CC_CTRL1_REG_LSB_CC_NO_CHO_CFG = 5,
+    CC_CTRL1_REG_LSB_CC_CHO_SCM = 6,
+    CC_CTRL1_REG_LSB_CC_SPARE = 7
+} eCC_CTRL1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_CTRL1_REG_Content;
+    sCC_CTRL1_REGStructure CC_CTRL1_REG_Structure;
+} uCC_CTRL1_REG;
+
+typedef enum
+{
+    CC_CTRL1_REG_CC_CHO_EN_DIS = 0,
+    CC_CTRL1_REG_CC_CHO_EN_EN = 1
+} eCC_CTRL1_REG_CC_CHO_EN;
+
+typedef enum
+{
+    CC_CTRL1_REG_CC_CALI_DIS = 0,
+    CC_CTRL1_REG_CC_CALI_EN = 1
+} eCC_CTRL1_REG_CC_CALI;
+
+typedef enum
+{
+    CC_CTRL1_REG_CC_CHO_PRD_P64 = 0,
+    CC_CTRL1_REG_CC_CHO_PRD_P128 = 1,
+    CC_CTRL1_REG_CC_CHO_PRD_P256 = 2,
+    CC_CTRL1_REG_CC_CHO_PRD_P512 = 3,
+    CC_CTRL1_REG_CC_CHO_PRD_P1024 = 4
+} eCC_CTRL1_REG_CC_CHO_PRD;
+
+typedef enum
+{
+    CC_CTRL1_REG_CC_NO_CHO_CFG_TIE0 = 0,
+    CC_CTRL1_REG_CC_NO_CHO_CFG_TIE1 = 1
+} eCC_CTRL1_REG_CC_NO_CHO_CFG;
+
+typedef enum
+{
+    CC_CTRL1_REG_CC_CHO_SCM_SYMMETRIC = 0,
+    CC_CTRL1_REG_CC_CHO_SCM_ASYMMETRIC = 1
+} eCC_CTRL1_REG_CC_CHO_SCM;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CC_CTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CTRL1_REG(HWREG_U8 value); /** Get complete register CC_CTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_CHO_EN(HWREG_U8 _reg, eCC_CTRL1_REG_CC_CHO_EN value); /**< Set element CC_CHO_EN of register CC_CTRL1_REG */
+__HWREG_INLINE__ eCC_CTRL1_REG_CC_CHO_EN getPmic_CC_CTRL1_REG_CC_CHO_EN(HWREG_U8 value); /**< Get element CC_CHO_EN of register CC_CTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_CALI(HWREG_U8 _reg, eCC_CTRL1_REG_CC_CALI value); /**< Set element CC_CALI of register CC_CTRL1_REG */
+__HWREG_INLINE__ eCC_CTRL1_REG_CC_CALI getPmic_CC_CTRL1_REG_CC_CALI(HWREG_U8 value); /**< Get element CC_CALI of register CC_CTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_CHO_PRD(HWREG_U8 _reg, eCC_CTRL1_REG_CC_CHO_PRD value); /**< Set element CC_CHO_PRD of register CC_CTRL1_REG */
+__HWREG_INLINE__ eCC_CTRL1_REG_CC_CHO_PRD getPmic_CC_CTRL1_REG_CC_CHO_PRD(HWREG_U8 value); /**< Get element CC_CHO_PRD of register CC_CTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_NO_CHO_CFG(HWREG_U8 _reg, eCC_CTRL1_REG_CC_NO_CHO_CFG value); /**< Set element CC_NO_CHO_CFG of register CC_CTRL1_REG */
+__HWREG_INLINE__ eCC_CTRL1_REG_CC_NO_CHO_CFG getPmic_CC_CTRL1_REG_CC_NO_CHO_CFG(HWREG_U8 value); /**< Get element CC_NO_CHO_CFG of register CC_CTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_CHO_SCM(HWREG_U8 _reg, eCC_CTRL1_REG_CC_CHO_SCM value); /**< Set element CC_CHO_SCM of register CC_CTRL1_REG */
+__HWREG_INLINE__ eCC_CTRL1_REG_CC_CHO_SCM getPmic_CC_CTRL1_REG_CC_CHO_SCM(HWREG_U8 value); /**< Get element CC_CHO_SCM of register CC_CTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_SPARE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CC_SPARE of register CC_CTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CTRL1_REG_CC_SPARE(HWREG_U8 value); /**< Get element CC_SPARE of register CC_CTRL1_REG */
+
+
+/** @brief CC_DOWN_B3_REG register description at address offset 0x4fee
+  *
+  *  Coulomb Down Counter
+  */
+typedef struct
+{
+    const HWREG_U8 CC_DOWN_B3 :8; /**<  */
+} sCC_DOWN_B3_REGStructure;
+
+
+/** @brief CC_DOWN_B3_REG Bitfield widths
+*/
+#define lenCC_DOWN_B3_REG_CC_DOWN_B3 8
+
+typedef enum
+{
+    CC_DOWN_B3_REG_LSB_CC_DOWN_B3 = 0
+} eCC_DOWN_B3_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_DOWN_B3_REG_Content;
+    sCC_DOWN_B3_REGStructure CC_DOWN_B3_REG_Structure;
+} uCC_DOWN_B3_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B3_REG(HWREG_U8 value); /** Get complete register CC_DOWN_B3_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B3_REG_CC_DOWN_B3(HWREG_U8 value); /**< Get element CC_DOWN_B3 of register CC_DOWN_B3_REG */
+
+
+/** @brief CC_DOWN_B2_REG register description at address offset 0x4fef
+  *
+  *  Coulomb Down Counter
+  */
+typedef struct
+{
+    const HWREG_U8 CC_DOWN_B2 :8; /**<  */
+} sCC_DOWN_B2_REGStructure;
+
+
+/** @brief CC_DOWN_B2_REG Bitfield widths
+*/
+#define lenCC_DOWN_B2_REG_CC_DOWN_B2 8
+
+typedef enum
+{
+    CC_DOWN_B2_REG_LSB_CC_DOWN_B2 = 0
+} eCC_DOWN_B2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_DOWN_B2_REG_Content;
+    sCC_DOWN_B2_REGStructure CC_DOWN_B2_REG_Structure;
+} uCC_DOWN_B2_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B2_REG(HWREG_U8 value); /** Get complete register CC_DOWN_B2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B2_REG_CC_DOWN_B2(HWREG_U8 value); /**< Get element CC_DOWN_B2 of register CC_DOWN_B2_REG */
+
+
+/** @brief CC_DOWN_B1_REG register description at address offset 0x4ff0
+  *
+  *  Coulomb Down Counter
+  */
+typedef struct
+{
+    const HWREG_U8 CC_DOWN_B1 :8; /**<  */
+} sCC_DOWN_B1_REGStructure;
+
+
+/** @brief CC_DOWN_B1_REG Bitfield widths
+*/
+#define lenCC_DOWN_B1_REG_CC_DOWN_B1 8
+
+typedef enum
+{
+    CC_DOWN_B1_REG_LSB_CC_DOWN_B1 = 0
+} eCC_DOWN_B1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_DOWN_B1_REG_Content;
+    sCC_DOWN_B1_REGStructure CC_DOWN_B1_REG_Structure;
+} uCC_DOWN_B1_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B1_REG(HWREG_U8 value); /** Get complete register CC_DOWN_B1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B1_REG_CC_DOWN_B1(HWREG_U8 value); /**< Get element CC_DOWN_B1 of register CC_DOWN_B1_REG */
+
+
+/** @brief CC_DOWN_B0_REG register description at address offset 0x4ff1
+  *
+  *  Coulomb Down Counter
+  */
+typedef struct
+{
+    const HWREG_U8 CC_DOWN_B0 :8; /**<  */
+} sCC_DOWN_B0_REGStructure;
+
+
+/** @brief CC_DOWN_B0_REG Bitfield widths
+*/
+#define lenCC_DOWN_B0_REG_CC_DOWN_B0 8
+
+typedef enum
+{
+    CC_DOWN_B0_REG_LSB_CC_DOWN_B0 = 0
+} eCC_DOWN_B0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_DOWN_B0_REG_Content;
+    sCC_DOWN_B0_REGStructure CC_DOWN_B0_REG_Structure;
+} uCC_DOWN_B0_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B0_REG(HWREG_U8 value); /** Get complete register CC_DOWN_B0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B0_REG_CC_DOWN_B0(HWREG_U8 value); /**< Get element CC_DOWN_B0 of register CC_DOWN_B0_REG */
+
+
+/** @brief CC_UP_B3_REG register description at address offset 0x4ff2
+  *
+  *  Coulomb Up Counter
+  */
+typedef struct
+{
+    const HWREG_U8 CC_UP_B3 :8; /**<  */
+} sCC_UP_B3_REGStructure;
+
+
+/** @brief CC_UP_B3_REG Bitfield widths
+*/
+#define lenCC_UP_B3_REG_CC_UP_B3 8
+
+typedef enum
+{
+    CC_UP_B3_REG_LSB_CC_UP_B3 = 0
+} eCC_UP_B3_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_UP_B3_REG_Content;
+    sCC_UP_B3_REGStructure CC_UP_B3_REG_Structure;
+} uCC_UP_B3_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B3_REG(HWREG_U8 value); /** Get complete register CC_UP_B3_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B3_REG_CC_UP_B3(HWREG_U8 value); /**< Get element CC_UP_B3 of register CC_UP_B3_REG */
+
+
+/** @brief CC_UP_B2_REG register description at address offset 0x4ff3
+  *
+  *  Coulomb Up Counter
+  */
+typedef struct
+{
+    const HWREG_U8 CC_UP_B2 :8; /**<  */
+} sCC_UP_B2_REGStructure;
+
+
+/** @brief CC_UP_B2_REG Bitfield widths
+*/
+#define lenCC_UP_B2_REG_CC_UP_B2 8
+
+typedef enum
+{
+    CC_UP_B2_REG_LSB_CC_UP_B2 = 0
+} eCC_UP_B2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_UP_B2_REG_Content;
+    sCC_UP_B2_REGStructure CC_UP_B2_REG_Structure;
+} uCC_UP_B2_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B2_REG(HWREG_U8 value); /** Get complete register CC_UP_B2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B2_REG_CC_UP_B2(HWREG_U8 value); /**< Get element CC_UP_B2 of register CC_UP_B2_REG */
+
+
+/** @brief CC_UP_B1_REG register description at address offset 0x4ff4
+  *
+  *  Coulomb Up Counter
+  */
+typedef struct
+{
+    const HWREG_U8 CC_UP_B1 :8; /**<  */
+} sCC_UP_B1_REGStructure;
+
+
+/** @brief CC_UP_B1_REG Bitfield widths
+*/
+#define lenCC_UP_B1_REG_CC_UP_B1 8
+
+typedef enum
+{
+    CC_UP_B1_REG_LSB_CC_UP_B1 = 0
+} eCC_UP_B1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_UP_B1_REG_Content;
+    sCC_UP_B1_REGStructure CC_UP_B1_REG_Structure;
+} uCC_UP_B1_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B1_REG(HWREG_U8 value); /** Get complete register CC_UP_B1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B1_REG_CC_UP_B1(HWREG_U8 value); /**< Get element CC_UP_B1 of register CC_UP_B1_REG */
+
+
+/** @brief CC_UP_B0_REG register description at address offset 0x4ff5
+  *
+  *  Coulomb Up Counter
+  */
+typedef struct
+{
+    const HWREG_U8 CC_UP_B0 :8; /**<  */
+} sCC_UP_B0_REGStructure;
+
+
+/** @brief CC_UP_B0_REG Bitfield widths
+*/
+#define lenCC_UP_B0_REG_CC_UP_B0 8
+
+typedef enum
+{
+    CC_UP_B0_REG_LSB_CC_UP_B0 = 0
+} eCC_UP_B0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CC_UP_B0_REG_Content;
+    sCC_UP_B0_REGStructure CC_UP_B0_REG_Structure;
+} uCC_UP_B0_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B0_REG(HWREG_U8 value); /** Get complete register CC_UP_B0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B0_REG_CC_UP_B0(HWREG_U8 value); /**< Get element CC_UP_B0 of register CC_UP_B0_REG */
+
+
+/** @brief VBATMAXH_REG register description at address offset 0x4ff6
+  *
+  *  VBAT Maximum High Register
+  */
+typedef struct
+{
+    const HWREG_U8 VBATMAXH :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sVBATMAXH_REGStructure;
+
+
+/** @brief VBATMAXH_REG Bitfield widths
+*/
+#define lenVBATMAXH_REG_VBATMAXH 4
+
+typedef enum
+{
+    VBATMAXH_REG_LSB_VBATMAXH = 0
+} eVBATMAXH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VBATMAXH_REG_Content;
+    sVBATMAXH_REGStructure VBATMAXH_REG_Structure;
+} uVBATMAXH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMAXH_REG(HWREG_U8 value); /** Get complete register VBATMAXH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMAXH_REG_VBATMAXH(HWREG_U8 value); /**< Get element VBATMAXH of register VBATMAXH_REG */
+
+
+/** @brief VBATMAXL_REG register description at address offset 0x4ff7
+  *
+  *  VBAT Maximum Low Register
+  */
+typedef struct
+{
+    const HWREG_U8 VBATMAXL :8; /**<  */
+} sVBATMAXL_REGStructure;
+
+
+/** @brief VBATMAXL_REG Bitfield widths
+*/
+#define lenVBATMAXL_REG_VBATMAXL 8
+
+typedef enum
+{
+    VBATMAXL_REG_LSB_VBATMAXL = 0
+} eVBATMAXL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VBATMAXL_REG_Content;
+    sVBATMAXL_REGStructure VBATMAXL_REG_Structure;
+} uVBATMAXL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMAXL_REG(HWREG_U8 value); /** Get complete register VBATMAXL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMAXL_REG_VBATMAXL(HWREG_U8 value); /**< Get element VBATMAXL of register VBATMAXL_REG */
+
+
+/** @brief MAX_CURR_SHRTH_REG register description at address offset 0x4ff8
+  *
+  *  Short Average Current at VBATMAX
+  */
+typedef struct
+{
+    const HWREG_U8 MAX_CURR_SHRTH :5; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sMAX_CURR_SHRTH_REGStructure;
+
+
+/** @brief MAX_CURR_SHRTH_REG Bitfield widths
+*/
+#define lenMAX_CURR_SHRTH_REG_MAX_CURR_SHRTH 5
+
+typedef enum
+{
+    MAX_CURR_SHRTH_REG_LSB_MAX_CURR_SHRTH = 0
+} eMAX_CURR_SHRTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MAX_CURR_SHRTH_REG_Content;
+    sMAX_CURR_SHRTH_REGStructure MAX_CURR_SHRTH_REG_Structure;
+} uMAX_CURR_SHRTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_SHRTH_REG(HWREG_U8 value); /** Get complete register MAX_CURR_SHRTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_SHRTH_REG_MAX_CURR_SHRTH(HWREG_U8 value); /**< Get element MAX_CURR_SHRTH of register MAX_CURR_SHRTH_REG */
+
+
+/** @brief MAX_CURR_SHRTL_REG register description at address offset 0x4ff9
+  *
+  *  Short Average Current at VBATMAX
+  */
+typedef struct
+{
+    const HWREG_U8 MAX_CURR_SHRTL :8; /**<  */
+} sMAX_CURR_SHRTL_REGStructure;
+
+
+/** @brief MAX_CURR_SHRTL_REG Bitfield widths
+*/
+#define lenMAX_CURR_SHRTL_REG_MAX_CURR_SHRTL 8
+
+typedef enum
+{
+    MAX_CURR_SHRTL_REG_LSB_MAX_CURR_SHRTL = 0
+} eMAX_CURR_SHRTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MAX_CURR_SHRTL_REG_Content;
+    sMAX_CURR_SHRTL_REGStructure MAX_CURR_SHRTL_REG_Structure;
+} uMAX_CURR_SHRTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_SHRTL_REG(HWREG_U8 value); /** Get complete register MAX_CURR_SHRTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_SHRTL_REG_MAX_CURR_SHRTL(HWREG_U8 value); /**< Get element MAX_CURR_SHRTL of register MAX_CURR_SHRTL_REG */
+
+
+/** @brief MAX_CURR_LNGH_REG register description at address offset 0x4ffa
+  *
+  *  Long Average Current at VBATMAX
+  */
+typedef struct
+{
+    const HWREG_U8 MAX_CURR_LNGH :5; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sMAX_CURR_LNGH_REGStructure;
+
+
+/** @brief MAX_CURR_LNGH_REG Bitfield widths
+*/
+#define lenMAX_CURR_LNGH_REG_MAX_CURR_LNGH 5
+
+typedef enum
+{
+    MAX_CURR_LNGH_REG_LSB_MAX_CURR_LNGH = 0
+} eMAX_CURR_LNGH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MAX_CURR_LNGH_REG_Content;
+    sMAX_CURR_LNGH_REGStructure MAX_CURR_LNGH_REG_Structure;
+} uMAX_CURR_LNGH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_LNGH_REG(HWREG_U8 value); /** Get complete register MAX_CURR_LNGH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_LNGH_REG_MAX_CURR_LNGH(HWREG_U8 value); /**< Get element MAX_CURR_LNGH of register MAX_CURR_LNGH_REG */
+
+
+/** @brief MAX_CURR_LNGL_REG register description at address offset 0x4ffb
+  *
+  *  Long Average Current at VBATMAX
+  */
+typedef struct
+{
+    const HWREG_U8 MAX_CURR_LNGL :8; /**<  */
+} sMAX_CURR_LNGL_REGStructure;
+
+
+/** @brief MAX_CURR_LNGL_REG Bitfield widths
+*/
+#define lenMAX_CURR_LNGL_REG_MAX_CURR_LNGL 8
+
+typedef enum
+{
+    MAX_CURR_LNGL_REG_LSB_MAX_CURR_LNGL = 0
+} eMAX_CURR_LNGL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MAX_CURR_LNGL_REG_Content;
+    sMAX_CURR_LNGL_REGStructure MAX_CURR_LNGL_REG_Structure;
+} uMAX_CURR_LNGL_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_LNGL_REG(HWREG_U8 value); /** Get complete register MAX_CURR_LNGL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_LNGL_REG_MAX_CURR_LNGL(HWREG_U8 value); /**< Get element MAX_CURR_LNGL of register MAX_CURR_LNGL_REG */
+
+
+/** @brief PLTSEL_REG register description at address offset 0x4ffe
+  *
+  *  Platform Selection Status Register
+  */
+typedef struct
+{
+    const HWREG_U8 :8; /**< Unused bitfield */
+} sPLTSEL_REGStructure;
+
+
+/** @brief PLTSEL_REG Bitfield widths
+*/
+
+
+typedef union
+{
+    HWREG_U8 PLTSEL_REG_Content;
+    sPLTSEL_REGStructure PLTSEL_REG_Structure;
+} uPLTSEL_REG;
+
+
+
+/** @brief PROVERSION_REG register description at address offset 0x4fff
+  *
+  *  Provisioning Version Number Register
+  */
+typedef struct
+{
+    HWREG_U8 PROVERSION :8; /**<  */
+} sPROVERSION_REGStructure;
+
+
+/** @brief PROVERSION_REG Bitfield widths
+*/
+#define lenPROVERSION_REG_PROVERSION 8
+
+typedef enum
+{
+    PROVERSION_REG_LSB_PROVERSION = 0
+} ePROVERSION_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PROVERSION_REG_Content;
+    sPROVERSION_REGStructure PROVERSION_REG_Structure;
+} uPROVERSION_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PROVERSION_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PROVERSION_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PROVERSION_REG(HWREG_U8 value); /** Get complete register PROVERSION_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PROVERSION_REG_PROVERSION(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PROVERSION of register PROVERSION_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PROVERSION_REG_PROVERSION(HWREG_U8 value); /**< Get element PROVERSION of register PROVERSION_REG */
+
+
+/** @brief PMICWDTCNT_REG register description at address offset 0x5e00
+  *
+  *  PMIC Hardware Watchdog Timer Control Register
+  */
+typedef struct
+{
+    HWREG_U8 PMICWDTEN :1; /**<  */
+    HWREG_U8 PMICWDTRST :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sPMICWDTCNT_REGStructure;
+
+
+/** @brief PMICWDTCNT_REG Bitfield widths
+*/
+#define lenPMICWDTCNT_REG_PMICWDTEN 1
+#define lenPMICWDTCNT_REG_PMICWDTRST 1
+
+typedef enum
+{
+    PMICWDTCNT_REG_LSB_PMICWDTEN = 0,
+    PMICWDTCNT_REG_LSB_PMICWDTRST = 1
+} ePMICWDTCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PMICWDTCNT_REG_Content;
+    sPMICWDTCNT_REGStructure PMICWDTCNT_REG_Structure;
+} uPMICWDTCNT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICWDTCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PMICWDTCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICWDTCNT_REG(HWREG_U8 value); /** Get complete register PMICWDTCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICWDTCNT_REG_PMICWDTEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICWDTEN of register PMICWDTCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICWDTCNT_REG_PMICWDTEN(HWREG_U8 value); /**< Get element PMICWDTEN of register PMICWDTCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICWDTCNT_REG_PMICWDTRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICWDTRST of register PMICWDTCNT_REG */
+
+
+/** @brief PMICWDTTC_REG register description at address offset 0x5e01
+  *
+  *  PMIC Hardware Watchdog Timer Second Counter Register
+  */
+typedef struct
+{
+    HWREG_U8 PMICWDT_SECONDS :8; /**<  */
+} sPMICWDTTC_REGStructure;
+
+
+/** @brief PMICWDTTC_REG Bitfield widths
+*/
+#define lenPMICWDTTC_REG_PMICWDT_SECONDS 8
+
+typedef enum
+{
+    PMICWDTTC_REG_LSB_PMICWDT_SECONDS = 0
+} ePMICWDTTC_REGLsb;
+
+typedef union
+{
+    HWREG_U8 PMICWDTTC_REG_Content;
+    sPMICWDTTC_REGStructure PMICWDTTC_REG_Structure;
+} uPMICWDTTC_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICWDTTC_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register PMICWDTTC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICWDTTC_REG(HWREG_U8 value); /** Get complete register PMICWDTTC_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICWDTTC_REG_PMICWDT_SECONDS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element PMICWDT_SECONDS of register PMICWDTTC_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICWDTTC_REG_PMICWDT_SECONDS(HWREG_U8 value); /**< Get element PMICWDT_SECONDS of register PMICWDTTC_REG */
+
+
+/** @brief SCRITIRQ_REG register description at address offset 0x5e02
+  *
+  *  Critical Event Interrupt Status Register
+  */
+typedef struct
+{
+    const HWREG_U8 SOCP :1; /**<  */
+    const HWREG_U8 SOSCSTP :1; /**<  */
+    const HWREG_U8 SOSCBAD :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sSCRITIRQ_REGStructure;
+
+
+/** @brief SCRITIRQ_REG Bitfield widths
+*/
+#define lenSCRITIRQ_REG_SOCP 1
+#define lenSCRITIRQ_REG_SOSCSTP 1
+#define lenSCRITIRQ_REG_SOSCBAD 1
+
+typedef enum
+{
+    SCRITIRQ_REG_LSB_SOCP = 0,
+    SCRITIRQ_REG_LSB_SOSCSTP = 1,
+    SCRITIRQ_REG_LSB_SOSCBAD = 2
+} eSCRITIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SCRITIRQ_REG_Content;
+    sSCRITIRQ_REGStructure SCRITIRQ_REG_Structure;
+} uSCRITIRQ_REG;
+
+typedef enum
+{
+    SCRITIRQ_REG_SOSCSTP_NORMAL = 0,
+    SCRITIRQ_REG_SOSCSTP_FAIL = 1
+} eSCRITIRQ_REG_SOSCSTP;
+
+typedef enum
+{
+    SCRITIRQ_REG_SOSCBAD_NORMAL = 0,
+    SCRITIRQ_REG_SOSCBAD_FAIL = 1
+} eSCRITIRQ_REG_SOSCBAD;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCRITIRQ_REG(HWREG_U8 value); /** Get complete register SCRITIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SCRITIRQ_REG_SOCP(HWREG_U8 value); /**< Get element SOCP of register SCRITIRQ_REG */
+__HWREG_INLINE__ eSCRITIRQ_REG_SOSCSTP getPmic_SCRITIRQ_REG_SOSCSTP(HWREG_U8 value); /**< Get element SOSCSTP of register SCRITIRQ_REG */
+__HWREG_INLINE__ eSCRITIRQ_REG_SOSCBAD getPmic_SCRITIRQ_REG_SOSCBAD(HWREG_U8 value); /**< Get element SOSCBAD of register SCRITIRQ_REG */
+
+
+/** @brief USBIDCTRL_REG register description at address offset 0x5e05
+  *
+  *  USB Identification Control Register
+  */
+typedef struct
+{
+    HWREG_U8 USB_IDEN :1; /**<  */
+    HWREG_U8 ACA_DETEN :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sUSBIDCTRL_REGStructure;
+
+
+/** @brief USBIDCTRL_REG Bitfield widths
+*/
+#define lenUSBIDCTRL_REG_USB_IDEN 1
+#define lenUSBIDCTRL_REG_ACA_DETEN 1
+
+typedef enum
+{
+    USBIDCTRL_REG_LSB_USB_IDEN = 0,
+    USBIDCTRL_REG_LSB_ACA_DETEN = 1
+} eUSBIDCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 USBIDCTRL_REG_Content;
+    sUSBIDCTRL_REGStructure USBIDCTRL_REG_Structure;
+} uUSBIDCTRL_REG;
+
+typedef enum
+{
+    USBIDCTRL_REG_USB_IDEN_EN = 1,
+    USBIDCTRL_REG_USB_IDEN_DIS = 0
+} eUSBIDCTRL_REG_USB_IDEN;
+
+typedef enum
+{
+    USBIDCTRL_REG_ACA_DETEN_EN = 1,
+    USBIDCTRL_REG_ACA_DETEN_DIS = 0
+} eUSBIDCTRL_REG_ACA_DETEN;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register USBIDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDCTRL_REG(HWREG_U8 value); /** Get complete register USBIDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDCTRL_REG_USB_IDEN(HWREG_U8 _reg, eUSBIDCTRL_REG_USB_IDEN value); /**< Set element USB_IDEN of register USBIDCTRL_REG */
+__HWREG_INLINE__ eUSBIDCTRL_REG_USB_IDEN getPmic_USBIDCTRL_REG_USB_IDEN(HWREG_U8 value); /**< Get element USB_IDEN of register USBIDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDCTRL_REG_ACA_DETEN(HWREG_U8 _reg, eUSBIDCTRL_REG_ACA_DETEN value); /**< Set element ACA_DETEN of register USBIDCTRL_REG */
+__HWREG_INLINE__ eUSBIDCTRL_REG_ACA_DETEN getPmic_USBIDCTRL_REG_ACA_DETEN(HWREG_U8 value); /**< Get element ACA_DETEN of register USBIDCTRL_REG */
+
+
+/** @brief USBIDDETTYPE_REG register description at address offset 0x5e07
+  *
+  *  USBID detection type Register
+  */
+typedef struct
+{
+    HWREG_U8 USBIDDETTYPE :1; /**<  */
+    HWREG_U8 USBIDCONTI :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sUSBIDDETTYPE_REGStructure;
+
+
+/** @brief USBIDDETTYPE_REG Bitfield widths
+*/
+#define lenUSBIDDETTYPE_REG_USBIDDETTYPE 1
+#define lenUSBIDDETTYPE_REG_USBIDCONTI 1
+
+typedef enum
+{
+    USBIDDETTYPE_REG_LSB_USBIDDETTYPE = 0,
+    USBIDDETTYPE_REG_LSB_USBIDCONTI = 1
+} eUSBIDDETTYPE_REGLsb;
+
+typedef union
+{
+    HWREG_U8 USBIDDETTYPE_REG_Content;
+    sUSBIDDETTYPE_REGStructure USBIDDETTYPE_REG_Structure;
+} uUSBIDDETTYPE_REG;
+
+typedef enum
+{
+    USBIDDETTYPE_REG_USBIDDETTYPE_LEVEL = 0,
+    USBIDDETTYPE_REG_USBIDDETTYPE_EDGE = 1
+} eUSBIDDETTYPE_REG_USBIDDETTYPE;
+
+typedef enum
+{
+    USBIDDETTYPE_REG_USBIDCONTI_PULSED = 0,
+    USBIDDETTYPE_REG_USBIDCONTI_CONTINUOUS = 1
+} eUSBIDDETTYPE_REG_USBIDCONTI;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDDETTYPE_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register USBIDDETTYPE_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDDETTYPE_REG(HWREG_U8 value); /** Get complete register USBIDDETTYPE_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDDETTYPE_REG_USBIDDETTYPE(HWREG_U8 _reg, eUSBIDDETTYPE_REG_USBIDDETTYPE value); /**< Set element USBIDDETTYPE of register USBIDDETTYPE_REG */
+__HWREG_INLINE__ eUSBIDDETTYPE_REG_USBIDDETTYPE getPmic_USBIDDETTYPE_REG_USBIDDETTYPE(HWREG_U8 value); /**< Get element USBIDDETTYPE of register USBIDDETTYPE_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDDETTYPE_REG_USBIDCONTI(HWREG_U8 _reg, eUSBIDDETTYPE_REG_USBIDCONTI value); /**< Set element USBIDCONTI of register USBIDDETTYPE_REG */
+__HWREG_INLINE__ eUSBIDDETTYPE_REG_USBIDCONTI getPmic_USBIDDETTYPE_REG_USBIDCONTI(HWREG_U8 value); /**< Get element USBIDCONTI of register USBIDDETTYPE_REG */
+
+
+/** @brief USBPHYCTRL_REG register description at address offset 0x5e08
+  *
+  *  USB PHY Control Register
+  */
+typedef struct
+{
+    HWREG_U8 USBPHYRSTB :1; /**<  */
+    HWREG_U8 CHGDET_N_POL :1; /**<  */
+    HWREG_U8 CTYP_START :1; /**<  */
+    HWREG_U8 CTYP_DIS :1; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sUSBPHYCTRL_REGStructure;
+
+
+/** @brief USBPHYCTRL_REG Bitfield widths
+*/
+#define lenUSBPHYCTRL_REG_USBPHYRSTB 1
+#define lenUSBPHYCTRL_REG_CHGDET_N_POL 1
+#define lenUSBPHYCTRL_REG_CTYP_START 1
+#define lenUSBPHYCTRL_REG_CTYP_DIS 1
+
+typedef enum
+{
+    USBPHYCTRL_REG_LSB_USBPHYRSTB = 0,
+    USBPHYCTRL_REG_LSB_CHGDET_N_POL = 1,
+    USBPHYCTRL_REG_LSB_CTYP_START = 2,
+    USBPHYCTRL_REG_LSB_CTYP_DIS = 3
+} eUSBPHYCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 USBPHYCTRL_REG_Content;
+    sUSBPHYCTRL_REGStructure USBPHYCTRL_REG_Structure;
+} uUSBPHYCTRL_REG;
+
+typedef enum
+{
+    USBPHYCTRL_REG_USBPHYRSTB_INRESET = 0,
+    USBPHYCTRL_REG_USBPHYRSTB_OUTOFRESET = 1
+} eUSBPHYCTRL_REG_USBPHYRSTB;
+
+typedef enum
+{
+    USBPHYCTRL_REG_CHGDET_N_POL_ACTLOW = 0,
+    USBPHYCTRL_REG_CHGDET_N_POL_ACTHIGH = 1
+} eUSBPHYCTRL_REG_CHGDET_N_POL;
+
+typedef enum
+{
+    USBPHYCTRL_REG_CTYP_DIS_EN = 0,
+    USBPHYCTRL_REG_CTYP_DIS_DIS = 1
+} eUSBPHYCTRL_REG_CTYP_DIS;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBPHYCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register USBPHYCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBPHYCTRL_REG(HWREG_U8 value); /** Get complete register USBPHYCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBPHYCTRL_REG_USBPHYRSTB(HWREG_U8 _reg, eUSBPHYCTRL_REG_USBPHYRSTB value); /**< Set element USBPHYRSTB of register USBPHYCTRL_REG */
+__HWREG_INLINE__ eUSBPHYCTRL_REG_USBPHYRSTB getPmic_USBPHYCTRL_REG_USBPHYRSTB(HWREG_U8 value); /**< Get element USBPHYRSTB of register USBPHYCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBPHYCTRL_REG_CHGDET_N_POL(HWREG_U8 _reg, eUSBPHYCTRL_REG_CHGDET_N_POL value); /**< Set element CHGDET_N_POL of register USBPHYCTRL_REG */
+__HWREG_INLINE__ eUSBPHYCTRL_REG_CHGDET_N_POL getPmic_USBPHYCTRL_REG_CHGDET_N_POL(HWREG_U8 value); /**< Get element CHGDET_N_POL of register USBPHYCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBPHYCTRL_REG_CTYP_START(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CTYP_START of register USBPHYCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBPHYCTRL_REG_CTYP_DIS(HWREG_U8 _reg, eUSBPHYCTRL_REG_CTYP_DIS value); /**< Set element CTYP_DIS of register USBPHYCTRL_REG */
+__HWREG_INLINE__ eUSBPHYCTRL_REG_CTYP_DIS getPmic_USBPHYCTRL_REG_CTYP_DIS(HWREG_U8 value); /**< Get element CTYP_DIS of register USBPHYCTRL_REG */
+
+
+/** @brief USBRSTGPO_REG register description at address offset 0x5e09
+  *
+  *  USBRST# Pin Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sUSBRSTGPO_REGStructure;
+
+
+/** @brief USBRSTGPO_REG Bitfield widths
+*/
+#define lenUSBRSTGPO_REG_DOUT 1
+#define lenUSBRSTGPO_REG_RVAL 1
+#define lenUSBRSTGPO_REG_REN 1
+#define lenUSBRSTGPO_REG_DRV 1
+#define lenUSBRSTGPO_REG_DIR 1
+#define lenUSBRSTGPO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    USBRSTGPO_REG_LSB_DOUT = 0,
+    USBRSTGPO_REG_LSB_RVAL = 1,
+    USBRSTGPO_REG_LSB_REN = 3,
+    USBRSTGPO_REG_LSB_DRV = 4,
+    USBRSTGPO_REG_LSB_DIR = 5,
+    USBRSTGPO_REG_LSB_ALTFUNCEN = 6
+} eUSBRSTGPO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 USBRSTGPO_REG_Content;
+    sUSBRSTGPO_REGStructure USBRSTGPO_REG_Structure;
+} uUSBRSTGPO_REG;
+
+typedef enum
+{
+    USBRSTGPO_REG_RVAL_DOWN = 0,
+    USBRSTGPO_REG_RVAL_UP = 1
+} eUSBRSTGPO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG(HWREG_U8 value); /** Get complete register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_RVAL(HWREG_U8 _reg, eUSBRSTGPO_REG_RVAL value); /**< Set element RVAL of register USBRSTGPO_REG */
+__HWREG_INLINE__ eUSBRSTGPO_REG_RVAL getPmic_USBRSTGPO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG_REN(HWREG_U8 value); /**< Get element REN of register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register USBRSTGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register USBRSTGPO_REG */
+
+
+/** @brief USBRSTGPI_REG register description at address offset 0x5e0a
+  *
+  *  USBRST# Pin Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sUSBRSTGPI_REGStructure;
+
+
+/** @brief USBRSTGPI_REG Bitfield widths
+*/
+#define lenUSBRSTGPI_REG_DIN 1
+#define lenUSBRSTGPI_REG_GPIDBNC 1
+#define lenUSBRSTGPI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    USBRSTGPI_REG_LSB_DIN = 0,
+    USBRSTGPI_REG_LSB_GPIDBNC = 3,
+    USBRSTGPI_REG_LSB_GPIGLBYP = 4
+} eUSBRSTGPI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 USBRSTGPI_REG_Content;
+    sUSBRSTGPI_REGStructure USBRSTGPI_REG_Structure;
+} uUSBRSTGPI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register USBRSTGPI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPI_REG(HWREG_U8 value); /** Get complete register USBRSTGPI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register USBRSTGPI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register USBRSTGPI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register USBRSTGPI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register USBRSTGPI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register USBRSTGPI_REG */
+
+
+/** @brief VSYSCTRL_REG register description at address offset 0x5e0c
+  *
+  *  VSYS Threshold Register
+  */
+typedef struct
+{
+    HWREG_U8 VSYSGOOD :4; /**<  */
+    HWREG_U8 VSYSOFF :3; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sVSYSCTRL_REGStructure;
+
+
+/** @brief VSYSCTRL_REG Bitfield widths
+*/
+#define lenVSYSCTRL_REG_VSYSGOOD 4
+#define lenVSYSCTRL_REG_VSYSOFF 3
+
+typedef enum
+{
+    VSYSCTRL_REG_LSB_VSYSGOOD = 0,
+    VSYSCTRL_REG_LSB_VSYSOFF = 4
+} eVSYSCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VSYSCTRL_REG_Content;
+    sVSYSCTRL_REGStructure VSYSCTRL_REG_Structure;
+} uVSYSCTRL_REG;
+
+typedef enum
+{
+    VSYSCTRL_REG_VSYSOFF_OFF = 0,
+    VSYSCTRL_REG_VSYSOFF_U2V5 = 1,
+    VSYSCTRL_REG_VSYSOFF_U2V6 = 2,
+    VSYSCTRL_REG_VSYSOFF_U2V7 = 3,
+    VSYSCTRL_REG_VSYSOFF_U2V8 = 4,
+    VSYSCTRL_REG_VSYSOFF_U2V9 = 5,
+    VSYSCTRL_REG_VSYSOFF_U3V0 = 6,
+    VSYSCTRL_REG_VSYSOFF_U3V1 = 7
+} eVSYSCTRL_REG_VSYSOFF;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSYSCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VSYSCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSYSCTRL_REG(HWREG_U8 value); /** Get complete register VSYSCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSYSCTRL_REG_VSYSGOOD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VSYSGOOD of register VSYSCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VSYSCTRL_REG_VSYSGOOD(HWREG_U8 value); /**< Get element VSYSGOOD of register VSYSCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VSYSCTRL_REG_VSYSOFF(HWREG_U8 _reg, eVSYSCTRL_REG_VSYSOFF value); /**< Set element VSYSOFF of register VSYSCTRL_REG */
+__HWREG_INLINE__ eVSYSCTRL_REG_VSYSOFF getPmic_VSYSCTRL_REG_VSYSOFF(HWREG_U8 value); /**< Get element VSYSOFF of register VSYSCTRL_REG */
+
+
+/** @brief VOTPCTRL_REG register description at address offset 0x5e0d
+  *
+  *  VOTP Threshold Register
+  */
+typedef struct
+{
+    HWREG_U8 VOTPGOOD :4; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sVOTPCTRL_REGStructure;
+
+
+/** @brief VOTPCTRL_REG Bitfield widths
+*/
+#define lenVOTPCTRL_REG_VOTPGOOD 4
+
+typedef enum
+{
+    VOTPCTRL_REG_LSB_VOTPGOOD = 0
+} eVOTPCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VOTPCTRL_REG_Content;
+    sVOTPCTRL_REGStructure VOTPCTRL_REG_Structure;
+} uVOTPCTRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VOTPCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VOTPCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VOTPCTRL_REG(HWREG_U8 value); /** Get complete register VOTPCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VOTPCTRL_REG_VOTPGOOD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VOTPGOOD of register VOTPCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VOTPCTRL_REG_VOTPGOOD(HWREG_U8 value); /**< Get element VOTPGOOD of register VOTPCTRL_REG */
+
+
+/** @brief VXOCNT_REG register description at address offset 0x5e0e
+  *
+  *  Crystal LDO Control Register
+  */
+typedef struct
+{
+    HWREG_U8 VXOEN :1; /**<  */
+    const HWREG_U8 :7; /**< Unused bitfield */
+} sVXOCNT_REGStructure;
+
+
+/** @brief VXOCNT_REG Bitfield widths
+*/
+#define lenVXOCNT_REG_VXOEN 1
+
+typedef enum
+{
+    VXOCNT_REG_LSB_VXOEN = 0
+} eVXOCNT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VXOCNT_REG_Content;
+    sVXOCNT_REGStructure VXOCNT_REG_Structure;
+} uVXOCNT_REG;
+
+typedef enum
+{
+    VXOCNT_REG_VXOEN_DIS = 0,
+    VXOCNT_REG_VXOEN_EN = 1
+} eVXOCNT_REG_VXOEN;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VXOCNT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VXOCNT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VXOCNT_REG(HWREG_U8 value); /** Get complete register VXOCNT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VXOCNT_REG_VXOEN(HWREG_U8 _reg, eVXOCNT_REG_VXOEN value); /**< Set element VXOEN of register VXOCNT_REG */
+__HWREG_INLINE__ eVXOCNT_REG_VXOEN getPmic_VXOCNT_REG_VXOEN(HWREG_U8 value); /**< Get element VXOEN of register VXOCNT_REG */
+
+
+/** @brief DEV3_STATUS_1_REG register description at address offset 0x5e10
+  *
+  *  sVID STATUS1 Register
+  */
+typedef struct
+{
+    const HWREG_U8 DEV3_RESERVED :3; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+    const HWREG_U8 DEV3_READ_STATUS2 :1; /**<  */
+} sDEV3_STATUS_1_REGStructure;
+
+
+/** @brief DEV3_STATUS_1_REG Bitfield widths
+*/
+#define lenDEV3_STATUS_1_REG_DEV3_RESERVED 3
+#define lenDEV3_STATUS_1_REG_DEV3_READ_STATUS2 1
+
+typedef enum
+{
+    DEV3_STATUS_1_REG_LSB_DEV3_RESERVED = 0,
+    DEV3_STATUS_1_REG_LSB_DEV3_READ_STATUS2 = 7
+} eDEV3_STATUS_1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV3_STATUS_1_REG_Content;
+    sDEV3_STATUS_1_REGStructure DEV3_STATUS_1_REG_Structure;
+} uDEV3_STATUS_1_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_1_REG(HWREG_U8 value); /** Get complete register DEV3_STATUS_1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_1_REG_DEV3_RESERVED(HWREG_U8 value); /**< Get element DEV3_RESERVED of register DEV3_STATUS_1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_1_REG_DEV3_READ_STATUS2(HWREG_U8 value); /**< Get element DEV3_READ_STATUS2 of register DEV3_STATUS_1_REG */
+
+
+/** @brief DEV3_STATUS_2_REG register description at address offset 0x5e11
+  *
+  *  sVID STATUS2 Register
+  */
+typedef struct
+{
+    const HWREG_U8 DEV3_PARITY_ERROR :1; /**<  */
+    const HWREG_U8 DEV3_DATA_FRAME_ERROR :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sDEV3_STATUS_2_REGStructure;
+
+
+/** @brief DEV3_STATUS_2_REG Bitfield widths
+*/
+#define lenDEV3_STATUS_2_REG_DEV3_PARITY_ERROR 1
+#define lenDEV3_STATUS_2_REG_DEV3_DATA_FRAME_ERROR 1
+
+typedef enum
+{
+    DEV3_STATUS_2_REG_LSB_DEV3_PARITY_ERROR = 0,
+    DEV3_STATUS_2_REG_LSB_DEV3_DATA_FRAME_ERROR = 1
+} eDEV3_STATUS_2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV3_STATUS_2_REG_Content;
+    sDEV3_STATUS_2_REGStructure DEV3_STATUS_2_REG_Structure;
+} uDEV3_STATUS_2_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_2_REG(HWREG_U8 value); /** Get complete register DEV3_STATUS_2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_2_REG_DEV3_PARITY_ERROR(HWREG_U8 value); /**< Get element DEV3_PARITY_ERROR of register DEV3_STATUS_2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_2_REG_DEV3_DATA_FRAME_ERROR(HWREG_U8 value); /**< Get element DEV3_DATA_FRAME_ERROR of register DEV3_STATUS_2_REG */
+
+
+/** @brief CHGDETGPO_REG register description at address offset 0x5e12
+  *
+  *  CHGDET# Pin Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 DOUT :1; /**<  */
+    HWREG_U8 RVAL :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 REN :1; /**<  */
+    HWREG_U8 DRV :1; /**<  */
+    HWREG_U8 DIR :1; /**<  */
+    HWREG_U8 ALTFUNCEN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sCHGDETGPO_REGStructure;
+
+
+/** @brief CHGDETGPO_REG Bitfield widths
+*/
+#define lenCHGDETGPO_REG_DOUT 1
+#define lenCHGDETGPO_REG_RVAL 1
+#define lenCHGDETGPO_REG_REN 1
+#define lenCHGDETGPO_REG_DRV 1
+#define lenCHGDETGPO_REG_DIR 1
+#define lenCHGDETGPO_REG_ALTFUNCEN 1
+
+typedef enum
+{
+    CHGDETGPO_REG_LSB_DOUT = 0,
+    CHGDETGPO_REG_LSB_RVAL = 1,
+    CHGDETGPO_REG_LSB_REN = 3,
+    CHGDETGPO_REG_LSB_DRV = 4,
+    CHGDETGPO_REG_LSB_DIR = 5,
+    CHGDETGPO_REG_LSB_ALTFUNCEN = 6
+} eCHGDETGPO_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHGDETGPO_REG_Content;
+    sCHGDETGPO_REGStructure CHGDETGPO_REG_Structure;
+} uCHGDETGPO_REG;
+
+typedef enum
+{
+    CHGDETGPO_REG_RVAL_DOWN = 0,
+    CHGDETGPO_REG_RVAL_UP = 1
+} eCHGDETGPO_REG_RVAL;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG(HWREG_U8 value); /** Get complete register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DOUT of register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG_DOUT(HWREG_U8 value); /**< Get element DOUT of register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_RVAL(HWREG_U8 _reg, eCHGDETGPO_REG_RVAL value); /**< Set element RVAL of register CHGDETGPO_REG */
+__HWREG_INLINE__ eCHGDETGPO_REG_RVAL getPmic_CHGDETGPO_REG_RVAL(HWREG_U8 value); /**< Get element RVAL of register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_REN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element REN of register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG_REN(HWREG_U8 value); /**< Get element REN of register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DRV of register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG_DRV(HWREG_U8 value); /**< Get element DRV of register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DIR of register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG_DIR(HWREG_U8 value); /**< Get element DIR of register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element ALTFUNCEN of register CHGDETGPO_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG_ALTFUNCEN(HWREG_U8 value); /**< Get element ALTFUNCEN of register CHGDETGPO_REG */
+
+
+/** @brief CHGDETGPI_REG register description at address offset 0x5e13
+  *
+  *  CHGDET# Pin Input Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 DIN :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+    HWREG_U8 GPIDBNC :1; /**<  */
+    HWREG_U8 GPIGLBYP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sCHGDETGPI_REGStructure;
+
+
+/** @brief CHGDETGPI_REG Bitfield widths
+*/
+#define lenCHGDETGPI_REG_DIN 1
+#define lenCHGDETGPI_REG_GPIDBNC 1
+#define lenCHGDETGPI_REG_GPIGLBYP 1
+
+typedef enum
+{
+    CHGDETGPI_REG_LSB_DIN = 0,
+    CHGDETGPI_REG_LSB_GPIDBNC = 3,
+    CHGDETGPI_REG_LSB_GPIGLBYP = 4
+} eCHGDETGPI_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHGDETGPI_REG_Content;
+    sCHGDETGPI_REGStructure CHGDETGPI_REG_Structure;
+} uCHGDETGPI_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPI_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHGDETGPI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPI_REG(HWREG_U8 value); /** Get complete register CHGDETGPI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPI_REG_DIN(HWREG_U8 value); /**< Get element DIN of register CHGDETGPI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIDBNC of register CHGDETGPI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPI_REG_GPIDBNC(HWREG_U8 value); /**< Get element GPIDBNC of register CHGDETGPI_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element GPIGLBYP of register CHGDETGPI_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPI_REG_GPIGLBYP(HWREG_U8 value); /**< Get element GPIGLBYP of register CHGDETGPI_REG */
+
+
+/** @brief DBPTIMEOUT_REG register description at address offset 0x5e14
+  *
+  *  DBP Timeout
+  */
+typedef struct
+{
+    HWREG_U8 DBPTIMEOUTVAL :8; /**<  */
+} sDBPTIMEOUT_REGStructure;
+
+
+/** @brief DBPTIMEOUT_REG Bitfield widths
+*/
+#define lenDBPTIMEOUT_REG_DBPTIMEOUTVAL 8
+
+typedef enum
+{
+    DBPTIMEOUT_REG_LSB_DBPTIMEOUTVAL = 0
+} eDBPTIMEOUT_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DBPTIMEOUT_REG_Content;
+    sDBPTIMEOUT_REGStructure DBPTIMEOUT_REG_Structure;
+} uDBPTIMEOUT_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DBPTIMEOUT_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register DBPTIMEOUT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DBPTIMEOUT_REG(HWREG_U8 value); /** Get complete register DBPTIMEOUT_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_DBPTIMEOUT_REG_DBPTIMEOUTVAL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DBPTIMEOUTVAL of register DBPTIMEOUT_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DBPTIMEOUT_REG_DBPTIMEOUTVAL(HWREG_U8 value); /**< Get element DBPTIMEOUTVAL of register DBPTIMEOUT_REG */
+
+
+/** @brief DBPTIMER_REG register description at address offset 0x5e15
+  *
+  *  DBP Timer
+  */
+typedef struct
+{
+    const HWREG_U8 TIMST :8; /**<  */
+} sDBPTIMER_REGStructure;
+
+
+/** @brief DBPTIMER_REG Bitfield widths
+*/
+#define lenDBPTIMER_REG_TIMST 8
+
+typedef enum
+{
+    DBPTIMER_REG_LSB_TIMST = 0
+} eDBPTIMER_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DBPTIMER_REG_Content;
+    sDBPTIMER_REGStructure DBPTIMER_REG_Structure;
+} uDBPTIMER_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DBPTIMER_REG(HWREG_U8 value); /** Get complete register DBPTIMER_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DBPTIMER_REG_TIMST(HWREG_U8 value); /**< Get element TIMST of register DBPTIMER_REG */
+
+
+/** @brief CHGRCTRL0_REG register description at address offset 0x5e16
+  *
+  *  Charger Control Register 0
+  */
+typedef struct
+{
+    HWREG_U8 CHGRRESET :1; /**<  */
+    HWREG_U8 EMRGCHREN :1; /**<  */
+    HWREG_U8 EXTCHRDIS :1; /**<  */
+    HWREG_U8 SWCONTROL :1; /**<  */
+    HWREG_U8 TTLCK :1; /**<  */
+    HWREG_U8 CCSM_OFF :1; /**<  */
+    HWREG_U8 DBPOFF :1; /**<  */
+    HWREG_U8 CHR_WDT_NOKICK :1; /**<  */
+} sCHGRCTRL0_REGStructure;
+
+
+/** @brief CHGRCTRL0_REG Bitfield widths
+*/
+#define lenCHGRCTRL0_REG_CHGRRESET 1
+#define lenCHGRCTRL0_REG_EMRGCHREN 1
+#define lenCHGRCTRL0_REG_EXTCHRDIS 1
+#define lenCHGRCTRL0_REG_SWCONTROL 1
+#define lenCHGRCTRL0_REG_TTLCK 1
+#define lenCHGRCTRL0_REG_CCSM_OFF 1
+#define lenCHGRCTRL0_REG_DBPOFF 1
+#define lenCHGRCTRL0_REG_CHR_WDT_NOKICK 1
+
+typedef enum
+{
+    CHGRCTRL0_REG_LSB_CHGRRESET = 0,
+    CHGRCTRL0_REG_LSB_EMRGCHREN = 1,
+    CHGRCTRL0_REG_LSB_EXTCHRDIS = 2,
+    CHGRCTRL0_REG_LSB_SWCONTROL = 3,
+    CHGRCTRL0_REG_LSB_TTLCK = 4,
+    CHGRCTRL0_REG_LSB_CCSM_OFF = 5,
+    CHGRCTRL0_REG_LSB_DBPOFF = 6,
+    CHGRCTRL0_REG_LSB_CHR_WDT_NOKICK = 7
+} eCHGRCTRL0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHGRCTRL0_REG_Content;
+    sCHGRCTRL0_REGStructure CHGRCTRL0_REG_Structure;
+} uCHGRCTRL0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG(HWREG_U8 value); /** Get complete register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_CHGRRESET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CHGRRESET of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_EMRGCHREN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element EMRGCHREN of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_EMRGCHREN(HWREG_U8 value); /**< Get element EMRGCHREN of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_EXTCHRDIS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element EXTCHRDIS of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_EXTCHRDIS(HWREG_U8 value); /**< Get element EXTCHRDIS of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_SWCONTROL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SWCONTROL of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_SWCONTROL(HWREG_U8 value); /**< Get element SWCONTROL of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_TTLCK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TTLCK of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_TTLCK(HWREG_U8 value); /**< Get element TTLCK of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_CCSM_OFF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CCSM_OFF of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_CCSM_OFF(HWREG_U8 value); /**< Get element CCSM_OFF of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_DBPOFF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DBPOFF of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_CHR_WDT_NOKICK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CHR_WDT_NOKICK of register CHGRCTRL0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_CHR_WDT_NOKICK(HWREG_U8 value); /**< Get element CHR_WDT_NOKICK of register CHGRCTRL0_REG */
+
+
+/** @brief CHGRCTRL1_REG register description at address offset 0x5e17
+  *
+  *  Charger Control Register 1
+  */
+typedef struct
+{
+    HWREG_U8 FUSBINLMT100 :1; /**<  */
+    HWREG_U8 FUSBINLMT150 :1; /**<  */
+    HWREG_U8 FUSBINLMT500 :1; /**<  */
+    HWREG_U8 FUSBINLMT900 :1; /**<  */
+    HWREG_U8 FUSBINLMT1500 :1; /**<  */
+    HWREG_U8 FTEMPEVENT :1; /**<  */
+    HWREG_U8 OTGMODE :1; /**<  */
+    HWREG_U8 DBPEN :1; /**<  */
+} sCHGRCTRL1_REGStructure;
+
+
+/** @brief CHGRCTRL1_REG Bitfield widths
+*/
+#define lenCHGRCTRL1_REG_FUSBINLMT100 1
+#define lenCHGRCTRL1_REG_FUSBINLMT150 1
+#define lenCHGRCTRL1_REG_FUSBINLMT500 1
+#define lenCHGRCTRL1_REG_FUSBINLMT900 1
+#define lenCHGRCTRL1_REG_FUSBINLMT1500 1
+#define lenCHGRCTRL1_REG_FTEMPEVENT 1
+#define lenCHGRCTRL1_REG_OTGMODE 1
+#define lenCHGRCTRL1_REG_DBPEN 1
+
+typedef enum
+{
+    CHGRCTRL1_REG_LSB_FUSBINLMT100 = 0,
+    CHGRCTRL1_REG_LSB_FUSBINLMT150 = 1,
+    CHGRCTRL1_REG_LSB_FUSBINLMT500 = 2,
+    CHGRCTRL1_REG_LSB_FUSBINLMT900 = 3,
+    CHGRCTRL1_REG_LSB_FUSBINLMT1500 = 4,
+    CHGRCTRL1_REG_LSB_FTEMPEVENT = 5,
+    CHGRCTRL1_REG_LSB_OTGMODE = 6,
+    CHGRCTRL1_REG_LSB_DBPEN = 7
+} eCHGRCTRL1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHGRCTRL1_REG_Content;
+    sCHGRCTRL1_REGStructure CHGRCTRL1_REG_Structure;
+} uCHGRCTRL1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL1_REG(HWREG_U8 value); /** Get complete register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FUSBINLMT100(HWREG_U8 _reg, HWREG_U8 value); /**< Set element FUSBINLMT100 of register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FUSBINLMT150(HWREG_U8 _reg, HWREG_U8 value); /**< Set element FUSBINLMT150 of register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FUSBINLMT500(HWREG_U8 _reg, HWREG_U8 value); /**< Set element FUSBINLMT500 of register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FUSBINLMT900(HWREG_U8 _reg, HWREG_U8 value); /**< Set element FUSBINLMT900 of register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FUSBINLMT1500(HWREG_U8 _reg, HWREG_U8 value); /**< Set element FUSBINLMT1500 of register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FTEMPEVENT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element FTEMPEVENT of register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_OTGMODE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element OTGMODE of register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL1_REG_OTGMODE(HWREG_U8 value); /**< Get element OTGMODE of register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_DBPEN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DBPEN of register CHGRCTRL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL1_REG_DBPEN(HWREG_U8 value); /**< Get element DBPEN of register CHGRCTRL1_REG */
+
+
+/** @brief CHGRCTRL2_REG register description at address offset 0x5e18
+  *
+  *  Charger Control Register 2
+  */
+typedef struct
+{
+    HWREG_U8 CHGDIS_ACT :1; /**<  */
+    HWREG_U8 PWROVREN :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sCHGRCTRL2_REGStructure;
+
+
+/** @brief CHGRCTRL2_REG Bitfield widths
+*/
+#define lenCHGRCTRL2_REG_CHGDIS_ACT 1
+#define lenCHGRCTRL2_REG_PWROVREN 1
+
+typedef enum
+{
+    CHGRCTRL2_REG_LSB_CHGDIS_ACT = 0,
+    CHGRCTRL2_REG_LSB_PWROVREN = 1
+} eCHGRCTRL2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHGRCTRL2_REG_Content;
+    sCHGRCTRL2_REGStructure CHGRCTRL2_REG_Structure;
+} uCHGRCTRL2_REG;
+
+typedef enum
+{
+    CHGRCTRL2_REG_PWROVREN_DIS = 0,
+    CHGRCTRL2_REG_PWROVREN_EN = 1
+} eCHGRCTRL2_REG_PWROVREN;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL2_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHGRCTRL2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL2_REG(HWREG_U8 value); /** Get complete register CHGRCTRL2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL2_REG_CHGDIS_ACT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CHGDIS_ACT of register CHGRCTRL2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL2_REG_CHGDIS_ACT(HWREG_U8 value); /**< Get element CHGDIS_ACT of register CHGRCTRL2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL2_REG_PWROVREN(HWREG_U8 _reg, eCHGRCTRL2_REG_PWROVREN value); /**< Set element PWROVREN of register CHGRCTRL2_REG */
+__HWREG_INLINE__ eCHGRCTRL2_REG_PWROVREN getPmic_CHGRCTRL2_REG_PWROVREN(HWREG_U8 value); /**< Get element PWROVREN of register CHGRCTRL2_REG */
+
+
+/** @brief CHGRSTATUS_REG register description at address offset 0x5e19
+  *
+  *  Charger Control State Machine Status Register
+  */
+typedef struct
+{
+    const HWREG_U8 CHGDETBLVL :1; /**<  */
+    const HWREG_U8 CHGDETBLATCH :1; /**<  */
+    const HWREG_U8 CHGDISLVL :1; /**<  */
+    HWREG_U8 USBSEL :1; /**<  */
+    const HWREG_U8 SDBP :1; /**<  */
+    const HWREG_U8 SDCP :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sCHGRSTATUS_REGStructure;
+
+
+/** @brief CHGRSTATUS_REG Bitfield widths
+*/
+#define lenCHGRSTATUS_REG_CHGDETBLVL 1
+#define lenCHGRSTATUS_REG_CHGDETBLATCH 1
+#define lenCHGRSTATUS_REG_CHGDISLVL 1
+#define lenCHGRSTATUS_REG_USBSEL 1
+#define lenCHGRSTATUS_REG_SDBP 1
+#define lenCHGRSTATUS_REG_SDCP 1
+
+typedef enum
+{
+    CHGRSTATUS_REG_LSB_CHGDETBLVL = 0,
+    CHGRSTATUS_REG_LSB_CHGDETBLATCH = 1,
+    CHGRSTATUS_REG_LSB_CHGDISLVL = 2,
+    CHGRSTATUS_REG_LSB_USBSEL = 3,
+    CHGRSTATUS_REG_LSB_SDBP = 4,
+    CHGRSTATUS_REG_LSB_SDCP = 5
+} eCHGRSTATUS_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHGRSTATUS_REG_Content;
+    sCHGRSTATUS_REGStructure CHGRSTATUS_REG_Structure;
+} uCHGRSTATUS_REG;
+
+typedef enum
+{
+    CHGRSTATUS_REG_CHGDETBLVL_ASSERTED = 0,
+    CHGRSTATUS_REG_CHGDETBLVL_DEASSERTED = 1
+} eCHGRSTATUS_REG_CHGDETBLVL;
+
+typedef enum
+{
+    CHGRSTATUS_REG_CHGDETBLATCH_HIGHPWR = 0,
+    CHGRSTATUS_REG_CHGDETBLATCH_LOWPWR = 1
+} eCHGRSTATUS_REG_CHGDETBLATCH;
+
+typedef enum
+{
+    CHGRSTATUS_REG_USBSEL_EXTERNAL = 0,
+    CHGRSTATUS_REG_USBSEL_INTERNAL = 1
+} eCHGRSTATUS_REG_USBSEL;
+
+typedef enum
+{
+    CHGRSTATUS_REG_SDBP_OFF = 0,
+    CHGRSTATUS_REG_SDBP_ACTIVE = 1
+} eCHGRSTATUS_REG_SDBP;
+
+typedef enum
+{
+    CHGRSTATUS_REG_SDCP_OFF = 0,
+    CHGRSTATUS_REG_SDCP_ACTIVE = 1
+} eCHGRSTATUS_REG_SDCP;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRSTATUS_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHGRSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRSTATUS_REG(HWREG_U8 value); /** Get complete register CHGRSTATUS_REG */
+__HWREG_INLINE__ eCHGRSTATUS_REG_CHGDETBLVL getPmic_CHGRSTATUS_REG_CHGDETBLVL(HWREG_U8 value); /**< Get element CHGDETBLVL of register CHGRSTATUS_REG */
+__HWREG_INLINE__ eCHGRSTATUS_REG_CHGDETBLATCH getPmic_CHGRSTATUS_REG_CHGDETBLATCH(HWREG_U8 value); /**< Get element CHGDETBLATCH of register CHGRSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRSTATUS_REG_CHGDISLVL(HWREG_U8 value); /**< Get element CHGDISLVL of register CHGRSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRSTATUS_REG_USBSEL(HWREG_U8 _reg, eCHGRSTATUS_REG_USBSEL value); /**< Set element USBSEL of register CHGRSTATUS_REG */
+__HWREG_INLINE__ eCHGRSTATUS_REG_USBSEL getPmic_CHGRSTATUS_REG_USBSEL(HWREG_U8 value); /**< Get element USBSEL of register CHGRSTATUS_REG */
+__HWREG_INLINE__ eCHGRSTATUS_REG_SDBP getPmic_CHGRSTATUS_REG_SDBP(HWREG_U8 value); /**< Get element SDBP of register CHGRSTATUS_REG */
+__HWREG_INLINE__ eCHGRSTATUS_REG_SDCP getPmic_CHGRSTATUS_REG_SDCP(HWREG_U8 value); /**< Get element SDCP of register CHGRSTATUS_REG */
+
+
+/** @brief SCHGRIRQ_REG register description at address offset 0x5e1a
+  *
+  *  Charger Status Register
+  */
+typedef struct
+{
+    const HWREG_U8 CHGINTBLVL :1; /**<  */
+    const HWREG_U8 SI2CWR :1; /**<  */
+    const HWREG_U8 SI2CRD :1; /**<  */
+    const HWREG_U8 SNACK :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+    const HWREG_U8 SSTUCK :1; /**<  */
+} sSCHGRIRQ_REGStructure;
+
+
+/** @brief SCHGRIRQ_REG Bitfield widths
+*/
+#define lenSCHGRIRQ_REG_CHGINTBLVL 1
+#define lenSCHGRIRQ_REG_SI2CWR 1
+#define lenSCHGRIRQ_REG_SI2CRD 1
+#define lenSCHGRIRQ_REG_SNACK 1
+#define lenSCHGRIRQ_REG_SSTUCK 1
+
+typedef enum
+{
+    SCHGRIRQ_REG_LSB_CHGINTBLVL = 0,
+    SCHGRIRQ_REG_LSB_SI2CWR = 1,
+    SCHGRIRQ_REG_LSB_SI2CRD = 2,
+    SCHGRIRQ_REG_LSB_SNACK = 3,
+    SCHGRIRQ_REG_LSB_SSTUCK = 7
+} eSCHGRIRQ_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SCHGRIRQ_REG_Content;
+    sSCHGRIRQ_REGStructure SCHGRIRQ_REG_Structure;
+} uSCHGRIRQ_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG(HWREG_U8 value); /** Get complete register SCHGRIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG_CHGINTBLVL(HWREG_U8 value); /**< Get element CHGINTBLVL of register SCHGRIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG_SI2CWR(HWREG_U8 value); /**< Get element SI2CWR of register SCHGRIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG_SI2CRD(HWREG_U8 value); /**< Get element SI2CRD of register SCHGRIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG_SNACK(HWREG_U8 value); /**< Get element SNACK of register SCHGRIRQ_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG_SSTUCK(HWREG_U8 value); /**< Get element SSTUCK of register SCHGRIRQ_REG */
+
+
+/** @brief DEV3_STATUS2_LASTREAD_REG register description at address offset 0x5e1c
+  *
+  *  sVID STATUS2 lastread Register
+  */
+typedef struct
+{
+    const HWREG_U8 DEV3_STATUS_2_ON_LAST_GETREG :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sDEV3_STATUS2_LASTREAD_REGStructure;
+
+
+/** @brief DEV3_STATUS2_LASTREAD_REG Bitfield widths
+*/
+#define lenDEV3_STATUS2_LASTREAD_REG_DEV3_STATUS_2_ON_LAST_GETREG 2
+
+typedef enum
+{
+    DEV3_STATUS2_LASTREAD_REG_LSB_DEV3_STATUS_2_ON_LAST_GETREG = 0
+} eDEV3_STATUS2_LASTREAD_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV3_STATUS2_LASTREAD_REG_Content;
+    sDEV3_STATUS2_LASTREAD_REGStructure DEV3_STATUS2_LASTREAD_REG_Structure;
+} uDEV3_STATUS2_LASTREAD_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS2_LASTREAD_REG(HWREG_U8 value); /** Get complete register DEV3_STATUS2_LASTREAD_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS2_LASTREAD_REG_DEV3_STATUS_2_ON_LAST_GETREG(HWREG_U8 value); /**< Get element DEV3_STATUS_2_ON_LAST_GETREG of register DEV3_STATUS2_LASTREAD_REG */
+
+
+/** @brief VBUSDETCTRL_REG register description at address offset 0x5e1d
+  *
+  *  VBUS Detection Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 VBUSDETTYPE :1; /**<  */
+    HWREG_U8 VBUSDETEN :1; /**<  */
+    HWREG_U8 BOOT_100MA :1; /**<  */
+    HWREG_U8 SDP500_NC :1; /**<  */
+    HWREG_U8 DCDTIMEOUT :3; /**<  */
+} sVBUSDETCTRL_REGStructure;
+
+
+/** @brief VBUSDETCTRL_REG Bitfield widths
+*/
+#define lenVBUSDETCTRL_REG_VBUSDETTYPE 1
+#define lenVBUSDETCTRL_REG_VBUSDETEN 1
+#define lenVBUSDETCTRL_REG_BOOT_100MA 1
+#define lenVBUSDETCTRL_REG_SDP500_NC 1
+#define lenVBUSDETCTRL_REG_DCDTIMEOUT 3
+
+typedef enum
+{
+    VBUSDETCTRL_REG_LSB_VBUSDETTYPE = 1,
+    VBUSDETCTRL_REG_LSB_VBUSDETEN = 2,
+    VBUSDETCTRL_REG_LSB_BOOT_100MA = 3,
+    VBUSDETCTRL_REG_LSB_SDP500_NC = 4,
+    VBUSDETCTRL_REG_LSB_DCDTIMEOUT = 5
+} eVBUSDETCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VBUSDETCTRL_REG_Content;
+    sVBUSDETCTRL_REGStructure VBUSDETCTRL_REG_Structure;
+} uVBUSDETCTRL_REG;
+
+typedef enum
+{
+    VBUSDETCTRL_REG_VBUSDETEN_EN = 1,
+    VBUSDETCTRL_REG_VBUSDETEN_DIS = 0
+} eVBUSDETCTRL_REG_VBUSDETEN;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VBUSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBUSDETCTRL_REG(HWREG_U8 value); /** Get complete register VBUSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG_VBUSDETTYPE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VBUSDETTYPE of register VBUSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBUSDETCTRL_REG_VBUSDETTYPE(HWREG_U8 value); /**< Get element VBUSDETTYPE of register VBUSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG_VBUSDETEN(HWREG_U8 _reg, eVBUSDETCTRL_REG_VBUSDETEN value); /**< Set element VBUSDETEN of register VBUSDETCTRL_REG */
+__HWREG_INLINE__ eVBUSDETCTRL_REG_VBUSDETEN getPmic_VBUSDETCTRL_REG_VBUSDETEN(HWREG_U8 value); /**< Get element VBUSDETEN of register VBUSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG_BOOT_100MA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element BOOT_100MA of register VBUSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBUSDETCTRL_REG_BOOT_100MA(HWREG_U8 value); /**< Get element BOOT_100MA of register VBUSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG_SDP500_NC(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SDP500_NC of register VBUSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBUSDETCTRL_REG_SDP500_NC(HWREG_U8 value); /**< Get element SDP500_NC of register VBUSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG_DCDTIMEOUT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DCDTIMEOUT of register VBUSDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VBUSDETCTRL_REG_DCDTIMEOUT(HWREG_U8 value); /**< Get element DCDTIMEOUT of register VBUSDETCTRL_REG */
+
+
+/** @brief VDCINDETCTRL_REG register description at address offset 0x5e1e
+  *
+  *  VDCIN Detection Control Register
+  */
+typedef struct
+{
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 VDCINDETTYPE :1; /**<  */
+    HWREG_U8 VDCINDETEN :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sVDCINDETCTRL_REGStructure;
+
+
+/** @brief VDCINDETCTRL_REG Bitfield widths
+*/
+#define lenVDCINDETCTRL_REG_VDCINDETTYPE 1
+#define lenVDCINDETCTRL_REG_VDCINDETEN 1
+
+typedef enum
+{
+    VDCINDETCTRL_REG_LSB_VDCINDETTYPE = 1,
+    VDCINDETCTRL_REG_LSB_VDCINDETEN = 2
+} eVDCINDETCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VDCINDETCTRL_REG_Content;
+    sVDCINDETCTRL_REGStructure VDCINDETCTRL_REG_Structure;
+} uVDCINDETCTRL_REG;
+
+typedef enum
+{
+    VDCINDETCTRL_REG_VDCINDETEN_EN = 1,
+    VDCINDETCTRL_REG_VDCINDETEN_DIS = 0
+} eVDCINDETCTRL_REG_VDCINDETEN;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDCINDETCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VDCINDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDCINDETCTRL_REG(HWREG_U8 value); /** Get complete register VDCINDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VDCINDETCTRL_REG_VDCINDETTYPE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VDCINDETTYPE of register VDCINDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_VDCINDETCTRL_REG_VDCINDETTYPE(HWREG_U8 value); /**< Get element VDCINDETTYPE of register VDCINDETCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_VDCINDETCTRL_REG_VDCINDETEN(HWREG_U8 _reg, eVDCINDETCTRL_REG_VDCINDETEN value); /**< Set element VDCINDETEN of register VDCINDETCTRL_REG */
+__HWREG_INLINE__ eVDCINDETCTRL_REG_VDCINDETEN getPmic_VDCINDETCTRL_REG_VDCINDETEN(HWREG_U8 value); /**< Get element VDCINDETEN of register VDCINDETCTRL_REG */
+
+
+/** @brief CHRLEDCTRL_REG register description at address offset 0x5e1f
+  *
+  *  Battery Charger LED Control Register Definition
+  */
+typedef struct
+{
+    HWREG_U8 CHRLEDFN :1; /**<  */
+    HWREG_U8 SWLEDON :1; /**<  */
+    HWREG_U8 CHRLEDI :2; /**<  */
+    HWREG_U8 CHRLEDF :2; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+} sCHRLEDCTRL_REGStructure;
+
+
+/** @brief CHRLEDCTRL_REG Bitfield widths
+*/
+#define lenCHRLEDCTRL_REG_CHRLEDFN 1
+#define lenCHRLEDCTRL_REG_SWLEDON 1
+#define lenCHRLEDCTRL_REG_CHRLEDI 2
+#define lenCHRLEDCTRL_REG_CHRLEDF 2
+
+typedef enum
+{
+    CHRLEDCTRL_REG_LSB_CHRLEDFN = 0,
+    CHRLEDCTRL_REG_LSB_SWLEDON = 1,
+    CHRLEDCTRL_REG_LSB_CHRLEDI = 2,
+    CHRLEDCTRL_REG_LSB_CHRLEDF = 4
+} eCHRLEDCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHRLEDCTRL_REG_Content;
+    sCHRLEDCTRL_REGStructure CHRLEDCTRL_REG_Structure;
+} uCHRLEDCTRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHRLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDCTRL_REG(HWREG_U8 value); /** Get complete register CHRLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDCTRL_REG_CHRLEDFN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CHRLEDFN of register CHRLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDCTRL_REG_CHRLEDFN(HWREG_U8 value); /**< Get element CHRLEDFN of register CHRLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDCTRL_REG_SWLEDON(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SWLEDON of register CHRLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDCTRL_REG_SWLEDON(HWREG_U8 value); /**< Get element SWLEDON of register CHRLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDCTRL_REG_CHRLEDI(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CHRLEDI of register CHRLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDCTRL_REG_CHRLEDI(HWREG_U8 value); /**< Get element CHRLEDI of register CHRLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDCTRL_REG_CHRLEDF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CHRLEDF of register CHRLEDCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDCTRL_REG_CHRLEDF(HWREG_U8 value); /**< Get element CHRLEDF of register CHRLEDCTRL_REG */
+
+
+/** @brief CHRLEDFSM_REG register description at address offset 0x5e20
+  *
+  *  CHRLED State Machine Breathing Settings
+  */
+typedef struct
+{
+    const HWREG_U8 CHRLEDCIP :1; /**<  */
+    HWREG_U8 LEDEFF :2; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sCHRLEDFSM_REGStructure;
+
+
+/** @brief CHRLEDFSM_REG Bitfield widths
+*/
+#define lenCHRLEDFSM_REG_CHRLEDCIP 1
+#define lenCHRLEDFSM_REG_LEDEFF 2
+
+typedef enum
+{
+    CHRLEDFSM_REG_LSB_CHRLEDCIP = 0,
+    CHRLEDFSM_REG_LSB_LEDEFF = 1
+} eCHRLEDFSM_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHRLEDFSM_REG_Content;
+    sCHRLEDFSM_REGStructure CHRLEDFSM_REG_Structure;
+} uCHRLEDFSM_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDFSM_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHRLEDFSM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDFSM_REG(HWREG_U8 value); /** Get complete register CHRLEDFSM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDFSM_REG_CHRLEDCIP(HWREG_U8 value); /**< Get element CHRLEDCIP of register CHRLEDFSM_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDFSM_REG_LEDEFF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element LEDEFF of register CHRLEDFSM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDFSM_REG_LEDEFF(HWREG_U8 value); /**< Get element LEDEFF of register CHRLEDFSM_REG */
+
+
+/** @brief CHRLEDPWM_REG register description at address offset 0x5e21
+  *
+  *  CHRLED PWM Register Definition
+  */
+typedef struct
+{
+    HWREG_U8 CHRLEDDUTY :8; /**<  */
+} sCHRLEDPWM_REGStructure;
+
+
+/** @brief CHRLEDPWM_REG Bitfield widths
+*/
+#define lenCHRLEDPWM_REG_CHRLEDDUTY 8
+
+typedef enum
+{
+    CHRLEDPWM_REG_LSB_CHRLEDDUTY = 0
+} eCHRLEDPWM_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHRLEDPWM_REG_Content;
+    sCHRLEDPWM_REGStructure CHRLEDPWM_REG_Structure;
+} uCHRLEDPWM_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDPWM_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHRLEDPWM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDPWM_REG(HWREG_U8 value); /** Get complete register CHRLEDPWM_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDPWM_REG_CHRLEDDUTY(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CHRLEDDUTY of register CHRLEDPWM_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDPWM_REG_CHRLEDDUTY(HWREG_U8 value); /**< Get element CHRLEDDUTY of register CHRLEDPWM_REG */
+
+
+/** @brief CHRTTADDR_REG register description at address offset 0x5e22
+  *
+  *  Translation Table Mailbox Address
+  */
+typedef struct
+{
+    HWREG_U8 CHRTTADDR :8; /**<  */
+} sCHRTTADDR_REGStructure;
+
+
+/** @brief CHRTTADDR_REG Bitfield widths
+*/
+#define lenCHRTTADDR_REG_CHRTTADDR 8
+
+typedef enum
+{
+    CHRTTADDR_REG_LSB_CHRTTADDR = 0
+} eCHRTTADDR_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHRTTADDR_REG_Content;
+    sCHRTTADDR_REGStructure CHRTTADDR_REG_Structure;
+} uCHRTTADDR_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRTTADDR_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHRTTADDR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRTTADDR_REG(HWREG_U8 value); /** Get complete register CHRTTADDR_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRTTADDR_REG_CHRTTADDR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CHRTTADDR of register CHRTTADDR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRTTADDR_REG_CHRTTADDR(HWREG_U8 value); /**< Get element CHRTTADDR of register CHRTTADDR_REG */
+
+
+/** @brief CHRTTDATA_REG register description at address offset 0x5e23
+  *
+  *  Translation Table Mailbox Data
+  */
+typedef struct
+{
+    HWREG_U8 CHRTTDATA :8; /**<  */
+} sCHRTTDATA_REGStructure;
+
+
+/** @brief CHRTTDATA_REG Bitfield widths
+*/
+#define lenCHRTTDATA_REG_CHRTTDATA 8
+
+typedef enum
+{
+    CHRTTDATA_REG_LSB_CHRTTDATA = 0
+} eCHRTTDATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHRTTDATA_REG_Content;
+    sCHRTTDATA_REGStructure CHRTTDATA_REG_Structure;
+} uCHRTTDATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRTTDATA_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHRTTDATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRTTDATA_REG(HWREG_U8 value); /** Get complete register CHRTTDATA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRTTDATA_REG_CHRTTDATA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element CHRTTDATA of register CHRTTDATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRTTDATA_REG_CHRTTDATA(HWREG_U8 value); /**< Get element CHRTTDATA of register CHRTTDATA_REG */
+
+
+/** @brief I2COVRCTRL_REG register description at address offset 0x5e24
+  *
+  *  I2C Override Control Register
+  */
+typedef struct
+{
+    HWREG_U8 I2CWR :1; /**<  */
+    HWREG_U8 I2CRD :1; /**<  */
+    HWREG_U8 I2CCLRDIS :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sI2COVRCTRL_REGStructure;
+
+
+/** @brief I2COVRCTRL_REG Bitfield widths
+*/
+#define lenI2COVRCTRL_REG_I2CWR 1
+#define lenI2COVRCTRL_REG_I2CRD 1
+#define lenI2COVRCTRL_REG_I2CCLRDIS 1
+
+typedef enum
+{
+    I2COVRCTRL_REG_LSB_I2CWR = 0,
+    I2COVRCTRL_REG_LSB_I2CRD = 1,
+    I2COVRCTRL_REG_LSB_I2CCLRDIS = 2
+} eI2COVRCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 I2COVRCTRL_REG_Content;
+    sI2COVRCTRL_REGStructure I2COVRCTRL_REG_Structure;
+} uI2COVRCTRL_REG;
+
+typedef enum
+{
+    I2COVRCTRL_REG_I2CCLRDIS_CLEAR = 0,
+    I2COVRCTRL_REG_I2CCLRDIS_DISABLED = 1
+} eI2COVRCTRL_REG_I2CCLRDIS;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register I2COVRCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRCTRL_REG(HWREG_U8 value); /** Get complete register I2COVRCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRCTRL_REG_I2CWR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element I2CWR of register I2COVRCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRCTRL_REG_I2CRD(HWREG_U8 _reg, HWREG_U8 value); /**< Set element I2CRD of register I2COVRCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRCTRL_REG_I2CCLRDIS(HWREG_U8 _reg, eI2COVRCTRL_REG_I2CCLRDIS value); /**< Set element I2CCLRDIS of register I2COVRCTRL_REG */
+__HWREG_INLINE__ eI2COVRCTRL_REG_I2CCLRDIS getPmic_I2COVRCTRL_REG_I2CCLRDIS(HWREG_U8 value); /**< Get element I2CCLRDIS of register I2COVRCTRL_REG */
+
+
+/** @brief I2COVRDADDR_REG register description at address offset 0x5e25
+  *
+  *  I2C Override Device Address Register
+  */
+typedef struct
+{
+    HWREG_U8 I2COVRDADDR :7; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sI2COVRDADDR_REGStructure;
+
+
+/** @brief I2COVRDADDR_REG Bitfield widths
+*/
+#define lenI2COVRDADDR_REG_I2COVRDADDR 7
+
+typedef enum
+{
+    I2COVRDADDR_REG_LSB_I2COVRDADDR = 0
+} eI2COVRDADDR_REGLsb;
+
+typedef union
+{
+    HWREG_U8 I2COVRDADDR_REG_Content;
+    sI2COVRDADDR_REGStructure I2COVRDADDR_REG_Structure;
+} uI2COVRDADDR_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRDADDR_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register I2COVRDADDR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRDADDR_REG(HWREG_U8 value); /** Get complete register I2COVRDADDR_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRDADDR_REG_I2COVRDADDR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element I2COVRDADDR of register I2COVRDADDR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRDADDR_REG_I2COVRDADDR(HWREG_U8 value); /**< Get element I2COVRDADDR of register I2COVRDADDR_REG */
+
+
+/** @brief I2COVROFFSET_REG register description at address offset 0x5e26
+  *
+  *  I2C Override Offset Register
+  */
+typedef struct
+{
+    HWREG_U8 I2COVROFFSET :8; /**<  */
+} sI2COVROFFSET_REGStructure;
+
+
+/** @brief I2COVROFFSET_REG Bitfield widths
+*/
+#define lenI2COVROFFSET_REG_I2COVROFFSET 8
+
+typedef enum
+{
+    I2COVROFFSET_REG_LSB_I2COVROFFSET = 0
+} eI2COVROFFSET_REGLsb;
+
+typedef union
+{
+    HWREG_U8 I2COVROFFSET_REG_Content;
+    sI2COVROFFSET_REGStructure I2COVROFFSET_REG_Structure;
+} uI2COVROFFSET_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVROFFSET_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register I2COVROFFSET_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVROFFSET_REG(HWREG_U8 value); /** Get complete register I2COVROFFSET_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVROFFSET_REG_I2COVROFFSET(HWREG_U8 _reg, HWREG_U8 value); /**< Set element I2COVROFFSET of register I2COVROFFSET_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVROFFSET_REG_I2COVROFFSET(HWREG_U8 value); /**< Get element I2COVROFFSET of register I2COVROFFSET_REG */
+
+
+/** @brief I2COVRWRDATA_REG register description at address offset 0x5e27
+  *
+  *  I2C Override Write Data Register
+  */
+typedef struct
+{
+    HWREG_U8 I2COVRWRDATA :8; /**<  */
+} sI2COVRWRDATA_REGStructure;
+
+
+/** @brief I2COVRWRDATA_REG Bitfield widths
+*/
+#define lenI2COVRWRDATA_REG_I2COVRWRDATA 8
+
+typedef enum
+{
+    I2COVRWRDATA_REG_LSB_I2COVRWRDATA = 0
+} eI2COVRWRDATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 I2COVRWRDATA_REG_Content;
+    sI2COVRWRDATA_REGStructure I2COVRWRDATA_REG_Structure;
+} uI2COVRWRDATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRWRDATA_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register I2COVRWRDATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRWRDATA_REG(HWREG_U8 value); /** Get complete register I2COVRWRDATA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRWRDATA_REG_I2COVRWRDATA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element I2COVRWRDATA of register I2COVRWRDATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRWRDATA_REG_I2COVRWRDATA(HWREG_U8 value); /**< Get element I2COVRWRDATA of register I2COVRWRDATA_REG */
+
+
+/** @brief I2COVRRDDATA_REG register description at address offset 0x5e28
+  *
+  *  Data to be written to the target I2C device.
+  */
+typedef struct
+{
+    const HWREG_U8 I2COVRRDDATA :8; /**<  */
+} sI2COVRRDDATA_REGStructure;
+
+
+/** @brief I2COVRRDDATA_REG Bitfield widths
+*/
+#define lenI2COVRRDDATA_REG_I2COVRRDDATA 8
+
+typedef enum
+{
+    I2COVRRDDATA_REG_LSB_I2COVRRDDATA = 0
+} eI2COVRRDDATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 I2COVRRDDATA_REG_Content;
+    sI2COVRRDDATA_REGStructure I2COVRRDDATA_REG_Structure;
+} uI2COVRRDDATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRRDDATA_REG(HWREG_U8 value); /** Get complete register I2COVRRDDATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRRDDATA_REG_I2COVRRDDATA(HWREG_U8 value); /**< Get element I2COVRRDDATA of register I2COVRRDDATA_REG */
+
+
+/** @brief USBSRCDETSTATUS0_REG register description at address offset 0x5e29
+  *
+  *  USB Source Detection Status Register 0
+  */
+typedef struct
+{
+    const HWREG_U8 SUSBHWDET :2; /**<  */
+    const HWREG_U8 USBSRCDETRSLT :4; /**<  */
+    const HWREG_U8 SDCD :2; /**<  */
+} sUSBSRCDETSTATUS0_REGStructure;
+
+
+/** @brief USBSRCDETSTATUS0_REG Bitfield widths
+*/
+#define lenUSBSRCDETSTATUS0_REG_SUSBHWDET 2
+#define lenUSBSRCDETSTATUS0_REG_USBSRCDETRSLT 4
+#define lenUSBSRCDETSTATUS0_REG_SDCD 2
+
+typedef enum
+{
+    USBSRCDETSTATUS0_REG_LSB_SUSBHWDET = 0,
+    USBSRCDETSTATUS0_REG_LSB_USBSRCDETRSLT = 2,
+    USBSRCDETSTATUS0_REG_LSB_SDCD = 6
+} eUSBSRCDETSTATUS0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 USBSRCDETSTATUS0_REG_Content;
+    sUSBSRCDETSTATUS0_REGStructure USBSRCDETSTATUS0_REG_Structure;
+} uUSBSRCDETSTATUS0_REG;
+
+typedef enum
+{
+    USBSRCDETSTATUS0_REG_SDCD_NDET = 0,
+    USBSRCDETSTATUS0_REG_SDCD_ONGO = 1,
+    USBSRCDETSTATUS0_REG_SDCD_SUCC = 2,
+    USBSRCDETSTATUS0_REG_SDCD_FAIL = 3
+} eUSBSRCDETSTATUS0_REG_SDCD;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS0_REG(HWREG_U8 value); /** Get complete register USBSRCDETSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS0_REG_SUSBHWDET(HWREG_U8 value); /**< Get element SUSBHWDET of register USBSRCDETSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS0_REG_USBSRCDETRSLT(HWREG_U8 value); /**< Get element USBSRCDETRSLT of register USBSRCDETSTATUS0_REG */
+__HWREG_INLINE__ eUSBSRCDETSTATUS0_REG_SDCD getPmic_USBSRCDETSTATUS0_REG_SDCD(HWREG_U8 value); /**< Get element SDCD of register USBSRCDETSTATUS0_REG */
+
+
+/** @brief USBSRCDETSTATUS1_REG register description at address offset 0x5e2a
+  *
+  *  ACA Detection Status Register 1
+  */
+typedef struct
+{
+    const HWREG_U8 SACA :2; /**<  */
+    const HWREG_U8 SPRIM :1; /**<  */
+    const HWREG_U8 SSEC :1; /**<  */
+    const HWREG_U8 :4; /**< Unused bitfield */
+} sUSBSRCDETSTATUS1_REGStructure;
+
+
+/** @brief USBSRCDETSTATUS1_REG Bitfield widths
+*/
+#define lenUSBSRCDETSTATUS1_REG_SACA 2
+#define lenUSBSRCDETSTATUS1_REG_SPRIM 1
+#define lenUSBSRCDETSTATUS1_REG_SSEC 1
+
+typedef enum
+{
+    USBSRCDETSTATUS1_REG_LSB_SACA = 0,
+    USBSRCDETSTATUS1_REG_LSB_SPRIM = 2,
+    USBSRCDETSTATUS1_REG_LSB_SSEC = 3
+} eUSBSRCDETSTATUS1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 USBSRCDETSTATUS1_REG_Content;
+    sUSBSRCDETSTATUS1_REGStructure USBSRCDETSTATUS1_REG_Structure;
+} uUSBSRCDETSTATUS1_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS1_REG(HWREG_U8 value); /** Get complete register USBSRCDETSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS1_REG_SACA(HWREG_U8 value); /**< Get element SACA of register USBSRCDETSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS1_REG_SPRIM(HWREG_U8 value); /**< Get element SPRIM of register USBSRCDETSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS1_REG_SSEC(HWREG_U8 value); /**< Get element SSEC of register USBSRCDETSTATUS1_REG */
+
+
+/** @brief CCSMCMDSKIP_REG register description at address offset 0x5e2b
+  *
+  *  CCSM Command Skip Register
+  */
+typedef struct
+{
+    HWREG_U8 OFFSET_SKIP :8; /**<  */
+} sCCSMCMDSKIP_REGStructure;
+
+
+/** @brief CCSMCMDSKIP_REG Bitfield widths
+*/
+#define lenCCSMCMDSKIP_REG_OFFSET_SKIP 8
+
+typedef enum
+{
+    CCSMCMDSKIP_REG_LSB_OFFSET_SKIP = 0
+} eCCSMCMDSKIP_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CCSMCMDSKIP_REG_Content;
+    sCCSMCMDSKIP_REGStructure CCSMCMDSKIP_REG_Structure;
+} uCCSMCMDSKIP_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CCSMCMDSKIP_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CCSMCMDSKIP_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CCSMCMDSKIP_REG(HWREG_U8 value); /** Get complete register CCSMCMDSKIP_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CCSMCMDSKIP_REG_OFFSET_SKIP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element OFFSET_SKIP of register CCSMCMDSKIP_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CCSMCMDSKIP_REG_OFFSET_SKIP(HWREG_U8 value); /**< Get element OFFSET_SKIP of register CCSMCMDSKIP_REG */
+
+
+/** @brief CCSMSFTTIMER_REG register description at address offset 0x5e2c
+  *
+  *  CCSM Safety Timer
+  */
+typedef struct
+{
+    HWREG_U8 SFTTIMERVAL :8; /**<  */
+} sCCSMSFTTIMER_REGStructure;
+
+
+/** @brief CCSMSFTTIMER_REG Bitfield widths
+*/
+#define lenCCSMSFTTIMER_REG_SFTTIMERVAL 8
+
+typedef enum
+{
+    CCSMSFTTIMER_REG_LSB_SFTTIMERVAL = 0
+} eCCSMSFTTIMER_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CCSMSFTTIMER_REG_Content;
+    sCCSMSFTTIMER_REGStructure CCSMSFTTIMER_REG_Structure;
+} uCCSMSFTTIMER_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CCSMSFTTIMER_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CCSMSFTTIMER_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CCSMSFTTIMER_REG(HWREG_U8 value); /** Get complete register CCSMSFTTIMER_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CCSMSFTTIMER_REG_SFTTIMERVAL(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SFTTIMERVAL of register CCSMSFTTIMER_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CCSMSFTTIMER_REG_SFTTIMERVAL(HWREG_U8 value); /**< Get element SFTTIMERVAL of register CCSMSFTTIMER_REG */
+
+
+/** @brief SCCSMSFTTIMER_REG register description at address offset 0x5e2d
+  *
+  *  CCSM Safety Timer Status
+  */
+typedef struct
+{
+    const HWREG_U8 SSFTTIMERVAL :8; /**<  */
+} sSCCSMSFTTIMER_REGStructure;
+
+
+/** @brief SCCSMSFTTIMER_REG Bitfield widths
+*/
+#define lenSCCSMSFTTIMER_REG_SSFTTIMERVAL 8
+
+typedef enum
+{
+    SCCSMSFTTIMER_REG_LSB_SSFTTIMERVAL = 0
+} eSCCSMSFTTIMER_REGLsb;
+
+typedef union
+{
+    HWREG_U8 SCCSMSFTTIMER_REG_Content;
+    sSCCSMSFTTIMER_REGStructure SCCSMSFTTIMER_REG_Structure;
+} uSCCSMSFTTIMER_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCCSMSFTTIMER_REG(HWREG_U8 value); /** Get complete register SCCSMSFTTIMER_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_SCCSMSFTTIMER_REG_SSFTTIMERVAL(HWREG_U8 value); /**< Get element SSFTTIMERVAL of register SCCSMSFTTIMER_REG */
+
+
+/** @brief CHGRCTRL3_REG register description at address offset 0x5e2e
+  *
+  *  Charger Control Register 3
+  */
+typedef struct
+{
+    HWREG_U8 SFTTIMERSTOP :1; /**<  */
+    HWREG_U8 DPDCPOFF :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sCHGRCTRL3_REGStructure;
+
+
+/** @brief CHGRCTRL3_REG Bitfield widths
+*/
+#define lenCHGRCTRL3_REG_SFTTIMERSTOP 1
+#define lenCHGRCTRL3_REG_DPDCPOFF 1
+
+typedef enum
+{
+    CHGRCTRL3_REG_LSB_SFTTIMERSTOP = 0,
+    CHGRCTRL3_REG_LSB_DPDCPOFF = 1
+} eCHGRCTRL3_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHGRCTRL3_REG_Content;
+    sCHGRCTRL3_REGStructure CHGRCTRL3_REG_Structure;
+} uCHGRCTRL3_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL3_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHGRCTRL3_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL3_REG_SFTTIMERSTOP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element SFTTIMERSTOP of register CHGRCTRL3_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL3_REG_DPDCPOFF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DPDCPOFF of register CHGRCTRL3_REG */
+
+
+/** @brief CHGDISCTRL_REG register description at address offset 0x5e2f
+  *
+  *  CHGDIS Pin Output Control Register
+  */
+typedef struct
+{
+    HWREG_U8 CHGDISOUT :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+    HWREG_U8 CHGDISDRV :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+    HWREG_U8 CHGDISFN :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sCHGDISCTRL_REGStructure;
+
+
+/** @brief CHGDISCTRL_REG Bitfield widths
+*/
+#define lenCHGDISCTRL_REG_CHGDISOUT 1
+#define lenCHGDISCTRL_REG_CHGDISDRV 1
+#define lenCHGDISCTRL_REG_CHGDISFN 1
+
+typedef enum
+{
+    CHGDISCTRL_REG_LSB_CHGDISOUT = 0,
+    CHGDISCTRL_REG_LSB_CHGDISDRV = 4,
+    CHGDISCTRL_REG_LSB_CHGDISFN = 6
+} eCHGDISCTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 CHGDISCTRL_REG_Content;
+    sCHGDISCTRL_REGStructure CHGDISCTRL_REG_Structure;
+} uCHGDISCTRL_REG;
+
+typedef enum
+{
+    CHGDISCTRL_REG_CHGDISOUT_LOW = 0,
+    CHGDISCTRL_REG_CHGDISOUT_HIGH = 1
+} eCHGDISCTRL_REG_CHGDISOUT;
+
+typedef enum
+{
+    CHGDISCTRL_REG_CHGDISDRV_OD = 0,
+    CHGDISCTRL_REG_CHGDISDRV_PP = 1
+} eCHGDISCTRL_REG_CHGDISDRV;
+
+typedef enum
+{
+    CHGDISCTRL_REG_CHGDISFN_DIS = 0,
+    CHGDISCTRL_REG_CHGDISFN_EN = 1
+} eCHGDISCTRL_REG_CHGDISFN;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDISCTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register CHGDISCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDISCTRL_REG(HWREG_U8 value); /** Get complete register CHGDISCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDISCTRL_REG_CHGDISOUT(HWREG_U8 _reg, eCHGDISCTRL_REG_CHGDISOUT value); /**< Set element CHGDISOUT of register CHGDISCTRL_REG */
+__HWREG_INLINE__ eCHGDISCTRL_REG_CHGDISOUT getPmic_CHGDISCTRL_REG_CHGDISOUT(HWREG_U8 value); /**< Get element CHGDISOUT of register CHGDISCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDISCTRL_REG_CHGDISDRV(HWREG_U8 _reg, eCHGDISCTRL_REG_CHGDISDRV value); /**< Set element CHGDISDRV of register CHGDISCTRL_REG */
+__HWREG_INLINE__ eCHGDISCTRL_REG_CHGDISDRV getPmic_CHGDISCTRL_REG_CHGDISDRV(HWREG_U8 value); /**< Get element CHGDISDRV of register CHGDISCTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDISCTRL_REG_CHGDISFN(HWREG_U8 _reg, eCHGDISCTRL_REG_CHGDISFN value); /**< Set element CHGDISFN of register CHGDISCTRL_REG */
+__HWREG_INLINE__ eCHGDISCTRL_REG_CHGDISFN getPmic_CHGDISCTRL_REG_CHGDISFN(HWREG_U8 value); /**< Get element CHGDISFN of register CHGDISCTRL_REG */
+
+
+/** @brief TLP1CTRL_REG register description at address offset 0x5e30
+  *
+  *  TLP1 Control Register (DEBUG)
+  */
+typedef struct
+{
+    HWREG_U8 TLP1RST :1; /**<  */
+    HWREG_U8 TLP1LCK :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1CTRL_REGStructure;
+
+
+/** @brief TLP1CTRL_REG Bitfield widths
+*/
+#define lenTLP1CTRL_REG_TLP1RST 1
+#define lenTLP1CTRL_REG_TLP1LCK 1
+
+typedef enum
+{
+    TLP1CTRL_REG_LSB_TLP1RST = 0,
+    TLP1CTRL_REG_LSB_TLP1LCK = 1
+} eTLP1CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1CTRL_REG_Content;
+    sTLP1CTRL_REGStructure TLP1CTRL_REG_Structure;
+} uTLP1CTRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1CTRL_REG(HWREG_U8 value); /** Get complete register TLP1CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1CTRL_REG_TLP1RST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1RST of register TLP1CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1CTRL_REG_TLP1LCK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1LCK of register TLP1CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1CTRL_REG_TLP1LCK(HWREG_U8 value); /**< Get element TLP1LCK of register TLP1CTRL_REG */
+
+
+/** @brief TLP1EVSTATUS0_REG register description at address offset 0x5e31
+  *
+  *  TLP1 Event Status Register 0 (DEBUG)
+  */
+typedef struct
+{
+    HWREG_U8 TLP1COLDRST :1; /**<  */
+    HWREG_U8 TLP1COLDBOOT :1; /**<  */
+    HWREG_U8 TLP1COLDOFF :1; /**<  */
+    HWREG_U8 TLP1WARMRST :1; /**<  */
+    HWREG_U8 TLP1ENTS0I3 :1; /**<  */
+    HWREG_U8 TLP1ENTS0I2 :1; /**<  */
+    HWREG_U8 TLP1ENTS0I1 :1; /**<  */
+    HWREG_U8 TLP1EXTSTBY :1; /**<  */
+} sTLP1EVSTATUS0_REGStructure;
+
+
+/** @brief TLP1EVSTATUS0_REG Bitfield widths
+*/
+#define lenTLP1EVSTATUS0_REG_TLP1COLDRST 1
+#define lenTLP1EVSTATUS0_REG_TLP1COLDBOOT 1
+#define lenTLP1EVSTATUS0_REG_TLP1COLDOFF 1
+#define lenTLP1EVSTATUS0_REG_TLP1WARMRST 1
+#define lenTLP1EVSTATUS0_REG_TLP1ENTS0I3 1
+#define lenTLP1EVSTATUS0_REG_TLP1ENTS0I2 1
+#define lenTLP1EVSTATUS0_REG_TLP1ENTS0I1 1
+#define lenTLP1EVSTATUS0_REG_TLP1EXTSTBY 1
+
+typedef enum
+{
+    TLP1EVSTATUS0_REG_LSB_TLP1COLDRST = 0,
+    TLP1EVSTATUS0_REG_LSB_TLP1COLDBOOT = 1,
+    TLP1EVSTATUS0_REG_LSB_TLP1COLDOFF = 2,
+    TLP1EVSTATUS0_REG_LSB_TLP1WARMRST = 3,
+    TLP1EVSTATUS0_REG_LSB_TLP1ENTS0I3 = 4,
+    TLP1EVSTATUS0_REG_LSB_TLP1ENTS0I2 = 5,
+    TLP1EVSTATUS0_REG_LSB_TLP1ENTS0I1 = 6,
+    TLP1EVSTATUS0_REG_LSB_TLP1EXTSTBY = 7
+} eTLP1EVSTATUS0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1EVSTATUS0_REG_Content;
+    sTLP1EVSTATUS0_REGStructure TLP1EVSTATUS0_REG_Structure;
+} uTLP1EVSTATUS0_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG(HWREG_U8 value); /** Get complete register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1COLDRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDRST of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1COLDRST(HWREG_U8 value); /**< Get element TLP1COLDRST of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1COLDBOOT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDBOOT of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1COLDBOOT(HWREG_U8 value); /**< Get element TLP1COLDBOOT of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1COLDOFF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDOFF of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1COLDOFF(HWREG_U8 value); /**< Get element TLP1COLDOFF of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1WARMRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1WARMRST of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1WARMRST(HWREG_U8 value); /**< Get element TLP1WARMRST of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ENTS0I3 of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I3(HWREG_U8 value); /**< Get element TLP1ENTS0I3 of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I2(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ENTS0I2 of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I2(HWREG_U8 value); /**< Get element TLP1ENTS0I2 of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I1(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ENTS0I1 of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I1(HWREG_U8 value); /**< Get element TLP1ENTS0I1 of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1EXTSTBY(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1EXTSTBY of register TLP1EVSTATUS0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1EXTSTBY(HWREG_U8 value); /**< Get element TLP1EXTSTBY of register TLP1EVSTATUS0_REG */
+
+
+/** @brief TLP1EVSTATUS1_REG register description at address offset 0x5e32
+  *
+  *  TLP1 Event Status Register 1 (DEBUG)
+  */
+typedef struct
+{
+    HWREG_U8 TLP1PLATFORMRST :1; /**<  */
+    HWREG_U8 TLP1ENTS0I1VNN :1; /**<  */
+    HWREG_U8 TLP1ENTS0I1VNNLP :1; /**<  */
+    HWREG_U8 TLP1MODEMRST :1; /**<  */
+    HWREG_U8 TLP1ENTS0I3LP :1; /**<  */
+    const HWREG_U8 :3; /**< Unused bitfield */
+} sTLP1EVSTATUS1_REGStructure;
+
+
+/** @brief TLP1EVSTATUS1_REG Bitfield widths
+*/
+#define lenTLP1EVSTATUS1_REG_TLP1PLATFORMRST 1
+#define lenTLP1EVSTATUS1_REG_TLP1ENTS0I1VNN 1
+#define lenTLP1EVSTATUS1_REG_TLP1ENTS0I1VNNLP 1
+#define lenTLP1EVSTATUS1_REG_TLP1MODEMRST 1
+#define lenTLP1EVSTATUS1_REG_TLP1ENTS0I3LP 1
+
+typedef enum
+{
+    TLP1EVSTATUS1_REG_LSB_TLP1PLATFORMRST = 0,
+    TLP1EVSTATUS1_REG_LSB_TLP1ENTS0I1VNN = 1,
+    TLP1EVSTATUS1_REG_LSB_TLP1ENTS0I1VNNLP = 2,
+    TLP1EVSTATUS1_REG_LSB_TLP1MODEMRST = 3,
+    TLP1EVSTATUS1_REG_LSB_TLP1ENTS0I3LP = 4
+} eTLP1EVSTATUS1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1EVSTATUS1_REG_Content;
+    sTLP1EVSTATUS1_REGStructure TLP1EVSTATUS1_REG_Structure;
+} uTLP1EVSTATUS1_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG(HWREG_U8 value); /** Get complete register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG_TLP1PLATFORMRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1PLATFORMRST of register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG_TLP1PLATFORMRST(HWREG_U8 value); /**< Get element TLP1PLATFORMRST of register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I1VNN(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ENTS0I1VNN of register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I1VNN(HWREG_U8 value); /**< Get element TLP1ENTS0I1VNN of register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I1VNNLP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ENTS0I1VNNLP of register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I1VNNLP(HWREG_U8 value); /**< Get element TLP1ENTS0I1VNNLP of register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG_TLP1MODEMRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1MODEMRST of register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG_TLP1MODEMRST(HWREG_U8 value); /**< Get element TLP1MODEMRST of register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I3LP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ENTS0I3LP of register TLP1EVSTATUS1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I3LP(HWREG_U8 value); /**< Get element TLP1ENTS0I3LP of register TLP1EVSTATUS1_REG */
+
+
+/** @brief TLP1EVSTATUS2_REG register description at address offset 0x5e33
+  *
+  *  TLP1 Event Status Register 2 (DEBUG)
+  */
+typedef struct
+{
+    HWREG_U8 TLP1COLDRST :1; /**<  */
+    HWREG_U8 TLP1COLDBOOT :1; /**<  */
+    HWREG_U8 TLP1COLDOFF :1; /**<  */
+    HWREG_U8 TLP1WARMRST :1; /**<  */
+    HWREG_U8 TLP1ENTS0IX :1; /**<  */
+    HWREG_U8 TLP1ENTS3 :1; /**<  */
+    HWREG_U8 TLP1EXTS0IX :1; /**<  */
+    HWREG_U8 TLP1EXTS3 :1; /**<  */
+} sTLP1EVSTATUS2_REGStructure;
+
+
+/** @brief TLP1EVSTATUS2_REG Bitfield widths
+*/
+#define lenTLP1EVSTATUS2_REG_TLP1COLDRST 1
+#define lenTLP1EVSTATUS2_REG_TLP1COLDBOOT 1
+#define lenTLP1EVSTATUS2_REG_TLP1COLDOFF 1
+#define lenTLP1EVSTATUS2_REG_TLP1WARMRST 1
+#define lenTLP1EVSTATUS2_REG_TLP1ENTS0IX 1
+#define lenTLP1EVSTATUS2_REG_TLP1ENTS3 1
+#define lenTLP1EVSTATUS2_REG_TLP1EXTS0IX 1
+#define lenTLP1EVSTATUS2_REG_TLP1EXTS3 1
+
+typedef enum
+{
+    TLP1EVSTATUS2_REG_LSB_TLP1COLDRST = 0,
+    TLP1EVSTATUS2_REG_LSB_TLP1COLDBOOT = 1,
+    TLP1EVSTATUS2_REG_LSB_TLP1COLDOFF = 2,
+    TLP1EVSTATUS2_REG_LSB_TLP1WARMRST = 3,
+    TLP1EVSTATUS2_REG_LSB_TLP1ENTS0IX = 4,
+    TLP1EVSTATUS2_REG_LSB_TLP1ENTS3 = 5,
+    TLP1EVSTATUS2_REG_LSB_TLP1EXTS0IX = 6,
+    TLP1EVSTATUS2_REG_LSB_TLP1EXTS3 = 7
+} eTLP1EVSTATUS2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1EVSTATUS2_REG_Content;
+    sTLP1EVSTATUS2_REGStructure TLP1EVSTATUS2_REG_Structure;
+} uTLP1EVSTATUS2_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG(HWREG_U8 value); /** Get complete register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1COLDRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDRST of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1COLDRST(HWREG_U8 value); /**< Get element TLP1COLDRST of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1COLDBOOT(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDBOOT of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1COLDBOOT(HWREG_U8 value); /**< Get element TLP1COLDBOOT of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1COLDOFF(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDOFF of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1COLDOFF(HWREG_U8 value); /**< Get element TLP1COLDOFF of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1WARMRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1WARMRST of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1WARMRST(HWREG_U8 value); /**< Get element TLP1WARMRST of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1ENTS0IX(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ENTS0IX of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1ENTS0IX(HWREG_U8 value); /**< Get element TLP1ENTS0IX of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1ENTS3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ENTS3 of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1ENTS3(HWREG_U8 value); /**< Get element TLP1ENTS3 of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1EXTS0IX(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1EXTS0IX of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1EXTS0IX(HWREG_U8 value); /**< Get element TLP1EXTS0IX of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1EXTS3(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1EXTS3 of register TLP1EVSTATUS2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1EXTS3(HWREG_U8 value); /**< Get element TLP1EXTS3 of register TLP1EVSTATUS2_REG */
+
+
+/** @brief TLP1EVSTATUS3_REG register description at address offset 0x5e34
+  *
+  *  TLP1 Event Status Register 3 (DEBUG)
+  */
+typedef struct
+{
+    HWREG_U8 TLP1MODEMRST :1; /**<  */
+    const HWREG_U8 :7; /**< Unused bitfield */
+} sTLP1EVSTATUS3_REGStructure;
+
+
+/** @brief TLP1EVSTATUS3_REG Bitfield widths
+*/
+#define lenTLP1EVSTATUS3_REG_TLP1MODEMRST 1
+
+typedef enum
+{
+    TLP1EVSTATUS3_REG_LSB_TLP1MODEMRST = 0
+} eTLP1EVSTATUS3_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1EVSTATUS3_REG_Content;
+    sTLP1EVSTATUS3_REGStructure TLP1EVSTATUS3_REG_Structure;
+} uTLP1EVSTATUS3_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS3_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1EVSTATUS3_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS3_REG(HWREG_U8 value); /** Get complete register TLP1EVSTATUS3_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS3_REG_TLP1MODEMRST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1MODEMRST of register TLP1EVSTATUS3_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS3_REG_TLP1MODEMRST(HWREG_U8 value); /**< Get element TLP1MODEMRST of register TLP1EVSTATUS3_REG */
+
+
+/** @brief DEV3_SETREGADR_REG register description at address offset 0x5e35
+  *
+  *  sVID Set Register Address Register
+  */
+typedef struct
+{
+    HWREG_U8 DEV3_SETREGADR :8; /**<  */
+} sDEV3_SETREGADR_REGStructure;
+
+
+/** @brief DEV3_SETREGADR_REG Bitfield widths
+*/
+#define lenDEV3_SETREGADR_REG_DEV3_SETREGADR 8
+
+typedef enum
+{
+    DEV3_SETREGADR_REG_LSB_DEV3_SETREGADR = 0
+} eDEV3_SETREGADR_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DEV3_SETREGADR_REG_Content;
+    sDEV3_SETREGADR_REGStructure DEV3_SETREGADR_REG_Structure;
+} uDEV3_SETREGADR_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV3_SETREGADR_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register DEV3_SETREGADR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_SETREGADR_REG(HWREG_U8 value); /** Get complete register DEV3_SETREGADR_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV3_SETREGADR_REG_DEV3_SETREGADR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element DEV3_SETREGADR of register DEV3_SETREGADR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_SETREGADR_REG_DEV3_SETREGADR(HWREG_U8 value); /**< Get element DEV3_SETREGADR of register DEV3_SETREGADR_REG */
+
+
+/** @brief TLP1TRACEINSTH_REG register description at address offset 0x5e36
+  *
+  *  TLP1 Trace Instruction Address High (DEBUG)
+  */
+typedef struct
+{
+    HWREG_U8 TLP1TRACEINST_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1TRACEINSTH_REGStructure;
+
+
+/** @brief TLP1TRACEINSTH_REG Bitfield widths
+*/
+#define lenTLP1TRACEINSTH_REG_TLP1TRACEINST_H 2
+
+typedef enum
+{
+    TLP1TRACEINSTH_REG_LSB_TLP1TRACEINST_H = 0
+} eTLP1TRACEINSTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1TRACEINSTH_REG_Content;
+    sTLP1TRACEINSTH_REGStructure TLP1TRACEINSTH_REG_Structure;
+} uTLP1TRACEINSTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1TRACEINSTH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1TRACEINSTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1TRACEINSTH_REG(HWREG_U8 value); /** Get complete register TLP1TRACEINSTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1TRACEINSTH_REG_TLP1TRACEINST_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1TRACEINST_H of register TLP1TRACEINSTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1TRACEINSTH_REG_TLP1TRACEINST_H(HWREG_U8 value); /**< Get element TLP1TRACEINST_H of register TLP1TRACEINSTH_REG */
+
+
+/** @brief TLP1TRACEINSTL_REG register description at address offset 0x5e37
+  *
+  *  TLP1 Trace Instruction Address Low (DEBUG)
+  */
+typedef struct
+{
+    HWREG_U8 TLP1TRACEINST_L :8; /**<  */
+} sTLP1TRACEINSTL_REGStructure;
+
+
+/** @brief TLP1TRACEINSTL_REG Bitfield widths
+*/
+#define lenTLP1TRACEINSTL_REG_TLP1TRACEINST_L 8
+
+typedef enum
+{
+    TLP1TRACEINSTL_REG_LSB_TLP1TRACEINST_L = 0
+} eTLP1TRACEINSTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1TRACEINSTL_REG_Content;
+    sTLP1TRACEINSTL_REGStructure TLP1TRACEINSTL_REG_Structure;
+} uTLP1TRACEINSTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1TRACEINSTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1TRACEINSTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1TRACEINSTL_REG(HWREG_U8 value); /** Get complete register TLP1TRACEINSTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1TRACEINSTL_REG_TLP1TRACEINST_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1TRACEINST_L of register TLP1TRACEINSTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1TRACEINSTL_REG_TLP1TRACEINST_L(HWREG_U8 value); /**< Get element TLP1TRACEINST_L of register TLP1TRACEINSTL_REG */
+
+
+/** @brief TLP1INSTMEMADDRH_REG register description at address offset 0x5e38
+  *
+  *  TLP1 Instruction Memory Address – High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1INSTMEMADDR_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1INSTMEMADDRH_REGStructure;
+
+
+/** @brief TLP1INSTMEMADDRH_REG Bitfield widths
+*/
+#define lenTLP1INSTMEMADDRH_REG_TLP1INSTMEMADDR_H 2
+
+typedef enum
+{
+    TLP1INSTMEMADDRH_REG_LSB_TLP1INSTMEMADDR_H = 0
+} eTLP1INSTMEMADDRH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1INSTMEMADDRH_REG_Content;
+    sTLP1INSTMEMADDRH_REGStructure TLP1INSTMEMADDRH_REG_Structure;
+} uTLP1INSTMEMADDRH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMADDRH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1INSTMEMADDRH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMADDRH_REG(HWREG_U8 value); /** Get complete register TLP1INSTMEMADDRH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMADDRH_REG_TLP1INSTMEMADDR_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1INSTMEMADDR_H of register TLP1INSTMEMADDRH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMADDRH_REG_TLP1INSTMEMADDR_H(HWREG_U8 value); /**< Get element TLP1INSTMEMADDR_H of register TLP1INSTMEMADDRH_REG */
+
+
+/** @brief TLP1INSTMEMADDRL_REG register description at address offset 0x5e39
+  *
+  *  TLP1 Instruction Memory Address – Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1INSTMEMADDR_L :8; /**<  */
+} sTLP1INSTMEMADDRL_REGStructure;
+
+
+/** @brief TLP1INSTMEMADDRL_REG Bitfield widths
+*/
+#define lenTLP1INSTMEMADDRL_REG_TLP1INSTMEMADDR_L 8
+
+typedef enum
+{
+    TLP1INSTMEMADDRL_REG_LSB_TLP1INSTMEMADDR_L = 0
+} eTLP1INSTMEMADDRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1INSTMEMADDRL_REG_Content;
+    sTLP1INSTMEMADDRL_REGStructure TLP1INSTMEMADDRL_REG_Structure;
+} uTLP1INSTMEMADDRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMADDRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1INSTMEMADDRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMADDRL_REG(HWREG_U8 value); /** Get complete register TLP1INSTMEMADDRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMADDRL_REG_TLP1INSTMEMADDR_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1INSTMEMADDR_L of register TLP1INSTMEMADDRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMADDRL_REG_TLP1INSTMEMADDR_L(HWREG_U8 value); /**< Get element TLP1INSTMEMADDR_L of register TLP1INSTMEMADDRL_REG */
+
+
+/** @brief TLP1INSTMEMDATAH_REG register description at address offset 0x5e3a
+  *
+  *  TLP1 Instruction Memory Index Data – High
+  */
+typedef struct
+{
+    const HWREG_U8 TLP1INSTMEMDATA_H :3; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sTLP1INSTMEMDATAH_REGStructure;
+
+
+/** @brief TLP1INSTMEMDATAH_REG Bitfield widths
+*/
+#define lenTLP1INSTMEMDATAH_REG_TLP1INSTMEMDATA_H 3
+
+typedef enum
+{
+    TLP1INSTMEMDATAH_REG_LSB_TLP1INSTMEMDATA_H = 0
+} eTLP1INSTMEMDATAH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1INSTMEMDATAH_REG_Content;
+    sTLP1INSTMEMDATAH_REGStructure TLP1INSTMEMDATAH_REG_Structure;
+} uTLP1INSTMEMDATAH_REG;
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMDATAH_REG(HWREG_U8 value); /** Get complete register TLP1INSTMEMDATAH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMDATAH_REG_TLP1INSTMEMDATA_H(HWREG_U8 value); /**< Get element TLP1INSTMEMDATA_H of register TLP1INSTMEMDATAH_REG */
+
+
+/** @brief TLP1INSTMEMDATAL_REG register description at address offset 0x5e3b
+  *
+  *  TLP1 Instruction Memory Index Data – Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1INSTMEMDATA_L :8; /**<  */
+} sTLP1INSTMEMDATAL_REGStructure;
+
+
+/** @brief TLP1INSTMEMDATAL_REG Bitfield widths
+*/
+#define lenTLP1INSTMEMDATAL_REG_TLP1INSTMEMDATA_L 8
+
+typedef enum
+{
+    TLP1INSTMEMDATAL_REG_LSB_TLP1INSTMEMDATA_L = 0
+} eTLP1INSTMEMDATAL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1INSTMEMDATAL_REG_Content;
+    sTLP1INSTMEMDATAL_REGStructure TLP1INSTMEMDATAL_REG_Structure;
+} uTLP1INSTMEMDATAL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMDATAL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1INSTMEMDATAL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMDATAL_REG(HWREG_U8 value); /** Get complete register TLP1INSTMEMDATAL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMDATAL_REG_TLP1INSTMEMDATA_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1INSTMEMDATA_L of register TLP1INSTMEMDATAL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMDATAL_REG_TLP1INSTMEMDATA_L(HWREG_U8 value); /**< Get element TLP1INSTMEMDATA_L of register TLP1INSTMEMDATAL_REG */
+
+
+/** @brief TLP1COLDBOOTH_REG register description at address offset 0x5e3c
+  *
+  *  TLP1 Cold Boot Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1COLDBOOTBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1COLDBOOTH_REGStructure;
+
+
+/** @brief TLP1COLDBOOTH_REG Bitfield widths
+*/
+#define lenTLP1COLDBOOTH_REG_TLP1COLDBOOTBASE_H 2
+
+typedef enum
+{
+    TLP1COLDBOOTH_REG_LSB_TLP1COLDBOOTBASE_H = 0
+} eTLP1COLDBOOTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1COLDBOOTH_REG_Content;
+    sTLP1COLDBOOTH_REGStructure TLP1COLDBOOTH_REG_Structure;
+} uTLP1COLDBOOTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDBOOTH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1COLDBOOTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDBOOTH_REG(HWREG_U8 value); /** Get complete register TLP1COLDBOOTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDBOOTH_REG_TLP1COLDBOOTBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDBOOTBASE_H of register TLP1COLDBOOTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDBOOTH_REG_TLP1COLDBOOTBASE_H(HWREG_U8 value); /**< Get element TLP1COLDBOOTBASE_H of register TLP1COLDBOOTH_REG */
+
+
+/** @brief TLP1COLDBOOTL_REG register description at address offset 0x5e3d
+  *
+  *  TLP1 Cold Boot Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1COLDBOOTBASE_L :8; /**<  */
+} sTLP1COLDBOOTL_REGStructure;
+
+
+/** @brief TLP1COLDBOOTL_REG Bitfield widths
+*/
+#define lenTLP1COLDBOOTL_REG_TLP1COLDBOOTBASE_L 8
+
+typedef enum
+{
+    TLP1COLDBOOTL_REG_LSB_TLP1COLDBOOTBASE_L = 0
+} eTLP1COLDBOOTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1COLDBOOTL_REG_Content;
+    sTLP1COLDBOOTL_REGStructure TLP1COLDBOOTL_REG_Structure;
+} uTLP1COLDBOOTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDBOOTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1COLDBOOTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDBOOTL_REG(HWREG_U8 value); /** Get complete register TLP1COLDBOOTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDBOOTL_REG_TLP1COLDBOOTBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDBOOTBASE_L of register TLP1COLDBOOTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDBOOTL_REG_TLP1COLDBOOTBASE_L(HWREG_U8 value); /**< Get element TLP1COLDBOOTBASE_L of register TLP1COLDBOOTL_REG */
+
+
+/** @brief TLP1COLDOFFH_REG register description at address offset 0x5e3e
+  *
+  *  TLP1 Cold Off Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1COLDOFFBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1COLDOFFH_REGStructure;
+
+
+/** @brief TLP1COLDOFFH_REG Bitfield widths
+*/
+#define lenTLP1COLDOFFH_REG_TLP1COLDOFFBASE_H 2
+
+typedef enum
+{
+    TLP1COLDOFFH_REG_LSB_TLP1COLDOFFBASE_H = 0
+} eTLP1COLDOFFH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1COLDOFFH_REG_Content;
+    sTLP1COLDOFFH_REGStructure TLP1COLDOFFH_REG_Structure;
+} uTLP1COLDOFFH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDOFFH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1COLDOFFH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDOFFH_REG(HWREG_U8 value); /** Get complete register TLP1COLDOFFH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDOFFH_REG_TLP1COLDOFFBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDOFFBASE_H of register TLP1COLDOFFH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDOFFH_REG_TLP1COLDOFFBASE_H(HWREG_U8 value); /**< Get element TLP1COLDOFFBASE_H of register TLP1COLDOFFH_REG */
+
+
+/** @brief TLP1COLDOFFL_REG register description at address offset 0x5e3f
+  *
+  *  TLP1 Cold Off Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1COLDOFFBASE_L :8; /**<  */
+} sTLP1COLDOFFL_REGStructure;
+
+
+/** @brief TLP1COLDOFFL_REG Bitfield widths
+*/
+#define lenTLP1COLDOFFL_REG_TLP1COLDOFFBASE_L 8
+
+typedef enum
+{
+    TLP1COLDOFFL_REG_LSB_TLP1COLDOFFBASE_L = 0
+} eTLP1COLDOFFL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1COLDOFFL_REG_Content;
+    sTLP1COLDOFFL_REGStructure TLP1COLDOFFL_REG_Structure;
+} uTLP1COLDOFFL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDOFFL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1COLDOFFL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDOFFL_REG(HWREG_U8 value); /** Get complete register TLP1COLDOFFL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDOFFL_REG_TLP1COLDOFFBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDOFFBASE_L of register TLP1COLDOFFL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDOFFL_REG_TLP1COLDOFFBASE_L(HWREG_U8 value); /**< Get element TLP1COLDOFFBASE_L of register TLP1COLDOFFL_REG */
+
+
+/** @brief TLP1COLDRSTH_REG register description at address offset 0x5e40
+  *
+  *  TLP1 Cold Reset Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1COLDRSTBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1COLDRSTH_REGStructure;
+
+
+/** @brief TLP1COLDRSTH_REG Bitfield widths
+*/
+#define lenTLP1COLDRSTH_REG_TLP1COLDRSTBASE_H 2
+
+typedef enum
+{
+    TLP1COLDRSTH_REG_LSB_TLP1COLDRSTBASE_H = 0
+} eTLP1COLDRSTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1COLDRSTH_REG_Content;
+    sTLP1COLDRSTH_REGStructure TLP1COLDRSTH_REG_Structure;
+} uTLP1COLDRSTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDRSTH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1COLDRSTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDRSTH_REG(HWREG_U8 value); /** Get complete register TLP1COLDRSTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDRSTH_REG_TLP1COLDRSTBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDRSTBASE_H of register TLP1COLDRSTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDRSTH_REG_TLP1COLDRSTBASE_H(HWREG_U8 value); /**< Get element TLP1COLDRSTBASE_H of register TLP1COLDRSTH_REG */
+
+
+/** @brief TLP1COLDRSTL_REG register description at address offset 0x5e41
+  *
+  *  TLP1 Cold Reset Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1COLDRSTBASE_L :8; /**<  */
+} sTLP1COLDRSTL_REGStructure;
+
+
+/** @brief TLP1COLDRSTL_REG Bitfield widths
+*/
+#define lenTLP1COLDRSTL_REG_TLP1COLDRSTBASE_L 8
+
+typedef enum
+{
+    TLP1COLDRSTL_REG_LSB_TLP1COLDRSTBASE_L = 0
+} eTLP1COLDRSTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1COLDRSTL_REG_Content;
+    sTLP1COLDRSTL_REGStructure TLP1COLDRSTL_REG_Structure;
+} uTLP1COLDRSTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDRSTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1COLDRSTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDRSTL_REG(HWREG_U8 value); /** Get complete register TLP1COLDRSTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDRSTL_REG_TLP1COLDRSTBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1COLDRSTBASE_L of register TLP1COLDRSTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDRSTL_REG_TLP1COLDRSTBASE_L(HWREG_U8 value); /**< Get element TLP1COLDRSTBASE_L of register TLP1COLDRSTL_REG */
+
+
+/** @brief TLP1WARMRSTH_REG register description at address offset 0x5e42
+  *
+  *  TLP1 Warm Reset Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1WARMRSTBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1WARMRSTH_REGStructure;
+
+
+/** @brief TLP1WARMRSTH_REG Bitfield widths
+*/
+#define lenTLP1WARMRSTH_REG_TLP1WARMRSTBASE_H 2
+
+typedef enum
+{
+    TLP1WARMRSTH_REG_LSB_TLP1WARMRSTBASE_H = 0
+} eTLP1WARMRSTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1WARMRSTH_REG_Content;
+    sTLP1WARMRSTH_REGStructure TLP1WARMRSTH_REG_Structure;
+} uTLP1WARMRSTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1WARMRSTH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1WARMRSTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1WARMRSTH_REG(HWREG_U8 value); /** Get complete register TLP1WARMRSTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1WARMRSTH_REG_TLP1WARMRSTBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1WARMRSTBASE_H of register TLP1WARMRSTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1WARMRSTH_REG_TLP1WARMRSTBASE_H(HWREG_U8 value); /**< Get element TLP1WARMRSTBASE_H of register TLP1WARMRSTH_REG */
+
+
+/** @brief TLP1WARMRSTL_REG register description at address offset 0x5e43
+  *
+  *  TLP1 Warm Reset Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1WARMRSTBASE_L :8; /**<  */
+} sTLP1WARMRSTL_REGStructure;
+
+
+/** @brief TLP1WARMRSTL_REG Bitfield widths
+*/
+#define lenTLP1WARMRSTL_REG_TLP1WARMRSTBASE_L 8
+
+typedef enum
+{
+    TLP1WARMRSTL_REG_LSB_TLP1WARMRSTBASE_L = 0
+} eTLP1WARMRSTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1WARMRSTL_REG_Content;
+    sTLP1WARMRSTL_REGStructure TLP1WARMRSTL_REG_Structure;
+} uTLP1WARMRSTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1WARMRSTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1WARMRSTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1WARMRSTL_REG(HWREG_U8 value); /** Get complete register TLP1WARMRSTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1WARMRSTL_REG_TLP1WARMRSTBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1WARMRSTBASE_L of register TLP1WARMRSTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1WARMRSTL_REG_TLP1WARMRSTBASE_L(HWREG_U8 value); /**< Get element TLP1WARMRSTBASE_L of register TLP1WARMRSTL_REG */
+
+
+/** @brief TLP1ESBS0I1H_REG register description at address offset 0x5e44
+  *
+  *  TLP1 Enter Standby (S0i1) Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I1BASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1ESBS0I1H_REGStructure;
+
+
+/** @brief TLP1ESBS0I1H_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I1H_REG_TLP1ESBS0I1BASE_H 2
+
+typedef enum
+{
+    TLP1ESBS0I1H_REG_LSB_TLP1ESBS0I1BASE_H = 0
+} eTLP1ESBS0I1H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I1H_REG_Content;
+    sTLP1ESBS0I1H_REGStructure TLP1ESBS0I1H_REG_Structure;
+} uTLP1ESBS0I1H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1H_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I1H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1H_REG_TLP1ESBS0I1BASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I1BASE_H of register TLP1ESBS0I1H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1H_REG_TLP1ESBS0I1BASE_H(HWREG_U8 value); /**< Get element TLP1ESBS0I1BASE_H of register TLP1ESBS0I1H_REG */
+
+
+/** @brief TLP1ESBS0I1L_REG register description at address offset 0x5e45
+  *
+  *  TLP1 Enter Standby (S0i1) Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I1BASE_L :8; /**<  */
+} sTLP1ESBS0I1L_REGStructure;
+
+
+/** @brief TLP1ESBS0I1L_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I1L_REG_TLP1ESBS0I1BASE_L 8
+
+typedef enum
+{
+    TLP1ESBS0I1L_REG_LSB_TLP1ESBS0I1BASE_L = 0
+} eTLP1ESBS0I1L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I1L_REG_Content;
+    sTLP1ESBS0I1L_REGStructure TLP1ESBS0I1L_REG_Structure;
+} uTLP1ESBS0I1L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1L_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I1L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1L_REG_TLP1ESBS0I1BASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I1BASE_L of register TLP1ESBS0I1L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1L_REG_TLP1ESBS0I1BASE_L(HWREG_U8 value); /**< Get element TLP1ESBS0I1BASE_L of register TLP1ESBS0I1L_REG */
+
+
+/** @brief TLP1ESBS0I1VNNH_REG register description at address offset 0x5e46
+  *
+  *  TLP1 Enter Standby (S0i1-VNN) Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I1VNNBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1ESBS0I1VNNH_REGStructure;
+
+
+/** @brief TLP1ESBS0I1VNNH_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I1VNNH_REG_TLP1ESBS0I1VNNBASE_H 2
+
+typedef enum
+{
+    TLP1ESBS0I1VNNH_REG_LSB_TLP1ESBS0I1VNNBASE_H = 0
+} eTLP1ESBS0I1VNNH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I1VNNH_REG_Content;
+    sTLP1ESBS0I1VNNH_REGStructure TLP1ESBS0I1VNNH_REG_Structure;
+} uTLP1ESBS0I1VNNH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I1VNNH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNH_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I1VNNH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNH_REG_TLP1ESBS0I1VNNBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I1VNNBASE_H of register TLP1ESBS0I1VNNH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNH_REG_TLP1ESBS0I1VNNBASE_H(HWREG_U8 value); /**< Get element TLP1ESBS0I1VNNBASE_H of register TLP1ESBS0I1VNNH_REG */
+
+
+/** @brief TLP1ESBS0I1VNNL_REG register description at address offset 0x5e47
+  *
+  *  TLP1 Enter Standby (S0i1-VNN) Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I1VNNBASE_L :8; /**<  */
+} sTLP1ESBS0I1VNNL_REGStructure;
+
+
+/** @brief TLP1ESBS0I1VNNL_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I1VNNL_REG_TLP1ESBS0I1VNNBASE_L 8
+
+typedef enum
+{
+    TLP1ESBS0I1VNNL_REG_LSB_TLP1ESBS0I1VNNBASE_L = 0
+} eTLP1ESBS0I1VNNL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I1VNNL_REG_Content;
+    sTLP1ESBS0I1VNNL_REGStructure TLP1ESBS0I1VNNL_REG_Structure;
+} uTLP1ESBS0I1VNNL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I1VNNL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNL_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I1VNNL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNL_REG_TLP1ESBS0I1VNNBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I1VNNBASE_L of register TLP1ESBS0I1VNNL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNL_REG_TLP1ESBS0I1VNNBASE_L(HWREG_U8 value); /**< Get element TLP1ESBS0I1VNNBASE_L of register TLP1ESBS0I1VNNL_REG */
+
+
+/** @brief TLP1ESBS0I1VNNLPH_REG register description at address offset 0x5e48
+  *
+  *  TLP1 Enter Standby (S0i1-VNNLP) Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I1VNNLPBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1ESBS0I1VNNLPH_REGStructure;
+
+
+/** @brief TLP1ESBS0I1VNNLPH_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I1VNNLPH_REG_TLP1ESBS0I1VNNLPBASE_H 2
+
+typedef enum
+{
+    TLP1ESBS0I1VNNLPH_REG_LSB_TLP1ESBS0I1VNNLPBASE_H = 0
+} eTLP1ESBS0I1VNNLPH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I1VNNLPH_REG_Content;
+    sTLP1ESBS0I1VNNLPH_REGStructure TLP1ESBS0I1VNNLPH_REG_Structure;
+} uTLP1ESBS0I1VNNLPH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNLPH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I1VNNLPH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNLPH_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I1VNNLPH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNLPH_REG_TLP1ESBS0I1VNNLPBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I1VNNLPBASE_H of register TLP1ESBS0I1VNNLPH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNLPH_REG_TLP1ESBS0I1VNNLPBASE_H(HWREG_U8 value); /**< Get element TLP1ESBS0I1VNNLPBASE_H of register TLP1ESBS0I1VNNLPH_REG */
+
+
+/** @brief TLP1ESBS0I1VNNLPL_REG register description at address offset 0x5e49
+  *
+  *  TLP1 Enter Standby (S0i1-VNNLP) Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I1VNNLPBASE_L :8; /**<  */
+} sTLP1ESBS0I1VNNLPL_REGStructure;
+
+
+/** @brief TLP1ESBS0I1VNNLPL_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I1VNNLPL_REG_TLP1ESBS0I1VNNLPBASE_L 8
+
+typedef enum
+{
+    TLP1ESBS0I1VNNLPL_REG_LSB_TLP1ESBS0I1VNNLPBASE_L = 0
+} eTLP1ESBS0I1VNNLPL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I1VNNLPL_REG_Content;
+    sTLP1ESBS0I1VNNLPL_REGStructure TLP1ESBS0I1VNNLPL_REG_Structure;
+} uTLP1ESBS0I1VNNLPL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNLPL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I1VNNLPL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNLPL_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I1VNNLPL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNLPL_REG_TLP1ESBS0I1VNNLPBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I1VNNLPBASE_L of register TLP1ESBS0I1VNNLPL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNLPL_REG_TLP1ESBS0I1VNNLPBASE_L(HWREG_U8 value); /**< Get element TLP1ESBS0I1VNNLPBASE_L of register TLP1ESBS0I1VNNLPL_REG */
+
+
+/** @brief TLP1ESBS0I2H_REG register description at address offset 0x5e4a
+  *
+  *  TLP1 Enter Standby (S0i2) Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I2BASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1ESBS0I2H_REGStructure;
+
+
+/** @brief TLP1ESBS0I2H_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I2H_REG_TLP1ESBS0I2BASE_H 2
+
+typedef enum
+{
+    TLP1ESBS0I2H_REG_LSB_TLP1ESBS0I2BASE_H = 0
+} eTLP1ESBS0I2H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I2H_REG_Content;
+    sTLP1ESBS0I2H_REGStructure TLP1ESBS0I2H_REG_Structure;
+} uTLP1ESBS0I2H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I2H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I2H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I2H_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I2H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I2H_REG_TLP1ESBS0I2BASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I2BASE_H of register TLP1ESBS0I2H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I2H_REG_TLP1ESBS0I2BASE_H(HWREG_U8 value); /**< Get element TLP1ESBS0I2BASE_H of register TLP1ESBS0I2H_REG */
+
+
+/** @brief TLP1ESBS0I2L_REG register description at address offset 0x5e4b
+  *
+  *  TLP1 Enter Standby (S0i2) Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I2BASE_L :8; /**<  */
+} sTLP1ESBS0I2L_REGStructure;
+
+
+/** @brief TLP1ESBS0I2L_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I2L_REG_TLP1ESBS0I2BASE_L 8
+
+typedef enum
+{
+    TLP1ESBS0I2L_REG_LSB_TLP1ESBS0I2BASE_L = 0
+} eTLP1ESBS0I2L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I2L_REG_Content;
+    sTLP1ESBS0I2L_REGStructure TLP1ESBS0I2L_REG_Structure;
+} uTLP1ESBS0I2L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I2L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I2L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I2L_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I2L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I2L_REG_TLP1ESBS0I2BASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I2BASE_L of register TLP1ESBS0I2L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I2L_REG_TLP1ESBS0I2BASE_L(HWREG_U8 value); /**< Get element TLP1ESBS0I2BASE_L of register TLP1ESBS0I2L_REG */
+
+
+/** @brief TLP1ESBS0I3H_REG register description at address offset 0x5e4c
+  *
+  *  TLP1 Enter Standby (S0i3) Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I3BASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1ESBS0I3H_REGStructure;
+
+
+/** @brief TLP1ESBS0I3H_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I3H_REG_TLP1ESBS0I3BASE_H 2
+
+typedef enum
+{
+    TLP1ESBS0I3H_REG_LSB_TLP1ESBS0I3BASE_H = 0
+} eTLP1ESBS0I3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I3H_REG_Content;
+    sTLP1ESBS0I3H_REGStructure TLP1ESBS0I3H_REG_Structure;
+} uTLP1ESBS0I3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3H_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3H_REG_TLP1ESBS0I3BASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I3BASE_H of register TLP1ESBS0I3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3H_REG_TLP1ESBS0I3BASE_H(HWREG_U8 value); /**< Get element TLP1ESBS0I3BASE_H of register TLP1ESBS0I3H_REG */
+
+
+/** @brief TLP1ESBS0I3L_REG register description at address offset 0x5e4d
+  *
+  *  TLP1 Enter Standby (S0i3) Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I3BASE_L :8; /**<  */
+} sTLP1ESBS0I3L_REGStructure;
+
+
+/** @brief TLP1ESBS0I3L_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I3L_REG_TLP1ESBS0I3BASE_L 8
+
+typedef enum
+{
+    TLP1ESBS0I3L_REG_LSB_TLP1ESBS0I3BASE_L = 0
+} eTLP1ESBS0I3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I3L_REG_Content;
+    sTLP1ESBS0I3L_REGStructure TLP1ESBS0I3L_REG_Structure;
+} uTLP1ESBS0I3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3L_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I3L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3L_REG_TLP1ESBS0I3BASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I3BASE_L of register TLP1ESBS0I3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3L_REG_TLP1ESBS0I3BASE_L(HWREG_U8 value); /**< Get element TLP1ESBS0I3BASE_L of register TLP1ESBS0I3L_REG */
+
+
+/** @brief TLP1ESBS0I3LPH_REG register description at address offset 0x5e4e
+  *
+  *  TLP1 Enter Standby (S0i3-LP) Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I3LPBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1ESBS0I3LPH_REGStructure;
+
+
+/** @brief TLP1ESBS0I3LPH_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I3LPH_REG_TLP1ESBS0I3LPBASE_H 2
+
+typedef enum
+{
+    TLP1ESBS0I3LPH_REG_LSB_TLP1ESBS0I3LPBASE_H = 0
+} eTLP1ESBS0I3LPH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I3LPH_REG_Content;
+    sTLP1ESBS0I3LPH_REGStructure TLP1ESBS0I3LPH_REG_Structure;
+} uTLP1ESBS0I3LPH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3LPH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I3LPH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3LPH_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I3LPH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3LPH_REG_TLP1ESBS0I3LPBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I3LPBASE_H of register TLP1ESBS0I3LPH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3LPH_REG_TLP1ESBS0I3LPBASE_H(HWREG_U8 value); /**< Get element TLP1ESBS0I3LPBASE_H of register TLP1ESBS0I3LPH_REG */
+
+
+/** @brief TLP1ESBS0I3LPL_REG register description at address offset 0x5e4f
+  *
+  *  TLP1 Enter Standby (S0i3-LP) Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0I3LPBASE_L :8; /**<  */
+} sTLP1ESBS0I3LPL_REGStructure;
+
+
+/** @brief TLP1ESBS0I3LPL_REG Bitfield widths
+*/
+#define lenTLP1ESBS0I3LPL_REG_TLP1ESBS0I3LPBASE_L 8
+
+typedef enum
+{
+    TLP1ESBS0I3LPL_REG_LSB_TLP1ESBS0I3LPBASE_L = 0
+} eTLP1ESBS0I3LPL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0I3LPL_REG_Content;
+    sTLP1ESBS0I3LPL_REGStructure TLP1ESBS0I3LPL_REG_Structure;
+} uTLP1ESBS0I3LPL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3LPL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0I3LPL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3LPL_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0I3LPL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3LPL_REG_TLP1ESBS0I3LPBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0I3LPBASE_L of register TLP1ESBS0I3LPL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3LPL_REG_TLP1ESBS0I3LPBASE_L(HWREG_U8 value); /**< Get element TLP1ESBS0I3LPBASE_L of register TLP1ESBS0I3LPL_REG */
+
+
+/** @brief TLP1EXSBH_REG register description at address offset 0x5e50
+  *
+  *  TLP1 Exit Standby Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1EXSBBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1EXSBH_REGStructure;
+
+
+/** @brief TLP1EXSBH_REG Bitfield widths
+*/
+#define lenTLP1EXSBH_REG_TLP1EXSBBASE_H 2
+
+typedef enum
+{
+    TLP1EXSBH_REG_LSB_TLP1EXSBBASE_H = 0
+} eTLP1EXSBH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1EXSBH_REG_Content;
+    sTLP1EXSBH_REGStructure TLP1EXSBH_REG_Structure;
+} uTLP1EXSBH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1EXSBH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBH_REG(HWREG_U8 value); /** Get complete register TLP1EXSBH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBH_REG_TLP1EXSBBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1EXSBBASE_H of register TLP1EXSBH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBH_REG_TLP1EXSBBASE_H(HWREG_U8 value); /**< Get element TLP1EXSBBASE_H of register TLP1EXSBH_REG */
+
+
+/** @brief TLP1EXSBL_REG register description at address offset 0x5e51
+  *
+  *  TLP1 Exit Standby Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1EXSBBASE_L :8; /**<  */
+} sTLP1EXSBL_REGStructure;
+
+
+/** @brief TLP1EXSBL_REG Bitfield widths
+*/
+#define lenTLP1EXSBL_REG_TLP1EXSBBASE_L 8
+
+typedef enum
+{
+    TLP1EXSBL_REG_LSB_TLP1EXSBBASE_L = 0
+} eTLP1EXSBL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1EXSBL_REG_Content;
+    sTLP1EXSBL_REGStructure TLP1EXSBL_REG_Structure;
+} uTLP1EXSBL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1EXSBL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBL_REG(HWREG_U8 value); /** Get complete register TLP1EXSBL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBL_REG_TLP1EXSBBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1EXSBBASE_L of register TLP1EXSBL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBL_REG_TLP1EXSBBASE_L(HWREG_U8 value); /**< Get element TLP1EXSBBASE_L of register TLP1EXSBL_REG */
+
+
+/** @brief TLP1ESBS0IXH_REG register description at address offset 0x5e52
+  *
+  *  TLP1 Enter SOC S0IX Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0IXBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1ESBS0IXH_REGStructure;
+
+
+/** @brief TLP1ESBS0IXH_REG Bitfield widths
+*/
+#define lenTLP1ESBS0IXH_REG_TLP1ESBS0IXBASE_H 2
+
+typedef enum
+{
+    TLP1ESBS0IXH_REG_LSB_TLP1ESBS0IXBASE_H = 0
+} eTLP1ESBS0IXH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0IXH_REG_Content;
+    sTLP1ESBS0IXH_REGStructure TLP1ESBS0IXH_REG_Structure;
+} uTLP1ESBS0IXH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0IXH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0IXH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0IXH_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0IXH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0IXH_REG_TLP1ESBS0IXBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0IXBASE_H of register TLP1ESBS0IXH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0IXH_REG_TLP1ESBS0IXBASE_H(HWREG_U8 value); /**< Get element TLP1ESBS0IXBASE_H of register TLP1ESBS0IXH_REG */
+
+
+/** @brief TLP1ESBS0IXL_REG register description at address offset 0x5e53
+  *
+  *  TLP1 Enter SOC S0IX Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS0IXBASE_L :8; /**<  */
+} sTLP1ESBS0IXL_REGStructure;
+
+
+/** @brief TLP1ESBS0IXL_REG Bitfield widths
+*/
+#define lenTLP1ESBS0IXL_REG_TLP1ESBS0IXBASE_L 8
+
+typedef enum
+{
+    TLP1ESBS0IXL_REG_LSB_TLP1ESBS0IXBASE_L = 0
+} eTLP1ESBS0IXL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS0IXL_REG_Content;
+    sTLP1ESBS0IXL_REGStructure TLP1ESBS0IXL_REG_Structure;
+} uTLP1ESBS0IXL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0IXL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS0IXL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0IXL_REG(HWREG_U8 value); /** Get complete register TLP1ESBS0IXL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0IXL_REG_TLP1ESBS0IXBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS0IXBASE_L of register TLP1ESBS0IXL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0IXL_REG_TLP1ESBS0IXBASE_L(HWREG_U8 value); /**< Get element TLP1ESBS0IXBASE_L of register TLP1ESBS0IXL_REG */
+
+
+/** @brief TLP1ESBS3H_REG register description at address offset 0x5e54
+  *
+  *  TLP1 Enter SOC S3 Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS3BASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1ESBS3H_REGStructure;
+
+
+/** @brief TLP1ESBS3H_REG Bitfield widths
+*/
+#define lenTLP1ESBS3H_REG_TLP1ESBS3BASE_H 2
+
+typedef enum
+{
+    TLP1ESBS3H_REG_LSB_TLP1ESBS3BASE_H = 0
+} eTLP1ESBS3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS3H_REG_Content;
+    sTLP1ESBS3H_REGStructure TLP1ESBS3H_REG_Structure;
+} uTLP1ESBS3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS3H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS3H_REG(HWREG_U8 value); /** Get complete register TLP1ESBS3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS3H_REG_TLP1ESBS3BASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS3BASE_H of register TLP1ESBS3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS3H_REG_TLP1ESBS3BASE_H(HWREG_U8 value); /**< Get element TLP1ESBS3BASE_H of register TLP1ESBS3H_REG */
+
+
+/** @brief TLP1ESBS3L_REG register description at address offset 0x5e55
+  *
+  *  TLP1 Enter SOC S3 Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1ESBS3BASE_L :8; /**<  */
+} sTLP1ESBS3L_REGStructure;
+
+
+/** @brief TLP1ESBS3L_REG Bitfield widths
+*/
+#define lenTLP1ESBS3L_REG_TLP1ESBS3BASE_L 8
+
+typedef enum
+{
+    TLP1ESBS3L_REG_LSB_TLP1ESBS3BASE_L = 0
+} eTLP1ESBS3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1ESBS3L_REG_Content;
+    sTLP1ESBS3L_REGStructure TLP1ESBS3L_REG_Structure;
+} uTLP1ESBS3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS3L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1ESBS3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS3L_REG(HWREG_U8 value); /** Get complete register TLP1ESBS3L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS3L_REG_TLP1ESBS3BASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1ESBS3BASE_L of register TLP1ESBS3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS3L_REG_TLP1ESBS3BASE_L(HWREG_U8 value); /**< Get element TLP1ESBS3BASE_L of register TLP1ESBS3L_REG */
+
+
+/** @brief TLP1EXSBS0IXH_REG register description at address offset 0x5e56
+  *
+  *  TLP1 Exit SOC S0IX Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1EXS0IXBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1EXSBS0IXH_REGStructure;
+
+
+/** @brief TLP1EXSBS0IXH_REG Bitfield widths
+*/
+#define lenTLP1EXSBS0IXH_REG_TLP1EXS0IXBASE_H 2
+
+typedef enum
+{
+    TLP1EXSBS0IXH_REG_LSB_TLP1EXS0IXBASE_H = 0
+} eTLP1EXSBS0IXH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1EXSBS0IXH_REG_Content;
+    sTLP1EXSBS0IXH_REGStructure TLP1EXSBS0IXH_REG_Structure;
+} uTLP1EXSBS0IXH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS0IXH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1EXSBS0IXH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS0IXH_REG(HWREG_U8 value); /** Get complete register TLP1EXSBS0IXH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS0IXH_REG_TLP1EXS0IXBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1EXS0IXBASE_H of register TLP1EXSBS0IXH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS0IXH_REG_TLP1EXS0IXBASE_H(HWREG_U8 value); /**< Get element TLP1EXS0IXBASE_H of register TLP1EXSBS0IXH_REG */
+
+
+/** @brief TLP1EXSBS0IXL_REG register description at address offset 0x5e57
+  *
+  *  TLP1 Exit SOC S0IX Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1EXS0IXBASE_L :8; /**<  */
+} sTLP1EXSBS0IXL_REGStructure;
+
+
+/** @brief TLP1EXSBS0IXL_REG Bitfield widths
+*/
+#define lenTLP1EXSBS0IXL_REG_TLP1EXS0IXBASE_L 8
+
+typedef enum
+{
+    TLP1EXSBS0IXL_REG_LSB_TLP1EXS0IXBASE_L = 0
+} eTLP1EXSBS0IXL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1EXSBS0IXL_REG_Content;
+    sTLP1EXSBS0IXL_REGStructure TLP1EXSBS0IXL_REG_Structure;
+} uTLP1EXSBS0IXL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS0IXL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1EXSBS0IXL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS0IXL_REG(HWREG_U8 value); /** Get complete register TLP1EXSBS0IXL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS0IXL_REG_TLP1EXS0IXBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1EXS0IXBASE_L of register TLP1EXSBS0IXL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS0IXL_REG_TLP1EXS0IXBASE_L(HWREG_U8 value); /**< Get element TLP1EXS0IXBASE_L of register TLP1EXSBS0IXL_REG */
+
+
+/** @brief TLP1EXSBS3H_REG register description at address offset 0x5e58
+  *
+  *  TLP1 Exit SOC S3 Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1EXS3BASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1EXSBS3H_REGStructure;
+
+
+/** @brief TLP1EXSBS3H_REG Bitfield widths
+*/
+#define lenTLP1EXSBS3H_REG_TLP1EXS3BASE_H 2
+
+typedef enum
+{
+    TLP1EXSBS3H_REG_LSB_TLP1EXS3BASE_H = 0
+} eTLP1EXSBS3H_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1EXSBS3H_REG_Content;
+    sTLP1EXSBS3H_REGStructure TLP1EXSBS3H_REG_Structure;
+} uTLP1EXSBS3H_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS3H_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1EXSBS3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS3H_REG(HWREG_U8 value); /** Get complete register TLP1EXSBS3H_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS3H_REG_TLP1EXS3BASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1EXS3BASE_H of register TLP1EXSBS3H_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS3H_REG_TLP1EXS3BASE_H(HWREG_U8 value); /**< Get element TLP1EXS3BASE_H of register TLP1EXSBS3H_REG */
+
+
+/** @brief TLP1EXSBS3L_REG register description at address offset 0x5e59
+  *
+  *  TLP1 Exit SOC S3 Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1EXS3BASE_L :8; /**<  */
+} sTLP1EXSBS3L_REGStructure;
+
+
+/** @brief TLP1EXSBS3L_REG Bitfield widths
+*/
+#define lenTLP1EXSBS3L_REG_TLP1EXS3BASE_L 8
+
+typedef enum
+{
+    TLP1EXSBS3L_REG_LSB_TLP1EXS3BASE_L = 0
+} eTLP1EXSBS3L_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1EXSBS3L_REG_Content;
+    sTLP1EXSBS3L_REGStructure TLP1EXSBS3L_REG_Structure;
+} uTLP1EXSBS3L_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS3L_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1EXSBS3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS3L_REG(HWREG_U8 value); /** Get complete register TLP1EXSBS3L_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS3L_REG_TLP1EXS3BASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1EXS3BASE_L of register TLP1EXSBS3L_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS3L_REG_TLP1EXS3BASE_L(HWREG_U8 value); /**< Get element TLP1EXS3BASE_L of register TLP1EXSBS3L_REG */
+
+
+/** @brief TLP1MODEMRSTH_REG register description at address offset 0x5e5a
+  *
+  *  TLP1 Modem Reset Base Address Register High
+  */
+typedef struct
+{
+    HWREG_U8 TLP1MODEMRSTBASE_H :2; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP1MODEMRSTH_REGStructure;
+
+
+/** @brief TLP1MODEMRSTH_REG Bitfield widths
+*/
+#define lenTLP1MODEMRSTH_REG_TLP1MODEMRSTBASE_H 2
+
+typedef enum
+{
+    TLP1MODEMRSTH_REG_LSB_TLP1MODEMRSTBASE_H = 0
+} eTLP1MODEMRSTH_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1MODEMRSTH_REG_Content;
+    sTLP1MODEMRSTH_REGStructure TLP1MODEMRSTH_REG_Structure;
+} uTLP1MODEMRSTH_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1MODEMRSTH_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1MODEMRSTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1MODEMRSTH_REG(HWREG_U8 value); /** Get complete register TLP1MODEMRSTH_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1MODEMRSTH_REG_TLP1MODEMRSTBASE_H(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1MODEMRSTBASE_H of register TLP1MODEMRSTH_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1MODEMRSTH_REG_TLP1MODEMRSTBASE_H(HWREG_U8 value); /**< Get element TLP1MODEMRSTBASE_H of register TLP1MODEMRSTH_REG */
+
+
+/** @brief TLP1MODEMRSTL_REG register description at address offset 0x5e5b
+  *
+  *  TLP1 Modem Reset Base Address Register Low
+  */
+typedef struct
+{
+    HWREG_U8 TLP1MODEMRSTBASE_L :8; /**<  */
+} sTLP1MODEMRSTL_REGStructure;
+
+
+/** @brief TLP1MODEMRSTL_REG Bitfield widths
+*/
+#define lenTLP1MODEMRSTL_REG_TLP1MODEMRSTBASE_L 8
+
+typedef enum
+{
+    TLP1MODEMRSTL_REG_LSB_TLP1MODEMRSTBASE_L = 0
+} eTLP1MODEMRSTL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1MODEMRSTL_REG_Content;
+    sTLP1MODEMRSTL_REGStructure TLP1MODEMRSTL_REG_Structure;
+} uTLP1MODEMRSTL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1MODEMRSTL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1MODEMRSTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1MODEMRSTL_REG(HWREG_U8 value); /** Get complete register TLP1MODEMRSTL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1MODEMRSTL_REG_TLP1MODEMRSTBASE_L(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP1MODEMRSTBASE_L of register TLP1MODEMRSTL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1MODEMRSTL_REG_TLP1MODEMRSTBASE_L(HWREG_U8 value); /**< Get element TLP1MODEMRSTBASE_L of register TLP1MODEMRSTL_REG */
+
+
+/** @brief TLP1VRSETTLED_REG register description at address offset 0x5e5c
+  *
+  *  TLP1 VR Settled Delay Control Register
+  */
+typedef struct
+{
+    HWREG_U8 VREFSOCDLY :3; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sTLP1VRSETTLED_REGStructure;
+
+
+/** @brief TLP1VRSETTLED_REG Bitfield widths
+*/
+#define lenTLP1VRSETTLED_REG_VREFSOCDLY 3
+
+typedef enum
+{
+    TLP1VRSETTLED_REG_LSB_VREFSOCDLY = 0
+} eTLP1VRSETTLED_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP1VRSETTLED_REG_Content;
+    sTLP1VRSETTLED_REGStructure TLP1VRSETTLED_REG_Structure;
+} uTLP1VRSETTLED_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1VRSETTLED_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP1VRSETTLED_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1VRSETTLED_REG(HWREG_U8 value); /** Get complete register TLP1VRSETTLED_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1VRSETTLED_REG_VREFSOCDLY(HWREG_U8 _reg, HWREG_U8 value); /**< Set element VREFSOCDLY of register TLP1VRSETTLED_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1VRSETTLED_REG_VREFSOCDLY(HWREG_U8 value); /**< Get element VREFSOCDLY of register TLP1VRSETTLED_REG */
+
+
+/** @brief TLP2CTRL_REG register description at address offset 0x5e61
+  *
+  *  TLP2 Control Register (DEBUG)
+  */
+typedef struct
+{
+    HWREG_U8 TLP2RST :1; /**<  */
+    HWREG_U8 TLP2LCK :1; /**<  */
+    const HWREG_U8 :6; /**< Unused bitfield */
+} sTLP2CTRL_REGStructure;
+
+
+/** @brief TLP2CTRL_REG Bitfield widths
+*/
+#define lenTLP2CTRL_REG_TLP2RST 1
+#define lenTLP2CTRL_REG_TLP2LCK 1
+
+typedef enum
+{
+    TLP2CTRL_REG_LSB_TLP2RST = 0,
+    TLP2CTRL_REG_LSB_TLP2LCK = 1
+} eTLP2CTRL_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2CTRL_REG_Content;
+    sTLP2CTRL_REGStructure TLP2CTRL_REG_Structure;
+} uTLP2CTRL_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2CTRL_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2CTRL_REG(HWREG_U8 value); /** Get complete register TLP2CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2CTRL_REG_TLP2RST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2RST of register TLP2CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2CTRL_REG_TLP2LCK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2LCK of register TLP2CTRL_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2CTRL_REG_TLP2LCK(HWREG_U8 value); /**< Get element TLP2LCK of register TLP2CTRL_REG */
+
+
+/** @brief TLP2EVSTATUS_REG register description at address offset 0x5e62
+  *
+  *  TLP2 Event Status Register (DEBUG)
+  */
+typedef struct
+{
+    HWREG_U8 TLP2BATTEMP :1; /**<  */
+    HWREG_U8 TLP2SYSTEMP :1; /**<  */
+    HWREG_U8 TLP2BATTID :1; /**<  */
+    HWREG_U8 TLP2BATTV :1; /**<  */
+    HWREG_U8 TLP2USBID :1; /**<  */
+    HWREG_U8 TLP2PEAK :1; /**<  */
+    HWREG_U8 TLP2GPMEAS :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sTLP2EVSTATUS_REGStructure;
+
+
+/** @brief TLP2EVSTATUS_REG Bitfield widths
+*/
+#define lenTLP2EVSTATUS_REG_TLP2BATTEMP 1
+#define lenTLP2EVSTATUS_REG_TLP2SYSTEMP 1
+#define lenTLP2EVSTATUS_REG_TLP2BATTID 1
+#define lenTLP2EVSTATUS_REG_TLP2BATTV 1
+#define lenTLP2EVSTATUS_REG_TLP2USBID 1
+#define lenTLP2EVSTATUS_REG_TLP2PEAK 1
+#define lenTLP2EVSTATUS_REG_TLP2GPMEAS 1
+
+typedef enum
+{
+    TLP2EVSTATUS_REG_LSB_TLP2BATTEMP = 0,
+    TLP2EVSTATUS_REG_LSB_TLP2SYSTEMP = 1,
+    TLP2EVSTATUS_REG_LSB_TLP2BATTID = 2,
+    TLP2EVSTATUS_REG_LSB_TLP2BATTV = 3,
+    TLP2EVSTATUS_REG_LSB_TLP2USBID = 4,
+    TLP2EVSTATUS_REG_LSB_TLP2PEAK = 5,
+    TLP2EVSTATUS_REG_LSB_TLP2GPMEAS = 6
+} eTLP2EVSTATUS_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2EVSTATUS_REG_Content;
+    sTLP2EVSTATUS_REGStructure TLP2EVSTATUS_REG_Structure;
+} uTLP2EVSTATUS_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG(HWREG_U8 value); /** Get complete register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2BATTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2BATTEMP of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2BATTEMP(HWREG_U8 value); /**< Get element TLP2BATTEMP of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2SYSTEMP(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2SYSTEMP of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2SYSTEMP(HWREG_U8 value); /**< Get element TLP2SYSTEMP of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2BATTID(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2BATTID of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2BATTID(HWREG_U8 value); /**< Get element TLP2BATTID of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2BATTV(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2BATTV of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2BATTV(HWREG_U8 value); /**< Get element TLP2BATTV of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2USBID(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2USBID of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2USBID(HWREG_U8 value); /**< Get element TLP2USBID of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2PEAK(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2PEAK of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2PEAK(HWREG_U8 value); /**< Get element TLP2PEAK of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2GPMEAS(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2GPMEAS of register TLP2EVSTATUS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2GPMEAS(HWREG_U8 value); /**< Get element TLP2GPMEAS of register TLP2EVSTATUS_REG */
+
+
+/** @brief TLP2TRACEINST_REG register description at address offset 0x5e63
+  *
+  *  TLP2 Trace Instruction Address (DEBUG)
+  */
+typedef struct
+{
+    HWREG_U8 TLP2TRACEINST :8; /**<  */
+} sTLP2TRACEINST_REGStructure;
+
+
+/** @brief TLP2TRACEINST_REG Bitfield widths
+*/
+#define lenTLP2TRACEINST_REG_TLP2TRACEINST 8
+
+typedef enum
+{
+    TLP2TRACEINST_REG_LSB_TLP2TRACEINST = 0
+} eTLP2TRACEINST_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2TRACEINST_REG_Content;
+    sTLP2TRACEINST_REGStructure TLP2TRACEINST_REG_Structure;
+} uTLP2TRACEINST_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2TRACEINST_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2TRACEINST_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2TRACEINST_REG(HWREG_U8 value); /** Get complete register TLP2TRACEINST_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2TRACEINST_REG_TLP2TRACEINST(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2TRACEINST of register TLP2TRACEINST_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2TRACEINST_REG_TLP2TRACEINST(HWREG_U8 value); /**< Get element TLP2TRACEINST of register TLP2TRACEINST_REG */
+
+
+/** @brief TLP2INSTMEMADDR_REG register description at address offset 0x5e64
+  *
+  *  TLP2 Instruction Memory Index Address Register
+  */
+typedef struct
+{
+    HWREG_U8 TLP2INSTMEMADDR :8; /**<  */
+} sTLP2INSTMEMADDR_REGStructure;
+
+
+/** @brief TLP2INSTMEMADDR_REG Bitfield widths
+*/
+#define lenTLP2INSTMEMADDR_REG_TLP2INSTMEMADDR 8
+
+typedef enum
+{
+    TLP2INSTMEMADDR_REG_LSB_TLP2INSTMEMADDR = 0
+} eTLP2INSTMEMADDR_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2INSTMEMADDR_REG_Content;
+    sTLP2INSTMEMADDR_REGStructure TLP2INSTMEMADDR_REG_Structure;
+} uTLP2INSTMEMADDR_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2INSTMEMADDR_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2INSTMEMADDR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2INSTMEMADDR_REG(HWREG_U8 value); /** Get complete register TLP2INSTMEMADDR_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2INSTMEMADDR_REG_TLP2INSTMEMADDR(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2INSTMEMADDR of register TLP2INSTMEMADDR_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2INSTMEMADDR_REG_TLP2INSTMEMADDR(HWREG_U8 value); /**< Get element TLP2INSTMEMADDR of register TLP2INSTMEMADDR_REG */
+
+
+/** @brief TLP2INSTMEMDATA_REG register description at address offset 0x5e65
+  *
+  *  TLP2 Instruction Memory Data Register
+  */
+typedef struct
+{
+    HWREG_U8 TLP2INSTMEMDATA :8; /**<  */
+} sTLP2INSTMEMDATA_REGStructure;
+
+
+/** @brief TLP2INSTMEMDATA_REG Bitfield widths
+*/
+#define lenTLP2INSTMEMDATA_REG_TLP2INSTMEMDATA 8
+
+typedef enum
+{
+    TLP2INSTMEMDATA_REG_LSB_TLP2INSTMEMDATA = 0
+} eTLP2INSTMEMDATA_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2INSTMEMDATA_REG_Content;
+    sTLP2INSTMEMDATA_REGStructure TLP2INSTMEMDATA_REG_Structure;
+} uTLP2INSTMEMDATA_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2INSTMEMDATA_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2INSTMEMDATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2INSTMEMDATA_REG(HWREG_U8 value); /** Get complete register TLP2INSTMEMDATA_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2INSTMEMDATA_REG_TLP2INSTMEMDATA(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2INSTMEMDATA of register TLP2INSTMEMDATA_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2INSTMEMDATA_REG_TLP2INSTMEMDATA(HWREG_U8 value); /**< Get element TLP2INSTMEMDATA of register TLP2INSTMEMDATA_REG */
+
+
+/** @brief TLP2SYSTEMP_REG register description at address offset 0x5e66
+  *
+  *  TLP2 System Temperature Base Address Register
+  */
+typedef struct
+{
+    HWREG_U8 TLP2SYSTEMPBASE :8; /**<  */
+} sTLP2SYSTEMP_REGStructure;
+
+
+/** @brief TLP2SYSTEMP_REG Bitfield widths
+*/
+#define lenTLP2SYSTEMP_REG_TLP2SYSTEMPBASE 8
+
+typedef enum
+{
+    TLP2SYSTEMP_REG_LSB_TLP2SYSTEMPBASE = 0
+} eTLP2SYSTEMP_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2SYSTEMP_REG_Content;
+    sTLP2SYSTEMP_REGStructure TLP2SYSTEMP_REG_Structure;
+} uTLP2SYSTEMP_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2SYSTEMP_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2SYSTEMP_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2SYSTEMP_REG(HWREG_U8 value); /** Get complete register TLP2SYSTEMP_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2SYSTEMP_REG_TLP2SYSTEMPBASE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2SYSTEMPBASE of register TLP2SYSTEMP_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2SYSTEMP_REG_TLP2SYSTEMPBASE(HWREG_U8 value); /**< Get element TLP2SYSTEMPBASE of register TLP2SYSTEMP_REG */
+
+
+/** @brief TLP2BATTID_REG register description at address offset 0x5e67
+  *
+  *  TLP2 Battery ID Base Address Register
+  */
+typedef struct
+{
+    HWREG_U8 TLP2BATTIDBASE :8; /**<  */
+} sTLP2BATTID_REGStructure;
+
+
+/** @brief TLP2BATTID_REG Bitfield widths
+*/
+#define lenTLP2BATTID_REG_TLP2BATTIDBASE 8
+
+typedef enum
+{
+    TLP2BATTID_REG_LSB_TLP2BATTIDBASE = 0
+} eTLP2BATTID_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2BATTID_REG_Content;
+    sTLP2BATTID_REGStructure TLP2BATTID_REG_Structure;
+} uTLP2BATTID_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2BATTID_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2BATTID_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2BATTID_REG(HWREG_U8 value); /** Get complete register TLP2BATTID_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2BATTID_REG_TLP2BATTIDBASE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2BATTIDBASE of register TLP2BATTID_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2BATTID_REG_TLP2BATTIDBASE(HWREG_U8 value); /**< Get element TLP2BATTIDBASE of register TLP2BATTID_REG */
+
+
+/** @brief TLP2BATTV_REG register description at address offset 0x5e68
+  *
+  *  TLP2 Battery Voltage Base Address Register
+  */
+typedef struct
+{
+    HWREG_U8 TLP2BATTVBASE :8; /**<  */
+} sTLP2BATTV_REGStructure;
+
+
+/** @brief TLP2BATTV_REG Bitfield widths
+*/
+#define lenTLP2BATTV_REG_TLP2BATTVBASE 8
+
+typedef enum
+{
+    TLP2BATTV_REG_LSB_TLP2BATTVBASE = 0
+} eTLP2BATTV_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2BATTV_REG_Content;
+    sTLP2BATTV_REGStructure TLP2BATTV_REG_Structure;
+} uTLP2BATTV_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2BATTV_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2BATTV_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2BATTV_REG(HWREG_U8 value); /** Get complete register TLP2BATTV_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2BATTV_REG_TLP2BATTVBASE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2BATTVBASE of register TLP2BATTV_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2BATTV_REG_TLP2BATTVBASE(HWREG_U8 value); /**< Get element TLP2BATTVBASE of register TLP2BATTV_REG */
+
+
+/** @brief TLP2USBID_REG register description at address offset 0x5e69
+  *
+  *  TLP2 USBID Base Address Register
+  */
+typedef struct
+{
+    HWREG_U8 TLP2USBIDBASE :8; /**<  */
+} sTLP2USBID_REGStructure;
+
+
+/** @brief TLP2USBID_REG Bitfield widths
+*/
+#define lenTLP2USBID_REG_TLP2USBIDBASE 8
+
+typedef enum
+{
+    TLP2USBID_REG_LSB_TLP2USBIDBASE = 0
+} eTLP2USBID_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2USBID_REG_Content;
+    sTLP2USBID_REGStructure TLP2USBID_REG_Structure;
+} uTLP2USBID_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2USBID_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2USBID_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2USBID_REG(HWREG_U8 value); /** Get complete register TLP2USBID_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2USBID_REG_TLP2USBIDBASE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2USBIDBASE of register TLP2USBID_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2USBID_REG_TLP2USBIDBASE(HWREG_U8 value); /**< Get element TLP2USBIDBASE of register TLP2USBID_REG */
+
+
+/** @brief TLP2PEAK_REG register description at address offset 0x5e6a
+  *
+  *  TLP2 PEAK Base Address Register
+  */
+typedef struct
+{
+    HWREG_U8 TLP2PEAKBASE :8; /**<  */
+} sTLP2PEAK_REGStructure;
+
+
+/** @brief TLP2PEAK_REG Bitfield widths
+*/
+#define lenTLP2PEAK_REG_TLP2PEAKBASE 8
+
+typedef enum
+{
+    TLP2PEAK_REG_LSB_TLP2PEAKBASE = 0
+} eTLP2PEAK_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2PEAK_REG_Content;
+    sTLP2PEAK_REGStructure TLP2PEAK_REG_Structure;
+} uTLP2PEAK_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2PEAK_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2PEAK_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2PEAK_REG(HWREG_U8 value); /** Get complete register TLP2PEAK_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2PEAK_REG_TLP2PEAKBASE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2PEAKBASE of register TLP2PEAK_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2PEAK_REG_TLP2PEAKBASE(HWREG_U8 value); /**< Get element TLP2PEAKBASE of register TLP2PEAK_REG */
+
+
+/** @brief TLP2GPMEAS_REG register description at address offset 0x5e6b
+  *
+  *  TLP2 GPMEAS Base Address Register
+  */
+typedef struct
+{
+    HWREG_U8 TLP2GPMEASBASE :8; /**<  */
+} sTLP2GPMEAS_REGStructure;
+
+
+/** @brief TLP2GPMEAS_REG Bitfield widths
+*/
+#define lenTLP2GPMEAS_REG_TLP2GPMEASBASE 8
+
+typedef enum
+{
+    TLP2GPMEAS_REG_LSB_TLP2GPMEASBASE = 0
+} eTLP2GPMEAS_REGLsb;
+
+typedef union
+{
+    HWREG_U8 TLP2GPMEAS_REG_Content;
+    sTLP2GPMEAS_REGStructure TLP2GPMEAS_REG_Structure;
+} uTLP2GPMEAS_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2GPMEAS_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register TLP2GPMEAS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2GPMEAS_REG(HWREG_U8 value); /** Get complete register TLP2GPMEAS_REG */
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2GPMEAS_REG_TLP2GPMEASBASE(HWREG_U8 _reg, HWREG_U8 value); /**< Set element TLP2GPMEASBASE of register TLP2GPMEAS_REG */
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2GPMEAS_REG_TLP2GPMEASBASE(HWREG_U8 value); /**< Get element TLP2GPMEASBASE of register TLP2GPMEAS_REG */
+
+
+/** @brief CM_PROG2D_DATA_REG register description at address offset 0x5e88
+  *
+  *  Value of VPROG2D current measurement
+  */
+typedef struct
+{
+    const HWREG_U8 :8; /**< Unused bitfield */
+} sCM_PROG2D_DATA_REGStructure;
+
+
+/** @brief CM_PROG2D_DATA_REG Bitfield widths
+*/
+
+
+typedef union
+{
+    HWREG_U8 CM_PROG2D_DATA_REG_Content;
+    sCM_PROG2D_DATA_REGStructure CM_PROG2D_DATA_REG_Structure;
+} uCM_PROG2D_DATA_REG;
+
+//************** VCC & VNN register functions added manually *******************//
+
+/** @brief VCC_STDBY_EXITVID_REG register description at address offset 0x36
+  *
+  *  Standby exit VID Register
+  */
+typedef struct
+{
+    HWREG_U8 VCC_EXIT_STANDBY_VID_CODE :8; /**<  */
+} sVCC_STDBY_EXITVID_REGStructure;
+
+
+/** @brief VCC_STDBY_EXITVID_REG Bitfield widths
+*/
+#define lenVCC_STDBY_EXITVID_REG_VCC_EXIT_STANDBY_VID_CODE 8
+
+typedef enum
+{
+    VCC_STDBY_EXITVID_REG_LSB_VCC_EXIT_STANDBY_VID_CODE = 0
+} eVCC_STDBY_EXITVID_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VCC_STDBY_EXITVID_REG_Content;
+    sVCC_STDBY_EXITVID_REGStructure VCC_STDBY_EXITVID_REG_Structure;
+} uVCC_STDBY_EXITVID_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmu_VCC_STDBY_EXITVID_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VCC_STDBY_EXITVID_REG */
+__HWREG_INLINE__ HWREG_U8 getPmu_VCC_STDBY_EXITVID_REG(HWREG_U8 value_); /** Get complete register VCC_STDBY_EXITVID_REG */
+
+/** @brief VNN_STDBY_EXITVID_REG register description at address offset 0x36
+  *
+  *  Standby exit VID Register
+  */
+typedef struct
+{
+    HWREG_U8 VNN_EXIT_STANDBY_VID_CODE :8; /**<  */
+} sVNN_STDBY_EXITVID_REGStructure;
+
+
+/** @brief VNN_STDBY_EXITVID_REG Bitfield widths
+*/
+#define lenVNN_STDBY_EXITVID_REG_VNN_EXIT_STANDBY_VID_CODE 8
+
+typedef enum
+{
+    VNN_STDBY_EXITVID_REG_LSB_VNN_EXIT_STANDBY_VID_CODE = 0
+} eVNN_STDBY_EXITVID_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VNN_STDBY_EXITVID_REG_Content;
+    sVNN_STDBY_EXITVID_REGStructure VNN_STDBY_EXITVID_REG_Structure;
+} uVNN_STDBY_EXITVID_REG;
+
+__HWREG_INLINE__ HWREG_U8 setPmu_VNN_STDBY_EXITVID_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VNN_STDBY_EXITVID_REG */
+__HWREG_INLINE__ HWREG_U8 getPmu_VNN_STDBY_EXITVID_REG(HWREG_U8 value); /** Get complete register VNN_STDBY_EXITVID_REG */
+
+//**************DEV4 Register functions ******************//
+
+__HWREG_INLINE__ HWREG_U8 setPmu_VENDCTL1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VENDCTL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmu_VENDCTL1_REG(HWREG_U8 value); /** Get complete register VENDCTL1_REG */
+
+//***************** VEND IRQ ************************//
+/** @brief DCDCVIRQ0_REG register description at address offset 0x7e
+  *
+  *  DCDC Vendor Interrupt Register 0
+  */
+typedef struct
+{
+    HWREG_U8 VCC :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+    HWREG_U8 VNN :1; /**<  */
+    HWREG_U8 VPA :1; /**<  */
+    HWREG_U8 VDD1 :1; /**<  */
+    HWREG_U8 VDD2 :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sDCDCVIRQ0_REGStructure;
+
+
+/** @brief DCDCVIRQ0_REG Bitfield widths
+*/
+#define lenDCDCVIRQ0_REG_VCC 1
+#define lenDCDCVIRQ0_REG_VNN 1
+#define lenDCDCVIRQ0_REG_VPA 1
+#define lenDCDCVIRQ0_REG_VDD1 1
+#define lenDCDCVIRQ0_REG_VDD2 1
+
+typedef enum
+{
+    DCDCVIRQ0_REG_LSB_VCC = 0,
+    DCDCVIRQ0_REG_LSB_VNN = 3,
+    DCDCVIRQ0_REG_LSB_VPA = 4,
+    DCDCVIRQ0_REG_LSB_VDD1 = 5,
+    DCDCVIRQ0_REG_LSB_VDD2 = 6
+} eDCDCVIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 DCDCVIRQ0_REG_Content;
+    sDCDCVIRQ0_REGStructure DCDCVIRQ0_REG_Structure;
+} uDCDCVIRQ0_REG;
+
+typedef enum
+{
+    DCDCVIRQ0_REG_VCC_IA = 1,
+    DCDCVIRQ0_REG_VCC_NA = 0
+} eDCDCVIRQ0_REG_VCC;
+
+typedef enum
+{
+    DCDCVIRQ0_REG_VNN_IA = 1,
+    DCDCVIRQ0_REG_VNN_NA = 0
+} eDCDCVIRQ0_REG_VNN;
+
+typedef enum
+{
+    DCDCVIRQ0_REG_VPA_IA = 1,
+    DCDCVIRQ0_REG_VPA_NA = 0
+} eDCDCVIRQ0_REG_VPA;
+
+typedef enum
+{
+    DCDCVIRQ0_REG_VDD1_IA = 1,
+    DCDCVIRQ0_REG_VDD1_NA = 0
+} eDCDCVIRQ0_REG_VDD1;
+
+typedef enum
+{
+    DCDCVIRQ0_REG_VDD2_IA = 1,
+    DCDCVIRQ0_REG_VDD2_NA = 0
+} eDCDCVIRQ0_REG_VDD2;
+
+__HWREG_INLINE__ HWREG_U8 setPmu_DCDCVIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register DCDCVIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmu_DCDCVIRQ0_REG(HWREG_U8 value); /** Get complete register DCDCVIRQ0_REG */
+
+
+/** @brief VROCIRQ0_REG register description at address offset 0x80
+  *
+  *  DCDC VRs Over Current Vendor Interrupt Register
+  */
+typedef struct
+{
+    HWREG_U8 VCC :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+    HWREG_U8 VNN :1; /**<  */
+    HWREG_U8 VPA :1; /**<  */
+    HWREG_U8 VDD1 :1; /**<  */
+    HWREG_U8 VDD2 :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sVROCIRQ0_REGStructure;
+
+
+/** @brief VROCIRQ0_REG Bitfield widths
+*/
+#define lenVROCIRQ0_REG_VCC 1
+#define lenVROCIRQ0_REG_VNN 1
+#define lenVROCIRQ0_REG_VPA 1
+#define lenVROCIRQ0_REG_VDD1 1
+#define lenVROCIRQ0_REG_VDD2 1
+
+typedef enum
+{
+    VROCIRQ0_REG_LSB_VCC = 0,
+    VROCIRQ0_REG_LSB_VNN = 3,
+    VROCIRQ0_REG_LSB_VPA = 4,
+    VROCIRQ0_REG_LSB_VDD1 = 5,
+    VROCIRQ0_REG_LSB_VDD2 = 6
+} eVROCIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VROCIRQ0_REG_Content;
+    sVROCIRQ0_REGStructure VROCIRQ0_REG_Structure;
+} uVROCIRQ0_REG;
+
+typedef enum
+{
+    VROCIRQ0_REG_VCC_IA = 1,
+    VROCIRQ0_REG_VCC_NA = 0
+} eVROCIRQ0_REG_VCC;
+
+typedef enum
+{
+    VROCIRQ0_REG_VNN_IA = 1,
+    VROCIRQ0_REG_VNN_NA = 0
+} eVROCIRQ0_REG_VNN;
+
+typedef enum
+{
+    VROCIRQ0_REG_VPA_IA = 1,
+    VROCIRQ0_REG_VPA_NA = 0
+} eVROCIRQ0_REG_VPA;
+
+typedef enum
+{
+    VROCIRQ0_REG_VDD1_IA = 1,
+    VROCIRQ0_REG_VDD1_NA = 0
+} eVROCIRQ0_REG_VDD1;
+
+typedef enum
+{
+    VROCIRQ0_REG_VDD2_IA = 1,
+    VROCIRQ0_REG_VDD2_NA = 0
+} eVROCIRQ0_REG_VDD2;
+
+__HWREG_INLINE__ HWREG_U8 setPmu_VROCIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VROCIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmu_VROCIRQ0_REG(HWREG_U8 value); /** Get complete register VROCIRQ0_REG */
+
+
+/** @brief VROCIRQ2_REG register description at address offset 0x82
+  *
+  *  LDO VRs Over Current Vendor Interrupt Register
+  */
+typedef struct
+{
+    HWREG_U8 VPROG1 :1; /**<  */
+    HWREG_U8 VPROG2 :1; /**<  */
+    HWREG_U8 VPROG3 :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sVROCIRQ2_REGStructure;
+
+
+/** @brief VROCIRQ2_REG Bitfield widths
+*/
+#define lenVROCIRQ2_REG_VPROG1 1
+#define lenVROCIRQ2_REG_VPROG2 1
+#define lenVROCIRQ2_REG_VPROG3 1
+
+typedef enum
+{
+    VROCIRQ2_REG_LSB_VPROG1 = 0,
+    VROCIRQ2_REG_LSB_VPROG2 = 1,
+    VROCIRQ2_REG_LSB_VPROG3 = 2
+} eVROCIRQ2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 VROCIRQ2_REG_Content;
+    sVROCIRQ2_REGStructure VROCIRQ2_REG_Structure;
+} uVROCIRQ2_REG;
+
+typedef enum
+{
+    VROCIRQ2_REG_VPROG1_IA = 1,
+    VROCIRQ2_REG_VPROG1_NA = 0
+} eVROCIRQ2_REG_VPROG1;
+
+typedef enum
+{
+    VROCIRQ2_REG_VPROG2_IA = 1,
+    VROCIRQ2_REG_VPROG2_NA = 0
+} eVROCIRQ2_REG_VPROG2;
+
+typedef enum
+{
+    VROCIRQ2_REG_VPROG3_IA = 1,
+    VROCIRQ2_REG_VPROG3_NA = 0
+} eVROCIRQ2_REG_VPROG3;
+
+__HWREG_INLINE__ HWREG_U8 setPmu_VROCIRQ2_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register VROCIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmu_VROCIRQ2_REG(HWREG_U8 value); /** Get complete register VROCIRQ2_REG */
+
+
+/** @brief MVENDIRQLVL1_REG register description at address offset 0x84
+  *
+  *  Level 1 Vendor Interrupt Mask Register
+  */
+typedef struct
+{
+    HWREG_U8 MNVMC :1; /**<  */
+    HWREG_U8 MADCTLP2 :1; /**<  */
+    HWREG_U8 MI2CSIF :1; /**<  */
+    HWREG_U8 MREGBUS :1; /**<  */
+    HWREG_U8 MCHGR :1; /**<  */
+    HWREG_U8 MTLP1 :1; /**<  */
+    HWREG_U8 MDCDC :1; /**<  */
+    HWREG_U8 MVROC :1; /**<  */
+} sMVENDIRQLVL1_REGStructure;
+
+
+/** @brief MVENDIRQLVL1_REG Bitfield widths
+*/
+#define lenMVENDIRQLVL1_REG_MNVMC 1
+#define lenMVENDIRQLVL1_REG_MADCTLP2 1
+#define lenMVENDIRQLVL1_REG_MI2CSIF 1
+#define lenMVENDIRQLVL1_REG_MREGBUS 1
+#define lenMVENDIRQLVL1_REG_MCHGR 1
+#define lenMVENDIRQLVL1_REG_MTLP1 1
+#define lenMVENDIRQLVL1_REG_MDCDC 1
+#define lenMVENDIRQLVL1_REG_MVROC 1
+
+typedef enum
+{
+    MVENDIRQLVL1_REG_LSB_MNVMC = 0,
+    MVENDIRQLVL1_REG_LSB_MADCTLP2 = 1,
+    MVENDIRQLVL1_REG_LSB_MI2CSIF = 2,
+    MVENDIRQLVL1_REG_LSB_MREGBUS = 3,
+    MVENDIRQLVL1_REG_LSB_MCHGR = 4,
+    MVENDIRQLVL1_REG_LSB_MTLP1 = 5,
+    MVENDIRQLVL1_REG_LSB_MDCDC = 6,
+    MVENDIRQLVL1_REG_LSB_MVROC = 7
+} eMVENDIRQLVL1_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MVENDIRQLVL1_REG_Content;
+    sMVENDIRQLVL1_REGStructure MVENDIRQLVL1_REG_Structure;
+} uMVENDIRQLVL1_REG;
+
+typedef enum
+{
+    MVENDIRQLVL1_REG_MDCDC_EN = 0,
+    MVENDIRQLVL1_REG_MDCDC_DIS = 1
+} eMVENDIRQLVL1_REG_MDCDC;
+
+typedef enum
+{
+    MVENDIRQLVL1_REG_MVROC_EN = 0,
+    MVENDIRQLVL1_REG_MVROC_DIS = 1
+} eMVENDIRQLVL1_REG_MVROC;
+
+__HWREG_INLINE__ HWREG_U8 setPmu_MVENDIRQLVL1_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MVENDIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 getPmu_MVENDIRQLVL1_REG(HWREG_U8 value); /** Get complete register MVENDIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmu_MVENDIRQLVL1_REG_MDCDC(HWREG_U8 _reg, eMVENDIRQLVL1_REG_MDCDC value); /**< Set element MDCDC of register MVENDIRQLVL1_REG */
+__HWREG_INLINE__ eMVENDIRQLVL1_REG_MDCDC getPmu_MVENDIRQLVL1_REG_MDCDC(HWREG_U8 value); /**< Get element MDCDC of register MVENDIRQLVL1_REG */
+__HWREG_INLINE__ HWREG_U8 setPmu_MVENDIRQLVL1_REG_MVROC(HWREG_U8 _reg, eMVENDIRQLVL1_REG_MVROC value); /**< Set element MVROC of register MVENDIRQLVL1_REG */
+__HWREG_INLINE__ eMVENDIRQLVL1_REG_MVROC getPmu_MVENDIRQLVL1_REG_MVROC(HWREG_U8 value); /**< Get element MVROC of register MVENDIRQLVL1_REG */
+
+/** @brief MDCDCVIRQ0_REG register description at address offset 0x8b
+  *
+  *  DCDC Vendor Interrupt Mask Register 0
+  */
+typedef struct
+{
+    HWREG_U8 MVCC :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+    HWREG_U8 MVNN :1; /**<  */
+    HWREG_U8 MVPA :1; /**<  */
+    HWREG_U8 MVDD1 :1; /**<  */
+    HWREG_U8 MVDD2 :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sMDCDCVIRQ0_REGStructure;
+
+
+/** @brief MDCDCVIRQ0_REG Bitfield widths
+*/
+#define lenMDCDCVIRQ0_REG_MVCC 1
+#define lenMDCDCVIRQ0_REG_MVNN 1
+#define lenMDCDCVIRQ0_REG_MVPA 1
+#define lenMDCDCVIRQ0_REG_MVDD1 1
+#define lenMDCDCVIRQ0_REG_MVDD2 1
+
+typedef enum
+{
+    MDCDCVIRQ0_REG_LSB_MVCC = 0,
+    MDCDCVIRQ0_REG_LSB_MVNN = 3,
+    MDCDCVIRQ0_REG_LSB_MVPA = 4,
+    MDCDCVIRQ0_REG_LSB_MVDD1 = 5,
+    MDCDCVIRQ0_REG_LSB_MVDD2 = 6
+} eMDCDCVIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MDCDCVIRQ0_REG_Content;
+    sMDCDCVIRQ0_REGStructure MDCDCVIRQ0_REG_Structure;
+} uMDCDCVIRQ0_REG;
+
+typedef enum
+{
+    MDCDCVIRQ0_REG_MVCC_DIS = 1,
+    MDCDCVIRQ0_REG_MVCC_EN = 0
+} eMDCDCVIRQ0_REG_MVCC;
+
+typedef enum
+{
+    MDCDCVIRQ0_REG_MVNN_DIS = 1,
+    MDCDCVIRQ0_REG_MVNN_EN = 0
+} eMDCDCVIRQ0_REG_MVNN;
+
+typedef enum
+{
+    MDCDCVIRQ0_REG_MVPA_DIS = 1,
+    MDCDCVIRQ0_REG_MVPA_EN = 0
+} eMDCDCVIRQ0_REG_MVPA;
+
+typedef enum
+{
+    MDCDCVIRQ0_REG_MVDD1_DIS = 1,
+    MDCDCVIRQ0_REG_MVDD1_EN = 0
+} eMDCDCVIRQ0_REG_MVDD1;
+
+typedef enum
+{
+    MDCDCVIRQ0_REG_MVDD2_DIS = 1,
+    MDCDCVIRQ0_REG_MVDD2_EN = 0
+} eMDCDCVIRQ0_REG_MVDD2;
+
+__HWREG_INLINE__ HWREG_U8 setPmu_MDCDCVIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MDCDCVIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmu_MDCDCVIRQ0_REG(HWREG_U8 value); /** Get complete register MDCDCVIRQ0_REG */
+
+
+/** @brief MVROCIRQ0_REG register description at address offset 0x8d
+  *
+  *  DCDC VRs Over Current Vendor Interrupt Mask Register
+  */
+typedef struct
+{
+    HWREG_U8 MVCC :1; /**<  */
+    const HWREG_U8 :2; /**< Unused bitfield */
+    HWREG_U8 MVNN :1; /**<  */
+    HWREG_U8 MVPA :1; /**<  */
+    HWREG_U8 MVDD1 :1; /**<  */
+    HWREG_U8 MVDD2 :1; /**<  */
+    const HWREG_U8 :1; /**< Unused bitfield */
+} sMVROCIRQ0_REGStructure;
+
+
+/** @brief MVROCIRQ0_REG Bitfield widths
+*/
+#define lenMVROCIRQ0_REG_MVCC 1
+#define lenMVROCIRQ0_REG_MVNN 1
+#define lenMVROCIRQ0_REG_MVPA 1
+#define lenMVROCIRQ0_REG_MVDD1 1
+#define lenMVROCIRQ0_REG_MVDD2 1
+
+typedef enum
+{
+    MVROCIRQ0_REG_LSB_MVCC = 0,
+    MVROCIRQ0_REG_LSB_MVNN = 3,
+    MVROCIRQ0_REG_LSB_MVPA = 4,
+    MVROCIRQ0_REG_LSB_MVDD1 = 5,
+    MVROCIRQ0_REG_LSB_MVDD2 = 6
+} eMVROCIRQ0_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MVROCIRQ0_REG_Content;
+    sMVROCIRQ0_REGStructure MVROCIRQ0_REG_Structure;
+} uMVROCIRQ0_REG;
+
+typedef enum
+{
+    MVROCIRQ0_REG_MVCC_DIS = 1,
+    MVROCIRQ0_REG_MVCC_EN = 0
+} eMVROCIRQ0_REG_MVCC;
+
+typedef enum
+{
+    MVROCIRQ0_REG_MVNN_DIS = 1,
+    MVROCIRQ0_REG_MVNN_EN = 0
+} eMVROCIRQ0_REG_MVNN;
+
+typedef enum
+{
+    MVROCIRQ0_REG_MVPA_DIS = 1,
+    MVROCIRQ0_REG_MVPA_EN = 0
+} eMVROCIRQ0_REG_MVPA;
+
+typedef enum
+{
+    MVROCIRQ0_REG_MVDD1_DIS = 1,
+    MVROCIRQ0_REG_MVDD1_EN = 0
+} eMVROCIRQ0_REG_MVDD1;
+
+typedef enum
+{
+    MVROCIRQ0_REG_MVDD2_DIS = 1,
+    MVROCIRQ0_REG_MVDD2_EN = 0
+} eMVROCIRQ0_REG_MVDD2;
+
+__HWREG_INLINE__ HWREG_U8 setPmu_MVROCIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MVROCIRQ0_REG */
+__HWREG_INLINE__ HWREG_U8 getPmu_MVROCIRQ0_REG(HWREG_U8 value); /** Get complete register MVROCIRQ0_REG */
+
+
+/** @brief MVROCIRQ2_REG register description at address offset 0x8f
+  *
+  *  LDO VRs Over Current Vendor Interrupt Mask Register
+  */
+typedef struct
+{
+    HWREG_U8 MVPROG1 :1; /**<  */
+    HWREG_U8 MVPROG2 :1; /**<  */
+    HWREG_U8 MVPROG3 :1; /**<  */
+    const HWREG_U8 :5; /**< Unused bitfield */
+} sMVROCIRQ2_REGStructure;
+
+
+/** @brief MVROCIRQ2_REG Bitfield widths
+*/
+#define lenMVROCIRQ2_REG_MVPROG1 1
+#define lenMVROCIRQ2_REG_MVPROG2 1
+#define lenMVROCIRQ2_REG_MVPROG3 1
+
+typedef enum
+{
+    MVROCIRQ2_REG_LSB_MVPROG1 = 0,
+    MVROCIRQ2_REG_LSB_MVPROG2 = 1,
+    MVROCIRQ2_REG_LSB_MVPROG3 = 2
+} eMVROCIRQ2_REGLsb;
+
+typedef union
+{
+    HWREG_U8 MVROCIRQ2_REG_Content;
+    sMVROCIRQ2_REGStructure MVROCIRQ2_REG_Structure;
+} uMVROCIRQ2_REG;
+
+typedef enum
+{
+    MVROCIRQ2_REG_MVPROG1_DIS = 1,
+    MVROCIRQ2_REG_MVPROG1_EN = 0
+} eMVROCIRQ2_REG_MVPROG1;
+
+typedef enum
+{
+    MVROCIRQ2_REG_MVPROG2_DIS = 1,
+    MVROCIRQ2_REG_MVPROG2_EN = 0
+} eMVROCIRQ2_REG_MVPROG2;
+
+typedef enum
+{
+    MVROCIRQ2_REG_MVPROG3_DIS = 1,
+    MVROCIRQ2_REG_MVPROG3_EN = 0
+} eMVROCIRQ2_REG_MVPROG3;
+
+__HWREG_INLINE__ HWREG_U8 setPmu_MVROCIRQ2_REG(HWREG_U8 _reg, HWREG_U8 value); /** Set complete register MVROCIRQ2_REG */
+__HWREG_INLINE__ HWREG_U8 getPmu_MVROCIRQ2_REG(HWREG_U8 value); /** Get complete register MVROCIRQ2_REG */
+
+
+#define PMIC_ID0_REG 0x4e00
+#define PMIC_ID1_REG 0x4e01
+#define PMIC_IRQ_LVL1_REG 0x4e02
+#define PMIC_PBIRQ_REG 0x4e03
+#define PMIC_THRMIRQ0_REG 0x4e04
+#define PMIC_THRMIRQ1_REG 0x4e05
+#define PMIC_THRMIRQ2_REG 0x4e06
+#define PMIC_BCUIRQ_REG 0x4e07
+#define PMIC_ADCIRQ_REG 0x4e08
+#define PMIC_CHGRIRQ0_REG 0x4e09
+#define PMIC_CHGRIRQ1_REG 0x4e0a
+#define PMIC_GPIOIRQ0_REG 0x4e0b
+#define PMIC_GPIOIRQ1_REG 0x4e0c
+#define PMIC_CRITIRQ_REG 0x4e0d
+#define PMIC_MIRQLVL1_REG 0x4e0e
+#define PMIC_MPBIRQ_REG 0x4e0f
+#define PMIC_DEV1_STATUS_1_REG 0x4e10
+#define PMIC_DEV1_STATUS_2_REG 0x4e11
+#define PMIC_MTHRMIRQ0_REG 0x4e12
+#define PMIC_MTHRMIRQ1_REG 0x4e13
+#define PMIC_MTHRMIRQ2_REG 0x4e14
+#define PMIC_MBCUIRQ_REG 0x4e15
+#define PMIC_MADCIRQ_REG 0x4e16
+#define PMIC_MCHGRIRQ0_REG 0x4e17
+#define PMIC_MCHGRIRQ1_REG 0x4e18
+#define PMIC_MGPIOIRQ0_REG 0x4e19
+#define PMIC_MGPIOIRQ1_REG 0x4e1a
+#define PMIC_MCRITIRQ_REG 0x4e1b
+#define PMIC_DEV1_STATUS2_LASTREAD_REG 0x4e1c
+#define PMIC_MSVIDALERT_REG 0x4e1d
+#define PMIC_IRQMULT_REG 0x4e1e
+#define PMIC_MIRQMULT_REG 0x4e1f
+#define PMIC_SPWRSRC_REG 0x4e20
+#define PMIC_LOWBATTDET0_REG 0x4e21
+#define PMIC_LOWBATTDET1_REG 0x4e22
+#define PMIC_PSDETCTRL_REG 0x4e23
+#define PMIC_BATTDETCTRL0_REG 0x4e24
+#define PMIC_BATTDETCTRL1_REG 0x4e25
+#define PMIC_SPLTIMER_REG 0x4e28
+#define PMIC_SSPLTIMER_REG 0x4e29
+#define PMIC_CHIPCNTRL_REG 0x4e2a
+#define PMIC_PLATFORMRST_DT_REG 0x4e2b
+#define PMIC_RESETSRC0_REG 0x4e2c
+#define PMIC_RESETSRC1_REG 0x4e2d
+#define PMIC_RESETRDYCTRL_REG 0x4e2e
+#define PMIC_SRCWAKECFG_REG 0x4e30
+#define PMIC_WAKESRC_REG 0x4e31
+#define PMIC_STDBYCNT_REG 0x4e32
+#define PMIC_REGLOCK_REG 0x4e34
+#define PMIC_DEV1_SETREGADR_REG 0x4e35
+#define PMIC_MODEMCTRL_REG 0x4e36
+#define PMIC_SOCCTRL_REG 0x4e37
+#define PMIC_BBCHGRCFG_REG 0x4e38
+#define PMIC_FLTCFG_REG 0x4e3d
+#define PMIC_PBCONFIG1_REG 0x4e3e
+#define PMIC_PBCONFIG2_REG 0x4e3f
+#define PMIC_PBSTATUS_REG 0x4e40
+#define PMIC_UBSTATUS_REG 0x4e41
+#define PMIC_GPIO0P0CTLO_REG 0x4e44
+#define PMIC_GPIO0P1CTLO_REG 0x4e45
+#define PMIC_GPIO0P2CTLO_REG 0x4e46
+#define PMIC_GPIO0P3CTLO_REG 0x4e47
+#define PMIC_GPIO0P4CTLO_REG 0x4e48
+#define PMIC_GPIO0P5CTLO_REG 0x4e49
+#define PMIC_GPIO0P6CTLO_REG 0x4e4a
+#define PMIC_GPIO1P0CTLO_REG 0x4e4b
+#define PMIC_GPIO1P1CTLO_REG 0x4e4c
+#define PMIC_GPIO1P2CTLO_REG 0x4e4d
+#define PMIC_GPIO1P3CTLO_REG 0x4e4e
+#define PMIC_GPIO2P0CTLO_REG 0x4e4f
+#define PMIC_GPIO2P1CTLO_REG 0x4e50
+#define PMIC_GPIO0P0CTLI_REG 0x4e51
+#define PMIC_GPIO0P1CTLI_REG 0x4e52
+#define PMIC_GPIO0P2CTLI_REG 0x4e53
+#define PMIC_GPIO0P3CTLI_REG 0x4e54
+#define PMIC_GPIO0P4CTLI_REG 0x4e55
+#define PMIC_GPIO0P5CTLI_REG 0x4e56
+#define PMIC_GPIO0P6CTLI_REG 0x4e57
+#define PMIC_GPIO1P0CTLI_REG 0x4e58
+#define PMIC_GPIO1P1CTLI_REG 0x4e59
+#define PMIC_GPIO1P2CTLI_REG 0x4e5a
+#define PMIC_GPIO1P3CTLI_REG 0x4e5b
+#define PMIC_GPIO2P0CTLI_REG 0x4e5c
+#define PMIC_GPIO2P1CTLI_REG 0x4e5d
+#define PMIC_VCCCNT_REG 0x4e60
+#define PMIC_VNNCNT_REG 0x4e61
+#define PMIC_VDD1CNT_REG 0x4e63
+#define PMIC_VDD1VSEL_REG 0x4e64
+#define PMIC_VDD2CNT_REG 0x4e65
+#define PMIC_VDD2VSEL_REG 0x4e66
+#define PMIC_VPACNT_REG 0x4e6d
+#define PMIC_VPAVSEL_REG 0x4e6e
+#define PMIC_VREFSOCCNT_REG 0x4e7b
+#define PMIC_VWARN1_CFG_REG 0x4e80
+#define PMIC_VWARN2_CFG_REG 0x4e81
+#define PMIC_VCRIT_CFG_REG 0x4e82
+#define PMIC_BCUDISCRIT_BEH_REG 0x4e84
+#define PMIC_S_BCUIRQ_REG 0x4e8b
+#define PMIC_S_BCUCTRL_REG 0x4e8c
+#define PMIC_ICCMAXVSYS_CFG_REG 0x4e8d
+#define PMIC_ICCMAXVCC_CFG_REG 0x4e8e
+#define PMIC_ICCMAXVNN_CFG_REG 0x4e90
+#define PMIC_SOCWDTCFG_REG 0x4e92
+#define PMIC_VLDOCNT_REG 0x4ea1
+#define PMIC_VPROG1CNT_REG 0x4ea2
+#define PMIC_VPROG2CNT_REG 0x4ea3
+#define PMIC_VPROG3CNT_REG 0x4ea4
+#define PMIC_VUSBCNT_REG 0x4ea5
+#define PMIC_VSIM1CNT_REG 0x4ea6
+#define PMIC_VSIM2CNT_REG 0x4ea7
+#define PMIC_VMIPICNT_REG 0x4ea8
+#define PMIC_VEMMCCNT_REG 0x4ea9
+#define PMIC_VSDCNT_REG 0x4eaa
+#define PMIC_VSDMMCCNT_REG 0x4eab
+#define PMIC_VPROG1VSEL_REG 0x4eb0
+#define PMIC_VPROG2VSEL_REG 0x4eb1
+#define PMIC_VPROG3VSEL_REG 0x4eb2
+#define PMIC_VUSBVSEL_REG 0x4eb3
+#define PMIC_VSIM1VSEL_REG 0x4eb4
+#define PMIC_VSIM2VSEL_REG 0x4eb5
+#define PMIC_VMIPIVSEL_REG 0x4eb6
+#define PMIC_VEMMCVSEL_REG 0x4eb7
+#define PMIC_VSDVSEL_REG 0x4eb8
+#define PMIC_VSDMMCVSEL_REG 0x4eb9
+#define PMIC_TRMPGM_REG 0x4f00
+#define PMIC_OTPVERSION_REG 0x4f01
+#define PMIC_GPADCREQ_REG 0x4f02
+#define PMIC_VBATRSLTH_REG 0x4f03
+#define PMIC_VBATRSLTL_REG 0x4f04
+#define PMIC_GPADCCNTL_REG 0x4f05
+#define PMIC_BATTIDRSLTH_REG 0x4f06
+#define PMIC_BATTIDRSLTL_REG 0x4f07
+#define PMIC_USBIDRSLTH_REG 0x4f08
+#define PMIC_USBIDRSLTL_REG 0x4f09
+#define PMIC_GPMEASRSLTH_REG 0x4f0a
+#define PMIC_GPMEASRSLTL_REG 0x4f0b
+#define PMIC_Y0DATAH_REG 0x4f0c
+#define PMIC_Y0DATAL_REG 0x4f0d
+#define PMIC_Y1DATAH_REG 0x4f0e
+#define PMIC_Y1DATAL_REG 0x4f0f
+#define PMIC_DEV2_STATUS_1_REG 0x4f10
+#define PMIC_DEV2_STATUS_2_REG 0x4f11
+#define PMIC_PEAKREQ_REG 0x4f12
+#define PMIC_PEAKRSLTH_REG 0x4f13
+#define PMIC_PEAKRSLTL_REG 0x4f14
+#define PMIC_BATTEMP0H_REG 0x4f15
+#define PMIC_BATTEMP0L_REG 0x4f16
+#define PMIC_BATTEMP1H_REG 0x4f17
+#define PMIC_BATTEMP1L_REG 0x4f18
+#define PMIC_STHRMIRQ0_REG 0x4f19
+#define PMIC_STHRMIRQ1_REG 0x4f1a
+#define PMIC_STHRMIRQ2_REG 0x4f1b
+#define PMIC_DEV2_STATUS2_LASTREAD_REG 0x4f1c
+#define PMIC_THRMMONCFG_REG 0x4f1d
+#define PMIC_THRMMONCTL_REG 0x4f1e
+#define PMIC_BATTHERMMONCTL_REG 0x4f1f
+#define PMIC_VBATMONCTL_REG 0x4f20
+#define PMIC_GPMONCTL_REG 0x4f21
+#define PMIC_THRMBATZONE_REG 0x4f22
+#define PMIC_SYS0ALERT0H_REG 0x4f23
+#define PMIC_SYS0ALERT0L_REG 0x4f24
+#define PMIC_SYS0ALERT1H_REG 0x4f25
+#define PMIC_SYS0ALERT1L_REG 0x4f26
+#define PMIC_SYS1ALERT0H_REG 0x4f27
+#define PMIC_SYS1ALERT0L_REG 0x4f28
+#define PMIC_SYS1ALERT1H_REG 0x4f29
+#define PMIC_SYS1ALERT1L_REG 0x4f2a
+#define PMIC_SYS2ALERT0H_REG 0x4f2b
+#define PMIC_SYS2ALERT0L_REG 0x4f2c
+#define PMIC_SYS2ALERT1H_REG 0x4f2d
+#define PMIC_SYS2ALERT1L_REG 0x4f2e
+#define PMIC_BAT0ALERT0H_REG 0x4f2f
+#define PMIC_BAT0ALERT0L_REG 0x4f30
+#define PMIC_BAT1ALERT0H_REG 0x4f31
+#define PMIC_BAT1ALERT0L_REG 0x4f32
+#define PMIC_PMICALERT0H_REG 0x4f33
+#define PMIC_PMICALERT0L_REG 0x4f34
+#define PMIC_DEV2_SETREGADR_REG 0x4f35
+#define PMIC_GPMEASALERTH_REG 0x4f36
+#define PMIC_GPMEASALERTL_REG 0x4f37
+#define PMIC_THRMRSLT0H_REG 0x4f38
+#define PMIC_THRMRSLT0L_REG 0x4f39
+#define PMIC_THRMRSLT1H_REG 0x4f3a
+#define PMIC_THRMRSLT1L_REG 0x4f3b
+#define PMIC_THRMRSLT2H_REG 0x4f3c
+#define PMIC_THRMRSLT2L_REG 0x4f3d
+#define PMIC_THRMRSLT3H_REG 0x4f3e
+#define PMIC_THRMRSLT3L_REG 0x4f3f
+#define PMIC_THRMRSLT4H_REG 0x4f40
+#define PMIC_THRMRSLT4L_REG 0x4f41
+#define PMIC_THRMRSLT5H_REG 0x4f42
+#define PMIC_THRMRSLT5L_REG 0x4f43
+#define PMIC_THRMZN0H_REG 0x4f44
+#define PMIC_THRMZN0L_REG 0x4f45
+#define PMIC_THRMZN1H_REG 0x4f46
+#define PMIC_THRMZN1L_REG 0x4f47
+#define PMIC_THRMZN2H_REG 0x4f48
+#define PMIC_THRMZN2L_REG 0x4f49
+#define PMIC_THRMZN3H_REG 0x4f4a
+#define PMIC_THRMZN3L_REG 0x4f4b
+#define PMIC_THRMZN4H_REG 0x4f4c
+#define PMIC_THRMZN4L_REG 0x4f4d
+#define PMIC_BATCRITCOLDH_REG 0x4f4e
+#define PMIC_BATCRITCOLDL_REG 0x4f4f
+#define PMIC_BATCRITHOTH_REG 0x4f50
+#define PMIC_BATCRITHOTL_REG 0x4f51
+#define PMIC_BATCRITH_REG 0x4f52
+#define PMIC_BATCRITL_REG 0x4f53
+#define PMIC_PMICCRITH_REG 0x4f54
+#define PMIC_PMICCRITL_REG 0x4f55
+#define PMIC_SYS0CRITH_REG 0x4f56
+#define PMIC_SYS0CRITL_REG 0x4f57
+#define PMIC_SYS1CRITH_REG 0x4f58
+#define PMIC_SYS1CRITL_REG 0x4f59
+#define PMIC_SYS2CRITH_REG 0x4f5a
+#define PMIC_SYS2CRITL_REG 0x4f5b
+#define PMIC_SYS0ALERT3H_REG 0x4f5c
+#define PMIC_SYS0ALERT3L_REG 0x4f5d
+#define PMIC_SYS1ALERT3H_REG 0x4f5e
+#define PMIC_SYS1ALERT3L_REG 0x4f5f
+#define PMIC_SYS2ALERT3H_REG 0x4f60
+#define PMIC_SYS2ALERT3L_REG 0x4f61
+#define PMIC_PMICALERT3H_REG 0x4f62
+#define PMIC_PMICALERT3L_REG 0x4f63
+#define PMIC_BAT0ALERT3H_REG 0x4f64
+#define PMIC_BAT0ALERT3L_REG 0x4f65
+#define PMIC_BAT1ALERT3H_REG 0x4f66
+#define PMIC_BAT1ALERT3L_REG 0x4f67
+#define PMIC_THRMCRITEN_REG 0x4f68
+#define PMIC_THRMALERT3EN_REG 0x4f69
+#define PMIC_THRMALERT3PAEN_REG 0x4f6a
+#define PMIC_CM_VCC_MODE_CTRL_REG 0x4f6b
+#define PMIC_CM_VPA_MODE_CTRL_REG 0x4f6d
+#define PMIC_CM_VNN_MODE_CTRL_REG 0x4f6e
+#define PMIC_CM_VDD1_MODE_CTRL_REG 0x4f70
+#define PMIC_CM_VDD2_MODE_CTRL_REG 0x4f71
+#define PMIC_CM_VPROG1_MODE_CTRL_REG 0x4f75
+#define PMIC_CM_VPROG2_MODE_CTRL_REG 0x4f79
+#define PMIC_CM_VPROG3_MODE_CTRL_REG 0x4f7c
+#define PMIC_CM_TSPAN_CTRL_REG 0x4f7e
+#define PMIC_CM_LDO1_THRSHLD_REG 0x4f7f
+#define PMIC_CM_LDO2_THRSHLD_REG 0x4f80
+#define PMIC_CM_LDO3_THRSHLD_REG 0x4f81
+#define PMIC_CM_SMPS0_THRSHLD_REG 0x4f82
+#define PMIC_CM_SMPS1_THRSHLD_REG 0x4f83
+#define PMIC_CM_SMPS2_THRSHLD_REG 0x4f84
+#define PMIC_CM_SMPS3_THRSHLD_REG 0x4f85
+#define PMIC_CM_SMPS4_THRSHLD_REG 0x4f86
+#define PMIC_CM_SMPS5_THRSHLD_REG 0x4f87
+#define PMIC_CM_VCC_DATA_REG 0x4f88
+#define PMIC_CM_VPA_DATA_REG 0x4f8a
+#define PMIC_CM_VNN_DATA_REG 0x4f8b
+#define PMIC_CM_VDD1_DATA_REG 0x4f8d
+#define PMIC_CM_VDD2_DATA_REG 0x4f8e
+#define PMIC_CM_PROG1_DATA_REG 0x4f92
+#define PMIC_CM_PROG2_DATA_REG 0x4f96
+#define PMIC_CM_PROG3_DATA_REG 0x4f99
+#define PMIC_CM_VCC_INT_LVL_REG 0x4f9d
+#define PMIC_CM_VNN_INT_LVL_REG 0x4f9e
+#define PMIC_CM_VPA_INT_LVL_REG 0x4f9f
+#define PMIC_CM_VDD2_INT_LVL_REG 0x4fa1
+#define PMIC_CM_VDD1_INT_LVL_REG 0x4fa2
+#define PMIC_CM_VPROG1_INT_LVL_REG 0x4fa5
+#define PMIC_CM_VPROG3_INT_LVL_REG 0x4fac
+#define PMIC_CM_VROCIRQSTAT0_REG 0x4fae
+#define PMIC_CM_VROCIRQSTAT1_REG 0x4faf
+#define PMIC_CM_VROCIRQSTAT2_REG 0x4fb0
+#define PMIC_CM_VROCIRQSTAT3_REG 0x4fb1
+#define PMIC_VRTCCTRL_REG 0x4fb5
+#define PMIC_TMUIRQ_REG 0x4fb6
+#define PMIC_MTMUIRQ_REG 0x4fb7
+#define PMIC_TMUSTATUS_REG 0x4fb8
+#define PMIC_TMUCONFIG_REG 0x4fb9
+#define PMIC_SECONDS_REG 0x4fba
+#define PMIC_SECONDSSA_REG 0x4fbb
+#define PMIC_SECONDSWA_REG 0x4fbc
+#define PMIC_MINUTES_REG 0x4fbd
+#define PMIC_MINUTESSA_REG 0x4fbe
+#define PMIC_MINUTESWA_REG 0x4fbf
+#define PMIC_HOURS_REG 0x4fc0
+#define PMIC_HOURSSA_REG 0x4fc1
+#define PMIC_HOURSWA_REG 0x4fc2
+#define PMIC_DWEEK_REG 0x4fc3
+#define PMIC_DMONTH_REG 0x4fc4
+#define PMIC_MONTH_REG 0x4fc5
+#define PMIC_YEAR_REG 0x4fc6
+#define PMIC_STCB1_REG 0x4fc7
+#define PMIC_STCB2_REG 0x4fc8
+#define PMIC_STCB3_REG 0x4fc9
+#define PMIC_STCB4_REG 0x4fca
+#define PMIC_DMONTHWA_REG 0x4fcb
+#define PMIC_CLKCONFIG_REG 0x4fcc
+#define PMIC_FLLCTRL_REG 0x4fcd
+#define PMIC_FLLDACSH_REG 0x4fce
+#define PMIC_FLLDACSL_REG 0x4fcf
+#define PMIC_FLLDAC_STATUSH_REG 0x4fd0
+#define PMIC_FLLDAC_STATUSL_REG 0x4fd1
+#define PMIC_FLLFRQDIV_REG 0x4fd2
+#define PMIC_CLK32CTRL_REG 0x4fd3
+#define PMIC_GPLEDCTRL_REG 0x4fdf
+#define PMIC_GPLEDFSM_REG 0x4fe0
+#define PMIC_GPLEDPWM_REG 0x4fe1
+#define PMIC_INTVREFCTRL_REG 0x4fe2
+#define PMIC_IREFTRIM_REG 0x4fe3
+#define PMIC_VREFTRIM0_REG 0x4fe4
+#define PMIC_VREFTRIM1_REG 0x4fe5
+#define PMIC_CC_THRH_REG 0x4fe6
+#define PMIC_CC_THRL_REG 0x4fe7
+#define PMIC_CC_CURR_SHRTH_REG 0x4fe8
+#define PMIC_CC_CURR_SHRTL_REG 0x4fe9
+#define PMIC_CC_CURR_LNGH_REG 0x4fea
+#define PMIC_CC_CURR_LNGL_REG 0x4feb
+#define PMIC_CC_CTRL0_REG 0x4fec
+#define PMIC_CC_CTRL1_REG 0x4fed
+#define PMIC_CC_DOWN_B3_REG 0x4fee
+#define PMIC_CC_DOWN_B2_REG 0x4fef
+#define PMIC_CC_DOWN_B1_REG 0x4ff0
+#define PMIC_CC_DOWN_B0_REG 0x4ff1
+#define PMIC_CC_UP_B3_REG 0x4ff2
+#define PMIC_CC_UP_B2_REG 0x4ff3
+#define PMIC_CC_UP_B1_REG 0x4ff4
+#define PMIC_CC_UP_B0_REG 0x4ff5
+#define PMIC_VBATMAXH_REG 0x4ff6
+#define PMIC_VBATMAXL_REG 0x4ff7
+#define PMIC_MAX_CURR_SHRTH_REG 0x4ff8
+#define PMIC_MAX_CURR_SHRTL_REG 0x4ff9
+#define PMIC_MAX_CURR_LNGH_REG 0x4ffa
+#define PMIC_MAX_CURR_LNGL_REG 0x4ffb
+#define PMIC_PLTSEL_REG 0x4ffe
+#define PMIC_PROVERSION_REG 0x4fff
+#define PMIC_PMICWDTCNT_REG 0x5e00
+#define PMIC_PMICWDTTC_REG 0x5e01
+#define PMIC_SCRITIRQ_REG 0x5e02
+#define PMIC_USBIDCTRL_REG 0x5e05
+#define PMIC_USBIDDETTYPE_REG 0x5e07
+#define PMIC_USBPHYCTRL_REG 0x5e08
+#define PMIC_USBRSTGPO_REG 0x5e09
+#define PMIC_USBRSTGPI_REG 0x5e0a
+#define PMIC_VSYSCTRL_REG 0x5e0c
+#define PMIC_VOTPCTRL_REG 0x5e0d
+#define PMIC_VXOCNT_REG 0x5e0e
+#define PMIC_DEV3_STATUS_1_REG 0x5e10
+#define PMIC_DEV3_STATUS_2_REG 0x5e11
+#define PMIC_CHGDETGPO_REG 0x5e12
+#define PMIC_CHGDETGPI_REG 0x5e13
+#define PMIC_DBPTIMEOUT_REG 0x5e14
+#define PMIC_DBPTIMER_REG 0x5e15
+#define PMIC_CHGRCTRL0_REG 0x5e16
+#define PMIC_CHGRCTRL1_REG 0x5e17
+#define PMIC_CHGRCTRL2_REG 0x5e18
+#define PMIC_CHGRSTATUS_REG 0x5e19
+#define PMIC_SCHGRIRQ_REG 0x5e1a
+#define PMIC_DEV3_STATUS2_LASTREAD_REG 0x5e1c
+#define PMIC_VBUSDETCTRL_REG 0x5e1d
+#define PMIC_VDCINDETCTRL_REG 0x5e1e
+#define PMIC_CHRLEDCTRL_REG 0x5e1f
+#define PMIC_CHRLEDFSM_REG 0x5e20
+#define PMIC_CHRLEDPWM_REG 0x5e21
+#define PMIC_CHRTTADDR_REG 0x5e22
+#define PMIC_CHRTTDATA_REG 0x5e23
+#define PMIC_I2COVRCTRL_REG 0x5e24
+#define PMIC_I2COVRDADDR_REG 0x5e25
+#define PMIC_I2COVROFFSET_REG 0x5e26
+#define PMIC_I2COVRWRDATA_REG 0x5e27
+#define PMIC_I2COVRRDDATA_REG 0x5e28
+#define PMIC_USBSRCDETSTATUS0_REG 0x5e29
+#define PMIC_USBSRCDETSTATUS1_REG 0x5e2a
+#define PMIC_CCSMCMDSKIP_REG 0x5e2b
+#define PMIC_CCSMSFTTIMER_REG 0x5e2c
+#define PMIC_SCCSMSFTTIMER_REG 0x5e2d
+#define PMIC_CHGRCTRL3_REG 0x5e2e
+#define PMIC_CHGDISCTRL_REG 0x5e2f
+#define PMIC_TLP1CTRL_REG 0x5e30
+#define PMIC_TLP1EVSTATUS0_REG 0x5e31
+#define PMIC_TLP1EVSTATUS1_REG 0x5e32
+#define PMIC_TLP1EVSTATUS2_REG 0x5e33
+#define PMIC_TLP1EVSTATUS3_REG 0x5e34
+#define PMIC_DEV3_SETREGADR_REG 0x5e35
+#define PMIC_TLP1TRACEINSTH_REG 0x5e36
+#define PMIC_TLP1TRACEINSTL_REG 0x5e37
+#define PMIC_TLP1INSTMEMADDRH_REG 0x5e38
+#define PMIC_TLP1INSTMEMADDRL_REG 0x5e39
+#define PMIC_TLP1INSTMEMDATAH_REG 0x5e3a
+#define PMIC_TLP1INSTMEMDATAL_REG 0x5e3b
+#define PMIC_TLP1COLDBOOTH_REG 0x5e3c
+#define PMIC_TLP1COLDBOOTL_REG 0x5e3d
+#define PMIC_TLP1COLDOFFH_REG 0x5e3e
+#define PMIC_TLP1COLDOFFL_REG 0x5e3f
+#define PMIC_TLP1COLDRSTH_REG 0x5e40
+#define PMIC_TLP1COLDRSTL_REG 0x5e41
+#define PMIC_TLP1WARMRSTH_REG 0x5e42
+#define PMIC_TLP1WARMRSTL_REG 0x5e43
+#define PMIC_TLP1ESBS0I1H_REG 0x5e44
+#define PMIC_TLP1ESBS0I1L_REG 0x5e45
+#define PMIC_TLP1ESBS0I1VNNH_REG 0x5e46
+#define PMIC_TLP1ESBS0I1VNNL_REG 0x5e47
+#define PMIC_TLP1ESBS0I1VNNLPH_REG 0x5e48
+#define PMIC_TLP1ESBS0I1VNNLPL_REG 0x5e49
+#define PMIC_TLP1ESBS0I2H_REG 0x5e4a
+#define PMIC_TLP1ESBS0I2L_REG 0x5e4b
+#define PMIC_TLP1ESBS0I3H_REG 0x5e4c
+#define PMIC_TLP1ESBS0I3L_REG 0x5e4d
+#define PMIC_TLP1ESBS0I3LPH_REG 0x5e4e
+#define PMIC_TLP1ESBS0I3LPL_REG 0x5e4f
+#define PMIC_TLP1EXSBH_REG 0x5e50
+#define PMIC_TLP1EXSBL_REG 0x5e51
+#define PMIC_TLP1ESBS0IXH_REG 0x5e52
+#define PMIC_TLP1ESBS0IXL_REG 0x5e53
+#define PMIC_TLP1ESBS3H_REG 0x5e54
+#define PMIC_TLP1ESBS3L_REG 0x5e55
+#define PMIC_TLP1EXSBS0IXH_REG 0x5e56
+#define PMIC_TLP1EXSBS0IXL_REG 0x5e57
+#define PMIC_TLP1EXSBS3H_REG 0x5e58
+#define PMIC_TLP1EXSBS3L_REG 0x5e59
+#define PMIC_TLP1MODEMRSTH_REG 0x5e5a
+#define PMIC_TLP1MODEMRSTL_REG 0x5e5b
+#define PMIC_TLP1VRSETTLED_REG 0x5e5c
+#define PMIC_TLP2CTRL_REG 0x5e61
+#define PMIC_TLP2EVSTATUS_REG 0x5e62
+#define PMIC_TLP2TRACEINST_REG 0x5e63
+#define PMIC_TLP2INSTMEMADDR_REG 0x5e64
+#define PMIC_TLP2INSTMEMDATA_REG 0x5e65
+#define PMIC_TLP2SYSTEMP_REG 0x5e66
+#define PMIC_TLP2BATTID_REG 0x5e67
+#define PMIC_TLP2BATTV_REG 0x5e68
+#define PMIC_TLP2USBID_REG 0x5e69
+#define PMIC_TLP2PEAK_REG 0x5e6a
+#define PMIC_TLP2GPMEAS_REG 0x5e6b
+#define PMIC_CM_PROG2D_DATA_REG 0x5e88
+#define PMIC_VENDCTL1_REG 0x5f37
+/*Temporary fix: for RFFE interface to be enabled ,
+for PA DCDC to be controlled by RFFE as this require PMIC reg access */
+#define PMIC_DEV4_VPACFG_REG 0x5F70
+
+#define PMIC_DEV4_DCDCVIRQ0_REG 0x5F7E
+#define PMIC_DEV4_VROCIRQ0_REG 0x5F80
+#define PMIC_DEV4_VROCIRQ2_REG 0x5F82
+#define PMIC_DEV4_MVENDIRQLVL1_REG 0x5F84
+#define PMIC_DEV4_MVROCIRQ0_REG 0x5F8D
+#define PMIC_DEV4_MVROCIRQ2_REG 0x5F8F
+#define PMIC_DEV4_MDCDCVIRQ0_REG 0x5F8B
+#define PMIC_DEV4_M_VEND_INT_REG 0x5F91
+
+#define PMIC_VCC	1
+#define PMIC_VNN	0
+
+#define PMIC_VCC_VNN_BASE(is_vcc) ((is_vcc) ? 0x1000 : 0x1200)
+
+#define PMIC_SETVIDFAST_REG(is_vcc)	(PMIC_VCC_VNN_BASE(is_vcc) | 0x07)
+#define PMIC_SETVIDSLOW_REG(is_vcc)	(PMIC_VCC_VNN_BASE(is_vcc) | 0x08)
+#define PMIC_SETVIDDECAY_REG(is_vcc)	(PMIC_VCC_VNN_BASE(is_vcc) | 0x09)
+
+#define PMIC_VCC_STDBY_EXITVID_REG  0x1036
+#define PMIC_VNN_STDBY_EXITVID_REG  0x1236
+#define PMIC_VCC_SETVIDFAST_REG  0x1007
+#define PMIC_VNN_SETVIDFAST_REG  0x1207
+
+#define PMIC_ID0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_ID1_REG_RESET_VALUE = (HWREG_U8)0x2
+#define PMIC_IRQLVL1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_PBIRQ_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMIRQ0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMIRQ1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMIRQ2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_BCUIRQ_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_ADCIRQ_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CHGRIRQ0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CHGRIRQ1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_GPIOIRQ0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_GPIOIRQ1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CRITIRQ_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MIRQLVL1_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_MPBIRQ_REG_RESET_VALUE = (HWREG_U8)0x83
+#define PMIC_DEV1_STATUS_1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_DEV1_STATUS_2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MTHRMIRQ0_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_MTHRMIRQ1_REG_RESET_VALUE = (HWREG_U8)0xbf
+#define PMIC_MTHRMIRQ2_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_MBCUIRQ_REG_RESET_VALUE = (HWREG_U8)0x1f
+#define PMIC_MADCIRQ_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_MCHGRIRQ0_REG_RESET_VALUE = (HWREG_U8)0x1f
+#define PMIC_MCHGRIRQ1_REG_RESET_VALUE = (HWREG_U8)0x1f
+#define PMIC_MGPIOIRQ0_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_MGPIOIRQ1_REG_RESET_VALUE = (HWREG_U8)0x3f
+#define PMIC_MCRITIRQ_REG_RESET_VALUE = (HWREG_U8)0x3
+#define PMIC_DEV1_STATUS2_LASTREAD_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MSVIDALERT_REG_RESET_VALUE = (HWREG_U8)0x7
+#define PMIC_IRQMULT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MIRQMULT_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_SPWRSRC_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_LOWBATTDET0_REG_RESET_VALUE = (HWREG_U8)0xc
+#define PMIC_LOWBATTDET1_REG_RESET_VALUE = (HWREG_U8)0x79
+#define PMIC_PSDETCTRL_REG_RESET_VALUE = (HWREG_U8)0x3
+#define PMIC_BATTDETCTRL0_REG_RESET_VALUE = (HWREG_U8)0x81
+#define PMIC_BATTDETCTRL1_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_SPLTIMER_REG_RESET_VALUE = (HWREG_U8)0x7d
+#define PMIC_SSPLTIMER_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CHIPCNTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_PLATFORMRST_DT_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_RESETSRC0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_RESETSRC1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_RESETRDYCTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_SRCWAKECFG_REG_RESET_VALUE = (HWREG_U8)0x37
+#define PMIC_WAKESRC_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_STDBYCNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_REGLOCK_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_DEV1_SETREGADR_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MODEMCTRL_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_SOCCTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_BBCHGRCFG_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_FLTCFG_REG_RESET_VALUE = (HWREG_U8)0x3
+#define PMIC_PBCONFIG1_REG_RESET_VALUE = (HWREG_U8)0x6a
+#define PMIC_PBCONFIG2_REG_RESET_VALUE = (HWREG_U8)0x4
+#define PMIC_PBSTATUS_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_UBSTATUS_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_GPIO0P0CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P1CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P2CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P3CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P4CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P5CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P6CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO1P0CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO1P1CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO1P2CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO1P3CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO2P0CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO2P1CTLO_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P0CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P1CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P2CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P3CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P4CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P5CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO0P6CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO1P0CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO1P1CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO1P2CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO1P3CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO2P0CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_GPIO2P1CTLI_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_VCCCNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VNNCNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VDD1CNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VDD1VSEL_REG_RESET_VALUE = (HWREG_U8)0x9b
+#define PMIC_VDD2CNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VDD2VSEL_REG_RESET_VALUE = (HWREG_U8)0x63
+#define PMIC_VPACNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VPAVSEL_REG_RESET_VALUE = (HWREG_U8)0x63
+#define PMIC_VREFSOCCNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VWARN1_CFG_REG_RESET_VALUE = (HWREG_U8)0xe2
+#define PMIC_VWARN2_CFG_REG_RESET_VALUE = (HWREG_U8)0xe4
+#define PMIC_VCRIT_CFG_REG_RESET_VALUE = (HWREG_U8)0xbd
+#define PMIC_BCUDISCRIT_BEH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_S_BCUIRQ_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_S_BCUCTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_ICCMAXVSYS_CFG_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_ICCMAXVCC_CFG_REG_RESET_VALUE = (HWREG_U8)0x3
+#define PMIC_ICCMAXVNN_CFG_REG_RESET_VALUE = (HWREG_U8)0x6
+#define PMIC_SOCWDTCFG_REG_RESET_VALUE = (HWREG_U8)0x2
+#define PMIC_VLDOCNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VPROG1CNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VPROG2CNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VPROG3CNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VUSBCNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VSIM1CNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VSIM2CNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VMIPICNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VEMMCCNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VSDCNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VSDMMCCNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VPROG1VSEL_REG_RESET_VALUE = (HWREG_U8)0x34
+#define PMIC_VPROG2VSEL_REG_RESET_VALUE = (HWREG_U8)0x33
+#define PMIC_VPROG3VSEL_REG_RESET_VALUE = (HWREG_U8)0x13
+#define PMIC_VUSBVSEL_REG_RESET_VALUE = (HWREG_U8)0x3a
+#define PMIC_VSIM1VSEL_REG_RESET_VALUE = (HWREG_U8)0x37
+#define PMIC_VSIM2VSEL_REG_RESET_VALUE = (HWREG_U8)0x37
+#define PMIC_VMIPIVSEL_REG_RESET_VALUE = (HWREG_U8)0x13
+#define PMIC_VEMMCVSEL_REG_RESET_VALUE = (HWREG_U8)0x34
+#define PMIC_VSDVSEL_REG_RESET_VALUE = (HWREG_U8)0x34
+#define PMIC_VSDMMCVSEL_REG_RESET_VALUE = (HWREG_U8)0x34
+#define PMIC_TRMPGM_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_OTPVERSION_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_GPADCREQ_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VBATRSLTH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VBATRSLTL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_GPADCCNTL_REG_RESET_VALUE = (HWREG_U8)0x2
+#define PMIC_BATTIDRSLTH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_BATTIDRSLTL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_USBIDRSLTH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_USBIDRSLTL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_GPMEASRSLTH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_GPMEASRSLTL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_Y0DATAH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_Y0DATAL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_Y1DATAH_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_Y1DATAL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_DEV2_STATUS_1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_DEV2_STATUS_2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_PEAKREQ_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_PEAKRSLTH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_PEAKRSLTL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_BATTEMP0H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_BATTEMP0L_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_BATTEMP1H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_BATTEMP1L_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_STHRMIRQ0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_STHRMIRQ1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_STHRMIRQ2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_DEV2_STATUS2_LASTREAD_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMMONCFG_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_THRMMONCTL_REG_RESET_VALUE = (HWREG_U8)0x11
+#define PMIC_BATTHERMMONCTL_REG_RESET_VALUE = (HWREG_U8)0x52
+#define PMIC_VBATMONCTL_REG_RESET_VALUE = (HWREG_U8)0x12
+#define PMIC_GPMONCTL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMBATZONE_REG_RESET_VALUE = (HWREG_U8)0x7
+#define PMIC_SYS0ALERT0H_REG_RESET_VALUE = (HWREG_U8)0x20
+#define PMIC_SYS0ALERT0L_REG_RESET_VALUE = (HWREG_U8)0xb8
+#define PMIC_SYS0ALERT1H_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_SYS0ALERT1L_REG_RESET_VALUE = (HWREG_U8)0x87
+#define PMIC_SYS1ALERT0H_REG_RESET_VALUE = (HWREG_U8)0x20
+#define PMIC_SYS1ALERT0L_REG_RESET_VALUE = (HWREG_U8)0xb8
+#define PMIC_SYS1ALERT1H_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_SYS1ALERT1L_REG_RESET_VALUE = (HWREG_U8)0x87
+#define PMIC_SYS2ALERT0H_REG_RESET_VALUE = (HWREG_U8)0x20
+#define PMIC_SYS2ALERT0L_REG_RESET_VALUE = (HWREG_U8)0xb8
+#define PMIC_SYS2ALERT1H_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_SYS2ALERT1L_REG_RESET_VALUE = (HWREG_U8)0x87
+#define PMIC_BAT0ALERT0H_REG_RESET_VALUE = (HWREG_U8)0x31
+#define PMIC_BAT0ALERT0L_REG_RESET_VALUE = (HWREG_U8)0x65
+#define PMIC_BAT1ALERT0H_REG_RESET_VALUE = (HWREG_U8)0x31
+#define PMIC_BAT1ALERT0L_REG_RESET_VALUE = (HWREG_U8)0x65
+#define PMIC_PMICALERT0H_REG_RESET_VALUE = (HWREG_U8)0xc
+#define PMIC_PMICALERT0L_REG_RESET_VALUE = (HWREG_U8)0xfb
+#define PMIC_DEV2_SETREGADR_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_GPMEASALERTH_REG_RESET_VALUE = (HWREG_U8)0x20
+#define PMIC_GPMEASALERTL_REG_RESET_VALUE = (HWREG_U8)0xb8
+#define PMIC_THRMRSLT0H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT0L_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT1H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT1L_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT2H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT2L_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT3H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT3L_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT4H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT4L_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT5H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMRSLT5L_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMZN0H_REG_RESET_VALUE = (HWREG_U8)0x25
+#define PMIC_THRMZN0L_REG_RESET_VALUE = (HWREG_U8)0xa1
+#define PMIC_THRMZN1H_REG_RESET_VALUE = (HWREG_U8)0x15
+#define PMIC_THRMZN1L_REG_RESET_VALUE = (HWREG_U8)0x12
+#define PMIC_THRMZN2H_REG_RESET_VALUE = (HWREG_U8)0x11
+#define PMIC_THRMZN2L_REG_RESET_VALUE = (HWREG_U8)0x2d
+#define PMIC_THRMZN3H_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_THRMZN3L_REG_RESET_VALUE = (HWREG_U8)0xfe
+#define PMIC_THRMZN4H_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_THRMZN4L_REG_RESET_VALUE = (HWREG_U8)0xb8
+#define PMIC_BATCRITCOLDH_REG_RESET_VALUE = (HWREG_U8)0x27
+#define PMIC_BATCRITCOLDL_REG_RESET_VALUE = (HWREG_U8)0x45
+#define PMIC_BATCRITHOTH_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_BATCRITHOTL_REG_RESET_VALUE = (HWREG_U8)0x87
+#define PMIC_BATCRITH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_BATCRITL_REG_RESET_VALUE = (HWREG_U8)0x89
+#define PMIC_PMICCRITH_REG_RESET_VALUE = (HWREG_U8)0xe
+#define PMIC_PMICCRITL_REG_RESET_VALUE = (HWREG_U8)0x29
+#define PMIC_SYS0CRITH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_SYS0CRITL_REG_RESET_VALUE = (HWREG_U8)0x59
+#define PMIC_SYS1CRITH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_SYS1CRITL_REG_RESET_VALUE = (HWREG_U8)0x59
+#define PMIC_SYS2CRITH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_SYS2CRITL_REG_RESET_VALUE = (HWREG_U8)0x59
+#define PMIC_SYS0ALERT3H_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_SYS0ALERT3L_REG_RESET_VALUE = (HWREG_U8)0x65
+#define PMIC_SYS1ALERT3H_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_SYS1ALERT3L_REG_RESET_VALUE = (HWREG_U8)0x65
+#define PMIC_SYS2ALERT3H_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_SYS2ALERT3L_REG_RESET_VALUE = (HWREG_U8)0x65
+#define PMIC_PMICALERT3H_REG_RESET_VALUE = (HWREG_U8)0xd
+#define PMIC_PMICALERT3L_REG_RESET_VALUE = (HWREG_U8)0x20
+#define PMIC_BAT0ALERT3H_REG_RESET_VALUE = (HWREG_U8)0x20
+#define PMIC_BAT0ALERT3L_REG_RESET_VALUE = (HWREG_U8)0xb8
+#define PMIC_BAT1ALERT3H_REG_RESET_VALUE = (HWREG_U8)0x20
+#define PMIC_BAT1ALERT3L_REG_RESET_VALUE = (HWREG_U8)0xb8
+#define PMIC_THRMCRITEN_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_THRMALERT3EN_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_THRMALERT3PAEN_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VCC_MODE_CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VPA_MODE_CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VNN_MODE_CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VDD1_MODE_CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VDD2_MODE_CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VPROG1_MODE_CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VPROG2_MODE_CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VPROG3_MODE_CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_TSPAN_CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_LDO1_THRSHLD_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_LDO2_THRSHLD_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_LDO3_THRSHLD_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_SMPS0_THRSHLD_REG_RESET_VALUE = (HWREG_U8)0x77
+#define PMIC_CM_SMPS1_THRSHLD_REG_RESET_VALUE = (HWREG_U8)0x7
+#define PMIC_CM_SMPS2_THRSHLD_REG_RESET_VALUE = (HWREG_U8)0x77
+#define PMIC_CM_SMPS3_THRSHLD_REG_RESET_VALUE = (HWREG_U8)0x77
+#define PMIC_CM_SMPS4_THRSHLD_REG_RESET_VALUE = (HWREG_U8)0x77
+#define PMIC_CM_SMPS5_THRSHLD_REG_RESET_VALUE = (HWREG_U8)0x7
+#define PMIC_CM_VCC_DATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VPA_DATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VNN_DATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VDD1_DATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VDD2_DATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_PROG1_DATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_PROG2_DATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_PROG3_DATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VCC_INT_LVL_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CM_VNN_INT_LVL_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CM_VPA_INT_LVL_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CM_VDD2_INT_LVL_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CM_VDD1_INT_LVL_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CM_VPROG1_INT_LVL_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CM_VPROG3_INT_LVL_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CM_VROCIRQSTAT0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VROCIRQSTAT1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VROCIRQSTAT2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CM_VROCIRQSTAT3_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VRTCCTRL_REG_RESET_VALUE = (HWREG_U8)0x2
+#define PMIC_TMUIRQ_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MTMUIRQ_REG_RESET_VALUE = (HWREG_U8)0x6
+#define PMIC_TMUSTATUS_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TMUCONFIG_REG_RESET_VALUE = (HWREG_U8)0x10
+#define PMIC_SECONDS_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_SECONDSSA_REG_RESET_VALUE = (HWREG_U8)0x3f
+#define PMIC_SECONDSWA_REG_RESET_VALUE = (HWREG_U8)0x3f
+#define PMIC_MINUTES_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MINUTESSA_REG_RESET_VALUE = (HWREG_U8)0x3f
+#define PMIC_MINUTESWA_REG_RESET_VALUE = (HWREG_U8)0x3f
+#define PMIC_HOURS_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_HOURSSA_REG_RESET_VALUE = (HWREG_U8)0x1f
+#define PMIC_HOURSWA_REG_RESET_VALUE = (HWREG_U8)0x1f
+#define PMIC_DWEEK_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_DMONTH_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_MONTH_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_YEAR_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_STCB1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_STCB2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_STCB3_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_STCB4_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_DMONTHWA_REG_RESET_VALUE = (HWREG_U8)0x1f
+#define PMIC_CLKCONFIG_REG_RESET_VALUE = (HWREG_U8)0x14
+#define PMIC_FLLCTRL_REG_RESET_VALUE = (HWREG_U8)0x72
+#define PMIC_FLLDACSH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_FLLDACSL_REG_RESET_VALUE = (HWREG_U8)0x4e
+#define PMIC_FLLDAC_STATUSH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_FLLDAC_STATUSL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_FLLFRQDIV_REG_RESET_VALUE = (HWREG_U8)0x17
+#define PMIC_CLK32CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_GPLEDCTRL_REG_RESET_VALUE = (HWREG_U8)0x18
+#define PMIC_GPLEDFSM_REG_RESET_VALUE = (HWREG_U8)0x6
+#define PMIC_GPLEDPWM_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_INTVREFCTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_IREFTRIM_REG_RESET_VALUE = (HWREG_U8)0x20
+#define PMIC_VREFTRIM0_REG_RESET_VALUE = (HWREG_U8)0x43
+#define PMIC_VREFTRIM1_REG_RESET_VALUE = (HWREG_U8)0x3f
+#define PMIC_CC_THRH_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CC_THRL_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CC_CURR_SHRTH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CC_CURR_SHRTL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CC_CURR_LNGH_REG_RESET_VALUE = (HWREG_U8)0x1f
+#define PMIC_CC_CURR_LNGL_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CC_CTRL0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CC_CTRL1_REG_RESET_VALUE = (HWREG_U8)0x8
+#define PMIC_CC_DOWN_B3_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CC_DOWN_B2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CC_DOWN_B1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CC_DOWN_B0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CC_UP_B3_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CC_UP_B2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CC_UP_B1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CC_UP_B0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VBATMAXH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VBATMAXL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MAX_CURR_SHRTH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MAX_CURR_SHRTL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MAX_CURR_LNGH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_MAX_CURR_LNGL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_PLTSEL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_PROVERSION_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_PMICWDTCNT_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_PMICWDTTC_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_SCRITIRQ_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_USBIDCTRL_REG_RESET_VALUE = (HWREG_U8)0x3
+#define PMIC_USBIDDETTYPE_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_USBPHYCTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_USBRSTGPO_REG_RESET_VALUE = (HWREG_U8)0x50
+#define PMIC_USBRSTGPI_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VSYSCTRL_REG_RESET_VALUE = (HWREG_U8)0x9
+#define PMIC_VOTPCTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VXOCNT_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_DEV3_STATUS_1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_DEV3_STATUS_2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CHGDETGPO_REG_RESET_VALUE = (HWREG_U8)0x4a
+#define PMIC_CHGDETGPI_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_DBPTIMEOUT_REG_RESET_VALUE = (HWREG_U8)0xb
+#define PMIC_DBPTIMER_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CHGRCTRL0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CHGRCTRL1_REG_RESET_VALUE = (HWREG_U8)0x80
+#define PMIC_CHGRCTRL2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CHGRSTATUS_REG_RESET_VALUE = (HWREG_U8)0xf
+#define PMIC_SCHGRIRQ_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_DEV3_STATUS2_LASTREAD_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_VBUSDETCTRL_REG_RESET_VALUE = (HWREG_U8)0x7c
+#define PMIC_VDCINDETCTRL_REG_RESET_VALUE = (HWREG_U8)0x4
+#define PMIC_CHRLEDCTRL_REG_RESET_VALUE = (HWREG_U8)0x18
+#define PMIC_CHRLEDFSM_REG_RESET_VALUE = (HWREG_U8)0x6
+#define PMIC_CHRLEDPWM_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CHRTTADDR_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CHRTTDATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_I2COVRCTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_I2COVRDADDR_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_I2COVROFFSET_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_I2COVRWRDATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_I2COVRRDDATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_USBSRCDETSTATUS0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_USBSRCDETSTATUS1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CCSMCMDSKIP_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_CCSMSFTTIMER_REG_RESET_VALUE = (HWREG_U8)0x6c
+#define PMIC_SCCSMSFTTIMER_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CHGRCTRL3_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_CHGDISCTRL_REG_RESET_VALUE = (HWREG_U8)0x50
+#define PMIC_TLP1CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1EVSTATUS0_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1EVSTATUS1_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1EVSTATUS2_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1EVSTATUS3_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_DEV3_SETREGADR_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1TRACEINSTH_REG_RESET_VALUE = (HWREG_U8)0x3
+#define PMIC_TLP1TRACEINSTL_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_TLP1INSTMEMADDRH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1INSTMEMADDRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1INSTMEMDATAH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1INSTMEMDATAL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1COLDBOOTH_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_TLP1COLDBOOTL_REG_RESET_VALUE = (HWREG_U8)0xa7
+#define PMIC_TLP1COLDOFFH_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_TLP1COLDOFFL_REG_RESET_VALUE = (HWREG_U8)0x4e
+#define PMIC_TLP1COLDRSTH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1COLDRSTL_REG_RESET_VALUE = (HWREG_U8)0x42
+#define PMIC_TLP1WARMRSTH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1WARMRSTL_REG_RESET_VALUE = (HWREG_U8)0x8e
+#define PMIC_TLP1ESBS0I1H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1ESBS0I1L_REG_RESET_VALUE = (HWREG_U8)0x9f
+#define PMIC_TLP1ESBS0I1VNNH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1ESBS0I1VNNL_REG_RESET_VALUE = (HWREG_U8)0x9f
+#define PMIC_TLP1ESBS0I1VNNLPH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1ESBS0I1VNNLPL_REG_RESET_VALUE = (HWREG_U8)0x9f
+#define PMIC_TLP1ESBS0I2H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1ESBS0I2L_REG_RESET_VALUE = (HWREG_U8)0xd2
+#define PMIC_TLP1ESBS0I3H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1ESBS0I3L_REG_RESET_VALUE = (HWREG_U8)0xd2
+#define PMIC_TLP1ESBS0I3LPH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1ESBS0I3LPL_REG_RESET_VALUE = (HWREG_U8)0xd2
+#define PMIC_TLP1EXSBH_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_TLP1EXSBL_REG_RESET_VALUE = (HWREG_U8)0x9
+#define PMIC_TLP1ESBS0IXH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1ESBS0IXL_REG_RESET_VALUE = (HWREG_U8)0x4d
+#define PMIC_TLP1ESBS3H_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1ESBS3L_REG_RESET_VALUE = (HWREG_U8)0x8e
+#define PMIC_TLP1EXSBS0IXH_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP1EXSBS0IXL_REG_RESET_VALUE = (HWREG_U8)0xd3
+#define PMIC_TLP1EXSBS3H_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_TLP1EXSBS3L_REG_RESET_VALUE = (HWREG_U8)0x11
+#define PMIC_TLP1MODEMRSTH_REG_RESET_VALUE = (HWREG_U8)0x1
+#define PMIC_TLP1MODEMRSTL_REG_RESET_VALUE = (HWREG_U8)0x43
+#define PMIC_TLP1VRSETTLED_REG_RESET_VALUE = (HWREG_U8)0x2
+#define PMIC_TLP2CTRL_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP2EVSTATUS_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP2TRACEINST_REG_RESET_VALUE = (HWREG_U8)0xff
+#define PMIC_TLP2INSTMEMADDR_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP2INSTMEMDATA_REG_RESET_VALUE = (HWREG_U8)0x0
+#define PMIC_TLP2SYSTEMP_REG_RESET_VALUE = (HWREG_U8)0xe
+#define PMIC_TLP2BATTID_REG_RESET_VALUE = (HWREG_U8)0x26
+#define PMIC_TLP2BATTV_REG_RESET_VALUE = (HWREG_U8)0x34
+#define PMIC_TLP2USBID_REG_RESET_VALUE = (HWREG_U8)0x44
+#define PMIC_TLP2PEAK_REG_RESET_VALUE = (HWREG_U8)0x52
+#define PMIC_TLP2GPMEAS_REG_RESET_VALUE = (HWREG_U8)0x60
+#define PMIC_CM_PROG2D_DATA_REG_RESET_VALUE = (HWREG_U8)0x0
+
+
+#if !defined(PMIC_REG_INLINE_DISABLED) || defined(__PMIC_HW_REG_C__)
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ID0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ eID0_REG_MINREV getPmic_ID0_REG_MINREV(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return ( eID0_REG_MINREV ) value;
+}
+
+__HWREG_INLINE__ eID0_REG_MAJREV getPmic_ID0_REG_MAJREV(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 3) ) >> 3;
+    return ( eID0_REG_MAJREV ) value;
+}
+
+__HWREG_INLINE__ eID0_REG_VENDID getPmic_ID0_REG_VENDID(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 6) ) >> 6;
+    return ( eID0_REG_VENDID ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ID1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ eID1_REG_DEVICEID getPmic_ID1_REG_DEVICEID(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return ( eID1_REG_DEVICEID ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_PWRBTN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_TMU(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_THRM(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_BCU(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_ADC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_CHGR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_GPIO(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQLVL1_REG_CRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBIRQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PBIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBIRQ_REG_PBTN(HWREG_U8 _reg, ePBIRQ_REG_PBTN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ ePBIRQ_REG_PBTN getPmic_PBIRQ_REG_PBTN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( ePBIRQ_REG_PBTN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBIRQ_REG_UBTN(HWREG_U8 _reg, ePBIRQ_REG_UBTN value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ ePBIRQ_REG_UBTN getPmic_PBIRQ_REG_UBTN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( ePBIRQ_REG_UBTN ) value;
+}
+
+__HWREG_INLINE__ ePBIRQ_REG_VEND getPmic_PBIRQ_REG_VEND(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return ( ePBIRQ_REG_VEND ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS0ALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS0ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS1ALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS1ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS2ALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS2ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_PMICALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_PMICALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS0ALRT1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS0ALRT1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS1ALRT1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS1ALRT1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_SYS2ALRT1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_SYS2ALRT1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ0_REG_GPALRT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ0_REG_GPALRT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_SYS0CRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_SYS0CRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_SYS1CRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_SYS1CRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_SYS2CRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_SYS2CRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_PMICCRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_PMICCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_BATCRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_BATCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_BATCRITHOTCOLD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_BATCRITHOTCOLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ1_REG_BZIRQ(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ1_REG_BZIRQ(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_SYS0ALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_SYS0ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_SYS1ALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_SYS1ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_SYS2ALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_SYS2ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_PMICALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_PMICALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_BAT0ALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_BAT0ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_BAT1ALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_BAT1ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_BAT0ALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_BAT0ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMIRQ2_REG_BAT1ALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMIRQ2_REG_BAT1ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUIRQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUIRQ_REG_VWARN1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUIRQ_REG_VWARN1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUIRQ_REG_VWARN2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUIRQ_REG_VWARN2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUIRQ_REG_VCRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUIRQ_REG_VCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_USBID(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_USBID(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_PEAK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_PEAK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_BATTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_BATTEMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_SYSTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_SYSTEMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_BATTID(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_BATTID(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_VBATT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_VBATT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_GPMEAS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_GPMEAS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ADCIRQ_REG_CCTICK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ADCIRQ_REG_CCTICK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG_CHGINTB(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG_CHGINTB(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG_I2CWRCMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG_I2CWRCMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG_I2CRDCMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG_I2CRDCMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG_I2CERROR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG_I2CERROR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ0_REG_CTYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ0_REG_CTYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG_VBUSDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG_VBUSDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG_DCDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG_DCDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG_BATTDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG_BATTDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG_USBIDFLTDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG_USBIDFLTDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRIRQ1_REG_USBIDGNDDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRIRQ1_REG_USBIDGNDDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P4(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P4(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P5(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P5(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_GPIO0P6(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_GPIO0P6(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ0_REG_BATTIO(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ0_REG_BATTIO(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO1P0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO1P0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO1P1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO1P1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO1P2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO1P2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO1P3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO1P3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO2P0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO2P0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIOIRQ1_REG_GPIO2P1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIOIRQ1_REG_GPIO2P1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CRITIRQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CRITIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CRITIRQ_REG_VROCP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CRITIRQ_REG_VROCP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CRITIRQ_REG_OSCSTP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CRITIRQ_REG_OSCSTP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MTMU(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MTMU(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MTHRM(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MTHRM(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MBCU(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MBCU(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MADC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MADC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MCHGR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MCHGR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MGPIO(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MGPIO(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQLVL1_REG_MCRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQLVL1_REG_MCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MPBIRQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MPBIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MPBIRQ_REG_MPBTN(HWREG_U8 _reg, eMPBIRQ_REG_MPBTN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eMPBIRQ_REG_MPBTN getPmic_MPBIRQ_REG_MPBTN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eMPBIRQ_REG_MPBTN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MPBIRQ_REG_MUBTN(HWREG_U8 _reg, eMPBIRQ_REG_MUBTN value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eMPBIRQ_REG_MUBTN getPmic_MPBIRQ_REG_MUBTN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eMPBIRQ_REG_MUBTN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MPBIRQ_REG_MVEND(HWREG_U8 _reg, eMPBIRQ_REG_MVEND value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ eMPBIRQ_REG_MVEND getPmic_MPBIRQ_REG_MVEND(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return ( eMPBIRQ_REG_MVEND ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_1_REG_DEV1_RESERVED(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_1_REG_DEV1_READ_STATUS2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_2_REG_DEV1_PARITY_ERROR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS_2_REG_DEV1_DATA_FRAME_ERROR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS0ALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS0ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS1ALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS1ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS2ALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS2ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MPMICALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MPMICALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS0ALRT1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS0ALRT1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS1ALRT1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS1ALRT1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MSYS2ALRT1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MSYS2ALRT1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ0_REG_MGPALERT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ0_REG_MGPALERT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MSYS0CRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MSYS0CRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MSYS1CRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MSYS1CRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MSYS2CRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MSYS2CRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MPMICCRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MPMICCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MBATCRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MBATCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MBATCRITHOTCOLD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MBATCRITHOTCOLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ1_REG_MBZIRQ(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ1_REG_MBZIRQ(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MSYS0ALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MSYS0ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MSYS1ALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MSYS1ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MSYS2ALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MSYS2ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MPMICALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MPMICALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MBAT0ALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MBAT0ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MBAT1ALRT0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MBAT1ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MBAT0ALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MBAT0ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTHRMIRQ2_REG_MBAT1ALRT3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTHRMIRQ2_REG_MBAT1ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG_MVWARN1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG_MVWARN1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG_MVWARN2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG_MVWARN2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG_MVCRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG_MVCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG_MGSMPULSE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG_MGSMPULSE(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MBCUIRQ_REG_MTXPWRTH(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MBCUIRQ_REG_MTXPWRTH(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MUSBID(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MUSBID(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MPEAK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MPEAK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MBATTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MBATTEMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MSYSTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MSYSTEMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MBATTID(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MBATTID(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MVBATT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MVBATT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MGPMEAS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MGPMEAS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MADCIRQ_REG_MCCTICK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MADCIRQ_REG_MCCTICK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG_MCHGINTB(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG_MCHGINTB(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG_MI2CWRCMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG_MI2CWRCMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG_MI2CRDCMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG_MI2CRDCMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG_MI2CERROR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG_MI2CERROR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ0_REG_MCTYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ0_REG_MCTYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG_MVBUSDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG_MVBUSDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG_MDCDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG_MDCDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG_MBATTDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG_MBATTDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG_MUSBIDFLTDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG_MUSBIDFLTDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCHGRIRQ1_REG_MUSBIDGNDDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCHGRIRQ1_REG_MUSBIDGNDDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P4(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P4(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P5(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P5(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MGPIO0P6(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MGPIO0P6(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ0_REG_MBATTIO(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ0_REG_MBATTIO(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO1P0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO1P0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO1P1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO1P1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO1P2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO1P2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO1P3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO1P3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO2P0(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO2P0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MGPIOIRQ1_REG_MGPIO2P1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MGPIOIRQ1_REG_MGPIO2P1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCRITIRQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCRITIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCRITIRQ_REG_MVROCP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCRITIRQ_REG_MVROCP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MCRITIRQ_REG_MOSCSTP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MCRITIRQ_REG_MOSCSTP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS2_LASTREAD_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_STATUS2_LASTREAD_REG_DEV1_STATUS_2_ON_LAST_GETREG(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MSVIDALERT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MSVIDALERT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MSVIDALERT_REG_MICCMAXVCC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MSVIDALERT_REG_MICCMAXVCC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MSVIDALERT_REG_MICCMAXVNN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MSVIDALERT_REG_MICCMAXVNN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MSVIDALERT_REG_MICCMAXVSYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MSVIDALERT_REG_MICCMAXVSYS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG_ACCDET1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG_ACCDET2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG_ACCDETAUX(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG_VIBOVC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IRQMULT_REG_LSOVC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQMULT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQMULT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQMULT_REG_MVIBOVC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQMULT_REG_MVIBOVC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MIRQMULT_REG_MLSOVC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MIRQMULT_REG_MLSOVC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SPWRSRC_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ eSPWRSRC_REG_SVBUSDET getPmic_SPWRSRC_REG_SVBUSDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eSPWRSRC_REG_SVBUSDET ) value;
+}
+
+__HWREG_INLINE__ eSPWRSRC_REG_SDCDET getPmic_SPWRSRC_REG_SDCDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eSPWRSRC_REG_SDCDET ) value;
+}
+
+__HWREG_INLINE__ eSPWRSRC_REG_SBATTDET getPmic_SPWRSRC_REG_SBATTDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return ( eSPWRSRC_REG_SBATTDET ) value;
+}
+
+__HWREG_INLINE__ eSPWRSRC_REG_SUSBIDDET getPmic_SPWRSRC_REG_SUSBIDDET(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 3) ) >> 3;
+    return ( eSPWRSRC_REG_SUSBIDDET ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_LOWBATTDET0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_LOWBATTDET0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_LOWBATTDET0_REG_LOWBATT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_LOWBATTDET0_REG_LOWBATT(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_LOWBATTDET1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_LOWBATTDET1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_LOWBATTDET1_REG_LOWBATTSDP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_LOWBATTDET1_REG_LOWBATTSDP(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_LOWBATTDET1_REG_LOWBATTDCP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_LOWBATTDET1_REG_LOWBATTDCP(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PSDETCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PSDETCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PSDETCTRL_REG_VBUSDBEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PSDETCTRL_REG_VBUSDBEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PSDETCTRL_REG_VDCINDBEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PSDETCTRL_REG_VDCINDBEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PSDETCTRL_REG_BATTRMPDEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PSDETCTRL_REG_BATTRMPDEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PSDETCTRL_REG_BATTRMSRC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000CF) | ( (value & 0x3) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PSDETCTRL_REG_BATTRMSRC(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL0_REG_BATTDBEN(HWREG_U8 _reg, eBATTDETCTRL0_REG_BATTDBEN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eBATTDETCTRL0_REG_BATTDBEN getPmic_BATTDETCTRL0_REG_BATTDBEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eBATTDETCTRL0_REG_BATTDBEN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL0_REG_BATTYP(HWREG_U8 _reg, eBATTDETCTRL0_REG_BATTYP value)
+{
+    _reg = (_reg & 0x0000001F) | ( (value & 0x7) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eBATTDETCTRL0_REG_BATTYP getPmic_BATTDETCTRL0_REG_BATTYP(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 5) ) >> 5;
+    return ( eBATTDETCTRL0_REG_BATTYP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL1_REG_BRMDBC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E0) | ( (value & 0x1F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL1_REG_BRMDBC(HWREG_U8 value)
+{
+    value = ( value & (0x1F << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTDETCTRL1_REG_BTDEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL1_REG_BTDEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL1_REG_BTDLC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTDETCTRL1_REG_BTDSMART(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SPLTIMER_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SPLTIMER_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SPLTIMER_REG_SPLTIMERVAL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SPLTIMER_REG_SPLTIMERVAL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SSPLTIMER_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SSPLTIMER_REG_SSPLTIMERVAL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHIPCNTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHIPCNTRL_REG_COLDOFF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg =  ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHIPCNTRL_REG_COLDRESET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg =  ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHIPCNTRL_REG_WARMRESET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg =  ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHIPCNTRL_REG_PLATFORMRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg =  ( (value & 0x1) << 3);
+    return _reg;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PLATFORMRST_DT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PLATFORMRST_DT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PLATFORMRST_DT_REG_PRT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PLATFORMRST_DT_REG_PRT(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RTHERMTRIP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RTHERMTRIP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RPMICTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RPMICTEMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RSYSTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RSYSTEMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RVCRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RVCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RBATTRM(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RBATTRM(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RVSYSUVP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RVSYSUVP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RBATTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RBATTEMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC0_REG_RPMICWDTEXP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC0_REG_RPMICWDTEXP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RCOLDOFF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RCOLDOFF(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RCOLDRESET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RCOLDRESET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RWARMRESET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RWARMRESET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RFCO(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RFCO(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RSOCWDT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RSOCWDT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETSRC1_REG_RPLATFORMRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_RESETSRC1_REG_RPLATFORMRST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETRDYCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETRDYCTRL_REG_COLDRSTRDY(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg =  ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_RESETRDYCTRL_REG_WARMRSTRDY(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg =  ( (value & 0x1) << 1);
+    return _reg;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_BATWAKEEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_BATWAKEEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_VBUSWAKEEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_VBUSWAKEEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_VDCINWAKEEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_VDCINWAKEEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_USBIDWAKEEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_USBIDWAKEEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_PWRONWAKEEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_PWRONWAKEEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SRCWAKECFG_REG_SPLWAKEEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SRCWAKECFG_REG_SPLWAKEEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEPBTN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEPBTN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEBAT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEBAT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEVBUS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEVBUS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEVDCIN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEVDCIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEUSBID(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEUSBID(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEWA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEWA(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKEPWRON(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKEPWRON(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_WAKESRC_REG_WAKESPL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_WAKESRC_REG_WAKESPL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_STDBYCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STDBYCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_STDBYCNT_REG_STDBYDEST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STDBYCNT_REG_STDBYDEST(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG_VCRIT_CFG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG_VCRIT_CFG(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG_THERMAL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG_THERMAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG_LOWBATDET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG_LOWBATDET(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG_ALERTLOCK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG_ALERTLOCK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_REGLOCK_REG_PB(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_REGLOCK_REG_PB(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV1_SETREGADR_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_SETREGADR_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV1_SETREGADR_REG_DEV1_SETREGADR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV1_SETREGADR_REG_DEV1_SETREGADR(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MODEMCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MODEMCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MODEMCTRL_REG_MODEMOFF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MODEMCTRL_REG_MODEMOFF(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MODEMCTRL_REG_MODEMRSTSEQ(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MODEMCTRL_REG_SDWN_N(HWREG_U8 _reg, eMODEMCTRL_REG_SDWN_N value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eMODEMCTRL_REG_SDWN_N getPmic_MODEMCTRL_REG_SDWN_N(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return ( eMODEMCTRL_REG_SDWN_N ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MODEMCTRL_REG_SDWNDRV(HWREG_U8 _reg, eMODEMCTRL_REG_SDWNDRV value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eMODEMCTRL_REG_SDWNDRV getPmic_MODEMCTRL_REG_SDWNDRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eMODEMCTRL_REG_SDWNDRV ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SOCCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SOCCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SOCCTRL_REG_POWERGOOD(HWREG_U8 _reg, eSOCCTRL_REG_POWERGOOD value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eSOCCTRL_REG_POWERGOOD getPmic_SOCCTRL_REG_POWERGOOD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eSOCCTRL_REG_POWERGOOD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SOCCTRL_REG_RESET_N(HWREG_U8 _reg, eSOCCTRL_REG_RESET_N value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eSOCCTRL_REG_RESET_N getPmic_SOCCTRL_REG_RESET_N(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eSOCCTRL_REG_RESET_N ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BBCHGRCFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BBCHGRCFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BBCHGRCFG_REG_BBCHGEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BBCHGRCFG_REG_BBCHGEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BBCHGRCFG_REG_BBCHGV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BBCHGRCFG_REG_BBCHGV(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BBCHGRCFG_REG_BBCHGI(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E7) | ( (value & 0x3) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BBCHGRCFG_REG_BBCHGI(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 3) ) >> 3;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLTCFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLTCFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLTCFG_REG_FLTACT(HWREG_U8 _reg, eFLTCFG_REG_FLTACT value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eFLTCFG_REG_FLTACT getPmic_FLTCFG_REG_FLTACT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return ( eFLTCFG_REG_FLTACT ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG1_REG_FLT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG1_REG_FLT(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG1_REG_PBHOLD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000008F) | ( (value & 0x7) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG1_REG_PBHOLD(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG2_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG2_REG_PBDIS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG2_REG_PBDIS(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBCONFIG2_REG_UIBTNDIS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PBCONFIG2_REG_UIBTNDIS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBSTATUS_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PBSTATUS_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PBSTATUS_REG_PBHT(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PBSTATUS_REG_PBLVL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBSTATUS_REG_CLRFLT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PBSTATUS_REG_CLRHT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_UBSTATUS_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_UBSTATUS_REG_UBHT(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_UBSTATUS_REG_UBLVL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P0CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO0P0CTLO_REG_RVAL getPmic_GPIO0P0CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO0P0CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P1CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO0P1CTLO_REG_RVAL getPmic_GPIO0P1CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO0P1CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P2CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO0P2CTLO_REG_RVAL getPmic_GPIO0P2CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO0P2CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P3CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO0P3CTLO_REG_RVAL getPmic_GPIO0P3CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO0P3CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P4CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO0P4CTLO_REG_RVAL getPmic_GPIO0P4CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO0P4CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P5CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO0P5CTLO_REG_RVAL getPmic_GPIO0P5CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO0P5CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO0P6CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO0P6CTLO_REG_RVAL getPmic_GPIO0P6CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO0P6CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO1P0CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO1P0CTLO_REG_RVAL getPmic_GPIO1P0CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO1P0CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO1P1CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO1P1CTLO_REG_RVAL getPmic_GPIO1P1CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO1P1CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO1P2CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO1P2CTLO_REG_RVAL getPmic_GPIO1P2CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO1P2CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO1P3CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO1P3CTLO_REG_RVAL getPmic_GPIO1P3CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO1P3CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO2P0CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO2P0CTLO_REG_RVAL getPmic_GPIO2P0CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO2P0CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_RVAL(HWREG_U8 _reg, eGPIO2P1CTLO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eGPIO2P1CTLO_REG_RVAL getPmic_GPIO2P1CTLO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eGPIO2P1CTLO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P0CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P0CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P1CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P1CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P2CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P2CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P3CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P3CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P4CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P4CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P5CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P5CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO0P6CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO0P6CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P0CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P0CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P1CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P1CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P2CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P2CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO1P3CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO1P3CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P0CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P0CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLI_REG_INTCNT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLI_REG_INTCNT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPIO2P1CTLI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPIO2P1CTLI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VCCCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VCCCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VCCCNT_REG_MODEVCC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E1) | ( (value & 0xF) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VCCCNT_REG_MODEVCC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VNNCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VNNCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VNNCNT_REG_MODEVNN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E1) | ( (value & 0xF) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VNNCNT_REG_MODEVNN(HWREG_U8 value)
+{
+    value = ( value & (0xF << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD1CNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD1CNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD1CNT_REG_VDD1EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD1CNT_REG_VDD1EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD1CNT_REG_MODEVDD1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E1) | ( (value & 0xF) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD1CNT_REG_MODEVDD1(HWREG_U8 value)
+{
+    value = ( value & (0xF << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD1VSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD1VSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD1VSEL_REG_VDD1VSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD1VSEL_REG_VDD1VSEL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD2CNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD2CNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD2CNT_REG_VDD2EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD2CNT_REG_VDD2EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD2CNT_REG_MODEVDD2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E1) | ( (value & 0xF) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD2CNT_REG_MODEVDD2(HWREG_U8 value)
+{
+    value = ( value & (0xF << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD2VSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD2VSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDD2VSEL_REG_VDD2VSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDD2VSEL_REG_VDD2VSEL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPACNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPACNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPACNT_REG_VPAEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPACNT_REG_VPAEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPACNT_REG_MODEVPA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E1) | ( (value & 0xF) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPACNT_REG_MODEVPA(HWREG_U8 value)
+{
+    value = ( value & (0xF << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPAVSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPAVSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPAVSEL_REG_VPAVSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPAVSEL_REG_VPAVSEL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFSOCCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFSOCCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFSOCCNT_REG_MODEVREFSOC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFSOCCNT_REG_MODEVREFSOC(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFSOCCNT_REG_VINSEL(HWREG_U8 _reg, eVREFSOCCNT_REG_VINSEL value)
+{
+    _reg = (_reg & 0x0000003F) | ( (value & 0x3) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVREFSOCCNT_REG_VINSEL getPmic_VREFSOCCNT_REG_VINSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 6) ) >> 6;
+    return ( eVREFSOCCNT_REG_VINSEL ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VWARN1_CFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VWARN1_CFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VWARN1_CFG_REG_VWARN1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VWARN1_CFG_REG_VWARN1(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VWARN2_CFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VWARN2_CFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VWARN2_CFG_REG_VWARN2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VWARN2_CFG_REG_VWARN2(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VWARN2_CFG_REG_VW2_ENTRY_DG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VWARN2_CFG_REG_VW2_ENTRY_DG(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG_VCRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG_VCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG_VCRIT_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG_VCRIT_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG_VCRIT_SDWN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG_VCRIT_SDWN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG_VCRIT_DB(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000009F) | ( (value & 0x3) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG_VCRIT_DB(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VCRIT_CFG_REG_VCRIT_ENTRY_DG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VCRIT_CFG_REG_VCRIT_ENTRY_DG(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUDISCRIT_BEH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUDISCRIT_BEH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_POL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_POL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_STICKY(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BCUDISCRIT_BEH_REG_BCUDISCRIT_STICKY(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BCUDISCRIT_BEH_REG_BCUSENS_SEL(HWREG_U8 _reg, eBCUDISCRIT_BEH_REG_BCUSENS_SEL value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eBCUDISCRIT_BEH_REG_BCUSENS_SEL getPmic_BCUDISCRIT_BEH_REG_BCUSENS_SEL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eBCUDISCRIT_BEH_REG_BCUSENS_SEL ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUIRQ_REG_S_VWARN1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUIRQ_REG_S_VWARN2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUIRQ_REG_S_VCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_S_BCUCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_S_BCUCTRL_REG_S_BCUDISCRIT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_S_BCUCTRL_REG_S_BCUDISCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVSYS_CFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVSYS_CFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVSYS_CFG_REG_ICCMAXVSYS_VW1_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVSYS_CFG_REG_ICCMAXVSYS_VW1_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVSYS_CFG_REG_ICCMAXVSYS_VW2_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVSYS_CFG_REG_ICCMAXVSYS_VW2_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVCC_CFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVCC_CFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC_DB(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C7) | ( (value & 0x7) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC_DB(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVCC_CFG_REG_ICCMAXVCC_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVNN_CFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVNN_CFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN_DB(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000008F) | ( (value & 0x7) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN_DB(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_ICCMAXVNN_CFG_REG_ICCMAXVNN_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SOCWDTCFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SOCWDTCFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SOCWDTCFG_REG_SOCWDTACT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SOCWDTCFG_REG_SOCWDTACT(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VLDOCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VLDOCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VLDOCNT_REG_VREFSOCEN(HWREG_U8 _reg, eVLDOCNT_REG_VREFSOCEN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVLDOCNT_REG_VREFSOCEN getPmic_VLDOCNT_REG_VREFSOCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eVLDOCNT_REG_VREFSOCEN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VLDOCNT_REG_VPMIC_IN_SEL(HWREG_U8 _reg, eVLDOCNT_REG_VPMIC_IN_SEL value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVLDOCNT_REG_VPMIC_IN_SEL getPmic_VLDOCNT_REG_VPMIC_IN_SEL(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return ( eVLDOCNT_REG_VPMIC_IN_SEL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VLDOCNT_REG_MODEVPMIC(HWREG_U8 _reg, eVLDOCNT_REG_MODEVPMIC value)
+{
+    _reg = (_reg & 0x0000003F) | ( (value & 0x3) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVLDOCNT_REG_MODEVPMIC getPmic_VLDOCNT_REG_MODEVPMIC(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 6) ) >> 6;
+    return ( eVLDOCNT_REG_MODEVPMIC ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1CNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG1CNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1CNT_REG_MODEVPROG1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG1CNT_REG_MODEVPROG1(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1CNT_REG_VPROG1DIS_PLD(HWREG_U8 _reg, eVPROG1CNT_REG_VPROG1DIS_PLD value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVPROG1CNT_REG_VPROG1DIS_PLD getPmic_VPROG1CNT_REG_VPROG1DIS_PLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eVPROG1CNT_REG_VPROG1DIS_PLD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1CNT_REG_VPROG1FASTSTUP(HWREG_U8 _reg, eVPROG1CNT_REG_VPROG1FASTSTUP value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVPROG1CNT_REG_VPROG1FASTSTUP getPmic_VPROG1CNT_REG_VPROG1FASTSTUP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eVPROG1CNT_REG_VPROG1FASTSTUP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1CNT_REG_VPROG1RMTCAP(HWREG_U8 _reg, eVPROG1CNT_REG_VPROG1RMTCAP value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVPROG1CNT_REG_VPROG1RMTCAP getPmic_VPROG1CNT_REG_VPROG1RMTCAP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eVPROG1CNT_REG_VPROG1RMTCAP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2CNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG2CNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2CNT_REG_MODEVPROG2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG2CNT_REG_MODEVPROG2(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2CNT_REG_VPROG2DIS_PLD(HWREG_U8 _reg, eVPROG2CNT_REG_VPROG2DIS_PLD value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVPROG2CNT_REG_VPROG2DIS_PLD getPmic_VPROG2CNT_REG_VPROG2DIS_PLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eVPROG2CNT_REG_VPROG2DIS_PLD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2CNT_REG_VPROG2FASTSTUP(HWREG_U8 _reg, eVPROG2CNT_REG_VPROG2FASTSTUP value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVPROG2CNT_REG_VPROG2FASTSTUP getPmic_VPROG2CNT_REG_VPROG2FASTSTUP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eVPROG2CNT_REG_VPROG2FASTSTUP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2CNT_REG_VPROG2RMTCAP(HWREG_U8 _reg, eVPROG2CNT_REG_VPROG2RMTCAP value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVPROG2CNT_REG_VPROG2RMTCAP getPmic_VPROG2CNT_REG_VPROG2RMTCAP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eVPROG2CNT_REG_VPROG2RMTCAP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3CNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG3CNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3CNT_REG_MODEVPROG3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG3CNT_REG_MODEVPROG3(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3CNT_REG_VPROG3DIS_PLD(HWREG_U8 _reg, eVPROG3CNT_REG_VPROG3DIS_PLD value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVPROG3CNT_REG_VPROG3DIS_PLD getPmic_VPROG3CNT_REG_VPROG3DIS_PLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eVPROG3CNT_REG_VPROG3DIS_PLD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3CNT_REG_VPROG3FASTSTUP(HWREG_U8 _reg, eVPROG3CNT_REG_VPROG3FASTSTUP value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVPROG3CNT_REG_VPROG3FASTSTUP getPmic_VPROG3CNT_REG_VPROG3FASTSTUP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eVPROG3CNT_REG_VPROG3FASTSTUP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3CNT_REG_VPROG3RMTCAP(HWREG_U8 _reg, eVPROG3CNT_REG_VPROG3RMTCAP value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVPROG3CNT_REG_VPROG3RMTCAP getPmic_VPROG3CNT_REG_VPROG3RMTCAP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eVPROG3CNT_REG_VPROG3RMTCAP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VUSBCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBCNT_REG_MODEVUSB(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VUSBCNT_REG_MODEVUSB(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBCNT_REG_VUSBDIS_PLD(HWREG_U8 _reg, eVUSBCNT_REG_VUSBDIS_PLD value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVUSBCNT_REG_VUSBDIS_PLD getPmic_VUSBCNT_REG_VUSBDIS_PLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eVUSBCNT_REG_VUSBDIS_PLD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBCNT_REG_VUSBFASTSTUP(HWREG_U8 _reg, eVUSBCNT_REG_VUSBFASTSTUP value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVUSBCNT_REG_VUSBFASTSTUP getPmic_VUSBCNT_REG_VUSBFASTSTUP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eVUSBCNT_REG_VUSBFASTSTUP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBCNT_REG_VUSBRMTCAP(HWREG_U8 _reg, eVUSBCNT_REG_VUSBRMTCAP value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVUSBCNT_REG_VUSBRMTCAP getPmic_VUSBCNT_REG_VUSBRMTCAP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eVUSBCNT_REG_VUSBRMTCAP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1CNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM1CNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1CNT_REG_MODEVSIM1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM1CNT_REG_MODEVSIM1(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1CNT_REG_VSIM1DIS_PLD(HWREG_U8 _reg, eVSIM1CNT_REG_VSIM1DIS_PLD value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSIM1CNT_REG_VSIM1DIS_PLD getPmic_VSIM1CNT_REG_VSIM1DIS_PLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eVSIM1CNT_REG_VSIM1DIS_PLD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1CNT_REG_VSIM1FASTSTUP(HWREG_U8 _reg, eVSIM1CNT_REG_VSIM1FASTSTUP value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSIM1CNT_REG_VSIM1FASTSTUP getPmic_VSIM1CNT_REG_VSIM1FASTSTUP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eVSIM1CNT_REG_VSIM1FASTSTUP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1CNT_REG_VSIM1RMTCAP(HWREG_U8 _reg, eVSIM1CNT_REG_VSIM1RMTCAP value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSIM1CNT_REG_VSIM1RMTCAP getPmic_VSIM1CNT_REG_VSIM1RMTCAP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eVSIM1CNT_REG_VSIM1RMTCAP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2CNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM2CNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2CNT_REG_MODEVSIM2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM2CNT_REG_MODEVSIM2(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2CNT_REG_VSIM2DIS_PLD(HWREG_U8 _reg, eVSIM2CNT_REG_VSIM2DIS_PLD value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSIM2CNT_REG_VSIM2DIS_PLD getPmic_VSIM2CNT_REG_VSIM2DIS_PLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eVSIM2CNT_REG_VSIM2DIS_PLD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2CNT_REG_VSIM2FASTSTUP(HWREG_U8 _reg, eVSIM2CNT_REG_VSIM2FASTSTUP value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSIM2CNT_REG_VSIM2FASTSTUP getPmic_VSIM2CNT_REG_VSIM2FASTSTUP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eVSIM2CNT_REG_VSIM2FASTSTUP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2CNT_REG_VSIM2RMTCAP(HWREG_U8 _reg, eVSIM2CNT_REG_VSIM2RMTCAP value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSIM2CNT_REG_VSIM2RMTCAP getPmic_VSIM2CNT_REG_VSIM2RMTCAP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eVSIM2CNT_REG_VSIM2RMTCAP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPICNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VMIPICNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPICNT_REG_MODEVMIPI(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VMIPICNT_REG_MODEVMIPI(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPICNT_REG_VMIPIDIS_PLD(HWREG_U8 _reg, eVMIPICNT_REG_VMIPIDIS_PLD value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVMIPICNT_REG_VMIPIDIS_PLD getPmic_VMIPICNT_REG_VMIPIDIS_PLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eVMIPICNT_REG_VMIPIDIS_PLD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPICNT_REG_VMIPIFASTSTUP(HWREG_U8 _reg, eVMIPICNT_REG_VMIPIFASTSTUP value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVMIPICNT_REG_VMIPIFASTSTUP getPmic_VMIPICNT_REG_VMIPIFASTSTUP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eVMIPICNT_REG_VMIPIFASTSTUP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPICNT_REG_VMIPIRMTCAP(HWREG_U8 _reg, eVMIPICNT_REG_VMIPIRMTCAP value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVMIPICNT_REG_VMIPIRMTCAP getPmic_VMIPICNT_REG_VMIPIRMTCAP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eVMIPICNT_REG_VMIPIRMTCAP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VEMMCCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCCNT_REG_MODEVEMMC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VEMMCCNT_REG_MODEVEMMC(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCCNT_REG_VMMCDIS_PLD(HWREG_U8 _reg, eVEMMCCNT_REG_VMMCDIS_PLD value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVEMMCCNT_REG_VMMCDIS_PLD getPmic_VEMMCCNT_REG_VMMCDIS_PLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eVEMMCCNT_REG_VMMCDIS_PLD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCCNT_REG_VMMCFASTSTUP(HWREG_U8 _reg, eVEMMCCNT_REG_VMMCFASTSTUP value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVEMMCCNT_REG_VMMCFASTSTUP getPmic_VEMMCCNT_REG_VMMCFASTSTUP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eVEMMCCNT_REG_VMMCFASTSTUP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCCNT_REG_VMMCRMTCAP(HWREG_U8 _reg, eVEMMCCNT_REG_VMMCRMTCAP value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVEMMCCNT_REG_VMMCRMTCAP getPmic_VEMMCCNT_REG_VMMCRMTCAP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eVEMMCCNT_REG_VMMCRMTCAP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDCNT_REG_MODEVSD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDCNT_REG_MODEVSD(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDCNT_REG_VSDDIS_PLD(HWREG_U8 _reg, eVSDCNT_REG_VSDDIS_PLD value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSDCNT_REG_VSDDIS_PLD getPmic_VSDCNT_REG_VSDDIS_PLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eVSDCNT_REG_VSDDIS_PLD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDCNT_REG_VSDFASTSTUP(HWREG_U8 _reg, eVSDCNT_REG_VSDFASTSTUP value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSDCNT_REG_VSDFASTSTUP getPmic_VSDCNT_REG_VSDFASTSTUP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eVSDCNT_REG_VSDFASTSTUP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDCNT_REG_VSDRMTCAP(HWREG_U8 _reg, eVSDCNT_REG_VSDRMTCAP value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSDCNT_REG_VSDRMTCAP getPmic_VSDCNT_REG_VSDRMTCAP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eVSDCNT_REG_VSDRMTCAP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDMMCCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCCNT_REG_MODEVSDMMC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDMMCCNT_REG_MODEVSDMMC(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCCNT_REG_VSDMMCDIS_PLD(HWREG_U8 _reg, eVSDMMCCNT_REG_VSDMMCDIS_PLD value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSDMMCCNT_REG_VSDMMCDIS_PLD getPmic_VSDMMCCNT_REG_VSDMMCDIS_PLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eVSDMMCCNT_REG_VSDMMCDIS_PLD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCCNT_REG_VSDMMCFASTSTUP(HWREG_U8 _reg, eVSDMMCCNT_REG_VSDMMCFASTSTUP value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSDMMCCNT_REG_VSDMMCFASTSTUP getPmic_VSDMMCCNT_REG_VSDMMCFASTSTUP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eVSDMMCCNT_REG_VSDMMCFASTSTUP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCCNT_REG_MMC(HWREG_U8 _reg, eVSDMMCCNT_REG_MMC value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSDMMCCNT_REG_MMC getPmic_VSDMMCCNT_REG_MMC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eVSDMMCCNT_REG_MMC ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SETVID_REG(HWREG_U8 _reg, HWREG_U8 value);
+__HWREG_INLINE__ HWREG_U8 setPmic_SETVID_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1VSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG1VSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG1VSEL_REG_VPROG1VSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG1VSEL_REG_VPROG1VSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2VSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG2VSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG2VSEL_REG_VPROG2VSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG2VSEL_REG_VPROG2VSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3VSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG3VSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VPROG3VSEL_REG_VPROG3VSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VPROG3VSEL_REG_VPROG3VSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBVSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VUSBVSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VUSBVSEL_REG_VUSBVSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VUSBVSEL_REG_VUSBVSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1VSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM1VSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM1VSEL_REG_VSIM1VSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM1VSEL_REG_VSIM1VSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2VSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM2VSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSIM2VSEL_REG_VSIM2VSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSIM2VSEL_REG_VSIM2VSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPIVSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VMIPIVSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VMIPIVSEL_REG_VMIPIVSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VMIPIVSEL_REG_VMIPIVSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCVSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VEMMCVSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VEMMCVSEL_REG_VEMMCVSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VEMMCVSEL_REG_VEMMCVSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDVSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDVSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDVSEL_REG_VSDVSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDVSEL_REG_VSDVSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCVSEL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDMMCVSEL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSDMMCVSEL_REG_VSDMMCVSEL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSDMMCVSEL_REG_VSDMMCVSEL(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TRMPGM_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TRMPGM_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TRMPGM_REG_TRMREV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TRMPGM_REG_TRMREV(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_OTPVERSION_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_OTPVERSION_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_OTPVERSION_REG_OTPVERSION(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_OTPVERSION_REG_OTPVERSION(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPADCREQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPADCREQ_REG_BUSY(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_USBID(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_BATTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_SYSTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_BATTID(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_VBATT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_GPMEAS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCREQ_REG_ADC_PEAK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATRSLTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATRSLTH_REG_VBAT_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATRSLTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATRSLTL_REG_VBAT_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCCNTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPADCCNTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCCNTL_REG_VREF_DIS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPADCCNTL_REG_VREF_DIS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPADCCNTL_REG_WDT_DIS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPADCCNTL_REG_WDT_DIS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTIDRSLTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTIDRSLTH_REG_BATTID_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTIDRSLTH_REG_BATTID_CURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTIDRSLTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTIDRSLTL_REG_BATTID_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDRSLTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDRSLTH_REG_USBID_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDRSLTH_REG_USBID_CURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDRSLTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDRSLTL_REG_USBID_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASRSLTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASRSLTH_REG_GPMEAS_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASRSLTH_REG_GPMEAS_CURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASRSLTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASRSLTL_REG_GPMEAS_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y0DATAH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y0DATAH_REG_Y0_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y0DATAH_REG_Y0_CURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y0DATAL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y0DATAL_REG_Y0_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y1DATAH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y1DATAH_REG_Y1_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y1DATAH_REG_Y1_CURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y1DATAL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_Y1DATAL_REG_Y1_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_1_REG_DEV2_RESERVED(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_1_REG_DEV2_READ_STATUS2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_2_REG_DEV2_PARITY_ERROR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS_2_REG_DEV2_DATA_FRAME_ERROR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKREQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG_MINDETECT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG_MAXDETECT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG_IN2OUTTEST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG_RDOUTTEST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PEAKREQ_REG_PEAKTEST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKREQ_REG_PEAKTEST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKRSLTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKRSLTH_REG_PEAK_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKRSLTH_REG_PEAK_CURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKRSLTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PEAKRSLTL_REG_PEAK_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP0H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP0H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP0H_REG_BATTEMP0_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP0H_REG_BATTEMP0_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP0L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP0L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP0L_REG_BATTEMP0_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP0L_REG_BATTEMP0_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP1H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP1H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP1H_REG_BATTEMP1_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP1H_REG_BATTEMP1_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP1L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP1L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTEMP1L_REG_BATTEMP1_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTEMP1L_REG_BATTEMP1_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS0ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS1ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS2ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SPMICALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS0ALRT1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS1ALRT1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_SSYS2ALRT1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ0_REG_GPMEASALRT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SSYS0CRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SSYS1CRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SSYS2CRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SPMICCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SBATCRIT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ1_REG_SBATCRITHOTCOLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SSYS0ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SSYS1ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SSYS2ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SPMICALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SBAT0ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SBAT1ALRT0(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SBAT0ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STHRMIRQ2_REG_SBAT1ALRT3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS2_LASTREAD_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_STATUS2_LASTREAD_REG_DEV2_STATUS_2_ON_LAST_GETREG(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCFG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCFG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCFG_REG_NUMBAT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCFG_REG_NUMBAT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCFG_REG_THRMSRC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCFG_REG_THRMSRC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCTL_REG_SYSFRQA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCTL_REG_SYSFRQA(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMMONCTL_REG_SYSFRQS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E7) | ( (value & 0x3) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMMONCTL_REG_SYSFRQS(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 3) ) >> 3;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTHERMMONCTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTHERMMONCTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTHERMMONCTL_REG_BATFRQA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTHERMMONCTL_REG_BATFRQA(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTHERMMONCTL_REG_BATFRQS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E7) | ( (value & 0x3) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTHERMMONCTL_REG_BATFRQS(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATTHERMMONCTL_REG_BATFRQC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000009F) | ( (value & 0x3) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATTHERMMONCTL_REG_BATFRQC(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 5) ) >> 5;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBATMONCTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMONCTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBATMONCTL_REG_VBATFRQA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMONCTL_REG_VBATFRQA(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBATMONCTL_REG_VBATFRQS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E7) | ( (value & 0x3) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMONCTL_REG_VBATFRQS(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 3) ) >> 3;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMONCTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMONCTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMONCTL_REG_GPFRQA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMONCTL_REG_GPFRQA(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMONCTL_REG_GPFRQS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMONCTL_REG_GPFRQS(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMBATZONE_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMBATZONE_REG_BATZONE(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0H_REG_SYS0ALERT0_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0H_REG_SYS0ALERT0_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0H_REG_SYS0ALERT0_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0H_REG_SYS0ALERT0_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0H_REG_SYS0ALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0H_REG_SYS0ALERT0_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT0L_REG_SYS0ALERT0_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT0L_REG_SYS0ALERT0_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1H_REG_SYS0ALERT1_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1H_REG_SYS0ALERT1_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1H_REG_SYS0ALERT1_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1H_REG_SYS0ALERT1_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1H_REG_SYS0ALERT1_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1H_REG_SYS0ALERT1_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT1L_REG_SYS0ALERT1_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT1L_REG_SYS0ALERT1_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0H_REG_SYS1ALERT0_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0H_REG_SYS1ALERT0_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0H_REG_SYS1ALERT0_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0H_REG_SYS1ALERT0_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0H_REG_SYS1ALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0H_REG_SYS1ALERT0_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT0L_REG_SYS1ALERT0_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT0L_REG_SYS1ALERT0_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1H_REG_SYS1ALERT1_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1H_REG_SYS1ALERT1_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1H_REG_SYS1ALERT1_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1H_REG_SYS1ALERT1_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1H_REG_SYS1ALERT1_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1H_REG_SYS1ALERT1_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT1L_REG_SYS1ALERT1_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT1L_REG_SYS1ALERT1_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0H_REG_SYS2ALERT0_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0H_REG_SYS2ALERT0_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0H_REG_SYS2ALERT0_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0H_REG_SYS2ALERT0_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0H_REG_SYS2ALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0H_REG_SYS2ALERT0_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT0L_REG_SYS2ALERT0_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT0L_REG_SYS2ALERT0_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1H_REG_SYS2ALERT1_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1H_REG_SYS2ALERT1_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1H_REG_SYS2ALERT1_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1H_REG_SYS2ALERT1_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1H_REG_SYS2ALERT1_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1H_REG_SYS2ALERT1_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT1L_REG_SYS2ALERT1_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT1L_REG_SYS2ALERT1_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0H_REG_BAT0ALERT0_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0H_REG_BAT0ALERT0_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0H_REG_BAT0ALERT0_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0H_REG_BAT0ALERT0_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0H_REG_BAT0ALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0H_REG_BAT0ALERT0_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT0L_REG_BAT0ALERT0_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT0L_REG_BAT0ALERT0_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0H_REG_BAT1ALERT0_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0H_REG_BAT1ALERT0_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0H_REG_BAT1ALERT0_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0H_REG_BAT1ALERT0_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0H_REG_BAT1ALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0H_REG_BAT1ALERT0_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT0L_REG_BAT1ALERT0_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT0L_REG_BAT1ALERT0_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT0H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT0H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT0H_REG_PMICALERT0_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT0H_REG_PMICALERT0_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT0H_REG_PMICALERT0_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT0H_REG_PMICALERT0_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT0L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT0L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT0L_REG_PMICALERT0_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT0L_REG_PMICALERT0_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV2_SETREGADR_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_SETREGADR_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV2_SETREGADR_REG_DEV2_SETREGADR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV2_SETREGADR_REG_DEV2_SETREGADR(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTH_REG_GPALERT_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTH_REG_GPALERT_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTH_REG_GPALERT_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTH_REG_GPALERT_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTH_REG_GPALERT_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTH_REG_GPALERT_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPMEASALERTL_REG_GPALERT_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPMEASALERTL_REG_GPALERT_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT0H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT0H_REG_SYS0TEMP_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT0H_REG_SYS0CURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT0L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT0L_REG_SYS0TEMP_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT1H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT1H_REG_SYS1TEMP_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT1H_REG_SYS1CURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT1L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT1L_REG_SYS1TEMP_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT2H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT2H_REG_SYS2TEMP_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT2H_REG_SYS2CURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT2L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT2L_REG_SYS2TEMP_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT3H_REG_THERM_BAT0TEMP_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT3H_REG_BAT0TEMPCURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT3L_REG_THERM_BAT0TEMP_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT4H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT4H_REG_THERM_BAT1TEMP_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT4H_REG_BAT1TEMPCURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT4L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT4L_REG_THERM_BAT1TEMP_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT5H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT5H_REG_PMICTEMP_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT5H_REG_PMICTEMPCURSRC(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT5L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMRSLT5L_REG_PMICTEMP_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0H_REG_TCOLD_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0H_REG_TCOLD_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0H_REG_Z0CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0H_REG_Z0CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0H_REG_Z0HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0H_REG_Z0HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN0L_REG_TCOLD_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN0L_REG_TCOLD_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1H_REG_TCOOL_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1H_REG_TCOOL_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1H_REG_Z1CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1H_REG_Z1CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1H_REG_Z1HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1H_REG_Z1HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN1L_REG_TCOOL_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN1L_REG_TCOOL_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2H_REG_TWARM_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2H_REG_TWARM_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2H_REG_Z2CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2H_REG_Z2CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2H_REG_Z2HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2H_REG_Z2HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN2L_REG_TWARM_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN2L_REG_TWARM_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3H_REG_THOT_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3H_REG_THOT_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3H_REG_Z3CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3H_REG_Z3CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3H_REG_Z3HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3H_REG_Z3HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN3L_REG_THOT_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN3L_REG_THOT_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4H_REG_TEMERGHIGH_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4H_REG_TEMERGHIGH_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4H_REG_Z4CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4H_REG_Z4CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4H_REG_Z4HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4H_REG_Z4HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMZN4L_REG_TEMERGHIGH_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMZN4L_REG_TEMERGHIGH_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDH_REG_BATCRITCOLD_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDH_REG_BATCRITCOLD_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDH_REG_BATCRITCCURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDH_REG_BATCRITCCURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDH_REG_BATCRITCHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDH_REG_BATCRITCHYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITCOLDL_REG_BATCRITCOLD_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITCOLDL_REG_BATCRITCOLD_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTH_REG_BATCRITHOT_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTH_REG_BATCRITHOT_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTH_REG_BATCRITHCURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTH_REG_BATCRITHCURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTH_REG_BATCRITHHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTH_REG_BATCRITHHYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITHOTL_REG_BATCRITHOT_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITHOTL_REG_BATCRITHOT_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITH_REG_BATCRIT_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITH_REG_BATCRIT_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITH_REG_BATCRITCURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITH_REG_BATCRITCURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BATCRITL_REG_BATCRIT_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BATCRITL_REG_BATCRIT_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICCRITH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICCRITH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICCRITH_REG_PMICCRIT_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICCRITH_REG_PMICCRIT_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICCRITL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICCRITL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICCRITL_REG_PMICCRIT_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICCRITL_REG_PMICCRIT_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0CRITH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0CRITH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0CRITH_REG_SYS0CRIT_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0CRITH_REG_SYS0CRIT_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0CRITH_REG_SYS0CRITCURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0CRITH_REG_SYS0CRITCURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0CRITL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0CRITL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0CRITL_REG_SYS0CRIT_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0CRITL_REG_SYS0CRIT_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1CRITH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1CRITH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1CRITH_REG_SYS1CRIT_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1CRITH_REG_SYS1CRIT_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1CRITH_REG_SYS1CRITCURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1CRITH_REG_SYS1CRITCURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1CRITL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1CRITL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1CRITL_REG_SYS1CRIT_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1CRITL_REG_SYS1CRIT_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2CRITH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2CRITH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2CRITH_REG_SYS2CRIT_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2CRITH_REG_SYS2CRIT_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2CRITH_REG_SYS2CRITCURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2CRITH_REG_SYS2CRITCURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2CRITL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2CRITL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2CRITL_REG_SYS2CRIT_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2CRITL_REG_SYS2CRIT_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3H_REG_SYS0ALERT3_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3H_REG_SYS0ALERT3_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3H_REG_SYS0ALERT3_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3H_REG_SYS0ALERT3_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3H_REG_SYS0ALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3H_REG_SYS0ALERT3_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS0ALERT3L_REG_SYS0ALERT3_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS0ALERT3L_REG_SYS0ALERT3_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3H_REG_SYS1ALERT3_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3H_REG_SYS1ALERT3_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3H_REG_SYS1ALERT3_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3H_REG_SYS1ALERT3_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3H_REG_SYS1ALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3H_REG_SYS1ALERT3_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS1ALERT3L_REG_SYS1ALERT3_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS1ALERT3L_REG_SYS1ALERT3_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3H_REG_SYS2ALERT3_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3H_REG_SYS2ALERT3_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3H_REG_SYS2ALERT3_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3H_REG_SYS2ALERT3_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3H_REG_SYS2ALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3H_REG_SYS2ALERT3_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SYS2ALERT3L_REG_SYS2ALERT3_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SYS2ALERT3L_REG_SYS2ALERT3_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT3H_REG_PMICALERT3_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT3H_REG_PMICALERT3_H(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT3H_REG_PMICALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT3H_REG_PMICALERT3_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICALERT3L_REG_PMICALERT3_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICALERT3L_REG_PMICALERT3_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3H_REG_BAT0ALERT3_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3H_REG_BAT0ALERT3_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3H_REG_BAT0ALERT3_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3H_REG_BAT0ALERT3_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3H_REG_BAT0ALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3H_REG_BAT0ALERT3_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT0ALERT3L_REG_BAT0ALERT3_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT0ALERT3L_REG_BAT0ALERT3_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3H_REG_BAT1ALERT3_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3H_REG_BAT1ALERT3_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3H_REG_BAT1ALERT3_CURHYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F1) | ( (value & 0x7) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3H_REG_BAT1ALERT3_CURHYS(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3H_REG_BAT1ALERT3_HYS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3H_REG_BAT1ALERT3_HYS(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_BAT1ALERT3L_REG_BAT1ALERT3_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_BAT1ALERT3L_REG_BAT1ALERT3_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG_SYS0_CRIT_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG_SYS0_CRIT_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG_SYS1_CRIT_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG_SYS1_CRIT_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG_SYS2_CRIT_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG_SYS2_CRIT_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG_PMIC_CRIT_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG_PMIC_CRIT_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMCRITEN_REG_BAT_CRIT_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMCRITEN_REG_BAT_CRIT_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_SYS0_A3_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_SYS0_A3_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_SYS1_A3_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_SYS1_A3_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_SYS2_A3_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_SYS2_A3_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_PMIC_A3_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_PMIC_A3_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_BAT0_A3_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_BAT0_A3_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3EN_REG_BAT1_A3_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3EN_REG_BAT1_A3_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_SYS0_A3P_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_SYS0_A3P_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_SYS1_A3P_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_SYS1_A3P_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_SYS2_A3P_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_SYS2_A3P_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_PMIC_A3P_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_PMIC_A3P_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_BAT0_A3P_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_BAT0_A3P_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_THRMALERT3PAEN_REG_BAT1_A3P_EN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_THRMALERT3PAEN_REG_BAT1_A3P_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPA_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPA_MODE_CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPA_MODE_CTRL_REG_VPA_CM_EN(HWREG_U8 _reg, eCM_VPA_MODE_CTRL_REG_VPA_CM_EN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VPA_MODE_CTRL_REG_VPA_CM_EN getPmic_CM_VPA_MODE_CTRL_REG_VPA_CM_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCM_VPA_MODE_CTRL_REG_VPA_CM_EN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPA_MODE_CTRL_REG_VPA_CLR_DATA(HWREG_U8 _reg, eCM_VPA_MODE_CTRL_REG_VPA_CLR_DATA value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPA_MODE_CTRL_REG_VPA_CM_MODE(HWREG_U8 _reg, eCM_VPA_MODE_CTRL_REG_VPA_CM_MODE value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VPA_MODE_CTRL_REG_VPA_CM_MODE getPmic_CM_VPA_MODE_CTRL_REG_VPA_CM_MODE(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return ( eCM_VPA_MODE_CTRL_REG_VPA_CM_MODE ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VNN_MODE_CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_MODE_CTRL_REG_VNN_CM_EN(HWREG_U8 _reg, eCM_VNN_MODE_CTRL_REG_VNN_CM_EN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VNN_MODE_CTRL_REG_VNN_CM_EN getPmic_CM_VNN_MODE_CTRL_REG_VNN_CM_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCM_VNN_MODE_CTRL_REG_VNN_CM_EN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_MODE_CTRL_REG_VNN_CLR_DATA(HWREG_U8 _reg, eCM_VNN_MODE_CTRL_REG_VNN_CLR_DATA value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_MODE_CTRL_REG_VNN_CM_MODE(HWREG_U8 _reg, eCM_VNN_MODE_CTRL_REG_VNN_CM_MODE value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VNN_MODE_CTRL_REG_VNN_CM_MODE getPmic_CM_VNN_MODE_CTRL_REG_VNN_CM_MODE(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return ( eCM_VNN_MODE_CTRL_REG_VNN_CM_MODE ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD1_MODE_CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_MODE_CTRL_REG_VDD1_CM_EN(HWREG_U8 _reg, eCM_VDD1_MODE_CTRL_REG_VDD1_CM_EN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VDD1_MODE_CTRL_REG_VDD1_CM_EN getPmic_CM_VDD1_MODE_CTRL_REG_VDD1_CM_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCM_VDD1_MODE_CTRL_REG_VDD1_CM_EN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_MODE_CTRL_REG_VDD1_CLR_DATA(HWREG_U8 _reg, eCM_VDD1_MODE_CTRL_REG_VDD1_CLR_DATA value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE(HWREG_U8 _reg, eCM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE getPmic_CM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return ( eCM_VDD1_MODE_CTRL_REG_VDD1_CM_MODE ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD2_MODE_CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_MODE_CTRL_REG_VDD2_CM_EN(HWREG_U8 _reg, eCM_VDD2_MODE_CTRL_REG_VDD2_CM_EN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VDD2_MODE_CTRL_REG_VDD2_CM_EN getPmic_CM_VDD2_MODE_CTRL_REG_VDD2_CM_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCM_VDD2_MODE_CTRL_REG_VDD2_CM_EN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_MODE_CTRL_REG_VDD2_CLR_DATA(HWREG_U8 _reg, eCM_VDD2_MODE_CTRL_REG_VDD2_CLR_DATA value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE(HWREG_U8 _reg, eCM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE getPmic_CM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return ( eCM_VDD2_MODE_CTRL_REG_VDD2_CM_MODE ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG1_MODE_CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN(HWREG_U8 _reg, eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN getPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_EN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CLR_DATA(HWREG_U8 _reg, eCM_VPROG1_MODE_CTRL_REG_VPROG1_CLR_DATA value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE(HWREG_U8 _reg, eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE getPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return ( eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_MODE ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC(HWREG_U8 _reg, eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC value)
+{
+    _reg = (_reg & 0x000000CF) | ( (value & 0x3) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC getPmic_CM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 4) ) >> 4;
+    return ( eCM_VPROG1_MODE_CTRL_REG_VPROG1_CM_ACC ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG2_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG2_MODE_CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN(HWREG_U8 _reg, eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN getPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_EN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CLR_DATA(HWREG_U8 _reg, eCM_VPROG2_MODE_CTRL_REG_VPROG2_CLR_DATA value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE(HWREG_U8 _reg, eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE getPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return ( eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_MODE ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC(HWREG_U8 _reg, eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC value)
+{
+    _reg = (_reg & 0x000000CF) | ( (value & 0x3) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC getPmic_CM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 4) ) >> 4;
+    return ( eCM_VPROG2_MODE_CTRL_REG_VPROG2_CM_ACC ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_MODE_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG3_MODE_CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN(HWREG_U8 _reg, eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN getPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_EN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CLR_DATA(HWREG_U8 _reg, eCM_VPROG3_MODE_CTRL_REG_VPROG3_CLR_DATA value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE(HWREG_U8 _reg, eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE getPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return ( eCM_VPROG3_MODE_CTRL_REG_VPROG3_CM_MODE ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_ACC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000CF) | ( (value & 0x3) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG3_MODE_CTRL_REG_VPROG3_CM_ACC(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_TSPAN_CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_TSPAN_CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_TSPAN_CTRL_REG_TSPAN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_TSPAN_CTRL_REG_TSPAN(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_TSPAN_CTRL_REG_TSPAN_EN(HWREG_U8 _reg, eCM_TSPAN_CTRL_REG_TSPAN_EN value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_TSPAN_CTRL_REG_TSPAN_EN getPmic_CM_TSPAN_CTRL_REG_TSPAN_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eCM_TSPAN_CTRL_REG_TSPAN_EN ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO1_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_LDO1_THRSHLD_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD(HWREG_U8 _reg, eCM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD getPmic_CM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return ( eCM_LDO1_THRSHLD_REG_VPROG1_CM_THRSHLD ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO2_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_LDO2_THRSHLD_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL(HWREG_U8 _reg, eCM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL getPmic_CM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return ( eCM_LDO2_THRSHLD_REG_VPROG2A_CM_THRSHL ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO3_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_LDO3_THRSHLD_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD(HWREG_U8 _reg, eCM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD getPmic_CM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return ( eCM_LDO3_THRSHLD_REG_VPROG3_CM_THRSHLD ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS0_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS0_THRSHLD_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS0_THRSHLD_REG_VCC_CM_THRSHLD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS0_THRSHLD_REG_VCC_CM_THRSHLD(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS1_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS1_THRSHLD_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS1_THRSHLD_REG_VCC_PA_THRSHLD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS1_THRSHLD_REG_VCC_PA_THRSHLD(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS2_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS2_THRSHLD_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS2_THRSHLD_REG_VNN_CM_THRSHLD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS2_THRSHLD_REG_VNN_CM_THRSHLD(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS3_THRSHLD_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS3_THRSHLD_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS3_THRSHLD_REG_VDD1_CM_THRSHLD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS3_THRSHLD_REG_VDD1_CM_THRSHLD(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_SMPS3_THRSHLD_REG_VDD2_CM_THRSHLD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_SMPS3_THRSHLD_REG_VDD2_CM_THRSHLD(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPA_DATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPA_DATA_REG_VPA_CM_DATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VNN_DATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VNN_DATA_REG_VNN_CM_DATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD1_DATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD1_DATA_REG_VDD1_CM_DATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD2_DATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD2_DATA_REG_VDD2_CM_DATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG1_DATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG1_DATA_REG_VPROG1_CM_DATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG2_DATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG2_DATA_REG_VPROG2_CM_DATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG3_DATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_PROG3_DATA_REG_VPROG3_CM_DATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VCC_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VCC_INT_LVL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VCC_INT_LVL_REG_VCC_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VCC_INT_LVL_REG_VCC_CM_INT_LVL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VNN_INT_LVL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VNN_INT_LVL_REG_VNN_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VNN_INT_LVL_REG_VNN_CM_INT_LVL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD2_INT_LVL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD2_INT_LVL_REG_VDD2_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD2_INT_LVL_REG_VDD2_CM_INT_LVL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD1_INT_LVL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VDD1_INT_LVL_REG_VDD1_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VDD1_INT_LVL_REG_VDD1_CM_INT_LVL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG1_INT_LVL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG1_INT_LVL_REG_VPROG1_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG1_INT_LVL_REG_VPROG1_CM_INT_LVL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_INT_LVL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG3_INT_LVL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CM_VPROG3_INT_LVL_REG_VPROG3_CM_INT_LVL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VPROG3_INT_LVL_REG_VPROG3_CM_INT_LVL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VROCIRQSTAT0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ eCM_VROCIRQSTAT0_REG_SVCC getPmic_CM_VROCIRQSTAT0_REG_SVCC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCM_VROCIRQSTAT0_REG_SVCC ) value;
+}
+
+__HWREG_INLINE__ eCM_VROCIRQSTAT0_REG_SVPA getPmic_CM_VROCIRQSTAT0_REG_SVPA(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return ( eCM_VROCIRQSTAT0_REG_SVPA ) value;
+}
+
+__HWREG_INLINE__ eCM_VROCIRQSTAT0_REG_SVNN getPmic_CM_VROCIRQSTAT0_REG_SVNN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eCM_VROCIRQSTAT0_REG_SVNN ) value;
+}
+
+__HWREG_INLINE__ eCM_VROCIRQSTAT0_REG_SVDD1 getPmic_CM_VROCIRQSTAT0_REG_SVDD1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eCM_VROCIRQSTAT0_REG_SVDD1 ) value;
+}
+
+__HWREG_INLINE__ eCM_VROCIRQSTAT0_REG_SVDD2 getPmic_CM_VROCIRQSTAT0_REG_SVDD2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return ( eCM_VROCIRQSTAT0_REG_SVDD2 ) value;
+}
+
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VROCIRQSTAT2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ eCM_VROCIRQSTAT2_REG_SVPROG1 getPmic_CM_VROCIRQSTAT2_REG_SVPROG1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCM_VROCIRQSTAT2_REG_SVPROG1 ) value;
+}
+
+__HWREG_INLINE__ eCM_VROCIRQSTAT2_REG_SVPROG2 getPmic_CM_VROCIRQSTAT2_REG_SVPROG2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eCM_VROCIRQSTAT2_REG_SVPROG2 ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CM_VROCIRQSTAT3_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ eCM_VROCIRQSTAT3_REG_SVPROG3 getPmic_CM_VROCIRQSTAT3_REG_SVPROG3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCM_VROCIRQSTAT3_REG_SVPROG3 ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VRTCCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VRTCCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VRTCCTRL_REG_VRTCRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VRTCCTRL_REG_VRTCRLD(HWREG_U8 _reg, eVRTCCTRL_REG_VRTCRLD value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVRTCCTRL_REG_VRTCRLD getPmic_VRTCCTRL_REG_VRTCRLD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eVRTCCTRL_REG_VRTCRLD ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUIRQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUIRQ_REG_WAF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUIRQ_REG_WAF(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUIRQ_REG_AF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUIRQ_REG_AF(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTMUIRQ_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTMUIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTMUIRQ_REG_MWA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTMUIRQ_REG_MWA(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MTMUIRQ_REG_MA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MTMUIRQ_REG_MA(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUSTATUS_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUSTATUS_REG_VRT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUCONFIG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG_RSTTMU(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG_SETVRT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG_RTCWAKEEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUCONFIG_REG_RTCWAKEEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG_HF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUCONFIG_REG_HF(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TMUCONFIG_REG_DSE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TMUCONFIG_REG_DSE(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDS_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDS_REG_SECONDS(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SECONDSSA_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDSSA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SECONDSSA_REG_SECONDS_SA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDSSA_REG_SECONDS_SA(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SECONDSWA_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDSWA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_SECONDSWA_REG_SECONDS_WA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SECONDSWA_REG_SECONDS_WA(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTES_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTES_REG_MINUTES(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MINUTESSA_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTESSA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MINUTESSA_REG_MINUTES_SA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTESSA_REG_MINUTES_SA(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MINUTESWA_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTESWA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_MINUTESWA_REG_MINUTES_WA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MINUTESWA_REG_MINUTES_WA(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURS_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURS_REG_HOURS(HWREG_U8 value)
+{
+    value = ( value & (0x1F << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURS_REG_HOURS_AM_PM(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSSA_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSSA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSSA_REG_HOURS_SA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E0) | ( (value & 0x1F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSSA_REG_HOURS_SA(HWREG_U8 value)
+{
+    value = ( value & (0x1F << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSSA_REG_HOURSSA_AM_PM(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSSA_REG_HOURSSA_AM_PM(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSWA_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSWA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSWA_REG_HOURS_WA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E0) | ( (value & 0x1F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSWA_REG_HOURS_WA(HWREG_U8 value)
+{
+    value = ( value & (0x1F << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_HOURSWA_REG_HOURSWA_AM_PM(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_HOURSWA_REG_HOURSWA_AM_PM(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DWEEK_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DWEEK_REG_DWEEK(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DMONTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DMONTH_REG_DMONTH(HWREG_U8 value)
+{
+    value = ( value & (0x1F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MONTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MONTH_REG_MONTH(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_YEAR_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_YEAR_REG_YEAR(HWREG_U8 value)
+{
+    value = ( value & (0x7F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB1_REG_STC_B1(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB2_REG_STC_B2(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB3_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB3_REG_STC_B3(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB4_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_STCB4_REG_STC_B4(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DMONTHWA_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DMONTHWA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DMONTHWA_REG_DMONTH_WA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000E0) | ( (value & 0x1F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DMONTHWA_REG_DMONTH_WA(HWREG_U8 value)
+{
+    value = ( value & (0x1F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP0D(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP0D(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP0DLVL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP0DLVL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP1D(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP1D(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP1DLVL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP1DLVL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP2D(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP2D(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLKCONFIG_REG_SLP2DLVL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLKCONFIG_REG_SLP2DLVL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLCTRL_REG_DAC_SEL_CURRENT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLCTRL_REG_DAC_SEL_CURRENT(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLCTRL_REG_REF_CLK_SEL(HWREG_U8 _reg, eFLLCTRL_REG_REF_CLK_SEL value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eFLLCTRL_REG_REF_CLK_SEL getPmic_FLLCTRL_REG_REF_CLK_SEL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eFLLCTRL_REG_REF_CLK_SEL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLCTRL_REG_MULT_MINUS_ONE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000000F) | ( (value & 0xF) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLCTRL_REG_MULT_MINUS_ONE(HWREG_U8 value)
+{
+    value = ( value & (0xF << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLDACSH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDACSH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLDACSH_REG_START_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDACSH_REG_START_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLDACSL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDACSL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLDACSL_REG_START_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDACSL_REG_START_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDAC_STATUSH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDAC_STATUSH_REG_DAC_H(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDAC_STATUSL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLDAC_STATUSL_REG_DAC_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLFRQDIV_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLFRQDIV_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_FLLFRQDIV_REG_FREQU_DIV_DCDC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_FLLFRQDIV_REG_FREQU_DIV_DCDC(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLK32CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG_OSCBYP(HWREG_U8 _reg, eCLK32CTRL_REG_OSCBYP value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCLK32CTRL_REG_OSCBYP getPmic_CLK32CTRL_REG_OSCBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCLK32CTRL_REG_OSCBYP ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG_OSCPD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLK32CTRL_REG_OSCPD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG_SHAPERDIS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLK32CTRL_REG_SHAPERDIS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG_CLOAD_XTAL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C7) | ( (value & 0x7) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CLK32CTRL_REG_CLOAD_XTAL(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CLK32CTRL_REG_EDGE_SEL(HWREG_U8 _reg, eCLK32CTRL_REG_EDGE_SEL value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCLK32CTRL_REG_EDGE_SEL getPmic_CLK32CTRL_REG_EDGE_SEL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return ( eCLK32CTRL_REG_EDGE_SEL ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDCTRL_REG_GPLEDON(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDCTRL_REG_GPLEDON(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDCTRL_REG_GPLEDI(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDCTRL_REG_GPLEDI(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDCTRL_REG_GPLEDF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000CF) | ( (value & 0x3) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDCTRL_REG_GPLEDF(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDFSM_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDFSM_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDFSM_REG_GPLEDFF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDFSM_REG_GPLEDFF(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDPWM_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDPWM_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_GPLEDPWM_REG_GPLEDDUTY(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_GPLEDPWM_REG_GPLEDDUTY(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_INTVREFCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_INTVREFCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_INTVREFCTRL_REG_MODEHPBG(HWREG_U8 _reg, eINTVREFCTRL_REG_MODEHPBG value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eINTVREFCTRL_REG_MODEHPBG getPmic_INTVREFCTRL_REG_MODEHPBG(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return ( eINTVREFCTRL_REG_MODEHPBG ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_INTVREFCTRL_REG_FILTER_BYPASS(HWREG_U8 _reg, eINTVREFCTRL_REG_FILTER_BYPASS value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eINTVREFCTRL_REG_FILTER_BYPASS getPmic_INTVREFCTRL_REG_FILTER_BYPASS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return ( eINTVREFCTRL_REG_FILTER_BYPASS ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_INTVREFCTRL_REG_FAST_SETTLE(HWREG_U8 _reg, eINTVREFCTRL_REG_FAST_SETTLE value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eINTVREFCTRL_REG_FAST_SETTLE getPmic_INTVREFCTRL_REG_FAST_SETTLE(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eINTVREFCTRL_REG_FAST_SETTLE ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_IREFTRIM_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IREFTRIM_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_IREFTRIM_REG_IREFTRIM(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000C0) | ( (value & 0x3F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_IREFTRIM_REG_IREFTRIM(HWREG_U8 value)
+{
+    value = ( value & (0x3F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM0_REG_HPBGTRIM(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000080) | ( (value & 0x7F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM0_REG_HPBGTRIM(HWREG_U8 value)
+{
+    value = ( value & (0x7F << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM0_REG_SPARE07(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM0_REG_SPARE07(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM1_REG_LPBGTRIM(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000080) | ( (value & 0x7F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM1_REG_LPBGTRIM(HWREG_U8 value)
+{
+    value = ( value & (0x7F << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VREFTRIM1_REG_SPARE07(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VREFTRIM1_REG_SPARE07(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_THRH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_THRH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_THRH_REG_CC_THRH(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_THRH_REG_CC_THRH(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_THRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_THRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_THRL_REG_CC_THRL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_THRL_REG_CC_THRL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_SHRTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_SHRTH_REG_CC_CURR_SHRTH(HWREG_U8 value)
+{
+    value = ( value & (0x1F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_SHRTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_SHRTL_REG_CC_CURR_SHRTL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_LNGH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_LNGH_REG_CC_CURR_LNGH(HWREG_U8 value)
+{
+    value = ( value & (0x1F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_LNGL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CURR_LNGL_REG_CC_CURR_LNGL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CTRL0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_OFF(HWREG_U8 _reg, eCC_CTRL0_REG_CC_OFF value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCC_CTRL0_REG_CC_OFF getPmic_CC_CTRL0_REG_CC_OFF(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCC_CTRL0_REG_CC_OFF ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_CBT(HWREG_U8 _reg, eCC_CTRL0_REG_CC_CBT value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCC_CTRL0_REG_CC_CBT getPmic_CC_CTRL0_REG_CC_CBT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eCC_CTRL0_REG_CC_CBT ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_ACLR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_LOW_PRECISION(HWREG_U8 _reg, eCC_CTRL0_REG_CC_LOW_PRECISION value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCC_CTRL0_REG_CC_LOW_PRECISION getPmic_CC_CTRL0_REG_CC_LOW_PRECISION(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eCC_CTRL0_REG_CC_LOW_PRECISION ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_CHOP_TST(HWREG_U8 _reg, eCC_CTRL0_REG_CC_CHOP_TST value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCC_CTRL0_REG_CC_CHOP_TST getPmic_CC_CTRL0_REG_CC_CHOP_TST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eCC_CTRL0_REG_CC_CHOP_TST ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL0_REG_CC_VREF_TST(HWREG_U8 _reg, eCC_CTRL0_REG_CC_VREF_TST value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCC_CTRL0_REG_CC_VREF_TST getPmic_CC_CTRL0_REG_CC_VREF_TST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return ( eCC_CTRL0_REG_CC_VREF_TST ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CTRL1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_CHO_EN(HWREG_U8 _reg, eCC_CTRL1_REG_CC_CHO_EN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCC_CTRL1_REG_CC_CHO_EN getPmic_CC_CTRL1_REG_CC_CHO_EN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCC_CTRL1_REG_CC_CHO_EN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_CALI(HWREG_U8 _reg, eCC_CTRL1_REG_CC_CALI value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCC_CTRL1_REG_CC_CALI getPmic_CC_CTRL1_REG_CC_CALI(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eCC_CTRL1_REG_CC_CALI ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_CHO_PRD(HWREG_U8 _reg, eCC_CTRL1_REG_CC_CHO_PRD value)
+{
+    _reg = (_reg & 0x000000E3) | ( (value & 0x7) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCC_CTRL1_REG_CC_CHO_PRD getPmic_CC_CTRL1_REG_CC_CHO_PRD(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 2) ) >> 2;
+    return ( eCC_CTRL1_REG_CC_CHO_PRD ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_NO_CHO_CFG(HWREG_U8 _reg, eCC_CTRL1_REG_CC_NO_CHO_CFG value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCC_CTRL1_REG_CC_NO_CHO_CFG getPmic_CC_CTRL1_REG_CC_NO_CHO_CFG(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eCC_CTRL1_REG_CC_NO_CHO_CFG ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_CHO_SCM(HWREG_U8 _reg, eCC_CTRL1_REG_CC_CHO_SCM value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCC_CTRL1_REG_CC_CHO_SCM getPmic_CC_CTRL1_REG_CC_CHO_SCM(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return ( eCC_CTRL1_REG_CC_CHO_SCM ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CC_CTRL1_REG_CC_SPARE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_CTRL1_REG_CC_SPARE(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B3_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B3_REG_CC_DOWN_B3(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B2_REG_CC_DOWN_B2(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B1_REG_CC_DOWN_B1(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_DOWN_B0_REG_CC_DOWN_B0(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B3_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B3_REG_CC_UP_B3(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B2_REG_CC_UP_B2(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B1_REG_CC_UP_B1(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CC_UP_B0_REG_CC_UP_B0(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMAXH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMAXH_REG_VBATMAXH(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMAXL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBATMAXL_REG_VBATMAXL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_SHRTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_SHRTH_REG_MAX_CURR_SHRTH(HWREG_U8 value)
+{
+    value = ( value & (0x1F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_SHRTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_SHRTL_REG_MAX_CURR_SHRTL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_LNGH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_LNGH_REG_MAX_CURR_LNGH(HWREG_U8 value)
+{
+    value = ( value & (0x1F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_LNGL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_MAX_CURR_LNGL_REG_MAX_CURR_LNGL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PROVERSION_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PROVERSION_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PROVERSION_REG_PROVERSION(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PROVERSION_REG_PROVERSION(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICWDTCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICWDTCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICWDTCNT_REG_PMICWDTEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICWDTCNT_REG_PMICWDTEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICWDTCNT_REG_PMICWDTRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICWDTTC_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICWDTTC_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_PMICWDTTC_REG_PMICWDT_SECONDS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_PMICWDTTC_REG_PMICWDT_SECONDS(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCRITIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCRITIRQ_REG_SOCP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ eSCRITIRQ_REG_SOSCSTP getPmic_SCRITIRQ_REG_SOSCSTP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eSCRITIRQ_REG_SOSCSTP ) value;
+}
+
+__HWREG_INLINE__ eSCRITIRQ_REG_SOSCBAD getPmic_SCRITIRQ_REG_SOSCBAD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return ( eSCRITIRQ_REG_SOSCBAD ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDCTRL_REG_USB_IDEN(HWREG_U8 _reg, eUSBIDCTRL_REG_USB_IDEN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eUSBIDCTRL_REG_USB_IDEN getPmic_USBIDCTRL_REG_USB_IDEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eUSBIDCTRL_REG_USB_IDEN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDCTRL_REG_ACA_DETEN(HWREG_U8 _reg, eUSBIDCTRL_REG_ACA_DETEN value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eUSBIDCTRL_REG_ACA_DETEN getPmic_USBIDCTRL_REG_ACA_DETEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eUSBIDCTRL_REG_ACA_DETEN ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDDETTYPE_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBIDDETTYPE_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDDETTYPE_REG_USBIDDETTYPE(HWREG_U8 _reg, eUSBIDDETTYPE_REG_USBIDDETTYPE value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eUSBIDDETTYPE_REG_USBIDDETTYPE getPmic_USBIDDETTYPE_REG_USBIDDETTYPE(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eUSBIDDETTYPE_REG_USBIDDETTYPE ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBIDDETTYPE_REG_USBIDCONTI(HWREG_U8 _reg, eUSBIDDETTYPE_REG_USBIDCONTI value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eUSBIDDETTYPE_REG_USBIDCONTI getPmic_USBIDDETTYPE_REG_USBIDCONTI(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eUSBIDDETTYPE_REG_USBIDCONTI ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBPHYCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBPHYCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBPHYCTRL_REG_USBPHYRSTB(HWREG_U8 _reg, eUSBPHYCTRL_REG_USBPHYRSTB value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eUSBPHYCTRL_REG_USBPHYRSTB getPmic_USBPHYCTRL_REG_USBPHYRSTB(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eUSBPHYCTRL_REG_USBPHYRSTB ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBPHYCTRL_REG_CHGDET_N_POL(HWREG_U8 _reg, eUSBPHYCTRL_REG_CHGDET_N_POL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eUSBPHYCTRL_REG_CHGDET_N_POL getPmic_USBPHYCTRL_REG_CHGDET_N_POL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eUSBPHYCTRL_REG_CHGDET_N_POL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBPHYCTRL_REG_CTYP_START(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBPHYCTRL_REG_CTYP_DIS(HWREG_U8 _reg, eUSBPHYCTRL_REG_CTYP_DIS value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eUSBPHYCTRL_REG_CTYP_DIS getPmic_USBPHYCTRL_REG_CTYP_DIS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eUSBPHYCTRL_REG_CTYP_DIS ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_RVAL(HWREG_U8 _reg, eUSBRSTGPO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eUSBRSTGPO_REG_RVAL getPmic_USBRSTGPO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eUSBRSTGPO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_USBRSTGPI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBRSTGPI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSYSCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSYSCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSYSCTRL_REG_VSYSGOOD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VSYSCTRL_REG_VSYSGOOD(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VSYSCTRL_REG_VSYSOFF(HWREG_U8 _reg, eVSYSCTRL_REG_VSYSOFF value)
+{
+    _reg = (_reg & 0x0000008F) | ( (value & 0x7) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVSYSCTRL_REG_VSYSOFF getPmic_VSYSCTRL_REG_VSYSOFF(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 4) ) >> 4;
+    return ( eVSYSCTRL_REG_VSYSOFF ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VOTPCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VOTPCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VOTPCTRL_REG_VOTPGOOD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F0) | ( (value & 0xF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VOTPCTRL_REG_VOTPGOOD(HWREG_U8 value)
+{
+    value = ( value & (0xF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VXOCNT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VXOCNT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VXOCNT_REG_VXOEN(HWREG_U8 _reg, eVXOCNT_REG_VXOEN value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVXOCNT_REG_VXOEN getPmic_VXOCNT_REG_VXOEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eVXOCNT_REG_VXOEN ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_1_REG_DEV3_RESERVED(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_1_REG_DEV3_READ_STATUS2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_2_REG_DEV3_PARITY_ERROR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS_2_REG_DEV3_DATA_FRAME_ERROR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_DOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG_DOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_RVAL(HWREG_U8 _reg, eCHGDETGPO_REG_RVAL value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCHGDETGPO_REG_RVAL getPmic_CHGDETGPO_REG_RVAL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eCHGDETGPO_REG_RVAL ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_REN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG_REN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_DRV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG_DRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_DIR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG_DIR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPO_REG_ALTFUNCEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPO_REG_ALTFUNCEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPI_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPI_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPI_REG_DIN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPI_REG_GPIDBNC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPI_REG_GPIDBNC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDETGPI_REG_GPIGLBYP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDETGPI_REG_GPIGLBYP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DBPTIMEOUT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DBPTIMEOUT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DBPTIMEOUT_REG_DBPTIMEOUTVAL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DBPTIMEOUT_REG_DBPTIMEOUTVAL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DBPTIMER_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DBPTIMER_REG_TIMST(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_CHGRRESET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_EMRGCHREN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_EMRGCHREN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_EXTCHRDIS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_EXTCHRDIS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_SWCONTROL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_SWCONTROL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_TTLCK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_TTLCK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_CCSM_OFF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_CCSM_OFF(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_DBPOFF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL0_REG_CHR_WDT_NOKICK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL0_REG_CHR_WDT_NOKICK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FUSBINLMT100(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FUSBINLMT150(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FUSBINLMT500(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FUSBINLMT900(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FUSBINLMT1500(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_FTEMPEVENT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_OTGMODE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL1_REG_OTGMODE(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL1_REG_DBPEN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL1_REG_DBPEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL2_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL2_REG_CHGDIS_ACT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRCTRL2_REG_CHGDIS_ACT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL2_REG_PWROVREN(HWREG_U8 _reg, eCHGRCTRL2_REG_PWROVREN value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCHGRCTRL2_REG_PWROVREN getPmic_CHGRCTRL2_REG_PWROVREN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eCHGRCTRL2_REG_PWROVREN ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRSTATUS_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRSTATUS_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ eCHGRSTATUS_REG_CHGDETBLVL getPmic_CHGRSTATUS_REG_CHGDETBLVL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCHGRSTATUS_REG_CHGDETBLVL ) value;
+}
+
+__HWREG_INLINE__ eCHGRSTATUS_REG_CHGDETBLATCH getPmic_CHGRSTATUS_REG_CHGDETBLATCH(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return ( eCHGRSTATUS_REG_CHGDETBLATCH ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGRSTATUS_REG_CHGDISLVL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRSTATUS_REG_USBSEL(HWREG_U8 _reg, eCHGRSTATUS_REG_USBSEL value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCHGRSTATUS_REG_USBSEL getPmic_CHGRSTATUS_REG_USBSEL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return ( eCHGRSTATUS_REG_USBSEL ) value;
+}
+
+__HWREG_INLINE__ eCHGRSTATUS_REG_SDBP getPmic_CHGRSTATUS_REG_SDBP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eCHGRSTATUS_REG_SDBP ) value;
+}
+
+__HWREG_INLINE__ eCHGRSTATUS_REG_SDCP getPmic_CHGRSTATUS_REG_SDCP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return ( eCHGRSTATUS_REG_SDCP ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG_CHGINTBLVL(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG_SI2CWR(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG_SI2CRD(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG_SNACK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCHGRIRQ_REG_SSTUCK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS2_LASTREAD_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_STATUS2_LASTREAD_REG_DEV3_STATUS_2_ON_LAST_GETREG(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBUSDETCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG_VBUSDETTYPE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBUSDETCTRL_REG_VBUSDETTYPE(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG_VBUSDETEN(HWREG_U8 _reg, eVBUSDETCTRL_REG_VBUSDETEN value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVBUSDETCTRL_REG_VBUSDETEN getPmic_VBUSDETCTRL_REG_VBUSDETEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return ( eVBUSDETCTRL_REG_VBUSDETEN ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG_BOOT_100MA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBUSDETCTRL_REG_BOOT_100MA(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG_SDP500_NC(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBUSDETCTRL_REG_SDP500_NC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VBUSDETCTRL_REG_DCDTIMEOUT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000001F) | ( (value & 0x7) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VBUSDETCTRL_REG_DCDTIMEOUT(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 5) ) >> 5;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDCINDETCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDCINDETCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDCINDETCTRL_REG_VDCINDETTYPE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_VDCINDETCTRL_REG_VDCINDETTYPE(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_VDCINDETCTRL_REG_VDCINDETEN(HWREG_U8 _reg, eVDCINDETCTRL_REG_VDCINDETEN value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eVDCINDETCTRL_REG_VDCINDETEN getPmic_VDCINDETCTRL_REG_VDCINDETEN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return ( eVDCINDETCTRL_REG_VDCINDETEN ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDCTRL_REG_CHRLEDFN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDCTRL_REG_CHRLEDFN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDCTRL_REG_SWLEDON(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDCTRL_REG_SWLEDON(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDCTRL_REG_CHRLEDI(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F3) | ( (value & 0x3) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDCTRL_REG_CHRLEDI(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDCTRL_REG_CHRLEDF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000CF) | ( (value & 0x3) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDCTRL_REG_CHRLEDF(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDFSM_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDFSM_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDFSM_REG_CHRLEDCIP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDFSM_REG_LEDEFF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F9) | ( (value & 0x3) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDFSM_REG_LEDEFF(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDPWM_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDPWM_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRLEDPWM_REG_CHRLEDDUTY(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRLEDPWM_REG_CHRLEDDUTY(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRTTADDR_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRTTADDR_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRTTADDR_REG_CHRTTADDR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRTTADDR_REG_CHRTTADDR(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRTTDATA_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRTTDATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHRTTDATA_REG_CHRTTDATA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHRTTDATA_REG_CHRTTDATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRCTRL_REG_I2CWR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRCTRL_REG_I2CRD(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRCTRL_REG_I2CCLRDIS(HWREG_U8 _reg, eI2COVRCTRL_REG_I2CCLRDIS value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ eI2COVRCTRL_REG_I2CCLRDIS getPmic_I2COVRCTRL_REG_I2CCLRDIS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return ( eI2COVRCTRL_REG_I2CCLRDIS ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRDADDR_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRDADDR_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRDADDR_REG_I2COVRDADDR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000080) | ( (value & 0x7F) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRDADDR_REG_I2COVRDADDR(HWREG_U8 value)
+{
+    value = ( value & (0x7F << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVROFFSET_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVROFFSET_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVROFFSET_REG_I2COVROFFSET(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVROFFSET_REG_I2COVROFFSET(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRWRDATA_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRWRDATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_I2COVRWRDATA_REG_I2COVRWRDATA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRWRDATA_REG_I2COVRWRDATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRRDDATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_I2COVRRDDATA_REG_I2COVRRDDATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS0_REG_SUSBHWDET(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS0_REG_USBSRCDETRSLT(HWREG_U8 value)
+{
+    value = ( value & (0xF << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ eUSBSRCDETSTATUS0_REG_SDCD getPmic_USBSRCDETSTATUS0_REG_SDCD(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 6) ) >> 6;
+    return ( eUSBSRCDETSTATUS0_REG_SDCD ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS1_REG_SACA(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS1_REG_SPRIM(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_USBSRCDETSTATUS1_REG_SSEC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CCSMCMDSKIP_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CCSMCMDSKIP_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CCSMCMDSKIP_REG_OFFSET_SKIP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CCSMCMDSKIP_REG_OFFSET_SKIP(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CCSMSFTTIMER_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CCSMSFTTIMER_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CCSMSFTTIMER_REG_SFTTIMERVAL(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CCSMSFTTIMER_REG_SFTTIMERVAL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCCSMSFTTIMER_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_SCCSMSFTTIMER_REG_SSFTTIMERVAL(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL3_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL3_REG_SFTTIMERSTOP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg =  ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGRCTRL3_REG_DPDCPOFF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg =  ( (value & 0x1) << 1);
+    return _reg;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDISCTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_CHGDISCTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDISCTRL_REG_CHGDISOUT(HWREG_U8 _reg, eCHGDISCTRL_REG_CHGDISOUT value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCHGDISCTRL_REG_CHGDISOUT getPmic_CHGDISCTRL_REG_CHGDISOUT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return ( eCHGDISCTRL_REG_CHGDISOUT ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDISCTRL_REG_CHGDISDRV(HWREG_U8 _reg, eCHGDISCTRL_REG_CHGDISDRV value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCHGDISCTRL_REG_CHGDISDRV getPmic_CHGDISCTRL_REG_CHGDISDRV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return ( eCHGDISCTRL_REG_CHGDISDRV ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_CHGDISCTRL_REG_CHGDISFN(HWREG_U8 _reg, eCHGDISCTRL_REG_CHGDISFN value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ eCHGDISCTRL_REG_CHGDISFN getPmic_CHGDISCTRL_REG_CHGDISFN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return ( eCHGDISCTRL_REG_CHGDISFN ) value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1CTRL_REG_TLP1RST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1CTRL_REG_TLP1LCK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1CTRL_REG_TLP1LCK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1COLDRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1COLDRST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1COLDBOOT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1COLDBOOT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1COLDOFF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1COLDOFF(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1WARMRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1WARMRST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I2(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I2(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I1(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1ENTS0I1(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS0_REG_TLP1EXTSTBY(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS0_REG_TLP1EXTSTBY(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG_TLP1PLATFORMRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG_TLP1PLATFORMRST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I1VNN(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I1VNN(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I1VNNLP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I1VNNLP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG_TLP1MODEMRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG_TLP1MODEMRST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I3LP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS1_REG_TLP1ENTS0I3LP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1COLDRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1COLDRST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1COLDBOOT(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1COLDBOOT(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1COLDOFF(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1COLDOFF(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1WARMRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1WARMRST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1ENTS0IX(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1ENTS0IX(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1ENTS3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1ENTS3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1EXTS0IX(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1EXTS0IX(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS2_REG_TLP1EXTS3(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS2_REG_TLP1EXTS3(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS3_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS3_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EVSTATUS3_REG_TLP1MODEMRST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EVSTATUS3_REG_TLP1MODEMRST(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV3_SETREGADR_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_SETREGADR_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_DEV3_SETREGADR_REG_DEV3_SETREGADR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_DEV3_SETREGADR_REG_DEV3_SETREGADR(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1TRACEINSTH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1TRACEINSTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1TRACEINSTH_REG_TLP1TRACEINST_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1TRACEINSTH_REG_TLP1TRACEINST_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1TRACEINSTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1TRACEINSTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1TRACEINSTL_REG_TLP1TRACEINST_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1TRACEINSTL_REG_TLP1TRACEINST_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMADDRH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMADDRH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMADDRH_REG_TLP1INSTMEMADDR_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMADDRH_REG_TLP1INSTMEMADDR_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMADDRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMADDRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMADDRL_REG_TLP1INSTMEMADDR_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMADDRL_REG_TLP1INSTMEMADDR_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMDATAH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMDATAH_REG_TLP1INSTMEMDATA_H(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMDATAL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMDATAL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1INSTMEMDATAL_REG_TLP1INSTMEMDATA_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1INSTMEMDATAL_REG_TLP1INSTMEMDATA_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDBOOTH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDBOOTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDBOOTH_REG_TLP1COLDBOOTBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDBOOTH_REG_TLP1COLDBOOTBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDBOOTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDBOOTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDBOOTL_REG_TLP1COLDBOOTBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDBOOTL_REG_TLP1COLDBOOTBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDOFFH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDOFFH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDOFFH_REG_TLP1COLDOFFBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDOFFH_REG_TLP1COLDOFFBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDOFFL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDOFFL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDOFFL_REG_TLP1COLDOFFBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDOFFL_REG_TLP1COLDOFFBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDRSTH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDRSTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDRSTH_REG_TLP1COLDRSTBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDRSTH_REG_TLP1COLDRSTBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDRSTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDRSTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1COLDRSTL_REG_TLP1COLDRSTBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1COLDRSTL_REG_TLP1COLDRSTBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1WARMRSTH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1WARMRSTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1WARMRSTH_REG_TLP1WARMRSTBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1WARMRSTH_REG_TLP1WARMRSTBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1WARMRSTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1WARMRSTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1WARMRSTL_REG_TLP1WARMRSTBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1WARMRSTL_REG_TLP1WARMRSTBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1H_REG_TLP1ESBS0I1BASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1H_REG_TLP1ESBS0I1BASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1L_REG_TLP1ESBS0I1BASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1L_REG_TLP1ESBS0I1BASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNH_REG_TLP1ESBS0I1VNNBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNH_REG_TLP1ESBS0I1VNNBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNL_REG_TLP1ESBS0I1VNNBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNL_REG_TLP1ESBS0I1VNNBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNLPH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNLPH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNLPH_REG_TLP1ESBS0I1VNNLPBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNLPH_REG_TLP1ESBS0I1VNNLPBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNLPL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNLPL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I1VNNLPL_REG_TLP1ESBS0I1VNNLPBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I1VNNLPL_REG_TLP1ESBS0I1VNNLPBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I2H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I2H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I2H_REG_TLP1ESBS0I2BASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I2H_REG_TLP1ESBS0I2BASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I2L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I2L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I2L_REG_TLP1ESBS0I2BASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I2L_REG_TLP1ESBS0I2BASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3H_REG_TLP1ESBS0I3BASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3H_REG_TLP1ESBS0I3BASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3L_REG_TLP1ESBS0I3BASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3L_REG_TLP1ESBS0I3BASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3LPH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3LPH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3LPH_REG_TLP1ESBS0I3LPBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3LPH_REG_TLP1ESBS0I3LPBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3LPL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3LPL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0I3LPL_REG_TLP1ESBS0I3LPBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0I3LPL_REG_TLP1ESBS0I3LPBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBH_REG_TLP1EXSBBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBH_REG_TLP1EXSBBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBL_REG_TLP1EXSBBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBL_REG_TLP1EXSBBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0IXH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0IXH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0IXH_REG_TLP1ESBS0IXBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0IXH_REG_TLP1ESBS0IXBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0IXL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0IXL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS0IXL_REG_TLP1ESBS0IXBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS0IXL_REG_TLP1ESBS0IXBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS3H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS3H_REG_TLP1ESBS3BASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS3H_REG_TLP1ESBS3BASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS3L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1ESBS3L_REG_TLP1ESBS3BASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1ESBS3L_REG_TLP1ESBS3BASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS0IXH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS0IXH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS0IXH_REG_TLP1EXS0IXBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS0IXH_REG_TLP1EXS0IXBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS0IXL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS0IXL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS0IXL_REG_TLP1EXS0IXBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS0IXL_REG_TLP1EXS0IXBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS3H_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS3H_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS3H_REG_TLP1EXS3BASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS3H_REG_TLP1EXS3BASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS3L_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS3L_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1EXSBS3L_REG_TLP1EXS3BASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1EXSBS3L_REG_TLP1EXS3BASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1MODEMRSTH_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1MODEMRSTH_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1MODEMRSTH_REG_TLP1MODEMRSTBASE_H(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FC) | ( (value & 0x3) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1MODEMRSTH_REG_TLP1MODEMRSTBASE_H(HWREG_U8 value)
+{
+    value = ( value & (0x3 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1MODEMRSTL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1MODEMRSTL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1MODEMRSTL_REG_TLP1MODEMRSTBASE_L(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1MODEMRSTL_REG_TLP1MODEMRSTBASE_L(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1VRSETTLED_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1VRSETTLED_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP1VRSETTLED_REG_VREFSOCDLY(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F8) | ( (value & 0x7) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP1VRSETTLED_REG_VREFSOCDLY(HWREG_U8 value)
+{
+    value = ( value & (0x7 << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2CTRL_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2CTRL_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2CTRL_REG_TLP2RST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2CTRL_REG_TLP2LCK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2CTRL_REG_TLP2LCK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2BATTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FE) | ( (value & 0x1) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2BATTEMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2SYSTEMP(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FD) | ( (value & 0x1) << 1);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2SYSTEMP(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 1) ) >> 1;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2BATTID(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000FB) | ( (value & 0x1) << 2);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2BATTID(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 2) ) >> 2;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2BATTV(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000F7) | ( (value & 0x1) << 3);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2BATTV(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 3) ) >> 3;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2USBID(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000EF) | ( (value & 0x1) << 4);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2USBID(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 4) ) >> 4;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2PEAK(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000DF) | ( (value & 0x1) << 5);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2PEAK(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 5) ) >> 5;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2EVSTATUS_REG_TLP2GPMEAS(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2EVSTATUS_REG_TLP2GPMEAS(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2TRACEINST_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2TRACEINST_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2TRACEINST_REG_TLP2TRACEINST(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2TRACEINST_REG_TLP2TRACEINST(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2INSTMEMADDR_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2INSTMEMADDR_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2INSTMEMADDR_REG_TLP2INSTMEMADDR(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2INSTMEMADDR_REG_TLP2INSTMEMADDR(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2INSTMEMDATA_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2INSTMEMDATA_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2INSTMEMDATA_REG_TLP2INSTMEMDATA(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2INSTMEMDATA_REG_TLP2INSTMEMDATA(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2SYSTEMP_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2SYSTEMP_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2SYSTEMP_REG_TLP2SYSTEMPBASE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2SYSTEMP_REG_TLP2SYSTEMPBASE(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2BATTID_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2BATTID_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2BATTID_REG_TLP2BATTIDBASE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2BATTID_REG_TLP2BATTIDBASE(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2BATTV_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2BATTV_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2BATTV_REG_TLP2BATTVBASE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2BATTV_REG_TLP2BATTVBASE(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2USBID_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2USBID_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2USBID_REG_TLP2USBIDBASE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2USBID_REG_TLP2USBIDBASE(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2PEAK_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2PEAK_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2PEAK_REG_TLP2PEAKBASE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2PEAK_REG_TLP2PEAKBASE(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2GPMEAS_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2GPMEAS_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmic_TLP2GPMEAS_REG_TLP2GPMEASBASE(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = (_reg & 0x00000000) | ( (value & 0xFF) << 0);
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmic_TLP2GPMEAS_REG_TLP2GPMEASBASE(HWREG_U8 value)
+{
+    value = ( value & (0xFF << 0) ) >> 0;
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmu_VCC_STDBY_EXITVID_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+
+}
+__HWREG_INLINE__ HWREG_U8 getPmu_VCC_STDBY_EXITVID_REG(HWREG_U8 value)
+{
+	return value;
+
+}
+__HWREG_INLINE__ HWREG_U8 setPmu_VNN_STDBY_EXITVID_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+
+}
+__HWREG_INLINE__ HWREG_U8 getPmu_VNN_STDBY_EXITVID_REG(HWREG_U8 value)
+{
+	return value;
+}
+
+//**************DEV4 Register functions ******************//
+
+__HWREG_INLINE__ HWREG_U8 setPmu_VENDCTL1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+__HWREG_INLINE__ HWREG_U8 getPmu_VENDCTL1_REG(HWREG_U8 value)
+{
+	return value;
+}
+__HWREG_INLINE__ HWREG_U8 setPmu_DCDCVIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmu_DCDCVIRQ0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmu_VROCIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmu_VROCIRQ0_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmu_VROCIRQ2_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmu_VROCIRQ2_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmu_MVENDIRQLVL1_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+
+__HWREG_INLINE__ HWREG_U8 getPmu_MVENDIRQLVL1_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmu_MVENDIRQLVL1_REG_MDCDC(HWREG_U8 _reg, eMVENDIRQLVL1_REG_MDCDC value)
+{
+    _reg = (_reg & 0x000000BF) | ( (value & 0x1) << 6);
+    return _reg;
+}
+
+__HWREG_INLINE__ eMVENDIRQLVL1_REG_MDCDC getPmu_MVENDIRQLVL1_REG_MDCDC( HWREG_U8 value)
+{
+    value = ( value & (0x1 << 6) ) >> 6;
+    return ( eMVENDIRQLVL1_REG_MDCDC ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmu_MVENDIRQLVL1_REG_MVROC(HWREG_U8 _reg, eMVENDIRQLVL1_REG_MVROC value)
+{
+    _reg = (_reg & 0x0000007F) | ( (value & 0x1) << 7);
+    return _reg;
+}
+
+__HWREG_INLINE__ eMVENDIRQLVL1_REG_MVROC getPmu_MVENDIRQLVL1_REG_MVROC(HWREG_U8 value)
+{
+    value = ( value & (0x1 << 7) ) >> 7;
+    return ( eMVENDIRQLVL1_REG_MVROC ) value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmu_MDCDCVIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+
+}
+__HWREG_INLINE__ HWREG_U8 getPmu_MDCDCVIRQ0_REG(HWREG_U8 value)
+{
+	return value;
+
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmu_M_VEND_INT_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+__HWREG_INLINE__ HWREG_U8 getPmu_M_VEND_INT_REG(HWREG_U8 value)
+{
+    return value;
+}
+
+__HWREG_INLINE__ HWREG_U8 setPmu_MVROCIRQ0_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+
+}
+__HWREG_INLINE__ HWREG_U8 getPmu_MVROCIRQ0_REG(HWREG_U8 value)
+{
+	return value;
+
+} 
+__HWREG_INLINE__ HWREG_U8 setPmu_MVROCIRQ2_REG(HWREG_U8 _reg, HWREG_U8 value)
+{
+    _reg = value;
+    return _reg;
+}
+__HWREG_INLINE__ HWREG_U8 getPmu_MVROCIRQ2_REG(HWREG_U8 value)
+{
+	return value;
+
+}
+
+typedef struct
+{
+  uVCCCNT_REG vcccnt_reg;
+  uVNNCNT_REG vnncnt_reg;
+  uVDD1CNT_REG vdd1cnt_reg;
+  uVDD1VSEL_REG vdd1sel_reg;
+  uVDD2CNT_REG vdd2cnt_reg;
+  uVDD2VSEL_REG vdd2sel_reg;
+  uVPACNT_REG vpacnt_reg;
+  uVPAVSEL_REG vpasel_reg;
+  uSOCWDTCFG_REG socwdtcfg_reg;
+  uVLDOCNT_REG vldocnt_reg;
+  uVPROG1CNT_REG vprog1cnt_reg;
+  uVPROG2CNT_REG vprog2cnt_reg;
+  uVPROG3CNT_REG vprog3cnt_reg;
+  uVUSBCNT_REG vusbcnt_reg;
+  uVSIM1CNT_REG vsim1cnt_reg;
+  uVSIM2CNT_REG vsim2cnt_reg;
+  uVMIPICNT_REG vmipicnt_reg;
+  uVEMMCCNT_REG vemmccnt_reg;
+  uVSDCNT_REG vsdcnt_reg;
+  uVSDMMCCNT_REG vsdmmccnt_reg;
+  uVPROG1VSEL_REG vprog1sel_reg;
+  uVPROG2VSEL_REG vprog2sel_reg;
+  uVPROG3VSEL_REG vprog3sel_reg;
+  uVUSBVSEL_REG vusbsel_reg;
+  uVSIM1VSEL_REG vsim1sel_reg;
+  uVSIM2VSEL_REG vsim2sel_reg;
+  uVMIPIVSEL_REG vmipisel_reg;
+  uVEMMCVSEL_REG vemmcsel_reg;
+  uVSDVSEL_REG vsdsel_reg;
+  uVSDMMCVSEL_REG vsdmmcsel_reg;
+  uMIRQLVL1_REG irqlvl1_mask_reg;
+  uMCRITIRQ_REG critirq_mask_reg;
+  uCRITIRQ_REG  critirq_reg;
+  uMVENDIRQLVL1_REG vendirq_mask_reg;
+  uMVROCIRQ0_REG vrocirq0_mask;
+  uMVROCIRQ2_REG vrocirq2_mask;
+  uMDCDCVIRQ0_REG dcdcvirq0_mask;
+  uVCC_STDBY_EXITVID_REG vcc_exitvid;
+  uVNN_STDBY_EXITVID_REG vnn_exitvid;
+  uWAKESRC_REG wake_srcreg;
+  uRESETSRC0_REG reset_src0;
+  uRESETSRC1_REG reset_src1;
+}sPMU_T;
+
+#define NO_RAM_SHADOW_ALL_ZERO  0
+#define NO_RAM_SHADOW_ALL_ONE  0xFF
+
+#define PMIC_STDBY_TLIST_S0i1       0x3   // Task List S0i1 is run
+#define PMIC_STDBY_TLIST_S0i2       0x4   // Task List S0i2 is run
+
+#define VID_CODE_0V85		0x79
+#define VID_CODE_0V9		0x83
+#define VID_CODE_0V95		0x8D
+#define VID_CODE_1V		0x97
+#define VID_CODE_1V1		0xAB
+#define VID_CODE_1V15		0xB5
+#define VID_CODE_1V2		0xBF
+#define VID_CODE_1V25		0xC9
+#define VID_CODE_1V3		0xD3
+
+#define VID_CODE_VLOW		(0x8D)
+
+/*
+ * 3gx target
+ * vulow 0.7201 ---> deep sleep
+ * valow 0.8532 --> 312M	//0v85
+ * vmed 0.9064 -->416M		//0v90
+ * vhigh 1.10026 ---> 750M	//1v10
+ * vuhihg 1.1269 ---> 900M	//1v12
+ * vburst 1.2669 ---> 1160M	//1v25
+ */
+#define VID_CODE_VALOW		(0x7a)
+#define VID_CODE_VMED		(0x85)
+#define VID_CODE_VHIGH		(0xac)
+#define VID_CODE_VUHIGH		(0xb1)
+#define VID_CODE_VBURST		(0xcd)
+
+typedef enum {
+	POWER_RAIL_BUCK1,
+	POWER_RAIL_VPROG1,
+	POWER_RAIL_VPROG2,
+	POWER_RAIL_VPROG3,
+	POWER_RAIL_USED
+} ePOWER_RAIL_T;
+ 
+
+#ifdef POWER_CONTROL_VUHIGH_SUPPORT
+#define PMU_INIT_VCC_VID   0xC3   /* 1.22V */
+#else
+//#define PMU_INIT_VCC_VID   0xB2   /* 1.135V */
+#define PMU_INIT_VCC_VID   VID_CODE_1V25
+#define PMU_INIT_VNN_VID   VID_CODE_1V1
+#endif /* POWER_CONTROL_VUHIGH_SUPPORT */
+
+#define PMIC_ID1_SF_LTE     0x1
+#define PMIC_ID1_BR         0x9
+
+#endif
+
+
+#endif
+
diff --git a/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_bootcore.c b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_bootcore.c
new file mode 100644
index 0000000..c4a8202
--- /dev/null
+++ b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_bootcore.c
@@ -0,0 +1,426 @@
+/* =============================================================================
+ * Copyright (C) 2011-2014 Intel Mobile Communications GmbH
+ * 
+ *      Sec Class: Intel Confidential (IC)
+ * 
+ * =============================================================================
+ *
+ * This document contains proprietary information belonging to IMC.
+ * Passing on and copying of this document, use and communication of its
+ * contents is not permitted without prior written authorisation.
+ *
+ * ============================================================================= */
+
+#include <bastypes.h>
+#include <pal_i2c.h>
+#include <i2c_bus.h>
+#include <pmu_bootcore.h>
+#include <pmic.h>
+
+#define NUMBER_OF_BYTES_TO_WRITE 2
+#define PMU_I2C_RETRIES 3
+
+#define PMIC_I2C_BUS_ID     I2C_BUS_ID_2
+
+#define BAT_FLOATING_THRESHOLD 0xF80
+
+/* Complete address */
+#define TLP1CTRL_REG 0x5E30
+#define TLP2CTRL_REG 0x5E61
+#define VENDCTL0_REG 0x5F36
+
+sPMU_BOOT_INIT_T pmu_boot_init_cfg[NO_OF_BOOT_LDO] = 
+{
+	{VCC_BOOT_VR, PMIC_SETVIDFAST_REG(1), PMU_INIT_VCC_VID },	// VDD_CPU
+	{VNN_BOOT_VR, PMIC_SETVIDFAST_REG(0), PMU_INIT_VNN_VID },	// VDD_GPU/VDD_CORE/VDD_DDR_CORE, fixed @ 1.1V
+	{VPROG1_BOOT_LDO, PMIC_VPROG1VSEL_REG, 0x2d }, 		// EXT LNA for GNSS, 2.5V
+	{VPROG2_BOOT_LDO, PMIC_VPROG2VSEL_REG, 0x33 }, 		// LCD/touch, 2.8V
+	{VPROG3_BOOT_LDO, PMIC_VPROG3VSEL_REG, 0x13 }, 		// camera, 1.2V
+	{VCC_MODE_BOOT_VR, PMIC_VCCCNT_REG, VLDOCNT_REG_MODEVPMIC_AUTO}, // force PWM mode
+	{VNN_MODE_BOOT_VR, PMIC_VNNCNT_REG, VLDOCNT_REG_MODEVPMIC_AUTO}, // force PWM mode
+	{VPROG1_MODE_BOOT_LDO, PMIC_VPROG1CNT_REG, 0x2 },	// enable ldo
+	{VPROG2_MODE_BOOT_LDO, PMIC_VPROG2CNT_REG, 0x2 },	// enable ldo
+	{VPROG3_MODE_BOOT_LDO, PMIC_VPROG3CNT_REG, 0x2 },	// enable ldo
+};
+
+sPMU_BOOT_CONFIG_T pmu_boot_pdos_config[] = {
+  /*Register*/  /*value*/
+  { TLP1CTRL_REG, 0x02},
+  { TLP2CTRL_REG, 0x02},
+  { VENDCTL0_REG, 0x04}
+};
+
+static BOOL PMU_boot_config_register(sPMU_BOOT_CONFIG_T config[], U8 list_size)
+{
+  U8 index;
+  U8 slave_addr;
+  U8 i2c_write_bufr[NUMBER_OF_BYTES_TO_WRITE];
+  BOOL result = TRUE;
+  s_i2c_task pmu_i2c_write;
+
+  for(index=0;index<list_size;index++)
+  {
+    slave_addr = (U8)(config[index].address>>8);
+    i2c_write_bufr[0] = (U8)((config[index].address)&0x00FF);
+    i2c_write_bufr[1] = config[index].value;
+    pmu_i2c_write.bus_id = PMIC_I2C_BUS_ID;
+    pmu_i2c_write.sync_mode = 1;
+    pmu_i2c_write.slave_address = slave_addr;
+    pmu_i2c_write.i2c_action = I2C_ACTION_WRITE;
+    pmu_i2c_write.i2c_read_buf = NULL;
+    pmu_i2c_write.i2c_read_size = 0;
+    pmu_i2c_write.i2c_write_buf = i2c_write_bufr;
+    pmu_i2c_write.i2c_write_size = NUMBER_OF_BYTES_TO_WRITE;
+    pmu_i2c_write.wait_in_ms = 0;
+    pmu_i2c_write.cb = NULL;
+    pmu_i2c_write.data = NULL;
+    i2c_bus_set_polling_mode(true);
+    i2c_bus_write(pmu_i2c_write.bus_id, pmu_i2c_write.slave_address, pmu_i2c_write.i2c_write_buf, pmu_i2c_write.i2c_write_size);
+  }
+
+  return result;
+}
+
+BOOL PMU_boot_prepare_for_untrusted_access(void)
+{
+  return (PMU_boot_config_register(pmu_boot_pdos_config, (sizeof(pmu_boot_pdos_config)/sizeof(sPMU_BOOT_CONFIG_T))));
+}
+
+static void i2c2_write_with_check(U8 slave_addr, U8 reg, U8 val)
+{
+	U8 tmp = !val;
+	U8 buf[] = {reg, val};
+	do {
+		i2c_bus_bootsystem_write(1, slave_addr, buf, sizeof(buf));
+		i2c_bus_bootsystem_write(1, slave_addr, &reg, sizeof(reg));
+		i2c_bus_bootsystem_read(1, slave_addr, &tmp, sizeof(tmp));
+	}while(tmp != val);
+}
+
+static void dcdc_init(void)
+{
+	/* init DCDC instead */
+	/* 1.25V (0x34), 1.15V(0x2c), 1.1V(0x28), 1.05V(0x24) */
+	/* CPU */
+	i2c2_write_with_check(0xe0, 0x0, 0x80|0x2c);
+	/* GPU */
+	i2c2_write_with_check(0xf0, 0x0, 0x80|0x28);
+}
+
+static U8 pmic_get_id(void)
+{
+	U8 slave_addr = 0x4e, reg = 0x01, val = 0;
+
+	i2c_bus_bootsystem_write(1, slave_addr, &reg, sizeof(reg));
+	i2c_bus_bootsystem_read(1, slave_addr, &val, sizeof(val));
+
+	return val;
+}
+
+
+static int ltepmic_probed(void)
+{
+	return (pmic_get_id() == PMIC_ID1_SF_LTE);
+}
+
+void PMU_init_volt_src(void)
+{
+  U8 slave_addr;
+  U8 i2c_write_bufr[NUMBER_OF_BYTES_TO_WRITE];
+  U32 p_cnt   = NUMBER_OF_BYTES_TO_WRITE;
+  int cfg_ldo =0;
+
+  s_i2c_task pmu_i2c_write;
+  char buf;
+
+  if (!ltepmic_probed()) {
+    dcdc_init();
+    return;
+  }
+
+  for (cfg_ldo=0; cfg_ldo < NO_OF_BOOT_LDO; cfg_ldo++ )
+  {
+    /*The first byte of i2c_write_bufr[] is the offset i.e. the register location. The 2nd is the value that has to be written into */
+    slave_addr = pmu_boot_init_cfg[cfg_ldo].reg_addr >> 8;
+    i2c_write_bufr[0] = pmu_boot_init_cfg[cfg_ldo].reg_addr & 0xff;
+    i2c_write_bufr[1] = pmu_boot_init_cfg[cfg_ldo].value; 
+  
+    
+     /*sync mode when I2C module is up & guest VM not running. */
+    pmu_i2c_write.bus_id = PMIC_I2C_BUS_ID;
+    pmu_i2c_write.sync_mode = 1;
+    pmu_i2c_write.slave_address = slave_addr;
+    pmu_i2c_write.i2c_action = I2C_ACTION_WRITE;
+    pmu_i2c_write.i2c_read_buf = NULL;
+    pmu_i2c_write.i2c_read_size = 0;
+    pmu_i2c_write.i2c_write_buf = i2c_write_bufr;
+    pmu_i2c_write.i2c_write_size = NUMBER_OF_BYTES_TO_WRITE;
+    pmu_i2c_write.wait_in_ms = 0;
+    pmu_i2c_write.cb = NULL;
+    pmu_i2c_write.data = NULL;
+  
+    /* set i2c in polling mode/sync mode */
+    i2c_bus_set_polling_mode(true);
+    /* send data over i2c bus */
+    i2c_bus_write(pmu_i2c_write.bus_id,pmu_i2c_write.slave_address,pmu_i2c_write.i2c_write_buf,pmu_i2c_write.i2c_write_size);
+  }
+
+  return true;
+}
+
+#if 0
+int PMU_get_reset_source(ePMU_RESET_SOURCE_T * const wake_source_p)
+{
+  U8 i2c_rd_val, temp;
+
+  if (NULL == wake_source_p)
+  {
+    return -1;
+  }
+  /* Read from PMIC WAKESRC register */
+  i2c_rd_val = 0x31; // offset of WAKESRC reg.
+  /* set i2c in polling mode/sync mode */
+  i2c_bus_set_polling_mode(true);
+  /* write offset for read */
+  i2c_bus_write(PMIC_I2C_BUS_ID,I2C_SLAVE_ADDR,&i2c_rd_val,1);
+  /* read data over i2c bus */
+  i2c_bus_read(PMIC_I2C_BUS_ID,I2C_SLAVE_ADDR,&i2c_rd_val,1);
+
+  /* Check which bit is set and return the value*/
+  temp = i2c_rd_val;
+  if ((temp >> PMU_WAKE_SOURCE_ON_BTN_PRESS)&1)
+  	*wake_source_p = PMU_WAKE_SOURCE_ON_BTN_PRESS;
+  else if ((temp >> PMU_WAKE_SOURCE_BATTERY_INSERT)&1)
+  	*wake_source_p = PMU_WAKE_SOURCE_BATTERY_INSERT;
+  else if ((temp >> PMU_WAKE_SOURCE_USB_CHARGER_INSERT)&1)
+  	*wake_source_p = PMU_WAKE_SOURCE_USB_CHARGER_INSERT;
+  else if ((temp >> PMU_WAKE_SOURCE_WALL_CHARGER_INSERT)&1)
+  	*wake_source_p = PMU_WAKE_SOURCE_WALL_CHARGER_INSERT;
+  else if ((temp >> PMU_WAKE_SOURCE_USB_DEVICE_INSERT)&1)
+  	*wake_source_p = PMU_WAKE_SOURCE_USB_DEVICE_INSERT;
+  else if ((temp >> PMU_WAKE_SOURCE_RTC_ALARM)&1)
+  	*wake_source_p = PMU_WAKE_SOURCE_RTC_ALARM;
+  else if ((temp >> PMU_WAKE_SOURCE_PWRON_SET)&1)
+  	*wake_source_p = PMU_WAKE_SOURCE_PWRON_SET;
+  else if ((temp >> PMU_WAKE_SOURCE_SHORT_PWR_LOSS)&1)
+  	*wake_source_p = PMU_WAKE_SOURCE_SHORT_PWR_LOSS;
+  else 
+  	*wake_source_p = PMU_RESET_SOURCE_INVALID;
+
+  return 0; 	
+}
+
+void PMU_enable_vibra(void)
+{
+  U8 vibra_enable[2] = {0x01, 0x01};
+  U8 vibra_pwm100[2] = {0x02, 0x7F};
+
+  /* set i2c in polling mode/sync mode */
+  i2c_bus_set_polling_mode(true);
+
+  /* set to 100% duty cycle of the PWM */
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_DEV6_ADDR, vibra_pwm100, 2);
+
+  /* enable vibrator */
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_DEV6_ADDR, vibra_enable, 2);
+}
+
+void PMU_disable_vibra(void)
+{
+  U8 vibra_disable[2] = {0x01, 0};
+  U8 vibra_pwm0[2] = {0x02, 0x0};
+
+  /* set i2c in polling mode/sync mode */
+  i2c_bus_set_polling_mode(true);
+
+  /* clear duty cycle of the PWM */
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_DEV6_ADDR, vibra_pwm0, 2);
+
+  /* disable vibrator */
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_DEV6_ADDR, vibra_disable, 2);
+}
+
+int PMU_get_shutdown_source(ePMU_SHUTDOWN_SOURCE_T * const shutdown_source_p)
+{
+  U8 reset_src0;
+  U8 reset_src1;
+  
+  if (NULL == shutdown_source_p)
+  {
+    return -1;
+  }
+  /* Read from PMIC RESETSRC0 & RESETSRC1 register */
+  reset_src0 = 0x2C; // offset of RESETSRC0 reg.
+  reset_src1 = 0x2D; // offset of RESETSRC1 reg.
+  /* set i2c in polling mode/sync mode */
+  i2c_bus_set_polling_mode(true);
+  /* write the offset for read and then read data over i2c bus */
+  i2c_bus_write(PMIC_I2C_BUS_ID,I2C_SLAVE_ADDR,&reset_src0,1);
+  i2c_bus_read(PMIC_I2C_BUS_ID,I2C_SLAVE_ADDR,&reset_src0,1);
+   
+  i2c_bus_write(PMIC_I2C_BUS_ID,I2C_SLAVE_ADDR,&reset_src1,1);
+  i2c_bus_read(PMIC_I2C_BUS_ID,I2C_SLAVE_ADDR,&reset_src1,1);
+  
+  /* Check which bit is set and return the value*/
+  if(reset_src0)
+  {
+  	if ((reset_src0 >> PMU_SHUTDOWN_SOURCE_THERMTRIP)&1)
+  	   *shutdown_source_p =PMU_SHUTDOWN_SOURCE_THERMTRIP;
+  	else if ((reset_src0 >> PMU_SHUTDOWN_SOURCE_PMIC_CRITTEMP)&1)
+  	   *shutdown_source_p =PMU_SHUTDOWN_SOURCE_PMIC_CRITTEMP;
+  	else if ((reset_src0 >> PMU_SHUTDOWN_SOURCE_SYS_OVRTEMP)&1)
+  	   *shutdown_source_p =PMU_SHUTDOWN_SOURCE_SYS_OVRTEMP;
+  	else if ((reset_src0 >> PMU_SHUTDOWN_SOURCE_EXCEED_VCRIT)&1)
+  	   *shutdown_source_p =PMU_SHUTDOWN_SOURCE_EXCEED_VCRIT;
+  	else if ((reset_src0 >> PMU_SHUTDOWN_SOURCE_BATTRM)&1)
+  	   *shutdown_source_p =PMU_SHUTDOWN_SOURCE_BATTRM;
+  	else if ((reset_src0 >> PMU_SHUTDOWN_SOURCE_VSYSUVP)&1)
+  	   *shutdown_source_p =PMU_SHUTDOWN_SOURCE_VSYSUVP;
+  	else if ((reset_src0 >> PMU_SHUTDOWN_SOURCE_BATT_CRITTEMP)&1)
+  	   *shutdown_source_p =PMU_SHUTDOWN_SOURCE_BATT_CRITTEMP;
+  	else if ((reset_src0 >> PMU_SHUTDOWN_SOURCE_PMICWDT_EXPIRY)&1)
+  	   *shutdown_source_p =PMU_SHUTDOWN_SOURCE_PMICWDT_EXPIRY;
+  }
+  if (reset_src1)
+  {
+    if ((reset_src1 >> 0)&1)
+       *shutdown_source_p =PMU_SHUTDOWN_SOURCE_COLDOFF;
+    else if ((reset_src1 >> 1)&1)
+       *shutdown_source_p =PMU_SHUTDOWN_SOURCE_COLDRESET;
+    else if ((reset_src1 >> 2)&1)
+       *shutdown_source_p =PMU_SHUTDOWN_SOURCE_WARMRESET;
+    else if ((reset_src1 >> 3)&1)
+       *shutdown_source_p =PMU_SHUTDOWN_SOURCE_FCO;
+    else if ((reset_src1 >> 4)&1)
+       *shutdown_source_p =PMU_SHUTDOWN_SOURCE_SOCWDT_RESET;
+    else if ((reset_src1 >> 5)&1)
+       *shutdown_source_p =PMU_SHUTDOWN_SOURCE_PLATFORMRST;
+  }
+  return 0;
+}
+
+void PMU_allOFF(void)
+{
+  U8 clear_wake_src[2]	  = {0x31, 0xFF}; // WAKESRC_REG, write "1" to clear
+  U8 pmu_off_cmd[2]		  = {0x2A, 0x1};  //PMIC_CHIPCNTRL_REG offset, value
+
+  /* set i2c in polling mode/sync mode */
+  i2c_bus_set_polling_mode(true);
+  
+  /*clear wake src */
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR, clear_wake_src, 2);
+  /*write to coldoff bit of PMIC_CHIPCNTRL_REG to shutdown */
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR, pmu_off_cmd, 2);
+ 
+}
+
+U32 PMU_get_battery_voltage(void)
+{
+  U8 vbat_h, vbat_l;
+  U32 vbat;
+  U32 voltage;
+
+  /*VBAT is a 12-bit ADC value, stored across VBATRSLTH and VBATRSLTL.*/
+  /*SW has to read the Low register first, then read the High register,*/
+  /*to guarantee the data integrity.*/
+
+  /*VBAT_L: Lower 8 bits of the ADC result for battery voltage.*/
+  vbat_l = 0x04;
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &vbat_l, 1);
+  i2c_bus_read(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &vbat_l, 1);
+
+  /*VBAT_H: Upper 4 bits of the ADC result for battery voltage.*/
+  vbat_h = 0x03;
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &vbat_h, 1);
+  i2c_bus_read(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &vbat_h, 1);
+
+  vbat = vbat_h & 0x0F;
+  vbat = vbat << 8;
+  vbat += (U32)vbat_l;
+
+  /*VOl_MAX is 5.12V, and corresponding VBAT_MAX is 0xFFF*/
+  /*voltage = VOL_MAX  / VBAT_MAX * vbat */
+  voltage = (vbat * 5120) >> 12;
+
+  return voltage;
+}
+
+BOOL PMU_get_charger_connect_status(void)
+{
+  U8 state;
+  eSPWRSRC_REG_SVBUSDET ret;
+
+  /*Read  SVBUSDET register get Charger is plug-in or not*/
+  state = 0x20;
+
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR, &state, 1);
+  i2c_bus_read(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR, &state, 1);
+
+  ret = getPmic_SPWRSRC_REG_SVBUSDET(state);
+  if (SPWRSRC_REG_SVBUSDET_DISCONNECTED == ret)
+     return FALSE;
+
+  return TRUE;
+}
+
+BOOL PMU_get_battery_connect_status(void)
+{
+  U8 vbatid_h, vbatid_l, thrm_h, thrm_l;
+  U32 vbatid, thrm;
+
+  /*BATTID is a 12-bit ADC value, stored across BATTIDRSLTH and BATTIDRSLTL.
+    SW has to read the Low register first, then read the High register, to
+    guarentee the data integrity.*/
+  vbatid_l = 0x07;
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &vbatid_l, 1);
+  i2c_bus_read(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &vbatid_l, 1);
+
+  vbatid_h = 0x06;
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &vbatid_h, 1);
+  i2c_bus_read(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &vbatid_h, 1);
+
+  vbatid = vbatid_h & 0x0F;
+  vbatid = vbatid << 8;
+  vbatid += (U32)vbatid_l;
+
+  /*BAT0TEMP is a 12-bit ADC value, stored across THRMRSLT3H and THRMRSLT3L.
+    SW has to read the Low register first, then read the High register, to
+    guarentee the data integrity.*/
+  thrm_l = 0x3F;
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &thrm_l, 1);
+  i2c_bus_read(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &thrm_l, 1);
+
+  thrm_h = 0x3E;
+  i2c_bus_write(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &thrm_h, 1);
+  i2c_bus_read(PMIC_I2C_BUS_ID, I2C_SLAVE_ADDR_2, &thrm_h, 1);
+
+  thrm = thrm_h & 0x0F;
+  thrm = thrm << 8;
+  thrm += (U32)thrm_l;
+
+  if(vbatid > BAT_FLOATING_THRESHOLD)
+  {
+    if(thrm > BAT_FLOATING_THRESHOLD)
+      return FALSE;
+    else
+      return TRUE;
+  }
+  else
+    return TRUE;
+}
+
+void PMU_reduce_backlight_intensity(void)
+{
+    U8 k2_high[2] = {0x46, 0x10};
+    U8 k2_low[2] = {0x47, 0xAA};
+
+    /* set i2c in polling mode/sync mode */
+    i2c_bus_set_polling_mode(true);
+ 
+    /* set K2 high control register */
+    i2c_bus_write(PMIC_I2C_BUS_ID, I2C_DEV6_ADDR, k2_high, 2);
+ 
+    /* set K2 low control register */
+    i2c_bus_write(PMIC_I2C_BUS_ID, I2C_DEV6_ADDR, k2_low, 2);
+}
+#endif
diff --git a/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_bootcore.h b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_bootcore.h
new file mode 100644
index 0000000..8022750
--- /dev/null
+++ b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_bootcore.h
@@ -0,0 +1,109 @@
+/* =============================================================================
+ * Copyright (C) 2011-2014 Intel Mobile Communications GmbH
+ * 
+ *      Sec Class: Intel Confidential (IC)
+ * 
+ * =============================================================================
+ *
+ * This document contains proprietary information belonging to IMC.
+ * Passing on and copying of this document, use and communication of its
+ * contents is not permitted without prior written authorisation.
+ *
+ * =============================================================================*/
+
+#ifndef __PMU_BOOTCORE_H__
+#define __PMU_BOOTCORE_H__
+
+/** @brief Enumeration of possible source of reset
+  * @ingroup pmu_driverif_generic_grp
+  */
+#if 0
+typedef enum
+{
+  PMU_FIRST_WAKE_SOURCE = -1,    /**< Start indicator */
+  /* BHN_LTE_PMU */
+  PMU_WAKE_SOURCE_ON_BTN_PRESS,     /**< Out of reset because the ON BUTTON has been set */
+  PMU_WAKE_SOURCE_BATTERY_INSERT,    /**< Out of reset due to Battery insertion */
+  PMU_WAKE_SOURCE_USB_CHARGER_INSERT,    /**< Out of reset due to USB charger insertion */
+  PMU_WAKE_SOURCE_WALL_CHARGER_INSERT,    /**< Out of reset due to AC/DC changerinsertion */
+  PMU_WAKE_SOURCE_USB_DEVICE_INSERT,    /**< Out of reset due to USB DEVICE attach */
+  PMU_WAKE_SOURCE_RTC_ALARM,       /**< Out of reset because of a real time clock alarm */
+  PMU_WAKE_SOURCE_PWRON_SET, 	/**< Out of reset because the PWRON PIN has been set */
+  PMU_WAKE_SOURCE_SHORT_PWR_LOSS,     /**< Out of reset because short power loss */
+
+  PMU_NOF_RESET_SOURCES,          /**< End indicator */
+  PMU_RESET_SOURCE_INVALID = 0xFF /**< Invalid reset source */
+
+} ePMU_RESET_SOURCE_T;
+
+/** @brief Enumeration of possible source of previous shutdown 
+  * @ingroup pmu_driverif_generic_grp
+  */
+typedef enum
+{
+  PMU_FIRST_SHUTDOWN_SOURCE = -1,    /**< Start indicator */
+  /* SF_LTE_PMU RESETSRC_REG0*/
+  PMU_SHUTDOWN_SOURCE_THERMTRIP,     /**< Shutdown due to thermal trip has been set */
+  PMU_SHUTDOWN_SOURCE_PMIC_CRITTEMP,    /**< Shutdown due PMIC critical temperature */
+  PMU_SHUTDOWN_SOURCE_SYS_OVRTEMP,    /**< Shutdonw due to system over temperature */
+  PMU_SHUTDOWN_SOURCE_EXCEED_VCRIT,    /**< Shutdown due to violation of VCRIT threshold */
+  PMU_SHUTDOWN_SOURCE_BATTRM,    /**< Shutdown due to battery removal */
+  PMU_SHUTDOWN_SOURCE_VSYSUVP,       /**< Shutdown due to VSYS undervoltage */
+  PMU_SHUTDOWN_SOURCE_BATT_CRITTEMP, 	/**< Shutdown due to critical battery overtemperature event */
+  PMU_SHUTDOWN_SOURCE_PMICWDT_EXPIRY,     /**< Shutdown due to PMIC watchdog timer expiry */
+
+  /* SF_LTE_PMU RESETSRC_REG1*/
+  PMU_SHUTDOWN_SOURCE_COLDOFF,     /**< Shutdown due to COLDOFF */
+  PMU_SHUTDOWN_SOURCE_COLDRESET,    /**< Shutdown due PMIC COLD RESET */
+  PMU_SHUTDOWN_SOURCE_WARMRESET,    /**< Shutdonw due to WARMRESET */
+  PMU_SHUTDOWN_SOURCE_FCO,    /**< Shutdown due to POWER BUTTON */
+  PMU_SHUTDOWN_SOURCE_SOCWDT_RESET,    /**< Shutdown due to SOC watchdog timer expiry SCO_WDT_RESET asserted */
+  PMU_SHUTDOWN_SOURCE_PLATFORMRST,       /**< Shutdown due to PLATFORMRST was set */
+
+  PMU_NOF_SHUTDOWN_SOURCES,          /**< End indicator */
+  PMU_SHUTDOWN_SOURCE_INVALID = 0xFF /**< Invalid reset source */
+
+} ePMU_SHUTDOWN_SOURCE_T;
+
+int PMU_get_reset_source(ePMU_RESET_SOURCE_T * const wake_source_p);
+int PMU_get_shutdown_source(ePMU_SHUTDOWN_SOURCE_T * const shutdown_source_p);
+#endif
+BOOL PMU_boot_prepare_for_untrusted_access(void);
+BOOL PMU_init_volt_src(void); //initializes bootcore required peripheral LDOs
+void PMU_allOFF(void);
+U32 PMU_get_battery_voltage(void);
+BOOL PMU_get_charger_connect_status(void);
+BOOL PMU_get_battery_connect_status(void);
+void PMU_enable_vibra(void);
+void PMU_disable_vibra(void);
+void PMU_reduce_backlight_intensity(void);
+
+typedef struct{
+  U16 address;
+  U8 value;
+}sPMU_BOOT_CONFIG_T;
+
+typedef enum {
+  VCC_BOOT_VR,
+  VNN_BOOT_VR,
+  VPROG1_BOOT_LDO,
+  VPROG2_BOOT_LDO,
+  VPROG3_BOOT_LDO,
+  VCC_MODE_BOOT_VR,
+  VNN_MODE_BOOT_VR,
+  VPROG1_MODE_BOOT_LDO,
+  VPROG2_MODE_BOOT_LDO,
+  VPROG3_MODE_BOOT_LDO,
+  USBRST,
+  NO_OF_BOOT_LDO
+}ePMU_BOOT_LDO_T;
+
+typedef struct{
+  ePMU_BOOT_LDO_T cur_ldo;
+  U16 reg_addr;
+  U8 value;   
+}sPMU_BOOT_INIT_T;
+
+
+#endif //__PMU_BOOTCORE_H__
+
diff --git a/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_domain_cfg.c b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_domain_cfg.c
index 2988d93..f8509ce 100644
--- a/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_domain_cfg.c
+++ b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_domain_cfg.c
@@ -44,12 +44,13 @@
 #include "pow_volt_spcu_cfg.h"
 
 #include "scu.h"
+#include "pmic.h"
 
 /*----------------------------------------------*/
 /* DEFINES                                      */
 /*----------------------------------------------*/
 //for external pmic sync operator
-sPMU_SYNC_T sync_cmd = {0};
+sPMU_SYNC_T sync_cmd[POWER_RAIL_USED];
 
 static S8* FILE_NAME = (S8*) __FILE__;
 
@@ -120,7 +121,7 @@ static const sPMU_DOMAIN_SET_FUNCS_T pmu_domain_set_func[PMU_NOF_DOMAINS] =
   { PMU_DOMAIN_SD2,                     NULL,                                   NULL,                                   NULL                                         ,NULL                                              },
   { PMU_DOMAIN_ELDO_VMMC,               PMU_int_hal_set_eldo_vmmc_voltage,      PMU_int_hal_set_eldo_vmmc_mode,         NULL                                          ,NULL                                             },
   { PMU_DOMAIN_GNSS_TCXO_LDO,           PMU_int_hal_set_gnss_tcxo_ldo_voltage,  PMU_int_hal_set_gnss_tcxo_ldo_mode,     NULL                                           ,NULL                                            },
-  { PMU_DOMAIN_EXT_BUCK1,               NULL/*PMU_int_hal_set_ext_buck1_voltage*/,      NULL,                                   NULL                                           ,NULL                                            },
+  { PMU_DOMAIN_EXT_BUCK1,               PMU_int_hal_set_ext_buck1_voltage,      NULL,                                   NULL                                           ,NULL                                            },
   { PMU_DOMAIN_EXT_BUCK2,               NULL,                                   NULL,                                   NULL                                           ,NULL                                            },
   { PMU_DOMAIN_EXT_LDO5,                NULL,                                   NULL,          NULL                                           ,NULL                                            },
   { PMU_DOMAIN_DUMMY,                   NULL,                                   NULL,                                   NULL                                              ,NULL                                         },
@@ -279,6 +280,14 @@ ePMU_RETURN_T PMU_dom_init_config ( void )
 #endif /* defined(CDS) || defined(MSY) */
     {
 #if defined(SF3GX_VCPU_I2C_CTRL)
+  pow_volt_phys_domain_info_s *pow_volt_phys_domain_info_ptr = NULL;
+  pow_volt_phys_domain_info_ptr = pow_volt_get_phys_domain_info_ptr();
+      if (pow_volt_phys_domain_info_ptr[cur_domain].prh_sync_fct)
+      {
+        continue;
+      }
+
+
       if (PMU_DOMAIN_EXT_BUCK1 == cur_domain)
       {
         // skip ext buck1 init. adding init power if needed
@@ -377,18 +386,18 @@ ePMU_RETURN_T PMU_dom_req_domain_voltage (const ePMU_DOMAIN_T domain, const ePMU
   else
   {
 #if defined(SF3GX_VCPU_I2C_CTRL)
-  /////////////////change for interface
-    if (PMU_DOMAIN_EXT_BUCK1 == domain)
+    if (pow_volt_phys_domain_info_ptr[domain].prh_sync_fct)
     {
+	ePOWER_RAIL_T rail = domain_to_rail(domain);
         if (pow_volt_phys_domain_info_ptr[domain].prh_sync_fct && pal_pm_guestvm_start_status() == true)
         {
-          sync_cmd.sync = 0;
+          sync_cmd[rail].sync = 0;
         }
         else
         {
-          sync_cmd.sync = 1;
+          sync_cmd[rail].sync = 1;
         }
-        sync_cmd.domain= domain;
+        sync_cmd[rail].domain= domain;
 
         /* Set voltage */
         if (NULL != pmu_domain_set_func[domain].set_domain_voltage_func)
diff --git a/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_domain_hal_cfg.c b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_domain_hal_cfg.c
index 8f3dda6..93ffc3d 100644
--- a/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_domain_hal_cfg.c
+++ b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/pmu_domain_hal_cfg.c
@@ -50,6 +50,7 @@
 
 #ifdef SF3GX_VCPU_I2C_CTRL
 #include "sy8827e.h"
+#include "pmic.h"
 #endif
 
 /*----------------------------------------------*/
@@ -1874,17 +1875,24 @@ ePMU_RETURN_T PMU_int_hal_set_gnss_tcxo_ldo_voltage
 
 /*---------------------------------------------------------------------------------------------------------------*/
 /** See pmu_domain_cfg_internal.h */
+extern int ltepmic_probed(void);
+extern ePMU_RETURN_T ltepmic_set_voltage(const ePMU_VOLTAGE_LIST_T voltage);
+extern ePMU_RETURN_T sy8827e_set_voltage(const ePMU_VOLTAGE_LIST_T voltage);
 ePMU_VOLTAGE_LIST_T current_ext_buck1_voltage = PMU_VOLTAGE_1V00;
 ePMU_RETURN_T PMU_int_hal_set_ext_buck1_voltage
 (
   const ePMU_VOLTAGE_LIST_T voltage
 )
 {
+  ePMU_RETURN_T ret;
   /* buck1 ic: sy8827e controlled by i2c */
-  sy8827e_set_voltage(voltage);
+  if (ltepmic_probed())
+    ret = ltepmic_set_voltage(voltage);
+  else
+    ret = sy8827e_set_voltage(voltage);
 
   current_ext_buck1_voltage = voltage;
-  return PMU_OK;
+  return ret;
 }
 /*---------------------------------------------------------------------------------------------------------------*/
 /*---------------------------------------------------------------------------------------------------------------*/
diff --git a/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/sy8827e.c b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/sy8827e.c
new file mode 100644
index 0000000..6836e82
--- /dev/null
+++ b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/sy8827e.c
@@ -0,0 +1,362 @@
+/* =============================================================================
+ * Copyright (C) 2015 Intel Mobile Communications GmbH
+ *
+ *      Sec Class: Intel Confidential (IC)
+ *
+ * =============================================================================
+ *
+ * This document contains proprietary information belonging to IMC.
+ * Passing on and copying of this document, use and communication of its
+ * contents is not permitted without prior written authorisation.
+ *
+ * =============================================================================
+ * =============================================================================
+ *
+ * This file contains the generic part of the driver internal interface towards
+ * the PMU driver
+ * Generic part
+ *
+ * ===========================================================================*/
+
+#include "sy8827e.h"
+#include "pal_i2c.h"
+#include "pmu_driverif.h"
+#include "pow_volt_spcu_cfg.h"
+#include "pmu_internal_cfg.h"
+#include "pmu_internal.h"
+#include "pmu_domain_internal.h"
+#include "mobilevisor/sys_exception.h"
+
+//#define SY8827X_DEBUG
+
+#define SY8827E_I2C_BUS_ID     I2C_BUS_ID_2
+#define SY8827E_SLAVE_ADDRESS	(0xE0)
+#define SY8827F_SLAVE_ADDRESS	(0xF0)
+
+#define SY8827E_VSEL0_REG	(0x00)
+#define SY8827E_VSEL1_REG	(0x01)
+#define SY8827E_CONTROL_REG	(0x02)
+#define SY8827E_ID1_REG		(0x03)
+#define SY8827E_ID2_REG		(0x04)
+#define SY8827E_PGOOD_REG	(0x05)
+
+extern sPMU_SYNC_T sync_cmd[];
+
+typedef enum
+{
+  SY8827E_WRITE_OP,
+  SY8827E_READ_OP,
+  SY8827E_CB_READ_OP,
+  SY8827E_ENDOF_OP
+}eSY8827E_I2C_OP;
+
+typedef struct
+{
+  eSY8827E_I2C_OP   op_id;
+  U8	    slave_index;
+  U8        num;
+  U8        reg;
+  U8        data;
+  unsigned int*  prh_request_p;
+} sSY8827E_I2C_OP_PARA;
+
+#define DEV_NUM	2
+#define SY8827E_SLAVE_INDEX	0
+#define SY8827F_SLAVE_INDEX	1
+static U8 slave_address[DEV_NUM] = {SY8827E_SLAVE_ADDRESS, SY8827F_SLAVE_ADDRESS};
+/* use for first level access */
+static s_i2c_task i2c_task_e[DEV_NUM] = {0, 0};
+static sSY8827E_I2C_OP_PARA op_data[DEV_NUM] = {0, 0};
+/* use in i2c op callback */
+static s_i2c_task i2c_task_cb[DEV_NUM];
+static sSY8827E_I2C_OP_PARA op_data_cb[DEV_NUM];
+
+int wait_for_stable_us = 0;
+
+void sy8827e_i2c_op_cb(s_i2c_task* i2c_task);
+
+void sy8827e_call_prh(s_i2c_task* i2c_task)
+{
+    ePMU_DOMAIN_T pmu_domain = sync_cmd[0].domain;
+	sSY8827E_I2C_OP_PARA* op_data_cb_p =(sSY8827E_I2C_OP_PARA *) i2c_task->data;
+    pow_volt_phys_domain_info_s *pow_volt_phys_domain_info_ptr = NULL;
+    pow_volt_phys_domain_info_ptr = pow_volt_get_phys_domain_info_ptr();
+    pow_volt_phys_domain_info_ptr[pmu_domain].prh_sync_fct((unsigned int*)op_data_cb_p->prh_request_p);
+}
+
+void sy8827e_i2c_reg_op(s_i2c_task* i2c_task,U8 slave_index, U8* read_buf,U8 read_size,U8* write_buf,U8 write_size,void* data)
+{
+    i2c_task->bus_id         = SY8827E_I2C_BUS_ID;
+    i2c_task->slave_address  = slave_address[slave_index];
+    i2c_task->i2c_read_buf   = read_buf;
+    i2c_task->i2c_read_size  = read_size;
+    i2c_task->i2c_write_buf  = write_buf;
+    i2c_task->i2c_write_size = write_size;
+    i2c_task->cb = sy8827e_i2c_op_cb;
+    i2c_task->data = data;
+#if 1
+    if(1 == sync_cmd[0].sync)
+    {
+        i2c_task->sync_mode = 1;
+    }
+    else
+    {
+        /*Async mode when I2C module is up & guest VM running. */
+        i2c_task->sync_mode = 0;
+    }
+#else
+    if(pal_pm_guestvm_start_status() == TRUE)
+    {
+        i2c_task->sync_mode = 0;
+    }
+    else
+    {
+        /*Async mode when I2C module is up & guest VM running. */
+        i2c_task->sync_mode = 1;
+    }
+#endif
+    if(i2c_task->i2c_action == I2C_ACTION_READ)
+    {
+        strcpy(i2c_task->task_name,"SY8827E_RD");
+    }
+    else if(i2c_task->i2c_action == I2C_ACTION_WRITE)
+    {
+        strcpy(i2c_task->task_name,"SY8827E_WR");
+    }
+    pal_i2c_add_task(i2c_task);
+
+}
+
+static U8 sy8827x_read(U8 slave_index, U8 reg)
+{
+    memset(&i2c_task_cb[slave_index], 0, sizeof(i2c_task_cb[slave_index]));
+    memset(&op_data_cb[slave_index], 0, sizeof(op_data_cb[slave_index]));
+    op_data[slave_index].op_id = SY8827E_ENDOF_OP;
+    op_data[slave_index].reg = reg;
+    i2c_task_e[slave_index].i2c_action  = I2C_ACTION_READ;
+    sy8827e_i2c_reg_op(&i2c_task_e[slave_index], slave_index,
+	&(op_data[slave_index].data), 1,
+	&(op_data[slave_index].reg), 1, &op_data[slave_index]);
+#ifdef SY8827X_DEBUG
+    xprint("sy8827x_read  0x%x reg %d = %x\n", slave_address[slave_index],
+	reg, op_data[slave_index].data);
+#endif
+    return op_data[slave_index].data;
+}
+
+static void sy8827x_write(U8 slave_index, U8 reg, U8 val)
+{
+    memset(&i2c_task_cb[slave_index], 0, sizeof(i2c_task_cb[slave_index]));
+    memset(&op_data_cb[slave_index], 0, sizeof(op_data_cb[slave_index]));
+    op_data[slave_index].op_id = SY8827E_ENDOF_OP;
+    op_data[slave_index].reg = reg;
+    op_data[slave_index].data = val;
+    i2c_task_e[slave_index].i2c_action  = I2C_ACTION_WRITE;
+    sy8827e_i2c_reg_op(&i2c_task_e[slave_index], slave_index,
+	NULL, 0, &(op_data[slave_index].reg), 2, &op_data[slave_index]);
+#ifdef SY8827X_DEBUG
+    xprint("sy8827x_write 0x%x reg %d ---> %x\n",
+	slave_address[slave_index], reg, val);
+#endif
+}
+
+void sy8827e_i2c_op_cb(s_i2c_task* i2c_task)
+{
+    sSY8827E_I2C_OP_PARA * pdata = i2c_task->data;
+    U8 slave_index = pdata->slave_index;
+    U8 num = pdata->num;
+    U8 val = *(i2c_task->i2c_read_buf);
+    U8 set = pdata->data;
+    U8 mask,reg =0;
+
+#ifdef SY8827X_DEBUG
+    xprint("sy8827e_i2c_op_cb 0x%x op_id %d\n",
+	slave_address[slave_index], pdata->op_id);
+#endif
+    //if(i2c_task->status != I2C_TASK_COMPLETE)
+    //{
+    //    return;
+    //}
+    switch(pdata->op_id)
+    {
+        case SY8827E_WRITE_OP:
+            /* do an i2c read  after write */
+            memset(&i2c_task_cb[slave_index], 0, sizeof(i2c_task_cb[slave_index]));
+            memset(&op_data_cb[slave_index], 0, sizeof(op_data_cb[slave_index]));
+            op_data_cb[slave_index].op_id = SY8827E_CB_READ_OP;
+            op_data_cb[slave_index].reg = pdata->reg;
+            i2c_task_cb[slave_index].i2c_action  = I2C_ACTION_READ;
+			op_data_cb[slave_index].prh_request_p = pdata->prh_request_p;
+            sy8827e_i2c_reg_op(&i2c_task_cb[slave_index],slave_address[slave_index],
+		&(op_data_cb[slave_index].data),1,&(op_data_cb[slave_index].reg),1,&op_data_cb[slave_index]);
+#ifdef SY8827X_DEBUG
+            xprint("\nSY8827E_WRITE_OP: read slave 0x%x reg %x op_data_db[slave_index].data %x\n",
+		slave_address[slave_index], op_data_cb[slave_index].reg, op_data_cb[slave_index].data);
+#endif
+            break;
+        case SY8827E_CB_READ_OP:
+            /* CB_READ_OP is only used in callback of WRITE_OP case.
+               No need to signal prh this time. it was done while WRITE_OP callback. */
+            return;
+        case SY8827E_READ_OP:
+        case SY8827E_ENDOF_OP:
+        default:
+            break;
+    }
+
+    if (sync_cmd[0].sync != 1)
+    {
+        sy8827e_call_prh(i2c_task);
+    }
+
+}
+
+#define SY8827X_VOLTAGE_0V7625	0x0d
+#define SY8827X_VOLTAGE_0V8	0x10
+#define SY8827X_VOLTAGE_0V8625	0x15
+#define SY8827X_VOLTAGE_0V8875	0x17
+#define SY8827X_VOLTAGE_0V9125	0x19
+#define SY8827X_VOLTAGE_1V0375	0x23
+#define SY8827X_VOLTAGE_1V1	0x28
+#define SY8827X_VOLTAGE_1V125	0x2a
+#define SY8827X_VOLTAGE_1V15	0x2c
+#define SY8827X_VOLTAGE_1V1625	0x2d
+#define SY8827X_VOLTAGE_1V2	0x30
+#define SY8827X_VOLTAGE_1V25	0x34
+#define SY8827X_VOLTAGE_1V3	0x38
+#define SY8827X_VOLTAGE_1V3375	0x3b
+ePMU_RETURN_T sy8827x_set_voltage(U8 slave_index, const ePMU_VOLTAGE_LIST_T voltage)
+{
+    ePMU_RETURN_T ret = PMU_OK;
+    u8 val;
+
+#ifdef SY8827X_DEBUG
+    xprint("sy8827x_set_voltage slave 0x%x voltage %d\n",
+	slave_address[slave_index], voltage);
+#endif
+    switch(voltage) {
+	case PMU_VOLTAGE_0V87:
+	    /* VDD_CPU: valow 0.8532v for 312Mhz on 3GX, set to 0.8625v */
+            val = SY8827X_VOLTAGE_0V8625;
+            //val = 0x16; //0.875v
+	    break;
+        case PMU_VOLTAGE_1V00:
+	    /* VDD_CPU: vmed 0.8779v for 416MHz on 3GR, set to 0.8875v */
+            val = SY8827X_VOLTAGE_0V8875;
+            //val = 0x20; //1.0v
+	case PMU_VOLTAGE_1V02:
+	    /* VDD_CPU: vhigh 1.0296v for 750MHz on 3GR, set to 1.0375v */
+            //val = SY8827X_VOLTAGE_1V0375;
+            val = 0x22; //1.025v
+            break;
+        case PMU_VOLTAGE_1V10:
+	    /* VDD_CPU: vuhigh 1.1531v for 900MHz on 3GR, set to 1.1625v */
+            //val = SY8827X_VOLTAGE_1V1625;
+            val = 0x28; //1.1v
+            break;
+#if 0
+	case PMU_VOLTAGE_1V12:
+	    /* fixed VDD_GPU on N-1: 1.1155v required, set to 1.125v */
+            val = (0x80 | SY8827X_VOLTAGE_1V125);
+            break;
+#endif
+        case PMU_VOLTAGE_1V25:
+	    /* VDD_CPU: vburst 1.3360V for 1160MHz on 3GR, set to 1.3375V */
+            val = SY8827X_VOLTAGE_1V3375;
+            //val = 0x34; //1.25v
+
+        case PMU_VOLTAGE_1V32:
+	    /* VDD_CPU: vburst 1.3360V required, set to 1.3375V */
+            val = (0x80 | SY8827X_VOLTAGE_1V3375);
+            break;
+	case PMU_VOLTAGE_FIXED:
+	    return PMU_OK;
+        default:
+            // TODO error handle
+	    ret = PMU_ERR_INV_VOLT;
+            return ret;
+    }
+
+    val |= 0x80;
+
+    memset(&i2c_task_e[slave_index], 0, sizeof(i2c_task_e[slave_index]));
+    memset(&op_data[slave_index], 0, sizeof(op_data[slave_index]));
+    op_data[slave_index].op_id = SY8827E_WRITE_OP;
+    op_data[slave_index].reg = SY8827E_VSEL0_REG;
+    op_data[slave_index].data = val;
+	op_data[slave_index].prh_request_p = get_current_i2c_prh_request_pointer();
+	if( (sync_cmd[0].sync ==0)&& (op_data[slave_index].prh_request_p ==0))
+	{
+		sys_panic(SYS_OWNER_VMM_POWER, SYS_CAUSE_SOFTWARE,
+			__LINE__, __FILE__, "unknown PMIC RAIL");
+	}
+
+    i2c_task_e[slave_index].i2c_action  = I2C_ACTION_WRITE;
+    sy8827e_i2c_reg_op(&i2c_task_e[slave_index],slave_address[slave_index],
+	NULL,0,&(op_data[slave_index].reg),2,&op_data[slave_index]);
+
+    return ret;
+}
+
+ePMU_RETURN_T sy8827e_set_voltage(const ePMU_VOLTAGE_LIST_T voltage)
+{
+    return sy8827x_set_voltage(SY8827E_SLAVE_INDEX, voltage);
+}
+
+ePMU_RETURN_T sy8827f_set_voltage(const ePMU_VOLTAGE_LIST_T voltage)
+{
+    return sy8827x_set_voltage(SY8827F_SLAVE_INDEX, voltage);
+}
+
+void sy8827x_init(U8 slave_index, U8 active_voltage, U8 sleep_voltage)
+{
+    int i, j;
+    U8 reg_val = 0;
+
+    /* check I2C module is up  */
+    if( !pal_i2c_get_init_status())
+    {
+        /* I2C is not yet initialized*/
+        //PMU_trap(TRAP_PMU_I2C_ERROR, 0, NULL, __LINE__, FILE_NAME);
+        return;
+    }
+
+    /* this function is called in bootcore init where guestvm not started. */
+    sync_cmd[0].sync = 1;
+
+#ifdef SY8827X_DEBUG
+    /* check the settings */
+    reg_val = sy8827x_read(slave_index, SY8827E_VSEL0_REG);
+    reg_val = sy8827x_read(slave_index, SY8827E_VSEL1_REG);
+    reg_val = sy8827x_read(slave_index, SY8827E_CONTROL_REG);
+    reg_val = sy8827x_read(slave_index, SY8827E_ID1_REG);
+    reg_val = sy8827x_read(slave_index, SY8827E_ID2_REG);
+    reg_val = sy8827x_read(slave_index, SY8827E_PGOOD_REG);
+
+    /* set slew rate voltage */
+    reg_val = sy8827x_read(slave_index, SY8827E_CONTROL_REG);
+    reg_val &= 0x8f; reg_val |= 0x20;
+    sy8827x_write(slave_index, SY8827E_CONTROL_REG, reg_val);
+    sy8827x_read(slave_index, SY8827E_CONTROL_REG);
+#endif
+
+    /* 1. set VSEL0 active voltage */
+    sy8827x_write(slave_index, SY8827E_VSEL0_REG, 0x80 | active_voltage);
+    sy8827x_read(slave_index, SY8827E_VSEL0_REG);
+
+    /* 2. set VSEL1 sleep voltage to 0.8v: 0x80 | 0x10; 0.7625v on mrd_n1: 0x80 | 0x10 for SLEEP  */
+    sy8827x_write(slave_index, SY8827E_VSEL1_REG, 0x80 | sleep_voltage);
+    sy8827x_read(slave_index, SY8827E_VSEL1_REG);
+}
+
+void dcdc_init(void)
+{
+    /* VDD_CPU
+     * active: 1.15V - 0x2c
+     * sleep: 0.8v: 0x80 | 0x10; 0.7625v on mrd_n1: 0x80 | 0x10 */
+    sy8827x_init(SY8827E_SLAVE_INDEX, SY8827X_VOLTAGE_1V15, SY8827X_VOLTAGE_0V8);
+
+    /* VDD_GPU, fixed @ 1.1V */
+    sy8827x_init(SY8827F_SLAVE_INDEX, SY8827X_VOLTAGE_1V1, SY8827X_VOLTAGE_1V1);
+}
+
diff --git a/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/sy8827e.h b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/sy8827e.h
new file mode 100644
index 0000000..e59f77a
--- /dev/null
+++ b/devices/pm/power_control/pmu/src/board_sf_3gx_ext_pmic/sy8827e.h
@@ -0,0 +1,44 @@
+/* =============================================================================
+ * Copyright (C) 2015 Intel Mobile Communications GmbH
+ *
+ *      Sec Class: Intel Confidential (IC)
+ *
+ * =============================================================================
+ *
+ * This document contains proprietary information belonging to IMC.
+ * Passing on and copying of this document, use and communication of its
+ * contents is not permitted without prior written authorisation.
+ *
+ * =============================================================================
+ * Revision Information :
+ *   $File name:  sy8827e.h $
+ *   $CC-Version: .../oint_drv_power_ctrl_02/6 $
+ *   $Date:       2015-01-20    11:46:44 UTC $
+ *   Responsible: mattyeh
+ *   Comment:
+ *   Created
+ * =============================================================================
+ *
+ * This file contains the generic part of the driver internal interface towards
+ * the PMU driver
+ * Generic part
+ *
+ * ===========================================================================*/
+
+#ifndef __SY8827E_H__
+#define __SY8827E_H__
+
+#include "bastypes.h"
+
+#include "pmu_internal_cfg.h"
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+
+void sy8827x_init(void);
+void sy8827e_set_voltage(const ePMU_VOLTAGE_LIST_T voltage);
+void sy8827f_set_voltage(const ePMU_VOLTAGE_LIST_T voltage);
+
+#endif //__SY8827E_H__
diff --git a/devices/pm/power_control/pow/src/board_sf_3gx_ext_pmic/pow_volt_pmu_cfg.c b/devices/pm/power_control/pow/src/board_sf_3gx_ext_pmic/pow_volt_pmu_cfg.c
index ec7981b..b9103f4 100644
--- a/devices/pm/power_control/pow/src/board_sf_3gx_ext_pmic/pow_volt_pmu_cfg.c
+++ b/devices/pm/power_control/pow/src/board_sf_3gx_ext_pmic/pow_volt_pmu_cfg.c
@@ -82,7 +82,7 @@ static pow_volt_phys_domain_info_s pow_volt_phys_domain_info[PMU_NOF_DOMAINS] =
   /* PMU_DOMAIN_SD2 */                  { POW_CONTROL_VOLTAGE_DISABLE,     POW_CONTROL_VOLTAGE_ON,       NULL,NULL },                  /**< SD2 power domain */
   /* PMU_DOMAIN_ELDO_VMMC */            { POW_CONTROL_VOLTAGE_DISABLE,     POW_CONTROL_VOLTAGE_ON,       NULL,NULL },                  /**< EMMC power domain provided by external LDO - controlled via GPIO */
   /* PMU_DOMAIN_GNSS_TCXO_LDO */        { POW_CONTROL_VOLTAGE_DISABLE,     POW_CONTROL_VOLTAGE_ON,       NULL,NULL },                  /**< GNSS_TCXO_LDO power domain provided by external LDO */
-  /* PMU_DOMAIN_EXT_BUCK1 */            { POW_CONTROL_VOLTAGE_DISABLE,     POW_CONTROL_VOLTAGE_ON,       NULL,NULL},                  /**< EXT_BUCK1 */
+  /* PMU_DOMAIN_EXT_BUCK1 */            { POW_CONTROL_VOLTAGE_DISABLE,     POW_CONTROL_VOLTAGE_ON,       prh_patch_function,pal_prh_i2c_callback_test},                  /**< EXT_BUCK1 */
   /* PMU_DOMAIN_EXT_BUCK2 */            { POW_CONTROL_VOLTAGE_DISABLE,     POW_CONTROL_VOLTAGE_ON,       NULL,NULL },                  /**< EXT_BUCK2 */
   /* PMU_DOMAIN_EXT_LDO5 */            { POW_CONTROL_VOLTAGE_DISABLE,     POW_CONTROL_VOLTAGE_ON,       NULL,NULL },                  /**< EXT_LDO5 */
   /* PMU_DOMAIN_DUMMY */                { POW_CONTROL_VOLTAGE_DISABLE,     POW_CONTROL_VOLTAGE_ON,       NULL ,NULL},                  /**< Dummy power domain */
diff --git a/devices/pm/power_management/prh/src/board_sf_3gx/prh_cpu_drv_cfg.c b/devices/pm/power_management/prh/src/board_sf_3gx/prh_cpu_drv_cfg.c
index 032d93a..69a9cab 100644
--- a/devices/pm/power_management/prh/src/board_sf_3gx/prh_cpu_drv_cfg.c
+++ b/devices/pm/power_management/prh/src/board_sf_3gx/prh_cpu_drv_cfg.c
@@ -74,18 +74,19 @@ typedef struct
 {
   sPRH_PER_CLOCK_CFG_INFO_T  cpu_clk_312mhz;
   sPRH_PER_CLOCK_CFG_INFO_T  cpu_clk_416mhz;
-  sPRH_PER_CLOCK_CFG_INFO_T  cpu_clk_728mhz;
+  sPRH_PER_CLOCK_CFG_INFO_T  cpu_clk_750mhz;
   sPRH_PER_CLOCK_CFG_INFO_T  cpu_clk_900mhz; 
-  sPRH_PER_CLOCK_CFG_INFO_T  cpu_clk_max_freq; 
+  sPRH_PER_CLOCK_CFG_INFO_T  cpu_clk_1160mhz;
   ePRH_PER_VOLT_USER_ID_T    per_volt_id;
 }sPRH_PER_CPU_CLK_POW_RES_INFO_T;
 
 typedef struct
 {
-  sPRH_PER_VOLT_SET_INFO_T      vlow;  /**< voltage level */
-  sPRH_PER_VOLT_SET_INFO_T      vmhigh;
+  sPRH_PER_VOLT_SET_INFO_T      valow;  /**< voltage level */
+  sPRH_PER_VOLT_SET_INFO_T      vmed;  /**< voltage level */
   sPRH_PER_VOLT_SET_INFO_T      vhigh;
   sPRH_PER_VOLT_SET_INFO_T      vuhigh;
+  sPRH_PER_VOLT_SET_INFO_T      vburst;
 
 }sPRH_PER_CPU_VOLT_POW_RES_INFO_T;
 
@@ -119,22 +120,23 @@ static sPRH_PER_CPU_CLK_POW_RES_INFO_T  prh_per_cpu_clk_pow_res =
 {
   /* cpu_clk_312mhz  */ {POW_CONTROL_PS_CPU_KERNEL_CLK,  POW_CONTROL_FREQ_312M,  POW_CONTROL_FREQ_312M},
   /* cpu_clk_416mhz  */ {POW_CONTROL_PS_CPU_KERNEL_CLK,  POW_CONTROL_FREQ_416M,  POW_CONTROL_FREQ_416M},
-  /* cpu_clk_728mhz  */ {POW_CONTROL_PS_CPU_KERNEL_CLK,  POW_CONTROL_FREQ_728M,  POW_CONTROL_FREQ_728M},
+  /* cpu_clk_728mhz  */ {POW_CONTROL_PS_CPU_KERNEL_CLK,  POW_CONTROL_FREQ_754M,  POW_CONTROL_FREQ_754M},
   /* cpu_clk_900mhz  */ {POW_CONTROL_PS_CPU_KERNEL_CLK,  POW_CONTROL_FREQ_900M,  POW_CONTROL_FREQ_900M},
-  /* cpu_clk_1200mhz */ {POW_CONTROL_PS_CPU_KERNEL_CLK,  POW_CONTROL_FREQ_1200M, POW_CONTROL_FREQ_1200M},
+  /* cpu_clk_1200mhz */ {POW_CONTROL_PS_CPU_KERNEL_CLK,  POW_CONTROL_FREQ_1160M, POW_CONTROL_FREQ_1160M},
   /* per_volt_id     */ PRH_PER_VOLT_PS_CPU_CLK,
 };
 
 static sPRH_PER_CPU_VOLT_POW_RES_INFO_T prh_per_cpu_volt_pow_res =
 {
-  /* vlow, 416MHz */   {POW_CONTROL_VDD_VCPU,  POW_CONTROL_VOLTAGE_0V87},
-  /* vmhigh 750MHz */ {POW_CONTROL_VDD_VCPU,  POW_CONTROL_VOLTAGE_1V02},
-  /* vhigh 900MHz */  {POW_CONTROL_VDD_VCPU,  POW_CONTROL_VOLTAGE_1V14},
-  /* vuhigh 1060MHz */ {POW_CONTROL_VDD_VCPU,  POW_CONTROL_VOLTAGE_1V32},
+  /* valow, 312MHz */   {POW_CONTROL_VDD_VCPU,  POW_CONTROL_VOLTAGE_0V87},
+  /* vmed, 416MHz */   {POW_CONTROL_VDD_VCPU,  POW_CONTROL_VOLTAGE_1V00},
+  /* vhigh 750MHz */ {POW_CONTROL_VDD_VCPU,  POW_CONTROL_VOLTAGE_1V02},
+  /* vuhigh 900MHz */  {POW_CONTROL_VDD_VCPU,  POW_CONTROL_VOLTAGE_1V10},
+  /* vburst 1160MHz */ {POW_CONTROL_VDD_VCPU,  POW_CONTROL_VOLTAGE_1V25},
 };
 
 
-#ifdef SF3GR_4_LEVEL_CPUFREQ
+#ifdef SF3GR_GARNET_4_LEVEL_CPUFREQ
 /*---------------------------------------------------------------------------------------------------------------*/
 
 /* Init power resources sequence */
@@ -145,7 +147,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_init_seq[] =
 {
   {PRH_PER_VOLT_HIGH_REQ_CMD,       (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_VOLT_STAB_REQ_CMD,       NULL},
-  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vhigh},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vuhigh},
   {PRH_PER_CLK_CFG_CMD,             (void *)&prh_per_cpu_clk_pow_res.cpu_clk_900mhz},
   {PRH_PER_CLK_ON_CMD,              (void *)&prh_per_cpu_clk_pow_res.cpu_clk_900mhz},
   {PRH_PER_EMIF_LOW_POWER_OFF_CMD,    NULL},
@@ -162,6 +164,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s02_seq[] =
 {
   {PRH_PER_VOLT_HIGH_REQ_CMD,       (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_VOLT_STAB_REQ_CMD,       NULL},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vmed},
   {PRH_PER_CLK_CFG_CMD,			  (void *)&prh_per_cpu_clk_pow_res.cpu_clk_416mhz},
   {PRH_PER_CLK_ON_CMD,			  (void *)&prh_per_cpu_clk_pow_res.cpu_clk_416mhz},
   {PRH_PER_EMIF_LOW_POWER_ON_CMD,    NULL},
@@ -179,9 +182,9 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s03_seq[] =
 {
   {PRH_PER_VOLT_HIGH_REQ_CMD,       (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_VOLT_STAB_REQ_CMD,       NULL},
-  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vmhigh},
-  {PRH_PER_CLK_CFG_CMD,             (void *)&prh_per_cpu_clk_pow_res.cpu_clk_728mhz},
-  {PRH_PER_CLK_ON_CMD,              (void *)&prh_per_cpu_clk_pow_res.cpu_clk_728mhz},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vhigh},
+  {PRH_PER_CLK_CFG_CMD,             (void *)&prh_per_cpu_clk_pow_res.cpu_clk_750mhz},
+  {PRH_PER_CLK_ON_CMD,              (void *)&prh_per_cpu_clk_pow_res.cpu_clk_750mhz},
   {PRH_PER_END_CMD,                 NULL},
 };
 
@@ -198,9 +201,9 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s05_seq[] =
   {PRH_PER_VOLT_HIGH_REQ_CMD,   (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
 #endif
   {PRH_PER_VOLT_STAB_REQ_CMD,         NULL},
-  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vuhigh},
-  {PRH_PER_CLK_CFG_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_max_freq},
-  {PRH_PER_CLK_ON_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_max_freq},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vburst},
+  {PRH_PER_CLK_CFG_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_1160mhz},
+  {PRH_PER_CLK_ON_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_1160mhz},
   {PRH_PER_END_CMD,                   NULL},
 };
 
@@ -217,7 +220,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s21_seq[] =
 
   {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_312mhz},
   {PRH_PER_VOLT_LOW_REQ_CMD,    (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vlow},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.valow},
   {PRH_PER_EMIF_LOW_POWER_ON_CMD,    NULL},
   {PRH_PER_END_CMD,             NULL},
 };
@@ -230,6 +233,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s12_seq[] =
 {
   {PRH_PER_VOLT_MED_REQ_CMD,    (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_VOLT_STAB_REQ_CMD,   NULL},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vmed},
   {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_416mhz},
   {PRH_PER_END_CMD,             NULL},
 };
@@ -244,8 +248,8 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s13_seq[] =
 {
   {PRH_PER_VOLT_HIGH_REQ_CMD,       (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_VOLT_STAB_REQ_CMD,       NULL},
-  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vmhigh},
-  {PRH_PER_CLK_CFG_CMD,             (void *)&prh_per_cpu_clk_pow_res.cpu_clk_728mhz},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vhigh},
+  {PRH_PER_CLK_CFG_CMD,             (void *)&prh_per_cpu_clk_pow_res.cpu_clk_750mhz},
   {PRH_PER_EMIF_LOW_POWER_OFF_CMD,  NULL},
   {PRH_PER_END_CMD,                 NULL},
 };
@@ -261,7 +265,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s32_seq[] =
 
 
   {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_416mhz},
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vlow},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vmed},
   {PRH_PER_VOLT_MED_REQ_CMD,    (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_EMIF_LOW_POWER_ON_CMD,    NULL},
   {PRH_PER_END_CMD,             NULL},
@@ -273,7 +277,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s32_seq[] =
   */
 static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s34_seq[] =
 {
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vhigh},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vuhigh},
   {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_900mhz},
   {PRH_PER_END_CMD,             NULL},
 };
@@ -284,8 +288,8 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s34_seq[] =
   */
 static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s43_seq[] =
 {
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vmhigh},
-  {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_728mhz},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vhigh},
+  {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_750mhz},
   {PRH_PER_END_CMD,             NULL},
 };
 
@@ -295,9 +299,9 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s43_seq[] =
   */
 static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s53_seq[] =
 {
-  {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_728mhz},
+  {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_750mhz},
   {PRH_PER_VOLT_HIGH_REQ_CMD,    (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vmhigh},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vhigh},
   {PRH_PER_END_CMD,             NULL},
 };
 
@@ -309,7 +313,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s54_seq[] =
 {
   {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_900mhz},
   {PRH_PER_VOLT_HIGH_REQ_CMD,    (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vhigh},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vuhigh},
   {PRH_PER_END_CMD,             NULL},
 };
 
@@ -322,7 +326,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s14_seq[] =
 {
   {PRH_PER_VOLT_HIGH_REQ_CMD,   (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_VOLT_STAB_REQ_CMD,   NULL},
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vhigh},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vuhigh},
   {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_900mhz},
   {PRH_PER_EMIF_LOW_POWER_OFF_CMD,    NULL},
   {PRH_PER_END_CMD,             NULL},
@@ -343,8 +347,8 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s15_seq[] =
   {PRH_PER_VOLT_HIGH_REQ_CMD,       (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
 #endif
   {PRH_PER_VOLT_STAB_REQ_CMD,         NULL},
-  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vuhigh},
-  {PRH_PER_CLK_CFG_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_max_freq},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vburst},
+  {PRH_PER_CLK_CFG_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_1160mhz},
 
   {PRH_PER_END_CMD,                   NULL},
 };
@@ -386,7 +390,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_init_seq[] =
 {
   {PRH_PER_VOLT_HIGH_REQ_CMD,       (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_VOLT_STAB_REQ_CMD,       NULL},
-  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vhigh},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vuhigh},
   {PRH_PER_CLK_CFG_CMD,             (void *)&prh_per_cpu_clk_pow_res.cpu_clk_900mhz},
   {PRH_PER_CLK_ON_CMD,              (void *)&prh_per_cpu_clk_pow_res.cpu_clk_900mhz},
   {PRH_PER_END_CMD,                 NULL},
@@ -402,6 +406,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s02_seq[] =
 {
   {PRH_PER_VOLT_HIGH_REQ_CMD,       (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_VOLT_STAB_REQ_CMD,       NULL},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vmed},
   {PRH_PER_CLK_CFG_CMD,			  (void *)&prh_per_cpu_clk_pow_res.cpu_clk_416mhz},
   {PRH_PER_CLK_ON_CMD,			  (void *)&prh_per_cpu_clk_pow_res.cpu_clk_416mhz},
   {PRH_PER_END_CMD,                 NULL},
@@ -422,9 +427,9 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s04_seq[] =
   {PRH_PER_VOLT_HIGH_REQ_CMD,   (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
 #endif
   {PRH_PER_VOLT_STAB_REQ_CMD,         NULL},
-  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vuhigh},
-  {PRH_PER_CLK_CFG_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_max_freq},
-  {PRH_PER_CLK_ON_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_max_freq},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vburst},
+  {PRH_PER_CLK_CFG_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_1160mhz},
+  {PRH_PER_CLK_ON_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_1160mhz},
   {PRH_PER_END_CMD,                   NULL},
 };
 
@@ -440,7 +445,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s21_seq[] =
 
   {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_312mhz},
   {PRH_PER_VOLT_LOW_REQ_CMD,    (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vlow},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.valow},
   {PRH_PER_END_CMD,             NULL},
 };
 
@@ -452,6 +457,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s12_seq[] =
 {
   {PRH_PER_VOLT_MED_REQ_CMD,    (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_VOLT_STAB_REQ_CMD,   NULL},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vmed},
 
   {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_416mhz},
 
@@ -468,7 +474,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s32_seq[] =
 
 
   {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_416mhz},
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vlow},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vmed},
 
   {PRH_PER_VOLT_MED_REQ_CMD,    (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_END_CMD,             NULL},
@@ -484,7 +490,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s43_seq[] =
 
 
   {PRH_PER_VOLT_HIGH_REQ_CMD,    (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vhigh},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vuhigh},
 
   {PRH_PER_END_CMD,             NULL},
 };
@@ -498,7 +504,7 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s13_seq[] =
 {
   {PRH_PER_VOLT_HIGH_REQ_CMD,   (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
   {PRH_PER_VOLT_STAB_REQ_CMD,   NULL},
-  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vhigh},
+  {PRH_PER_VOLT_ON_CMD,         (void *)&prh_per_cpu_volt_pow_res.vuhigh},
 
 
   {PRH_PER_CLK_CFG_CMD,         (void *)&prh_per_cpu_clk_pow_res.cpu_clk_900mhz},
@@ -520,8 +526,8 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s14_seq[] =
   {PRH_PER_VOLT_HIGH_REQ_CMD,       (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
 #endif
   {PRH_PER_VOLT_STAB_REQ_CMD,         NULL},
-  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vuhigh},
-  {PRH_PER_CLK_CFG_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_max_freq},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vburst},
+  {PRH_PER_CLK_CFG_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_1160mhz},
 
   {PRH_PER_END_CMD,                   NULL},
 };
@@ -537,8 +543,8 @@ static const sPRH_PER_GEN_SEQ_INFO_T prh_per_cpu_clk_s34_seq[] =
   {PRH_PER_VOLT_HIGH_REQ_CMD,       (void *)&prh_per_cpu_clk_pow_res.per_volt_id},
 #endif
   {PRH_PER_VOLT_STAB_REQ_CMD,         NULL},
-  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vuhigh},
-  {PRH_PER_CLK_CFG_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_max_freq},
+  {PRH_PER_VOLT_ON_CMD,             (void *)&prh_per_cpu_volt_pow_res.vburst},
+  {PRH_PER_CLK_CFG_CMD,               (void *)&prh_per_cpu_clk_pow_res.cpu_clk_1160mhz},
   {PRH_PER_END_CMD,                   NULL},
 };
 
@@ -585,31 +591,6 @@ static const sPRH_PER_GEN_SEQ_INFO_T * p_prh_per_cpu_clk_seq_table[PRH_PER_CPU_C
 ****************************************************************************************/
 ePRH_RETURN_T prh_cpu_drv_get_init_cpu_frequency_voltage_configuration(void)
 {
-  T_SCU_FEAT_CHIPREV chip_rev;
-
-  chip_rev = scu_feat_chipid_rev_get(SCU_FEAT_CHIPID_SF_3GR_SOC);
-
-  if (chip_rev == SCU_FEAT_CHIPREV_ES1)
-  {
-    prh_per_cpu_clk_pow_res.cpu_clk_max_freq.max_clk = POW_CONTROL_FREQ_1040M;
-    prh_per_cpu_clk_pow_res.cpu_clk_max_freq.min_clk = POW_CONTROL_FREQ_1040M;
-  }
-  else
-  { 
-  #if defined (CPU_MAX_FREQ_1160MHZ)
-    prh_per_cpu_clk_pow_res.cpu_clk_max_freq.max_clk = POW_CONTROL_FREQ_1160M;
-    prh_per_cpu_clk_pow_res.cpu_clk_max_freq.min_clk = POW_CONTROL_FREQ_1160M;
-  #else
-    prh_per_cpu_clk_pow_res.cpu_clk_max_freq.max_clk = POW_CONTROL_FREQ_1040M;
-    prh_per_cpu_clk_pow_res.cpu_clk_max_freq.min_clk = POW_CONTROL_FREQ_1040M;
-  #endif
-
-   prh_per_cpu_volt_pow_res.vlow.volt_level = POW_CONTROL_VOLTAGE_0V87;
-   prh_per_cpu_volt_pow_res.vmhigh.volt_level =  POW_CONTROL_VOLTAGE_1V02;
-   prh_per_cpu_volt_pow_res.vhigh.volt_level =  POW_CONTROL_VOLTAGE_1V14;  
-   prh_per_cpu_volt_pow_res.vuhigh.volt_level =  POW_CONTROL_VOLTAGE_1V32;
-  }
-
   return PRH_OK; 
 }
 
@@ -633,7 +614,8 @@ ePRH_RETURN_T prh_cpu_drv_get_init_per_mode_info (const ePRH_PER_ID_T per_id, sP
       case PRH_PER_ARM11_CLK:
         p_per_mode_info->prh_per_type = PRH_PER_TYPE_ARM11_CLK;
 
-        p_per_mode_info->prh_per_info.prh_per_arm11_clk_info.arm11_clk_mode = PRH_PER_ARM11_CLK_ENABLE_HIGH_PERF;
+        p_per_mode_info->prh_per_info.prh_per_arm11_clk_info.arm11_clk_mode = PRH_PER_ARM11_CLK_ENABLE_MED_PERF;
+        //p_per_mode_info->prh_per_info.prh_per_arm11_clk_info.arm11_clk_mode = PRH_PER_ARM11_CLK_ENABLE_HIGH_PERF;
 
 		break;
 
-- 
1.9.1

