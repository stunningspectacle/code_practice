From ae83afde17c9173d94cbc1ed1f065386225fabcb Mon Sep 17 00:00:00 2001
From: Joakim Landberg <joakim.landberg@intel.com>
Date: Mon, 27 Oct 2014 14:57:31 +0100
Subject: [PATCH 01/12] Cleanup x86 optimizations and supported SIMD level.

Sets the minimum supported SIMD instruction set to SSSE3 for x86
and SSE4.2 for x86_64. This reflects the supported ABI:s of the
Android NDK and Android platform.
Also removes deprecated SSE2 optimizations and enables
ColorRect optimization.

Change-Id: I2842f30c9083cdafd1dacdc1bf659ce115cabedf
Old-Change-ID: I8b873aff67bb9d5fd44a3dcdc9b659fee9961b50
Ori-Change-ID: Id9672ffa40ce4f3f9f23784e6830026572deac24
Orig-Change-Id: I06005df903ac15a88ef2d63c27c7bdf3bc0c40e7
Category: aosp improvement
Domain: AOSP-Others
Origin: internal
Upstream-Candidate: yes
Orig-Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-2473
Signed-off-by: Joakim Landberg <joakim.landberg@intel.com>
Tracked-On: https://jira01.devtools.intel.com/browse/CTEAN-1950
Old-Reviewed-on: https://android.intel.com:443/374221
Signed-off-by: Xinyun Liu <xinyun.liu@intel.com>
---
 Android.mk                               |    4 +-
 include/core/SkPreConfig.h               |    8 +-
 src/opts/SkBitmapProcState_opts_SSE2.cpp |  222 ------------------------------
 src/opts/SkBitmapProcState_opts_SSE2.h   |    6 -
 src/opts/opts_check_x86.cpp              |   17 ---
 5 files changed, 4 insertions(+), 253 deletions(-)

diff --git a/Android.mk b/Android.mk
index 28436ff..f8db9e8 100644
--- a/Android.mk
+++ b/Android.mk
@@ -611,7 +611,7 @@ LOCAL_CFLAGS_arm += \
 endif
 
 LOCAL_CFLAGS_x86 += \
-	-msse2 \
+	-mssse3 \
 	-mfpmath=sse
 
 LOCAL_SRC_FILES_x86 += \
@@ -627,7 +627,7 @@ LOCAL_SRC_FILES_x86 += \
 	src/opts/SkBitmapProcState_opts_SSSE3.cpp
 
 LOCAL_CFLAGS_x86_64 += \
-	-msse2 \
+	-msse4.2 \
 	-mfpmath=sse
 
 LOCAL_SRC_FILES_x86_64 += \
diff --git a/include/core/SkPreConfig.h b/include/core/SkPreConfig.h
index c733111..e9ce431 100644
--- a/include/core/SkPreConfig.h
+++ b/include/core/SkPreConfig.h
@@ -130,16 +130,12 @@
 #ifndef SK_CPU_SSE_LEVEL
     // These checks must be done in descending order to ensure we set the highest
     // available SSE level.
-    #if defined(__SSE4_2__)
+    #if defined(__SSE4_2__) || defined(__x86_64__)
         #define SK_CPU_SSE_LEVEL    SK_CPU_SSE_LEVEL_SSE42
     #elif defined(__SSE4_1__)
         #define SK_CPU_SSE_LEVEL    SK_CPU_SSE_LEVEL_SSE41
-    #elif defined(__SSSE3__)
+    #else
         #define SK_CPU_SSE_LEVEL    SK_CPU_SSE_LEVEL_SSSE3
-    #elif defined(__SSE3__)
-        #define SK_CPU_SSE_LEVEL    SK_CPU_SSE_LEVEL_SSE3
-    #elif defined(__SSE2__)
-        #define SK_CPU_SSE_LEVEL    SK_CPU_SSE_LEVEL_SSE2
     #endif
 #endif
 
diff --git a/src/opts/SkBitmapProcState_opts_SSE2.cpp b/src/opts/SkBitmapProcState_opts_SSE2.cpp
index 1f3bbc1..f1d150c 100644
--- a/src/opts/SkBitmapProcState_opts_SSE2.cpp
+++ b/src/opts/SkBitmapProcState_opts_SSE2.cpp
@@ -11,228 +11,6 @@
 #include "SkPaint.h"
 #include "SkUtils.h"
 
-void S32_opaque_D32_filter_DX_SSE2(const SkBitmapProcState& s,
-                                   const uint32_t* xy,
-                                   int count, uint32_t* colors) {
-    SkASSERT(count > 0 && colors != NULL);
-    SkASSERT(s.fFilterLevel != SkPaint::kNone_FilterLevel);
-    SkASSERT(kN32_SkColorType == s.fBitmap->colorType());
-    SkASSERT(s.fAlphaScale == 256);
-
-    const char* srcAddr = static_cast<const char*>(s.fBitmap->getPixels());
-    size_t rb = s.fBitmap->rowBytes();
-    uint32_t XY = *xy++;
-    unsigned y0 = XY >> 14;
-    const uint32_t* row0 = reinterpret_cast<const uint32_t*>(srcAddr + (y0 >> 4) * rb);
-    const uint32_t* row1 = reinterpret_cast<const uint32_t*>(srcAddr + (XY & 0x3FFF) * rb);
-    unsigned subY = y0 & 0xF;
-
-    // ( 0,  0,  0,  0,  0,  0,  0, 16)
-    __m128i sixteen = _mm_cvtsi32_si128(16);
-
-    // ( 0,  0,  0,  0, 16, 16, 16, 16)
-    sixteen = _mm_shufflelo_epi16(sixteen, 0);
-
-    // ( 0,  0,  0,  0,  0,  0,  0,  y)
-    __m128i allY = _mm_cvtsi32_si128(subY);
-
-    // ( 0,  0,  0,  0,  y,  y,  y,  y)
-    allY = _mm_shufflelo_epi16(allY, 0);
-
-    // ( 0,  0,  0,  0, 16-y, 16-y, 16-y, 16-y)
-    __m128i negY = _mm_sub_epi16(sixteen, allY);
-
-    // (16-y, 16-y, 16-y, 16-y, y, y, y, y)
-    allY = _mm_unpacklo_epi64(allY, negY);
-
-    // (16, 16, 16, 16, 16, 16, 16, 16 )
-    sixteen = _mm_shuffle_epi32(sixteen, 0);
-
-    // ( 0,  0,  0,  0,  0,  0,  0,  0)
-    __m128i zero = _mm_setzero_si128();
-    do {
-        uint32_t XX = *xy++;    // x0:14 | 4 | x1:14
-        unsigned x0 = XX >> 18;
-        unsigned x1 = XX & 0x3FFF;
-
-        // (0, 0, 0, 0, 0, 0, 0, x)
-        __m128i allX = _mm_cvtsi32_si128((XX >> 14) & 0x0F);
-
-        // (0, 0, 0, 0, x, x, x, x)
-        allX = _mm_shufflelo_epi16(allX, 0);
-
-        // (x, x, x, x, x, x, x, x)
-        allX = _mm_shuffle_epi32(allX, 0);
-
-        // (16-x, 16-x, 16-x, 16-x, 16-x, 16-x, 16-x)
-        __m128i negX = _mm_sub_epi16(sixteen, allX);
-
-        // Load 4 samples (pixels).
-        __m128i a00 = _mm_cvtsi32_si128(row0[x0]);
-        __m128i a01 = _mm_cvtsi32_si128(row0[x1]);
-        __m128i a10 = _mm_cvtsi32_si128(row1[x0]);
-        __m128i a11 = _mm_cvtsi32_si128(row1[x1]);
-
-        // (0, 0, a00, a10)
-        __m128i a00a10 = _mm_unpacklo_epi32(a10, a00);
-
-        // Expand to 16 bits per component.
-        a00a10 = _mm_unpacklo_epi8(a00a10, zero);
-
-        // ((a00 * (16-y)), (a10 * y)).
-        a00a10 = _mm_mullo_epi16(a00a10, allY);
-
-        // (a00 * (16-y) * (16-x), a10 * y * (16-x)).
-        a00a10 = _mm_mullo_epi16(a00a10, negX);
-
-        // (0, 0, a01, a10)
-        __m128i a01a11 = _mm_unpacklo_epi32(a11, a01);
-
-        // Expand to 16 bits per component.
-        a01a11 = _mm_unpacklo_epi8(a01a11, zero);
-
-        // (a01 * (16-y)), (a11 * y)
-        a01a11 = _mm_mullo_epi16(a01a11, allY);
-
-        // (a01 * (16-y) * x), (a11 * y * x)
-        a01a11 = _mm_mullo_epi16(a01a11, allX);
-
-        // (a00*w00 + a01*w01, a10*w10 + a11*w11)
-        __m128i sum = _mm_add_epi16(a00a10, a01a11);
-
-        // (DC, a00*w00 + a01*w01)
-        __m128i shifted = _mm_shuffle_epi32(sum, 0xEE);
-
-        // (DC, a00*w00 + a01*w01 + a10*w10 + a11*w11)
-        sum = _mm_add_epi16(sum, shifted);
-
-        // Divide each 16 bit component by 256.
-        sum = _mm_srli_epi16(sum, 8);
-
-        // Pack lower 4 16 bit values of sum into lower 4 bytes.
-        sum = _mm_packus_epi16(sum, zero);
-
-        // Extract low int and store.
-        *colors++ = _mm_cvtsi128_si32(sum);
-    } while (--count > 0);
-}
-
-void S32_alpha_D32_filter_DX_SSE2(const SkBitmapProcState& s,
-                                  const uint32_t* xy,
-                                  int count, uint32_t* colors) {
-    SkASSERT(count > 0 && colors != NULL);
-    SkASSERT(s.fFilterLevel != SkPaint::kNone_FilterLevel);
-    SkASSERT(kN32_SkColorType == s.fBitmap->colorType());
-    SkASSERT(s.fAlphaScale < 256);
-
-    const char* srcAddr = static_cast<const char*>(s.fBitmap->getPixels());
-    size_t rb = s.fBitmap->rowBytes();
-    uint32_t XY = *xy++;
-    unsigned y0 = XY >> 14;
-    const uint32_t* row0 = reinterpret_cast<const uint32_t*>(srcAddr + (y0 >> 4) * rb);
-    const uint32_t* row1 = reinterpret_cast<const uint32_t*>(srcAddr + (XY & 0x3FFF) * rb);
-    unsigned subY = y0 & 0xF;
-
-    // ( 0,  0,  0,  0,  0,  0,  0, 16)
-    __m128i sixteen = _mm_cvtsi32_si128(16);
-
-    // ( 0,  0,  0,  0, 16, 16, 16, 16)
-    sixteen = _mm_shufflelo_epi16(sixteen, 0);
-
-    // ( 0,  0,  0,  0,  0,  0,  0,  y)
-    __m128i allY = _mm_cvtsi32_si128(subY);
-
-    // ( 0,  0,  0,  0,  y,  y,  y,  y)
-    allY = _mm_shufflelo_epi16(allY, 0);
-
-    // ( 0,  0,  0,  0, 16-y, 16-y, 16-y, 16-y)
-    __m128i negY = _mm_sub_epi16(sixteen, allY);
-
-    // (16-y, 16-y, 16-y, 16-y, y, y, y, y)
-    allY = _mm_unpacklo_epi64(allY, negY);
-
-    // (16, 16, 16, 16, 16, 16, 16, 16 )
-    sixteen = _mm_shuffle_epi32(sixteen, 0);
-
-    // ( 0,  0,  0,  0,  0,  0,  0,  0)
-    __m128i zero = _mm_setzero_si128();
-
-    // ( alpha, alpha, alpha, alpha, alpha, alpha, alpha, alpha )
-    __m128i alpha = _mm_set1_epi16(s.fAlphaScale);
-
-    do {
-        uint32_t XX = *xy++;    // x0:14 | 4 | x1:14
-        unsigned x0 = XX >> 18;
-        unsigned x1 = XX & 0x3FFF;
-
-        // (0, 0, 0, 0, 0, 0, 0, x)
-        __m128i allX = _mm_cvtsi32_si128((XX >> 14) & 0x0F);
-
-        // (0, 0, 0, 0, x, x, x, x)
-        allX = _mm_shufflelo_epi16(allX, 0);
-
-        // (x, x, x, x, x, x, x, x)
-        allX = _mm_shuffle_epi32(allX, 0);
-
-        // (16-x, 16-x, 16-x, 16-x, 16-x, 16-x, 16-x)
-        __m128i negX = _mm_sub_epi16(sixteen, allX);
-
-        // Load 4 samples (pixels).
-        __m128i a00 = _mm_cvtsi32_si128(row0[x0]);
-        __m128i a01 = _mm_cvtsi32_si128(row0[x1]);
-        __m128i a10 = _mm_cvtsi32_si128(row1[x0]);
-        __m128i a11 = _mm_cvtsi32_si128(row1[x1]);
-
-        // (0, 0, a00, a10)
-        __m128i a00a10 = _mm_unpacklo_epi32(a10, a00);
-
-        // Expand to 16 bits per component.
-        a00a10 = _mm_unpacklo_epi8(a00a10, zero);
-
-        // ((a00 * (16-y)), (a10 * y)).
-        a00a10 = _mm_mullo_epi16(a00a10, allY);
-
-        // (a00 * (16-y) * (16-x), a10 * y * (16-x)).
-        a00a10 = _mm_mullo_epi16(a00a10, negX);
-
-        // (0, 0, a01, a10)
-        __m128i a01a11 = _mm_unpacklo_epi32(a11, a01);
-
-        // Expand to 16 bits per component.
-        a01a11 = _mm_unpacklo_epi8(a01a11, zero);
-
-        // (a01 * (16-y)), (a11 * y)
-        a01a11 = _mm_mullo_epi16(a01a11, allY);
-
-        // (a01 * (16-y) * x), (a11 * y * x)
-        a01a11 = _mm_mullo_epi16(a01a11, allX);
-
-        // (a00*w00 + a01*w01, a10*w10 + a11*w11)
-        __m128i sum = _mm_add_epi16(a00a10, a01a11);
-
-        // (DC, a00*w00 + a01*w01)
-        __m128i shifted = _mm_shuffle_epi32(sum, 0xEE);
-
-        // (DC, a00*w00 + a01*w01 + a10*w10 + a11*w11)
-        sum = _mm_add_epi16(sum, shifted);
-
-        // Divide each 16 bit component by 256.
-        sum = _mm_srli_epi16(sum, 8);
-
-        // Multiply by alpha.
-        sum = _mm_mullo_epi16(sum, alpha);
-
-        // Divide each 16 bit component by 256.
-        sum = _mm_srli_epi16(sum, 8);
-
-        // Pack lower 4 16 bit values of sum into lower 4 bytes.
-        sum = _mm_packus_epi16(sum, zero);
-
-        // Extract low int and store.
-        *colors++ = _mm_cvtsi128_si32(sum);
-    } while (--count > 0);
-}
-
 static inline uint32_t ClampX_ClampY_pack_filter(SkFixed f, unsigned max,
                                                  SkFixed one) {
     unsigned i = SkClampMax(f >> 16, max);
diff --git a/src/opts/SkBitmapProcState_opts_SSE2.h b/src/opts/SkBitmapProcState_opts_SSE2.h
index 82c5cc8..9e15ade 100644
--- a/src/opts/SkBitmapProcState_opts_SSE2.h
+++ b/src/opts/SkBitmapProcState_opts_SSE2.h
@@ -10,12 +10,6 @@
 
 #include "SkBitmapProcState.h"
 
-void S32_opaque_D32_filter_DX_SSE2(const SkBitmapProcState& s,
-                                   const uint32_t* xy,
-                                   int count, uint32_t* colors);
-void S32_alpha_D32_filter_DX_SSE2(const SkBitmapProcState& s,
-                                  const uint32_t* xy,
-                                  int count, uint32_t* colors);
 void Color32_SSE2(SkPMColor dst[], const SkPMColor src[], int count,
                   SkPMColor color);
 void ClampX_ClampY_filter_scale_SSE2(const SkBitmapProcState& s, uint32_t xy[],
diff --git a/src/opts/opts_check_x86.cpp b/src/opts/opts_check_x86.cpp
index 6af4772..06e5b4c 100644
--- a/src/opts/opts_check_x86.cpp
+++ b/src/opts/opts_check_x86.cpp
@@ -101,18 +101,8 @@ static inline bool supports_simd(int minLevel) {
     } else
 #endif
     {
-#if defined(SK_BUILD_FOR_ANDROID_FRAMEWORK)
-        /* For the Android framework we should always know at compile time if the device
-         * we are building for supports SSSE3.  The one exception to this rule is on the
-         * emulator where we are compiled without the -mssse3 option (so we have no
-         * SSSE3 procs) but can be run on a host machine that supports SSSE3
-         * instructions. So for that particular case we disable our SSSE3 options.
-         */
-        return false;
-#else
         static int gSIMDLevel = get_SIMD_level();
         return (minLevel <= gSIMDLevel);
-#endif
     }
 }
 
@@ -142,8 +132,6 @@ void SkBitmapProcState::platformProcs() {
     if (fSampleProc32 == S32_opaque_D32_filter_DX) {
         if (supports_simd(SK_CPU_SSE_LEVEL_SSSE3)) {
             fSampleProc32 = S32_opaque_D32_filter_DX_SSSE3;
-        } else {
-            fSampleProc32 = S32_opaque_D32_filter_DX_SSE2;
         }
     } else if (fSampleProc32 == S32_opaque_D32_filter_DXDY) {
         if (supports_simd(SK_CPU_SSE_LEVEL_SSSE3)) {
@@ -152,8 +140,6 @@ void SkBitmapProcState::platformProcs() {
     } else if (fSampleProc32 == S32_alpha_D32_filter_DX) {
         if (supports_simd(SK_CPU_SSE_LEVEL_SSSE3)) {
             fSampleProc32 = S32_alpha_D32_filter_DX_SSSE3;
-        } else {
-            fSampleProc32 = S32_alpha_D32_filter_DX_SSE2;
         }
     } else if (fSampleProc32 == S32_alpha_D32_filter_DXDY) {
         if (supports_simd(SK_CPU_SSE_LEVEL_SSSE3)) {
@@ -232,14 +218,11 @@ SkBlitRow::ColorProc SkBlitRow::PlatformColorProc() {
 SkBlitRow::ColorRectProc PlatformColorRectProcFactory(); // suppress warning
 
 SkBlitRow::ColorRectProc PlatformColorRectProcFactory() {
-/* Return NULL for now, since the optimized path in ColorRect32_SSE2 is disabled.
     if (supports_simd(SK_CPU_SSE_LEVEL_SSE2)) {
         return ColorRect32_SSE2;
     } else {
         return NULL;
     }
-*/
-    return NULL;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
-- 
1.7.9.5

