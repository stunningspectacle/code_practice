From 5fc2ae66eab5fb0c493bdd03607ff818a812bea7 Mon Sep 17 00:00:00 2001
From: Henrik Smiding <henrik.smiding@intel.com>
Date: Fri, 5 Sep 2014 12:43:54 +0200
Subject: [PATCH 08/12] Add SSE4 version of BlurImage optimizations

Adds an SSE4.1 version of the existing BlurImage optimizations.
Performance of blur_image_filter_* benchmarks show a 10-50%
improvement on Linux/Ubuntu Core i7.

This patch is a backport from the skia upstream project and
combines the following two patches:
https://codereview.chromium.org/366593004
https://codereview.chromium.org/378613002

Note that this patch should be removed once the patches on
upstream makes their way into AOSP.

Change-Id: I8aec0a70ebd870d0c9c8a744ff2ff0b1e67d9c96
Old-Change-ID: If8e5c687e0c292b04eaa01c1101672e7a3392bea
Ori-Change-ID: I5458a64030708fca43719052371afd0267a73e3a
Orig-Change-Id: Ic594b698ef591df6d3f6e2c3dd4afc15ddd2af59
Category: aosp improvement
Domain: AOSP-Others
Origin: internal
Upstream-Candidate: yes
Tracked-On: https://jira01.devtools.intel.com/browse/CTEAN-1950
Orig-Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-2473
Signed-off-by: Joakim Landberg <joakim.landberg@intel.com>
Old-Reviewed-on: https://android.intel.com:443/374228
Signed-off-by: Xinyun Liu <xinyun.liu@intel.com>
---
 Android.mk                         |    2 +
 src/opts/SkBlurImage_opts_SSE2.cpp |    8 +--
 src/opts/SkBlurImage_opts_SSE4.cpp |  124 ++++++++++++++++++++++++++++++++++++
 src/opts/SkBlurImage_opts_SSE4.h   |   18 ++++++
 src/opts/opts_check_x86.cpp        |   10 ++-
 5 files changed, 153 insertions(+), 9 deletions(-)
 create mode 100644 src/opts/SkBlurImage_opts_SSE4.cpp
 create mode 100644 src/opts/SkBlurImage_opts_SSE4.h

diff --git a/Android.mk b/Android.mk
index 7ac328b..ed2510d 100644
--- a/Android.mk
+++ b/Android.mk
@@ -623,6 +623,7 @@ LOCAL_SRC_FILES_x86 += \
 	src/opts/SkBlitRow_opts_SSE2.cpp \
 	src/opts/SkBlitRect_opts_SSE2.cpp \
 	src/opts/SkBlurImage_opts_SSE2.cpp \
+	src/opts/SkBlurImage_opts_SSE4.cpp \
 	src/opts/SkMorphology_opts_SSE2.cpp \
 	src/opts/SkUtils_opts_SSE2.cpp \
 	src/opts/SkXfermode_opts_SSE2.cpp \
@@ -639,6 +640,7 @@ LOCAL_SRC_FILES_x86_64 += \
 	src/opts/SkBlitRow_opts_SSE2.cpp \
 	src/opts/SkBlitRect_opts_SSE2.cpp \
 	src/opts/SkBlurImage_opts_SSE2.cpp \
+	src/opts/SkBlurImage_opts_SSE4.cpp \
 	src/opts/SkMorphology_opts_SSE2.cpp \
 	src/opts/SkUtils_opts_SSE2.cpp \
 	src/opts/SkXfermode_opts_SSE2.cpp \
diff --git a/src/opts/SkBlurImage_opts_SSE2.cpp b/src/opts/SkBlurImage_opts_SSE2.cpp
index bbc6a66..d2f8882 100644
--- a/src/opts/SkBlurImage_opts_SSE2.cpp
+++ b/src/opts/SkBlurImage_opts_SSE2.cpp
@@ -55,17 +55,13 @@ void SkBoxBlur_SSE2(const SkPMColor* src, int srcStride, SkPMColor* dst, int ker
         const SkPMColor* sptr = src;
         SkColor* dptr = dst;
         for (int x = 0; x < width; ++x) {
-#if 0
-            // In SSE4.1, this would be
-            __m128i result = _mm_mullo_epi32(sum, scale);
-#else
-            // But SSE2 has no PMULLUD, so we must do AG and RB separately.
+            // SSE2 has no PMULLUD, so we must do AG and RB separately.
             __m128i tmp1 = _mm_mul_epu32(sum, scale);
             __m128i tmp2 = _mm_mul_epu32(_mm_srli_si128(sum, 4),
                                          _mm_srli_si128(scale, 4));
             __m128i result = _mm_unpacklo_epi32(_mm_shuffle_epi32(tmp1, _MM_SHUFFLE(0,0,2,0)),
                                                 _mm_shuffle_epi32(tmp2, _MM_SHUFFLE(0,0,2,0)));
-#endif
+
             // sumA*scale+.5 sumB*scale+.5 sumG*scale+.5 sumB*scale+.5
             result = _mm_add_epi32(result, half);
 
diff --git a/src/opts/SkBlurImage_opts_SSE4.cpp b/src/opts/SkBlurImage_opts_SSE4.cpp
new file mode 100644
index 0000000..1b99038
--- /dev/null
+++ b/src/opts/SkBlurImage_opts_SSE4.cpp
@@ -0,0 +1,124 @@
+/*
+ * Copyright 2014 The Android Open Source Project
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#include "SkBitmap.h"
+#include "SkBlurImage_opts_SSE4.h"
+#include "SkColorPriv.h"
+#include "SkRect.h"
+
+/* With the exception of the Android framework we always build the SSE4 functions
+ * and enable the caller to determine SSE4 support.  However, for the Android framework,
+ * if the device does not support SSE4x then the compiler will not supply the required
+ * -msse4* option needed to build this file, so instead we provide a stub implementation.
+ */
+#if !defined(SK_BUILD_FOR_ANDROID_FRAMEWORK) || SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSE41
+
+#include <smmintrin.h>
+
+namespace {
+enum BlurDirection {
+    kX, kY
+};
+
+/* Helper function to spread the components of a 32-bit integer into the
+ * lower 8 bits of each 32-bit element of an SSE register.
+ */
+inline __m128i expand(int a) {
+    const __m128i zero = _mm_setzero_si128();
+
+    // 0 0 0 0   0 0 0 0   0 0 0 0   A R G B
+    __m128i result = _mm_cvtsi32_si128(a);
+
+    // 0 0 0 0   0 0 0 0   0 A 0 R   0 G 0 B
+    result = _mm_unpacklo_epi8(result, zero);
+
+    // 0 0 0 A   0 0 0 R   0 0 0 G   0 0 0 B
+    return _mm_unpacklo_epi16(result, zero);
+}
+
+template<BlurDirection srcDirection, BlurDirection dstDirection>
+void SkBoxBlur_SSE4(const SkPMColor* src, int srcStride, SkPMColor* dst, int kernelSize,
+                    int leftOffset, int rightOffset, int width, int height)
+{
+    const int rightBorder = SkMin32(rightOffset + 1, width);
+    const int srcStrideX = srcDirection == kX ? 1 : srcStride;
+    const int dstStrideX = dstDirection == kX ? 1 : height;
+    const int srcStrideY = srcDirection == kX ? srcStride : 1;
+    const int dstStrideY = dstDirection == kX ? width : 1;
+    const __m128i scale = _mm_set1_epi32((1 << 24) / kernelSize);
+    const __m128i half = _mm_set1_epi32(1 << 23);
+    const __m128i zero = _mm_setzero_si128();
+    for (int y = 0; y < height; ++y) {
+        __m128i sum = zero;
+        const SkPMColor* p = src;
+        for (int i = 0; i < rightBorder; ++i) {
+            sum = _mm_add_epi32(sum, expand(*p));
+            p += srcStrideX;
+        }
+
+        const SkPMColor* sptr = src;
+        SkColor* dptr = dst;
+        for (int x = 0; x < width; ++x) {
+            __m128i result = _mm_mullo_epi32(sum, scale);
+
+            // sumA*scale+.5 sumB*scale+.5 sumG*scale+.5 sumB*scale+.5
+            result = _mm_add_epi32(result, half);
+
+            // 0 0 0 A   0 0 0 R   0 0 0 G   0 0 0 B
+            result = _mm_srli_epi32(result, 24);
+
+            // 0 0 0 0   0 0 0 0   0 A 0 R   0 G 0 B
+            result = _mm_packs_epi32(result, zero);
+
+            // 0 0 0 0   0 0 0 0   0 0 0 0   A R G B
+            result = _mm_packus_epi16(result, zero);
+            *dptr = _mm_cvtsi128_si32(result);
+            if (x >= leftOffset) {
+                SkColor l = *(sptr - leftOffset * srcStrideX);
+                sum = _mm_sub_epi32(sum, expand(l));
+            }
+            if (x + rightOffset + 1 < width) {
+                SkColor r = *(sptr + (rightOffset + 1) * srcStrideX);
+                sum = _mm_add_epi32(sum, expand(r));
+            }
+            sptr += srcStrideX;
+            if (srcDirection == kY) {
+                _mm_prefetch(reinterpret_cast<const char*>(sptr + (rightOffset + 1) * srcStrideX),
+                             _MM_HINT_T0);
+            }
+            dptr += dstStrideX;
+        }
+        src += srcStrideY;
+        dst += dstStrideY;
+    }
+}
+
+} // namespace
+
+bool SkBoxBlurGetPlatformProcs_SSE4(SkBoxBlurProc* boxBlurX,
+                                    SkBoxBlurProc* boxBlurY,
+                                    SkBoxBlurProc* boxBlurXY,
+                                    SkBoxBlurProc* boxBlurYX) {
+    *boxBlurX = SkBoxBlur_SSE4<kX, kX>;
+    *boxBlurY = SkBoxBlur_SSE4<kY, kY>;
+    *boxBlurXY = SkBoxBlur_SSE4<kX, kY>;
+    *boxBlurYX = SkBoxBlur_SSE4<kY, kX>;
+    return true;
+}
+
+#else // !defined(SK_BUILD_FOR_ANDROID_FRAMEWORK) || SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSE41
+
+bool SkBoxBlurGetPlatformProcs_SSE4(SkBoxBlurProc* boxBlurX,
+                                    SkBoxBlurProc* boxBlurY,
+                                    SkBoxBlurProc* boxBlurXY,
+                                    SkBoxBlurProc* boxBlurYX) {
+    sk_throw();
+    return false;
+}
+
+
+#endif
diff --git a/src/opts/SkBlurImage_opts_SSE4.h b/src/opts/SkBlurImage_opts_SSE4.h
new file mode 100644
index 0000000..9f346a9
--- /dev/null
+++ b/src/opts/SkBlurImage_opts_SSE4.h
@@ -0,0 +1,18 @@
+/*
+ * Copyright 2014 The Android Open Source Project
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#ifndef SkBlurImage_opts_SSE4_DEFINED
+#define SkBlurImage_opts_SSE4_DEFINED
+
+#include "SkBlurImage_opts.h"
+
+bool SkBoxBlurGetPlatformProcs_SSE4(SkBoxBlurProc* boxBlurX,
+                                    SkBoxBlurProc* boxBlurY,
+                                    SkBoxBlurProc* boxBlurXY,
+                                    SkBoxBlurProc* boxBlurYX);
+
+#endif
diff --git a/src/opts/opts_check_x86.cpp b/src/opts/opts_check_x86.cpp
index 76d769b..c117519 100644
--- a/src/opts/opts_check_x86.cpp
+++ b/src/opts/opts_check_x86.cpp
@@ -13,6 +13,7 @@
 #include "SkBlitRow.h"
 #include "SkBlitRow_opts_SSE2.h"
 #include "SkBlurImage_opts_SSE2.h"
+#include "SkBlurImage_opts_SSE4.h"
 #include "SkMorphology_opts.h"
 #include "SkMorphology_opts_SSE2.h"
 #include "SkRTConf.h"
@@ -343,10 +344,13 @@ bool SkBoxBlurGetPlatformProcs(SkBoxBlurProc* boxBlurX,
 #ifdef SK_DISABLE_BLUR_DIVISION_OPTIMIZATION
     return false;
 #else
-    if (!supports_simd(SK_CPU_SSE_LEVEL_SSE2)) {
-        return false;
+    if (supports_simd(SK_CPU_SSE_LEVEL_SSE41)) {
+        return SkBoxBlurGetPlatformProcs_SSE4(boxBlurX, boxBlurY, boxBlurXY, boxBlurYX);
+    }
+    else if (supports_simd(SK_CPU_SSE_LEVEL_SSE2)) {
+        return SkBoxBlurGetPlatformProcs_SSE2(boxBlurX, boxBlurY, boxBlurXY, boxBlurYX);
     }
-    return SkBoxBlurGetPlatformProcs_SSE2(boxBlurX, boxBlurY, boxBlurXY, boxBlurYX);
+    return false;
 #endif
 }
 
-- 
1.7.9.5

