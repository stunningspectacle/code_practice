<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Vasudev Ram: Python's dynamic nature: sticking an attribute onto an object</title>
	<guid>http://jugad2.blogspot.com/2019/04/pythons-dynamic-nature-sticking.html</guid>
	<link>http://jugad2.blogspot.com/2019/04/pythons-dynamic-nature-sticking.html</link>
	<description>&lt;hr /&gt;- &lt;a href=&quot;https://jugad2.blogspot.com/p/training.html&quot;&gt;By Vasudev Ram - Online Python training / SQL training / Linux training&lt;/a&gt;&lt;br /&gt;&lt;hr /&gt;&lt;a href=&quot;http://jugad2.blogspot.co.uk/feeds/posts/default/-/python&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Hi, readers,&lt;br /&gt;&lt;br /&gt;[This is a &lt;a href=&quot;https://jugad2.blogspot.com/search/label/python-beginners&quot;&gt;beginner-level Python post&lt;/a&gt;.]&lt;br /&gt;&lt;br /&gt;Python, being a dynamic language, has some interesting features that some static languages may not have (and vice versa too, of course).&lt;br /&gt;&lt;br /&gt;One such feature, which I noticed a while ago, is that you can add an attribute to a Python object even after it has been created. (Conditions apply.) &lt;br /&gt;&lt;br /&gt;I had used this feature some time ago to work around some implementation issue in a rudimentary RESTful server that I created as a small teaching project. It was based on the &lt;b&gt;BaseHTTPServer&lt;/b&gt; module.&lt;br /&gt;&lt;br /&gt;Here is a (different) simple example program, &lt;b&gt;stick_attrs_onto_obj.py&lt;/b&gt;, that demonstrates this Python feature. &lt;br /&gt;My informal term for this feature is &quot;sticking an attribute onto an object&quot; after the object is created.&lt;br /&gt;&lt;br /&gt;Since the program is simple, and there are enough comments in the code, I will not explain it in detail.&lt;br /&gt;&lt;pre&gt;# stick_attrs_onto_obj.py&lt;br /&gt;&lt;br /&gt;# A program to show:&lt;br /&gt;# 1) that you can &quot;stick&quot; attributes onto a Python object after it is created, and&lt;br /&gt;# 2) one use of this technique, to count the number# of calls to a function.&lt;br /&gt;&lt;br /&gt;# Copyright 2019 Vasudev Ram&lt;br /&gt;# Web site: https://vasudevram.github.io&lt;br /&gt;# Blog: https://jugad2.blogspot.com&lt;br /&gt;# Training: https://jugad2.blogspot.com/p/training.html&lt;br /&gt;# Product store: https://gumroad.com/vasudevram&lt;br /&gt;# Twitter: https://twitter.com/vasudevram&lt;br /&gt;&lt;br /&gt;from __future__ import print_function&lt;br /&gt;&lt;br /&gt;# Define a function.&lt;br /&gt;def foo(arg):&lt;br /&gt;    # Print something to show that the function has been called.&lt;br /&gt;    print(&quot;in foo: arg = {}&quot;.format(arg))&lt;br /&gt;    # Increment the &quot;stuck-on&quot; int attribute inside the function.&lt;br /&gt;    foo.call_count += 1&lt;br /&gt;&lt;br /&gt;# A function is also an object in Python.&lt;br /&gt;# So we can add attributes to it, including after it is defined.&lt;br /&gt;# I call this &quot;sticking&quot; an attribute onto the function object.&lt;br /&gt;# The statement below defines the attribute with an initial value, &lt;br /&gt;# which is changeable later, as we will see.&lt;br /&gt;foo.call_count = 0&lt;br /&gt;&lt;br /&gt;# Print its initial value before any calls to the function.&lt;br /&gt;print(&quot;foo.call_count = {}&quot;.format(foo.call_count))&lt;br /&gt;&lt;br /&gt;# Call the function a few times.&lt;br /&gt;for i in range(5):&lt;br /&gt;    foo(i)&lt;br /&gt;&lt;br /&gt;# Print the attribute's value after those calls.&lt;br /&gt;print(&quot;foo.call_count = {}&quot;.format(foo.call_count))&lt;br /&gt;&lt;br /&gt;# Call the function a few more times.&lt;br /&gt;for i in range(3):&lt;br /&gt;    foo(i)&lt;br /&gt;&lt;br /&gt;# Print the attribute's value after those additional calls.&lt;br /&gt;print(&quot;foo.call_count = {}&quot;.format(foo.call_count))&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;And here is the output of the program:&lt;br /&gt;&lt;pre&gt;$ python stick_attrs_onto_obj.py&lt;br /&gt;foo.call_count = 0&lt;br /&gt;in foo: arg = 0&lt;br /&gt;in foo: arg = 1&lt;br /&gt;in foo: arg = 2&lt;br /&gt;in foo: arg = 3&lt;br /&gt;in foo: arg = 4&lt;br /&gt;foo.call_count = 5&lt;br /&gt;in foo: arg = 0&lt;br /&gt;in foo: arg = 1&lt;br /&gt;in foo: arg = 2&lt;br /&gt;foo.call_count = 8&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;There may be other ways to get the call count of a function, including using a profiler, and maybe by using a closure or decorator or other way. But this way is really simple. And as you can see from the code, it is also possible to use it to find the number of calls to the function, between any two points in the program code. For that, we just have to store the call count in a variable at the first point, and subtract that value from the call count at the second point. In the above program, that would be &lt;b&gt;8 - 5 = 3&lt;/b&gt;, which matches the &lt;b&gt;3&lt;/b&gt; that is the number of calls to function &lt;b&gt;foo&lt;/b&gt; made by the 2nd for loop.&lt;br /&gt;&lt;br /&gt;Enjoy.&lt;br /&gt;&lt;hr /&gt;- &lt;a href=&quot;https://vasudevram.github.io/&quot;&gt;Vasudev Ram - Online Python training and consulting&lt;/a&gt;&lt;br /&gt;&lt;hr /&gt;I conduct online courses on &lt;b&gt;Python&lt;/b&gt; programming, &lt;b&gt;Unix / Linux&lt;/b&gt; commands and shell scripting and &lt;b&gt;SQL&lt;/b&gt; programming and &lt;b&gt;database design&lt;/b&gt;, with &lt;b&gt;course material&lt;/b&gt; and &lt;b&gt;personal coaching&lt;/b&gt; sessions.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://jugad2.blogspot.com/p/training.html&quot;&gt;The course details and testimonials are here.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://vasudevram.github.io/contact.html&quot;&gt;Contact me&lt;/a&gt; for details of course content, terms and schedule.&lt;br /&gt;&lt;br /&gt;Try &lt;a href=&quot;https://www.shareasale.com/r.cfm?u=849702&amp;m=52946&amp;b=593723&quot;&gt;FreshBooks&lt;/a&gt;: Create and send professional looking invoices in less than 30 seconds.&lt;br /&gt;&lt;br /&gt;Getting a new web site or blog, and want to help preserve the environment at the same time? Check out &lt;a href=&quot;https://www.greengeeks.com/track/vasudevram&quot;&gt;GreenGeeks.com&lt;/a&gt; web hosting.&lt;br /&gt;&lt;br /&gt;Sell your digital products via &lt;a href=&quot;https://getdpd.com/?afmc=90&quot;&gt;DPD: Digital Publishing for Ebooks and Downloads&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Learning Linux? Hit the ground running with my &lt;a href=&quot;https://gumroad.com/l/vi_quick/&quot;&gt;vi quickstart tutorial&lt;/a&gt;. I wrote it at the request of two Windows system administrator friends who were given additional charge of some Unix systems. They later told me that it helped them to quickly start using vi to edit text files on Unix. Of course, vi/vim is one of the &lt;b&gt;most ubiquitous text editors around&lt;/b&gt;, and works on most other common operating systems and on some uncommon ones too, so the knowledge of how to use it will carry over to those systems too.&lt;br /&gt;&lt;br /&gt;Check out &lt;a href=&quot;https://www.shareasale.com/r.cfm?u=849702&amp;m=41388&amp;b=394686&quot;&gt;WP Engine, powerful WordPress hosting&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Creating online products for sale? &lt;a href=&quot;http://mbsy.co/convertkit/28519854&quot;&gt;Check out ConvertKit&lt;/a&gt;, email marketing for online creators.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://sendmeto.teachable.com/ph6RQ&quot;&gt;Teachable: feature-packed course creation platform&lt;/a&gt;, with unlimited video, courses and students.&lt;br /&gt;&lt;br /&gt;Posts about: &lt;a href=&quot;http://jugad2.blogspot.com/search/label/python&quot;&gt;Python&lt;/a&gt; * &lt;a href=&quot;http://jugad2.blogspot.com/search/label/DLang&quot;&gt;DLang&lt;/a&gt; * &lt;a href=&quot;http://jugad2.blogspot.com/search/label/xtopdf&quot;&gt;xtopdf&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://code.activestate.com/recipes/users/4173351/&quot;&gt;My ActiveState Code recipes&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Follow me on:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feedburner.google.com/fb/a/mailverify?uri=Jugad2-VasudevRamOnSoftwareInnovation&amp;loc=en_US&quot;&gt;My blog jugad2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gumroad.com/vasudevram/follow/&quot;&gt;Gumroad&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/vasudevram?trk=nav_responsive_tab_profile&quot;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://mobile.twitter.com/vasudevram&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;hr /&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;a href=&quot;http://vasudevram.github.io&quot;&gt;Vasudev Ram&lt;/a&gt;
&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 19 Apr 2019 01:48:04 +0000</pubDate>
</item>
<item>
	<title>PyCharm: PyCharm at PyCon 2019: The Big Tent</title>
	<guid>http://feedproxy.google.com/~r/Pycharm/~3/CO7Zvgb4uZk/</guid>
	<link>http://feedproxy.google.com/~r/Pycharm/~3/CO7Zvgb4uZk/</link>
	<description>&lt;p&gt;Last week we announced our “big tent” &lt;a href=&quot;https://us.pycon.org/2019/&quot;&gt;at PyCon 2019&lt;/a&gt; with the blog post &lt;a href=&quot;https://blog.jetbrains.com/pycharm/2019/04/pycharm-hosts-python-creators-at-expanded-pycon-booth/&quot;&gt;PyCharm Hosts Python Content Creators at Expanded PyCon Booth&lt;/a&gt;. Next week we’ll announce more on each individual piece.&lt;/p&gt;
&lt;p&gt;Today, let’s do an overview of the kinds of activities in “the big tent.”&lt;/p&gt;
&lt;h2&gt;Workshops&lt;/h2&gt;
&lt;p&gt;Miguel Grinberg, one of the boothmates, is doing his &lt;a href=&quot;https://us.pycon.org/2019/schedule/presentation/69/&quot;&gt;First Steps in Web Development With Python&lt;/a&gt; tutorial Thursday morning, 9AM to 12:20. He’s fantastic at this and a real icon of PyCon tutorials over the years.&lt;/p&gt;
&lt;p&gt;Thursday afternoon at 3:30 I’m doing &lt;a href=&quot;https://us.pycon.org/2019/schedule/presentation/106/&quot;&gt;42 PyCharm Tips and Tricks&lt;/a&gt; in Room 13. It’s a hands-on workshop with a secret twist which I’ll reveal at the event (and after.) We’ll have some of the PyCharm team with me to help folks in the audience with questions.&lt;/p&gt;
&lt;h2&gt;Reception&lt;/h2&gt;
&lt;p&gt;PyCon’s &lt;a href=&quot;https://us.pycon.org/2019/events/opening-reception/&quot;&gt;opening reception&lt;/a&gt; starts at 5:30PM on the show floor. It’s got food, it’s got drinks, it’s got&amp;#8230;our packed booth with lots of stuff going on. Come meet ten of us from the PyCharm team, along with the Content Creators: Michael Kennedy, Brian Okken, Dan Bader, Miguel Grinberg, Matt Harrison, Anthony Shaw, Luciano Ramalho, Bob Belderbos, Julian Sequeira, and Chris Medina. Perhaps even a FLUFL sighting.&lt;/p&gt;
&lt;p&gt;Some activities in the mini-theater:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6PM Michael and Matt have a special announcement, née an unveiling&lt;/li&gt;
&lt;li&gt;6:30 Brian does some recordings for a special Test&amp;amp;Code podcast episode&lt;/li&gt;
&lt;li&gt;Our videography team will be roaming around cranking out footage&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;PyCharm Stand&lt;/h2&gt;
&lt;p&gt;Come meet the PyCharm team! We’ll have ten of us, most from the core team. We go to events not to do sales but to listen. (Some might say, face the consequences of our decisions.) Want to talk to the main developer of our debugger? She’s there. Ditto for the new Jupyter support, vim emulation, etc.&lt;/p&gt;
&lt;p&gt;Or if you just want to say hi, then please come by, take a picture and tweet it, and get a retweet from us.&lt;/p&gt;
&lt;h2&gt;Content Creators Stands&lt;/h2&gt;
&lt;p&gt;Podcasts, articles, video courses and training, books&amp;#8230;as the previous article mentioned, we have a home for many of the key Python “content creators” to share a presence, use the mini-theater and one-on-one space, and just hang out and have fun.&lt;/p&gt;
&lt;p&gt;There are two stands for them to share in timeslots throughout the conference. We’ll make the schedule available closer to PyCon. But they’ll all be around for the reception.&lt;/p&gt;
&lt;h2&gt;Mini-Theater&lt;/h2&gt;
&lt;p&gt;This is the second big addition this year: booth space for small talks, both scheduled and impromptu, by the PyCharm team, the Content Creators, and even by some others. We’ll announce this in detail later.&lt;/p&gt;
&lt;p&gt;Not just talks&amp;#8230;we’ll announce some special events as well.&lt;/p&gt;
&lt;h2&gt;One-on-Ones&lt;/h2&gt;
&lt;p&gt;“Can you take a look at my project?” We get this a lot at conferences, as well as “I’m really interested in the new Jupyter support”, or “I heard your pytest support is really neat, can you show me?”&lt;/p&gt;
&lt;p&gt;The PyCharm booth will have a dedicated area along with the conference miracle of &lt;em&gt;seating&lt;/em&gt;, where we can work one-on-one. Bring your laptop “into the shop” for diagnosis. Show us some big idea you’ve been working on. Get a tour of some PyCharm feature that interests you, from the person that implemented it.&lt;/p&gt;
&lt;p&gt;This also applies to the Content Creators as well. Saw an article or listened to a podcast and want more? Pick a time to meet up with them in the one-on-one area. Did I mention seating?&lt;/p&gt;
&lt;h2&gt;Videography&lt;/h2&gt;
&lt;p&gt;We have a crew hanging around different times at the booth, doing interviews and producing clips. If you’re around and want to give a shoutout to PyCon for the hard (volunteer!) work putting on a great show, let’s get you on camera.&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/Pycharm/~4/CO7Zvgb4uZk&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Thu, 18 Apr 2019 20:08:40 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: Mozilla Announces Pyodide – Python in the Browser</title>
	<guid>http://www.blog.pythonlibrary.org/2019/04/18/mozilla-announces-pyodide-python-in-the-browser/</guid>
	<link>http://www.blog.pythonlibrary.org/2019/04/18/mozilla-announces-pyodide-python-in-the-browser/</link>
	<description>&lt;div class=&quot;pf-content&quot;&gt;&lt;p&gt;Mozilla &lt;a href=&quot;https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;announced&lt;/a&gt; a new project called &lt;a href=&quot;https://github.com/iodide-project/pyodide/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Pyodide&lt;/a&gt; earlier this week. The aim of Pyodide is to bring Python&amp;#8217;s scientific stack into the browser.&lt;/p&gt;
&lt;p&gt;The Pyodide project will give you a full, standard Python interpreter that runs in your browser and also give you access to the browsers Web APIs. Currently, Pyodide does not support threading or networking sockets. Python is also quite a bit slower to run in the browser, although it is usable for interactive exploration.&lt;/p&gt;
&lt;p&gt;The article mentions other projects, such as &lt;a href=&quot;https://brython.info/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Brython&lt;/a&gt; and &lt;a href=&quot;http://www.skulpt.org/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Skulpt&lt;/a&gt;. These projects are rewrites of Python&amp;#8217;s interpreter in Javascript. Their disadvantage to Pyodide is that they cannot use Python extensions that were written in C, such as Numpy or Pandas. Pyodide overcomes this issue. &lt;/p&gt;
&lt;p&gt;Anyway, this sounds like a really interesting project. I always thought the demos I used to see of Python running in Silverlight in the browser were cool. That project is basically dead at this point, but Pyodide sounds like a really interesting new hack at getting Python into the browser. Hopefully it will go somewhere.&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&quot;a2a_button_facebook&quot; href=&quot;https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F04%2F18%2Fmozilla-announces-pyodide-python-in-the-browser%2F&amp;linkname=Mozilla%20Announces%20Pyodide%20%E2%80%93%20Python%20in%20the%20Browser&quot; title=&quot;Facebook&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_twitter&quot; href=&quot;https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F04%2F18%2Fmozilla-announces-pyodide-python-in-the-browser%2F&amp;linkname=Mozilla%20Announces%20Pyodide%20%E2%80%93%20Python%20in%20the%20Browser&quot; title=&quot;Twitter&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_dd addtoany_share_save addtoany_share&quot; href=&quot;https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F04%2F18%2Fmozilla-announces-pyodide-python-in-the-browser%2F&amp;title=Mozilla%20Announces%20Pyodide%20%E2%80%93%20Python%20in%20the%20Browser&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 18 Apr 2019 20:02:45 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: Creating a GUI Application for NASA’s API with wxPython</title>
	<guid>http://www.blog.pythonlibrary.org/2019/04/18/creating-a-gui-application-for-nasas-api-with-wxpython/</guid>
	<link>http://www.blog.pythonlibrary.org/2019/04/18/creating-a-gui-application-for-nasas-api-with-wxpython/</link>
	<description>&lt;div class=&quot;pf-content&quot;&gt;&lt;p&gt;Growing up, I have always found the universe and space in general to be exciting. It is fun to dream about what worlds remain unexplored. I also enjoy seeing photos from other worlds or thinking about the vastness of space. What does this have to do with Python though? Well, the National Aeronautics and Space Administration (NASA) has a web API that allows you to search their image library. &lt;/p&gt;
&lt;p&gt;You can read all about it on their &lt;a href=&quot;https://api.nasa.gov/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The NASA website recommends getting an &lt;a href=&quot;https://api.nasa.gov/index.html#apply-for-an-api-key&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Application Programming Interface (API) key&lt;/a&gt;. If you go to that website, the form that you will fill out is nice and short.&lt;/p&gt;
&lt;p&gt;Technically, you do not need an API key to make requests against NASA&amp;#8217;s services. However they do have rate limiting in place for developers who access their site without an API key. Even with a key, you are limited to a default of 1000 requests per hour. If you go over your allocation, you will be temporarily blocked from making requests. You can contact NASA to request a higher rate limit though.&lt;/p&gt;
&lt;p&gt;Interestingly, the documentation doesn&amp;#8217;t really say how many requests you can make without an API key.&lt;/p&gt;
&lt;p&gt;The API documentation disagrees with NASA&amp;#8217;s Image API documentation about which endpoints to hit, which makes working with their website a bit confusing. &lt;/p&gt;
&lt;p&gt;For example, you will see the API documentation talking about this URL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://api.nasa.gov/planetary/apod?api_key=API_KEY_GOES_HERE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But in the Image API documentation, the API root is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://images-api.nasa.gov&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the purposes of this tutorial, you will be using the latter.&lt;span id=&quot;more-8315&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://leanpub.com/creatingapplicationswithwxpython/&quot;&gt;&lt;img src=&quot;https://www.blog.pythonlibrary.org/wp-content/uploads/2019/01/creating_wxpython_apps_thumb.jpg&quot; alt=&quot;&quot; width=&quot;227&quot; height=&quot;300&quot; class=&quot;aligncenter size-medium wp-image-8184&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;This article is adapted from my book:&lt;/p&gt;
&lt;h3&gt;Creating GUI Applications with wxPython&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leanpub.com/creatingapplicationswithwxpython/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Purchase now on Leanpub&lt;/a&gt;&lt;/strong&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;h3&gt;Using NASA&amp;#8217;s API&lt;/h3&gt;
&lt;p&gt;When you start out using an unfamiliar API, it is always best to begin by reading the documentation for that interface. Another approach would be to do a quick Internet search and see if there is a Python package that wraps your target API. Unfortunately, there does not seem to be any maintained NASA libraries for Python. When this happens, you get to create your own.&lt;/p&gt;
&lt;p&gt;To get started, try reading the NASA &lt;a href=&quot;https://images.nasa.gov/docs/images.nasa.gov_api_docs.pdf&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Images API document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Their API documentation isn&amp;#8217;t very long, so it shouldn&amp;#8217;t take you very long to read or at least skim it.&lt;/p&gt;
&lt;p&gt;The next step is to take that information and try playing around with their API.&lt;/p&gt;
&lt;p&gt;Here are the first few lines of an experiment at accessing their API:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;# simple_api_request.py&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;import&lt;/span&gt; requests
&amp;nbsp;
&lt;span&gt;from&lt;/span&gt; &lt;span&gt;urllib&lt;/span&gt;.&lt;span&gt;parse&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; urlencode, quote_plus
&amp;nbsp;
&amp;nbsp;
base_url = &lt;span&gt;'https://images-api.nasa.gov/search'&lt;/span&gt;
search_term = &lt;span&gt;'apollo 11'&lt;/span&gt;
desc = &lt;span&gt;'moon landing'&lt;/span&gt;
media = &lt;span&gt;'image'&lt;/span&gt;
query = &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'q'&lt;/span&gt;: search_term, &lt;span&gt;'description'&lt;/span&gt;: desc, &lt;span&gt;'media_type'&lt;/span&gt;: media&lt;span&gt;&amp;#125;&lt;/span&gt;
full_url = base_url + &lt;span&gt;'?'&lt;/span&gt; + urlencode&lt;span&gt;&amp;#40;&lt;/span&gt;query, quote_via=quote_plus&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
r = requests.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;full_url&lt;span&gt;&amp;#41;&lt;/span&gt;
data = r.&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;If you run this in a debugger, you can print out the JSON that is returned.&lt;/p&gt;
&lt;p&gt;Here is a snippet of what was returned:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;'items'&lt;/span&gt;: &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'data'&lt;/span&gt;: 
              &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'center'&lt;/span&gt;: &lt;span&gt;'HQ'&lt;/span&gt;,
                 &lt;span&gt;'date_created'&lt;/span&gt;: &lt;span&gt;'2009-07-18T00:00:00Z'&lt;/span&gt;,
                 &lt;span&gt;'description'&lt;/span&gt;: &lt;span&gt;'On the eve of the '&lt;/span&gt;
                                &lt;span&gt;'fortieth anniversary of '&lt;/span&gt;
                                &lt;span&gt;&amp;quot;Apollo 11's first human &amp;quot;&lt;/span&gt;
                                &lt;span&gt;'landing on the Moon, '&lt;/span&gt;
                                &lt;span&gt;'Apollo 11 crew member, '&lt;/span&gt;
                                &lt;span&gt;'Buzz Aldrin speaks during '&lt;/span&gt;
                                &lt;span&gt;'a lecture in honor of '&lt;/span&gt;
                                &lt;span&gt;'Apollo 11 at the National '&lt;/span&gt;
                                &lt;span&gt;'Air and Space Museum in '&lt;/span&gt;
                                &lt;span&gt;'Washington, Sunday, July '&lt;/span&gt;
                                &lt;span&gt;'19, 2009. Guest speakers '&lt;/span&gt;
                                &lt;span&gt;'included Former NASA '&lt;/span&gt;
                                &lt;span&gt;'Astronaut and U.S. '&lt;/span&gt;
                                &lt;span&gt;'Senator John Glenn, NASA '&lt;/span&gt;
                                &lt;span&gt;'Mission Control creator '&lt;/span&gt;
                                &lt;span&gt;'and former NASA Johnson '&lt;/span&gt;
                                &lt;span&gt;'Space Center director '&lt;/span&gt;
                                &lt;span&gt;'Chris Kraft and the crew '&lt;/span&gt;
                                &lt;span&gt;'of Apollo 11.  Photo '&lt;/span&gt;
                                &lt;span&gt;'Credit: (NASA/Bill '&lt;/span&gt;
                                &lt;span&gt;'Ingalls)'&lt;/span&gt;,
                 &lt;span&gt;'keywords'&lt;/span&gt;: &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'Apollo 11'&lt;/span&gt;,
                              &lt;span&gt;'Apollo 40th Anniversary'&lt;/span&gt;,
                              &lt;span&gt;'Buzz Aldrin'&lt;/span&gt;,
                              &lt;span&gt;'National Air and Space '&lt;/span&gt;
                              &lt;span&gt;'Museum (NASM)'&lt;/span&gt;,
                              &lt;span&gt;'Washington, DC'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;,
                 &lt;span&gt;'location'&lt;/span&gt;: &lt;span&gt;'National Air and Space '&lt;/span&gt;
                             &lt;span&gt;'Museum'&lt;/span&gt;,
                 &lt;span&gt;'media_type'&lt;/span&gt;: &lt;span&gt;'image'&lt;/span&gt;,
                 &lt;span&gt;'nasa_id'&lt;/span&gt;: &lt;span&gt;'200907190008HQ'&lt;/span&gt;,
                 &lt;span&gt;'photographer'&lt;/span&gt;: &lt;span&gt;'NASA/Bill Ingalls'&lt;/span&gt;,
                 &lt;span&gt;'title'&lt;/span&gt;: &lt;span&gt;'Glenn Lecture With Crew of '&lt;/span&gt;
                          &lt;span&gt;'Apollo 11'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;,
       &lt;span&gt;'href'&lt;/span&gt;: &lt;span&gt;'https://images-assets.nasa.gov/image/200907190008HQ/collection.json'&lt;/span&gt;,
       &lt;span&gt;'links'&lt;/span&gt;: &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;: &lt;span&gt;'https://images-assets.nasa.gov/image/200907190008HQ/200907190008HQ~thumb.jpg'&lt;/span&gt;,
                  &lt;span&gt;'rel'&lt;/span&gt;: &lt;span&gt;'preview'&lt;/span&gt;,
                  &lt;span&gt;'render'&lt;/span&gt;: &lt;span&gt;'image'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Now that you know what the format of the JSON is, you can try parsing it a bit. &lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s add the following lines of code to your Python script:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;item = data&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'collection'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'items'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
nasa_id = item&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'data'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'nasa_id'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
asset_url = &lt;span&gt;'https://images-api.nasa.gov/asset/'&lt;/span&gt; + nasa_id
image_request = requests.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;asset_url&lt;span&gt;&amp;#41;&lt;/span&gt;
image_json = image_request.&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
image_urls = &lt;span&gt;&amp;#091;&lt;/span&gt;url&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; url &lt;span&gt;in&lt;/span&gt; image_json&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'collection'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'items'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;image_urls&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This will extract the first item in the list of &lt;strong&gt;items&lt;/strong&gt; from the JSON response. Then you can extract the &lt;strong&gt;nasa_id&lt;/strong&gt;, which is required to get all the images associated with this particular result. Now you can add that &lt;strong&gt;nasa_id&lt;/strong&gt; to a new URL end point and make a new request.&lt;/p&gt;
&lt;p&gt;The request for the image JSON returns this:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'collection'&lt;/span&gt;: &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;: &lt;span&gt;'https://images-api.nasa.gov/asset/200907190008HQ'&lt;/span&gt;,
                &lt;span&gt;'items'&lt;/span&gt;: &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;: &lt;span&gt;'http://images-assets.nasa.gov/image/200907190008HQ/200907190008HQ~orig.tif'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;,
                          &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;: &lt;span&gt;'http://images-assets.nasa.gov/image/200907190008HQ/200907190008HQ~large.jpg'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;,
                          &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;: &lt;span&gt;'http://images-assets.nasa.gov/image/200907190008HQ/200907190008HQ~medium.jpg'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;,
                          &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;: &lt;span&gt;'http://images-assets.nasa.gov/image/200907190008HQ/200907190008HQ~small.jpg'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;,
                          &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;: &lt;span&gt;'http://images-assets.nasa.gov/image/200907190008HQ/200907190008HQ~thumb.jpg'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;,
                          &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;: &lt;span&gt;'http://images-assets.nasa.gov/image/200907190008HQ/metadata.json'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;,
                &lt;span&gt;'version'&lt;/span&gt;: &lt;span&gt;'1.0'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The last two lines in your Python code will extract the URLs from the JSON. Now you have all the pieces you need to write a basic user interface!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Designing the User Interface&lt;/h3&gt;
&lt;p&gt;There are many different ways you could design your image downloading application. You will be doing what is simplest as that is almost always the quickest way to create a prototype. The nice thing about prototyping is that you end up with all the pieces you will need to create a useful application. Then you can take your knowledge and either enhance the prototype or create something new with the knowledge you have gained.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a mockup of what you will be attempting to create:&lt;/p&gt;
&lt;img src=&quot;https://www.blog.pythonlibrary.org/wp-content/uploads/2019/04/mockup-300x242.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;242&quot; class=&quot;size-medium wp-image-8323&quot; /&gt;NASA Image Search Mockup
&lt;p&gt;As you can see, you will want an application with the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A search bar&lt;/li&gt;
&lt;li&gt;A widget to hold the search results&lt;/li&gt;
&lt;li&gt;A way to display an image when a result is chosen&lt;/li&gt;
&lt;li&gt;The ability to download the image&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#8217;s learn how to create this user interface now!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Creating the NASA Search Application&lt;/h3&gt;
&lt;p&gt;Rapid prototyping is an idea in which you will create a small, runnable application as quickly as you can. Rather than spending a lot of time getting all the widgets laid out, let&amp;#8217;s add them from top to bottom in the application. This will give you something to work with more quickly than creating a series of nested sizers will.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start by creating a script called &lt;strong&gt;nasa_search_ui.py&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;# nasa_search_ui.py&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;os&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; requests
&lt;span&gt;import&lt;/span&gt; wx
&amp;nbsp;
&lt;span&gt;from&lt;/span&gt; download_dialog &lt;span&gt;import&lt;/span&gt; DownloadDialog
&lt;span&gt;from&lt;/span&gt; ObjectListView &lt;span&gt;import&lt;/span&gt; ObjectListView, ColumnDefn
&lt;span&gt;from&lt;/span&gt; &lt;span&gt;urllib&lt;/span&gt;.&lt;span&gt;parse&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; urlencode, quote_plus&lt;/pre&gt;
&lt;p&gt;Here you import a few new items that you haven&amp;#8217;t seen as of yet. The first is the &lt;strong&gt;requests&lt;/strong&gt; package. This is a handy package for downloading files and doing things on the Internet with Python. Many developers feel that it is better than Python&amp;#8217;s own urllib. You will need to install it to use it though. You will also need to instal ObjectListView.&lt;/p&gt;
&lt;p&gt;Here is how you can do that with &lt;strong&gt;pip&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;pip install requests ObjectListView&lt;/pre&gt;
&lt;p&gt;The other piece that is new are the imports from &lt;strong&gt;urllib.parse&lt;/strong&gt;. You will be using this module for encoding URL parameters. Lastly, the &lt;strong&gt;DownloadDialog&lt;/strong&gt; is a class for a small dialog that you will be creating for downloading NASA images.&lt;/p&gt;
&lt;p&gt;Since you will be using ObjectListView in this application, you will need a class to represent the objects in that widget:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;class&lt;/span&gt; Result:
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, item&lt;span&gt;&amp;#41;&lt;/span&gt;:
        data = item&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'data'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt; = data&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'title'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;location&lt;/span&gt; = data.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'location'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;nasa_id&lt;/span&gt; = data&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'nasa_id'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;description&lt;/span&gt; = data&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'description'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;photographer&lt;/span&gt; = data.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'photographer'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;date_created&lt;/span&gt; = data&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'date_created'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;item&lt;/span&gt; = item
&amp;nbsp;
        &lt;span&gt;if&lt;/span&gt; item.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'links'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
            &lt;span&gt;try&lt;/span&gt;:
                &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;thumbnail&lt;/span&gt; = item&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'links'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
            &lt;span&gt;except&lt;/span&gt;:
                &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;thumbnail&lt;/span&gt; = &lt;span&gt;''&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;Result&lt;/strong&gt; class is what you will be using to hold that data that makes up each row in your &lt;strong&gt;ObjectListView&lt;/strong&gt;. The &lt;strong&gt;item&lt;/strong&gt; parameter is a portion of JSON that you are receiving from NASA as a response to your query. In this class, you will need to parse out the information you require.&lt;/p&gt;
&lt;p&gt;In this case, you want the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Location of image&lt;/li&gt;
&lt;li&gt;NASA&amp;#8217;s internal ID&lt;/li&gt;
&lt;li&gt;Description of the photo&lt;/li&gt;
&lt;li&gt;The photographer&amp;#8217;s name&lt;/li&gt;
&lt;li&gt;The date the image was created&lt;/li&gt;
&lt;li&gt;The thumbnail URL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these items aren&amp;#8217;t always included in the JSON response, so you will use the dictionary&amp;#8217;s &lt;strong&gt;get()&lt;/strong&gt; method to return an empty string in those cases.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s start working on the UI:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;class&lt;/span&gt; MainPanel&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;Panel&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, parent&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;parent&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results&lt;/span&gt; = &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;max_size&lt;/span&gt; = &lt;span&gt;300&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;paths&lt;/span&gt; = wx.&lt;span&gt;StandardPaths&lt;/span&gt;.&lt;span&gt;Get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        font = wx.&lt;span&gt;Font&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;, wx.&lt;span&gt;SWISS&lt;/span&gt;, wx.&lt;span&gt;NORMAL&lt;/span&gt;, wx.&lt;span&gt;NORMAL&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
        main_sizer = wx.&lt;span&gt;BoxSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;VERTICAL&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;MainPanel&lt;/strong&gt; is where the bulk of your code will be. Here you do some housekeeping and create a &lt;strong&gt;search_results&lt;/strong&gt; to hold a list of &lt;strong&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/strong&gt; objects when the user does a search. You also set the &lt;strong&gt;max_size&lt;/strong&gt; of the thumbnail image, the font to be used, the sizer and you get some StandardPaths as well.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s add the following code to the &lt;strong&gt;__init__()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;txt = &lt;span&gt;'Search for images on NASA'&lt;/span&gt;
label = wx.&lt;span&gt;StaticText&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, label=txt&lt;span&gt;&amp;#41;&lt;/span&gt;
main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;label, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search&lt;/span&gt; = wx.&lt;span&gt;SearchCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;, style=wx.&lt;span&gt;TE_PROCESS_ENTER&lt;/span&gt;, size=&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;, &lt;span&gt;25&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search&lt;/span&gt;.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_SEARCHCTRL_SEARCH_BTN&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_search&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search&lt;/span&gt;.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_TEXT_ENTER&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_search&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;EXPAND&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here you create a header label for the application using &lt;strong&gt;wx.StaticText&lt;/strong&gt;. Then you add a &lt;strong&gt;wx.SearchCtrl&lt;/strong&gt;, which is very similar to a &lt;strong&gt;wx.TextCtrl&lt;/strong&gt; except that it has special buttons built into it. You also bind the search button&amp;#8217;s click event (&lt;strong&gt;EVT_SEARCHCTRL_SEARCH_BTN&lt;/strong&gt;) and &lt;strong&gt;EVT_TEXT_ENTER&lt;/strong&gt; to a search related event handler (&lt;strong&gt;on_search&lt;/strong&gt;). &lt;/p&gt;
&lt;p&gt;The next few lines add the search results widget:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt; = ObjectListView&lt;span&gt;&amp;#40;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;, style=wx.&lt;span&gt;LC_REPORT&lt;/span&gt; | wx.&lt;span&gt;SUNKEN_BORDER&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt;.&lt;span&gt;SetEmptyListMsg&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;No Results Found&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt;.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_LIST_ITEM_SELECTED&lt;/span&gt;,
                             &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_selection&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, wx.&lt;span&gt;EXPAND&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;update_search_results&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This code sets up the &lt;strong&gt;ObjectListView&lt;/strong&gt; in much the same way as some of my other articles use it. You customize the empty message by calling &lt;strong&gt;SetEmptyListMsg()&lt;/strong&gt; and you also bind the widget to &lt;strong&gt;EVT_LIST_ITEM_SELECTED&lt;/strong&gt; so that you do something when the user selects a search result.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s add the rest of the code to the &lt;strong&gt;__init__()&lt;/strong&gt; method:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;main_sizer.&lt;span&gt;AddSpacer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, style=wx.&lt;span&gt;TE_READONLY&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt;.&lt;span&gt;SetFont&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;font&lt;span&gt;&amp;#41;&lt;/span&gt;
main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt;|wx.&lt;span&gt;EXPAND&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
img = wx.&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;, &lt;span&gt;240&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;image_ctrl&lt;/span&gt; = wx.&lt;span&gt;StaticBitmap&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;,
                                  bitmap=wx.&lt;span&gt;Bitmap&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;img&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;image_ctrl&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;CENTER&lt;/span&gt;|wx.&lt;span&gt;ALL&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;
               &lt;span&gt;&amp;#41;&lt;/span&gt;
download_btn = wx.&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, label=&lt;span&gt;'Download Image'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
download_btn.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_BUTTON&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_download&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;download_btn, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt;|wx.&lt;span&gt;CENTER&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;SetSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;main_sizer&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;These final few lines of code add a title text control and an image widget that will update when a result is selected. You also add a download button to allow the user to select which image size they would like to download. NASA usually gives several different versions of the image from thumbnail all the way up to the original TIFF image.&lt;/p&gt;
&lt;p&gt;The first event handler to look at is &lt;strong&gt;on_download()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; on_download&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, event&lt;span&gt;&amp;#41;&lt;/span&gt;:
    selection = &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt;.&lt;span&gt;GetSelectedObject&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; selection:
        with DownloadDialog&lt;span&gt;&amp;#40;&lt;/span&gt;selection&lt;span&gt;&amp;#41;&lt;/span&gt; as dlg:
            dlg.&lt;span&gt;ShowModal&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here you call &lt;strong&gt;GetSelectedObject()&lt;/strong&gt; to get the user&amp;#8217;s selection. If the user hasn&amp;#8217;t selected anything, then this method exits. On the other hand, if the user has selected an item, then you instantiate the &lt;strong&gt;DownloadDialog&lt;/strong&gt; and show it to the user to allow them to download something.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s learn how to do a search:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; on_search&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, event&lt;span&gt;&amp;#41;&lt;/span&gt;:
    search_term = event.&lt;span&gt;GetString&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; search_term:
        query = &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'q'&lt;/span&gt;: search_term, &lt;span&gt;'media_type'&lt;/span&gt;: &lt;span&gt;'image'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;
        full_url = base_url + &lt;span&gt;'?'&lt;/span&gt; + urlencode&lt;span&gt;&amp;#40;&lt;/span&gt;query, quote_via=quote_plus&lt;span&gt;&amp;#41;&lt;/span&gt;
        r = requests.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;full_url&lt;span&gt;&amp;#41;&lt;/span&gt;
        data = r.&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results&lt;/span&gt; = &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt; data&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'collection'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'items'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;:
            &lt;span&gt;if&lt;/span&gt; item.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'data'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;item.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'data'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;:
                data = item&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'data'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; data&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'title'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;.&lt;span&gt;strip&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; == &lt;span&gt;''&lt;/span&gt;:
                    &lt;span&gt;# Skip results with blank titles&lt;/span&gt;
                    &lt;span&gt;continue&lt;/span&gt;
                result = Result&lt;span&gt;&amp;#40;&lt;/span&gt;item&lt;span&gt;&amp;#41;&lt;/span&gt;
                &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results&lt;/span&gt;.&lt;span&gt;append&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;result&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;update_search_results&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;on_search()&lt;/strong&gt; event handler will get the string that the user has entered into the search control or return an empty string. Assuming that the user actually enters something to search for, you use NASA&amp;#8217;s general search query, &lt;strong&gt;q&lt;/strong&gt; and hard code the &lt;strong&gt;media_type&lt;/strong&gt; to &lt;strong&gt;image&lt;/strong&gt;. Then you encode the query into a properly formatted URL and use &lt;strong&gt;requests.get()&lt;/strong&gt; to request a JSON response.&lt;/p&gt;
&lt;p&gt;Next you attempt to loop over the results of the search. Note that is no data is returned, this code will fail and cause an exception to be thrown. But if you do get data, then you will need to parse it to get the bits and pieces you need. &lt;/p&gt;
&lt;p&gt;You will skip items that don&amp;#8217;t have the title field set. Otherwise you will create a Result object and add it to the &lt;strong&gt;search_results&lt;/strong&gt; list. At the end of the method, you tell your UI to update the search results.&lt;/p&gt;
&lt;p&gt;Before we get to that function, you will need to create &lt;strong&gt;on_selection()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; on_selection&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, event&lt;span&gt;&amp;#41;&lt;/span&gt;:
    selection = &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt;.&lt;span&gt;GetSelectedObject&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt;.&lt;span&gt;SetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;f&lt;span&gt;'{selection.title}'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; selection.&lt;span&gt;thumbnail&lt;/span&gt;:
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;update_image&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;selection.&lt;span&gt;thumbnail&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;:
        img = wx.&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;, &lt;span&gt;240&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;image_ctrl&lt;/span&gt;.&lt;span&gt;SetBitmap&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;Bitmap&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;img&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;Refresh&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;Layout&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Once again, you get the selected item, but this time you take that selection and update the title text control with the selection&amp;#8217;s title text. Then you check to see if there is a thumbnail and update that accordingly if there is one. When there is no thumbnail, you set it back to an empty image as you do not want it to keep showing a previously selected image.&lt;/p&gt;
&lt;p&gt;The next method to create is &lt;strong&gt;update_image()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; update_image&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, url&lt;span&gt;&amp;#41;&lt;/span&gt;:
    filename = url.&lt;span&gt;split&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'/'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
    tmp_location = &lt;span&gt;os&lt;/span&gt;.&lt;span&gt;path&lt;/span&gt;.&lt;span&gt;join&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;paths&lt;/span&gt;.&lt;span&gt;GetTempDir&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;, filename&lt;span&gt;&amp;#41;&lt;/span&gt;
    r = requests.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;url&lt;span&gt;&amp;#41;&lt;/span&gt;
    with &lt;span&gt;open&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;tmp_location, &lt;span&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; as thumbnail:
        thumbnail.&lt;span&gt;write&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;r.&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;os&lt;/span&gt;.&lt;span&gt;path&lt;/span&gt;.&lt;span&gt;exists&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;tmp_location&lt;span&gt;&amp;#41;&lt;/span&gt;:
        img = wx.&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;tmp_location, wx.&lt;span&gt;BITMAP_TYPE_ANY&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        W = img.&lt;span&gt;GetWidth&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        H = img.&lt;span&gt;GetHeight&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; W &lt;span&gt;&amp;gt;&lt;/span&gt; H:
            NewW = &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;max_size&lt;/span&gt;
            NewH = &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;max_size&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; H / W
        &lt;span&gt;else&lt;/span&gt;:
            NewH = &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;max_size&lt;/span&gt;
            NewW = &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;max_size&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; W / H
        img = img.&lt;span&gt;Scale&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;NewW,NewH&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;:
        img = wx.&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;, &lt;span&gt;240&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;image_ctrl&lt;/span&gt;.&lt;span&gt;SetBitmap&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;Bitmap&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;img&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;Refresh&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;Layout&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;update_image()&lt;/strong&gt; accepts a URL as its sole argument. It takes this URL and splits off the &lt;strong&gt;filename&lt;/strong&gt;. Then it creates a new download location, which is the computer&amp;#8217;s temp directory. Your code then downloads the image and checks to be sure the file saved correctly. If it did, then the thumbnail is loaded using the &lt;strong&gt;max_size&lt;/strong&gt; that you set; otherwise you set it to use a blank image.&lt;/p&gt;
&lt;p&gt;The last couple of lines &lt;strong&gt;Refresh()&lt;/strong&gt; and &lt;strong&gt;Layout()&lt;/strong&gt; the panel so that the widget appear correctly.&lt;/p&gt;
&lt;p&gt;Finally you need to create the last method:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; update_search_results&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt;.&lt;span&gt;SetColumns&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;
        ColumnDefn&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;, &lt;span&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, &lt;span&gt;250&lt;/span&gt;, &lt;span&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
        ColumnDefn&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Description&amp;quot;&lt;/span&gt;, &lt;span&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, &lt;span&gt;350&lt;/span&gt;, &lt;span&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
        ColumnDefn&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Photographer&amp;quot;&lt;/span&gt;, &lt;span&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;&amp;quot;photographer&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
        ColumnDefn&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Date Created&amp;quot;&lt;/span&gt;, &lt;span&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, &lt;span&gt;150&lt;/span&gt;, &lt;span&gt;&amp;quot;date_created&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt;.&lt;span&gt;SetObjects&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here you create the frame, set the title and initial size and add the panel. Then you show the frame. &lt;/p&gt;
&lt;p&gt;This is what the main UI will look like:&lt;/p&gt;
&lt;img src=&quot;https://www.blog.pythonlibrary.org/wp-content/uploads/2019/04/nasa_search-300x197.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;197&quot; class=&quot;size-medium wp-image-8326&quot; /&gt;NASA Image Search Main App
&lt;p&gt;Now let&amp;#8217;s learn what goes into making a download dialog!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The Download Dialog&lt;/h3&gt;
&lt;p&gt;The download dialog will allow the user to download one or more of the images that they have selected. There are almost always at least two versions of every image and sometimes five or six.&lt;/p&gt;
&lt;p&gt;The first piece of code to learn about is the first few lines:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;# download_dialog.py&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;import&lt;/span&gt; requests
&lt;span&gt;import&lt;/span&gt; wx
&amp;nbsp;
wildcard = &lt;span&gt;&amp;quot;All files (*.*)|*.*&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here you once again import &lt;strong&gt;requests&lt;/strong&gt; and set up a &lt;strong&gt;wildcard&lt;/strong&gt; that you will use when saving the images.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s create the dialog&amp;#8217;s &lt;strong&gt;__init__()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;class&lt;/span&gt; DownloadDialog&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;Dialog&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, selection&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;None&lt;/span&gt;, title=&lt;span&gt;'Download images'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;paths&lt;/span&gt; = wx.&lt;span&gt;StandardPaths&lt;/span&gt;.&lt;span&gt;Get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        main_sizer = wx.&lt;span&gt;BoxSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;VERTICAL&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;list_box&lt;/span&gt; = wx.&lt;span&gt;ListBox&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, choices=&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;, size=wx.&lt;span&gt;DefaultSize&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        urls = &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;get_image_urls&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;selection&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; urls:
            choices = &lt;span&gt;&amp;#123;&lt;/span&gt;url.&lt;span&gt;split&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'/'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;: url &lt;span&gt;for&lt;/span&gt; url &lt;span&gt;in&lt;/span&gt; urls &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'jpg'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; url&lt;span&gt;&amp;#125;&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; choice &lt;span&gt;in&lt;/span&gt; choices:
                &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;list_box&lt;/span&gt;.&lt;span&gt;Append&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;choice, choices&lt;span&gt;&amp;#091;&lt;/span&gt;choice&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;list_box&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, wx.&lt;span&gt;EXPAND&lt;/span&gt;|wx.&lt;span&gt;ALL&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
        save_btn = wx.&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, label=&lt;span&gt;'Save'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        save_btn.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_BUTTON&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_save&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;save_btn, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt;|wx.&lt;span&gt;CENTER&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;SetSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;main_sizer&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In this example, you create a new reference to &lt;strong&gt;StandardPaths&lt;/strong&gt; and add a &lt;strong&gt;wx.ListBox&lt;/strong&gt;. The list box will hold the variants of the photos that you can download. It will also automatically add a scrollbar should there be too many results to fit on-screen at once. You call &lt;strong&gt;get_image_urls&lt;/strong&gt; with the passed in &lt;strong&gt;selection&lt;/strong&gt; object to get a list of &lt;strong&gt;urls&lt;/strong&gt;. Then you loop over the &lt;strong&gt;urls&lt;/strong&gt; and extract the ones that have &lt;strong&gt;jpg&lt;/strong&gt; in their name. This does result in you missing out on alternate image files types, such as PNG or TIFF. &lt;/p&gt;
&lt;p&gt;This gives you an opportunity to enhance this code and improve it. The reason that you are filtering the URLs is that the results usually have non-image URLs in the mix and you probably don&amp;#8217;t want to show those as potentially downloadable as that would be confusing to the user.&lt;/p&gt;
&lt;p&gt;The last widget to be added is the &amp;#8220;Save&amp;#8221; button. You could add a &amp;#8220;Cancel&amp;#8221; button as well, but the dialog has an exit button along the top that works, so it&amp;#8217;s not required.&lt;/p&gt;
&lt;p&gt;Now it&amp;#8217;s time to learn what &lt;strong&gt;get_image_urls()&lt;/strong&gt; does:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; get_image_urls&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, item&lt;span&gt;&amp;#41;&lt;/span&gt;:
    asset_url = f&lt;span&gt;'https://images-api.nasa.gov/asset/{item.nasa_id}'&lt;/span&gt;
    image_request = requests.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;asset_url&lt;span&gt;&amp;#41;&lt;/span&gt;
    image_json = image_request.&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;:
        image_urls = &lt;span&gt;&amp;#091;&lt;/span&gt;url&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; url &lt;span&gt;in&lt;/span&gt; image_json&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'collection'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'items'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;:
        image_urls = &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; image_urls&lt;/pre&gt;
&lt;p&gt;This event handler is activated when the user presses the &amp;#8220;Save&amp;#8221; button. When the user tries to save something without selecting an item in the list box, it will return -1. Should that happen, you show them a &lt;strong&gt;MessageDialog&lt;/strong&gt; to tell them that they might want to select something. When they do select something, you will show them a &lt;strong&gt;wx.FileDialog&lt;/strong&gt; that allows them to choose where to save the file and what to call it.&lt;/p&gt;
&lt;p&gt;The event handler calls the &lt;strong&gt;save()&lt;/strong&gt; method, so that is your next project:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; save&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, path&lt;span&gt;&amp;#41;&lt;/span&gt;:
    selection = &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;list_box&lt;/span&gt;.&lt;span&gt;GetSelection&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    r = requests.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;list_box&lt;/span&gt;.&lt;span&gt;GetClientData&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;selection&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;:
        with &lt;span&gt;open&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;path, &lt;span&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; as image:
            image.&lt;span&gt;write&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;r.&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
        message = &lt;span&gt;'File saved successfully'&lt;/span&gt;
        with wx.&lt;span&gt;MessageDialog&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;None&lt;/span&gt;, message=message,
                              caption=&lt;span&gt;'Save Successful'&lt;/span&gt;,
                              style=wx.&lt;span&gt;ICON_INFORMATION&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; as dlg:
            dlg.&lt;span&gt;ShowModal&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;:
        message = &lt;span&gt;'File failed to save!'&lt;/span&gt;
        with wx.&lt;span&gt;MessageDialog&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;None&lt;/span&gt;, message=message,
                              caption=&lt;span&gt;'Save Failed'&lt;/span&gt;,
                              style=wx.&lt;span&gt;ICON_ERROR&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; as dlg:
            dlg.&lt;span&gt;ShowModal&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here you get the selection again and use the &lt;strong&gt;requests&lt;/strong&gt; package to download the image. Note that there is no check to make sure that the user has added an extension, let along the right extension. You can add that yourself when you get a chance. &lt;/p&gt;
&lt;p&gt;Anyway, when the file is finished downloading, you will show the user a message letting them know.&lt;/p&gt;
&lt;p&gt;If an exception occurs, you can show them a dialog that let&amp;#8217;s them know that too!&lt;/p&gt;
&lt;p&gt;Here is what the download dialog looks like:&lt;/p&gt;
&lt;img src=&quot;https://www.blog.pythonlibrary.org/wp-content/uploads/2019/04/download_dlg-300x188.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;188&quot; class=&quot;size-medium wp-image-8328&quot; /&gt;NASA Image Download Dialog
&lt;p&gt;Now let&amp;#8217;s add some new functionality!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Adding Advanced Search&lt;/h3&gt;
&lt;p&gt;There are several fields that you can use to help narrow your search. However you don&amp;#8217;t want to clutter your user interface with them unless the user really wants to use those filters. To allow for that, you can add an &amp;#8220;Advanced Search&amp;#8221; option. &lt;/p&gt;
&lt;p&gt;Adding this option requires you to rearrange your code a bit, so let&amp;#8217;s copy your &lt;strong&gt;nasa_search_ui.py&lt;/strong&gt; file and your &lt;strong&gt;download_dialog.py&lt;/strong&gt; module to a new folder called &lt;strong&gt;version_2&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Now rename &lt;strong&gt;nasa_search_ui.py&lt;/strong&gt; to &lt;strong&gt;main.py&lt;/strong&gt; to make it more obvious which script is the main entry point for your program. To make things more modular, you will be extracting your search results into its own class and have the advanced search in a separate class. This means that you will have three panels in the end:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main panel&lt;/li&gt;
&lt;li&gt;The search results panel&lt;/li&gt;
&lt;li&gt;The advanced search panel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is what the main dialog will look like when you are finished:&lt;/p&gt;
&lt;img src=&quot;https://www.blog.pythonlibrary.org/wp-content/uploads/2019/04/adv_search-300x208.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;208&quot; class=&quot;size-medium wp-image-8329&quot; /&gt;NASA Image Search with Advanced Search Option
&lt;p&gt;Let&amp;#8217;s go over each of these separately.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The main.py Script&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;main&lt;/strong&gt; module is your primary entry point for your application. An entry point is the code that your user will run to launch your application. It is also the script that you would use if you were to bundle up your application into an executable.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take a look at how your &lt;strong&gt;main&lt;/strong&gt; module starts out:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;# main.py&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;import&lt;/span&gt; wx
&amp;nbsp;
&lt;span&gt;from&lt;/span&gt; advanced_search &lt;span&gt;import&lt;/span&gt; RegularSearch
&lt;span&gt;from&lt;/span&gt; regular_search &lt;span&gt;import&lt;/span&gt; SearchResults
&lt;span&gt;from&lt;/span&gt; pubsub &lt;span&gt;import&lt;/span&gt; pub
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;class&lt;/span&gt; MainPanel&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;Panel&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, parent&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;parent&lt;span&gt;&amp;#41;&lt;/span&gt;
        pub.&lt;span&gt;subscribe&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;update_ui&lt;/span&gt;, &lt;span&gt;'update_ui'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt; = wx.&lt;span&gt;BoxSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;VERTICAL&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        search_sizer = wx.&lt;span&gt;BoxSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This example imports both of your search-related panels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AdvancedSearch &lt;/li&gt;
&lt;li&gt;RegularSearch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It also uses &lt;strong&gt;pubsub&lt;/strong&gt; to subscribe to an update topic.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s find out what else is in the &lt;strong&gt;__init__()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;txt = &lt;span&gt;'Search for images on NASA'&lt;/span&gt;
label = wx.&lt;span&gt;StaticText&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, label=txt&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt;.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;label, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search&lt;/span&gt; = wx.&lt;span&gt;SearchCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;, style=wx.&lt;span&gt;TE_PROCESS_ENTER&lt;/span&gt;, size=&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;, &lt;span&gt;25&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search&lt;/span&gt;.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_SEARCHCTRL_SEARCH_BTN&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_search&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search&lt;/span&gt;.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_TEXT_ENTER&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_search&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
search_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, wx.&lt;span&gt;EXPAND&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;advanced_search_btn&lt;/span&gt; = wx.&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, label=&lt;span&gt;'Advanced Search'&lt;/span&gt;,
                            size=&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;, &lt;span&gt;25&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;advanced_search_btn&lt;/span&gt;.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_BUTTON&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_advanced_search&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
search_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;advanced_search_btn&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt;.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;search_sizer, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;EXPAND&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here you add the title for the page along with the search control widget as you did before. You also add the new &lt;strong&gt;Advanced Search&lt;/strong&gt; button and use a new sizer to contain the search widget and the button. You then add that sizer to your main sizer.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s add the panels:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_panel&lt;/span&gt; = RegularSearch&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;advanced_search_panel&lt;/span&gt; = AdvancedSearch&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;advanced_search_panel&lt;/span&gt;.&lt;span&gt;Hide&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt;.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_panel&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, wx.&lt;span&gt;EXPAND&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt;.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;advanced_search_panel&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, wx.&lt;span&gt;EXPAND&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In this example, you instantiate the &lt;strong&gt;RegularSearch&lt;/strong&gt; and the &lt;strong&gt;AdvancedSearch&lt;/strong&gt; panels. Since the &lt;strong&gt;RegularSearch&lt;/strong&gt; is the default, you hide the AdvancedSearch from the user on startup.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s update &lt;strong&gt;on_search()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; on_search&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, event&lt;span&gt;&amp;#41;&lt;/span&gt;:
    search_results = &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
    search_term = event.&lt;span&gt;GetString&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; search_term:
        query = &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'q'&lt;/span&gt;: search_term, &lt;span&gt;'media_type'&lt;/span&gt;: &lt;span&gt;'image'&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;
        pub.&lt;span&gt;sendMessage&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'search_results'&lt;/span&gt;, query=query&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;on_search()&lt;/strong&gt; method will get called when the user presses &amp;#8220;Enter / Return&amp;#8221; on their keyboard or when they press the search button icon in the search control widget. If the user has entered a search string into the search control, a search query will be constructed and then sent off using &lt;strong&gt;pubsub&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s find out what happens when the user presses the &lt;strong&gt;Advanced Search&lt;/strong&gt; button:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; on_advanced_search&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, event&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search&lt;/span&gt;.&lt;span&gt;Hide&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_panel&lt;/span&gt;.&lt;span&gt;Hide&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;advanced_search_btn&lt;/span&gt;.&lt;span&gt;Hide&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;advanced_search_panel&lt;/span&gt;.&lt;span&gt;Show&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt;.&lt;span&gt;Layout&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;strong&gt;on_advanced_search()&lt;/strong&gt; fires, it hides the search widget, the regular search panel and the advanced search button. Next, it shows the advanced search panel and calls &lt;strong&gt;Layout()&lt;/strong&gt; on the &lt;strong&gt;main_sizer&lt;/strong&gt;. This will cause the panels to switch out and resize to fit properly within the frame.&lt;/p&gt;
&lt;p&gt;The last method to create is &lt;strong&gt;update_ui()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; update_ui&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
    Hide advanced search and re-show original screen
&amp;nbsp;
    Called by pubsub when advanced search is invoked
    &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;advanced_search_panel&lt;/span&gt;.&lt;span&gt;Hide&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search&lt;/span&gt;.&lt;span&gt;Show&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_panel&lt;/span&gt;.&lt;span&gt;Show&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;advanced_search_btn&lt;/span&gt;.&lt;span&gt;Show&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt;.&lt;span&gt;Layout&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;update_ui()&lt;/strong&gt; method is called when the user does an &lt;strong&gt;Advanced Search&lt;/strong&gt;. This method is invoked by &lt;strong&gt;pubsub&lt;/strong&gt;. It will do the reverse of &lt;strong&gt;on_advanced_search()&lt;/strong&gt; and un-hide all the widgets that were hidden when the advanced search panel was shown. It will also hide the advanced search panel.&lt;/p&gt;
&lt;p&gt;The frame code is the same as it was before, so it is not shown here.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s move on and learn how the regular search panel is created!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The regular_search.py Script&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;regular_search&lt;/strong&gt; module is your refactored module that contains the &lt;strong&gt;ObjectListView&lt;/strong&gt; that will show your search results. It also has the &lt;strong&gt;Download&lt;/strong&gt; button on it.&lt;/p&gt;
&lt;p&gt;The following methods / classes will not be covered as they are the same as in the previous iteration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on_download()&lt;/li&gt;
&lt;li&gt;on_selection()&lt;/li&gt;
&lt;li&gt;update_image()&lt;/li&gt;
&lt;li&gt;update_search_results()&lt;/li&gt;
&lt;li&gt;The Result class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#8217;s get started by seeing how the first few lines in the module are laid out:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;# regular_search.py&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;os&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; requests
&lt;span&gt;import&lt;/span&gt; wx
&amp;nbsp;
&lt;span&gt;from&lt;/span&gt; download_dialog &lt;span&gt;import&lt;/span&gt; DownloadDialog
&lt;span&gt;from&lt;/span&gt; ObjectListView &lt;span&gt;import&lt;/span&gt; ObjectListView, ColumnDefn
&lt;span&gt;from&lt;/span&gt; pubsub &lt;span&gt;import&lt;/span&gt; pub
&lt;span&gt;from&lt;/span&gt; &lt;span&gt;urllib&lt;/span&gt;.&lt;span&gt;parse&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; urlencode, quote_plus
&amp;nbsp;
base_url = &lt;span&gt;'https://images-api.nasa.gov/search'&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here you have all the imports you had in the original &lt;strong&gt;nasa_search_ui.py&lt;/strong&gt; script from &lt;strong&gt;version_1&lt;/strong&gt;. You also have the &lt;strong&gt;base_url&lt;/strong&gt; that you need to make requests to NASA&amp;#8217;s image API. The only new import is for &lt;strong&gt;pubsub&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s go ahead and create the &lt;strong&gt;RegularSearch&lt;/strong&gt; class:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;class&lt;/span&gt; RegularSearch&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;Panel&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, parent&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;parent&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results&lt;/span&gt; = &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;max_size&lt;/span&gt; = &lt;span&gt;300&lt;/span&gt;
        font = wx.&lt;span&gt;Font&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;, wx.&lt;span&gt;SWISS&lt;/span&gt;, wx.&lt;span&gt;NORMAL&lt;/span&gt;, wx.&lt;span&gt;NORMAL&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        main_sizer = wx.&lt;span&gt;BoxSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;VERTICAL&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;paths&lt;/span&gt; = wx.&lt;span&gt;StandardPaths&lt;/span&gt;.&lt;span&gt;Get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        pub.&lt;span&gt;subscribe&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;load_search_results&lt;/span&gt;, &lt;span&gt;'search_results'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt; = ObjectListView&lt;span&gt;&amp;#40;&lt;/span&gt;
            &lt;span&gt;self&lt;/span&gt;, style=wx.&lt;span&gt;LC_REPORT&lt;/span&gt; | wx.&lt;span&gt;SUNKEN_BORDER&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt;.&lt;span&gt;SetEmptyListMsg&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;No Results Found&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt;.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_LIST_ITEM_SELECTED&lt;/span&gt;,
                                     &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_selection&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results_olv&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, wx.&lt;span&gt;EXPAND&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;update_search_results&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This code will initialize the &lt;strong&gt;search_results&lt;/strong&gt; list to an empty list and set the &lt;strong&gt;max_size&lt;/strong&gt; of the image. It also sets up a sizer and the &lt;strong&gt;ObjectListView&lt;/strong&gt; widget that you use for displaying the search results to the user. The code is actually quite similar to the first iteration of the code when all the classes were combined.&lt;/p&gt;
&lt;p&gt;Here is the rest of the code for the &lt;strong&gt;__init__()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;main_sizer.&lt;span&gt;AddSpacer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, style=wx.&lt;span&gt;TE_READONLY&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt;.&lt;span&gt;SetFont&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;font&lt;span&gt;&amp;#41;&lt;/span&gt;
main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt;|wx.&lt;span&gt;EXPAND&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
img = wx.&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;, &lt;span&gt;240&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;image_ctrl&lt;/span&gt; = wx.&lt;span&gt;StaticBitmap&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;,
                                  bitmap=wx.&lt;span&gt;Bitmap&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;img&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;image_ctrl&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;CENTER&lt;/span&gt;|wx.&lt;span&gt;ALL&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;
               &lt;span&gt;&amp;#41;&lt;/span&gt;
download_btn = wx.&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, label=&lt;span&gt;'Download Image'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
download_btn.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_BUTTON&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_download&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
main_sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;download_btn, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt;|wx.&lt;span&gt;CENTER&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;SetSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;main_sizer&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The first item here is to add a spacer to the &lt;strong&gt;main_sizer&lt;/strong&gt;. Then you add the &lt;strong&gt;title&lt;/strong&gt; and the &lt;strong&gt;img&lt;/strong&gt; related widgets. The last widget to be added is still the download button.&lt;/p&gt;
&lt;p&gt;Next, you will need to write a new method:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; reset_image&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    img = wx.&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;, &lt;span&gt;240&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;image_ctrl&lt;/span&gt;.&lt;span&gt;SetBitmap&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;Bitmap&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;img&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;Refresh&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;reset_image()&lt;/strong&gt; method is for resetting the &lt;strong&gt;wx.StaticBitmap&lt;/strong&gt; back to an empty image. This can happen when the user uses the regular search first, selects an item and then decides to do an advanced search. Resetting the image prevents the user from seeing a previously selected item and potentially confusing the user.&lt;/p&gt;
&lt;p&gt;The last method you need to add is &lt;strong&gt;load_search_results()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; load_search_results&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, query&lt;span&gt;&amp;#41;&lt;/span&gt;:
    full_url = base_url + &lt;span&gt;'?'&lt;/span&gt; + urlencode&lt;span&gt;&amp;#40;&lt;/span&gt;query, quote_via=quote_plus&lt;span&gt;&amp;#41;&lt;/span&gt;
    r = requests.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;full_url&lt;span&gt;&amp;#41;&lt;/span&gt;
    data = r.&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results&lt;/span&gt; = &lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt; data&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'collection'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'items'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;:
        &lt;span&gt;if&lt;/span&gt; item.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'data'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;item.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'data'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;:
            data = item&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'data'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; data&lt;span&gt;&amp;#091;&lt;/span&gt;&lt;span&gt;'title'&lt;/span&gt;&lt;span&gt;&amp;#093;&lt;/span&gt;.&lt;span&gt;strip&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; == &lt;span&gt;''&lt;/span&gt;:
                &lt;span&gt;# Skip results with blank titles&lt;/span&gt;
                &lt;span&gt;continue&lt;/span&gt;
            result = Result&lt;span&gt;&amp;#40;&lt;/span&gt;item&lt;span&gt;&amp;#41;&lt;/span&gt;
            &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;search_results&lt;/span&gt;.&lt;span&gt;append&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;result&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;update_search_results&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;reset_image&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;load_search_results()&lt;/strong&gt; method is called using &lt;strong&gt;pubsub&lt;/strong&gt;. Both the &lt;strong&gt;main&lt;/strong&gt; and the &lt;strong&gt;advanced_search&lt;/strong&gt; modules call it by passing in a query dictionary. Then you encode that dictionary into a formatted URL. Next you use &lt;strong&gt;requests&lt;/strong&gt; to send a JSON request and you then extract the results. This is also where you call &lt;strong&gt;reset_image()&lt;/strong&gt; so that when a new  set of results loads, there is no result selected.&lt;/p&gt;
&lt;p&gt;Now you are ready to create an advanced search!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The advanced_search.py Script&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;advanced_search&lt;/strong&gt; module is a &lt;strong&gt;wx.Panel&lt;/strong&gt; that has all the widgets you need to do an advanced search against NASA&amp;#8217;s API. If you read their documentation, you will find that there are around a dozen filters that can be applied to a search. &lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start at the top:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;class&lt;/span&gt; AdvancedSearch&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;Panel&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, parent&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;parent&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt; = wx.&lt;span&gt;BoxSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;VERTICAL&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;free_text&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;ui_helper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Free text search:'&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;free_text&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;nasa_center&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;ui_helper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'NASA Center:'&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;nasa_center&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;description&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;ui_helper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Description:'&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;description_508&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;ui_helper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Description 508:'&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;description_508&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;keywords&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;ui_helper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Keywords (separate with commas):'&lt;/span&gt;,
                       &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;keywords&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The code to set up the various filters is all pretty similar. You create a text control for the filter, then you pass it into &lt;strong&gt;ui_helper()&lt;/strong&gt; along with a string that is a label for the text control widget. Repeat until you have all the filters in place.&lt;/p&gt;
&lt;p&gt;Here are the rest of the filters:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;location&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;ui_helper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Location:'&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;nasa_id&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;ui_helper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'NASA ID:'&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;nasa_id&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;photographer&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;ui_helper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Photographer:'&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;photographer&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;secondary_creator&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;ui_helper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Secondary photographer:'&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;secondary_creator&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt; = wx.&lt;span&gt;TextCtrl&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;ui_helper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Title:'&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
search = wx.&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, label=&lt;span&gt;'Search'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
search.&lt;span&gt;Bind&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;wx.&lt;span&gt;EVT_BUTTON&lt;/span&gt;, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;on_search&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt;.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;search, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt; | wx.&lt;span&gt;CENTER&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;SetSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;At the end, you set the sizer to the &lt;strong&gt;main_sizer&lt;/strong&gt;. Note that not all the filters that are in NASA&amp;#8217;s API are implemented in this code. For example, I didn&amp;#8217;t add &lt;strong&gt;media_type&lt;/strong&gt; because this application will be hard-coded to only look for images. However if you wanted audio or video, you could update this application for that. I also didn&amp;#8217;t include the &lt;strong&gt;year_start&lt;/strong&gt; and &lt;strong&gt;year_end&lt;/strong&gt; filters. Feel free to add those if you wish.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s move on and create the &lt;strong&gt;ui_helper()&lt;/strong&gt; method:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; ui_helper&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, label, textctrl&lt;span&gt;&amp;#41;&lt;/span&gt;:
    sizer = wx.&lt;span&gt;BoxSizer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    lbl = wx.&lt;span&gt;StaticText&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, label=label, size=&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;, &lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;lbl, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    sizer.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;textctrl, &lt;span&gt;1&lt;/span&gt;, wx.&lt;span&gt;ALL&lt;/span&gt; | wx.&lt;span&gt;EXPAND&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;main_sizer&lt;/span&gt;.&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;sizer, &lt;span&gt;0&lt;/span&gt;, wx.&lt;span&gt;EXPAND&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;ui_helper()&lt;/strong&gt; takes in label text and the text control widget. It then creates a &lt;strong&gt;wx.BoxSizer&lt;/strong&gt; and a &lt;strong&gt;wx.StaticText&lt;/strong&gt;. The &lt;strong&gt;wx.StaticText&lt;/strong&gt; is added to the sizer, as is the passed-in text control widget. Finally the new sizer is added to the &lt;strong&gt;main_sizer&lt;/strong&gt; and then you&amp;#8217;re done. This is a nice way to reduce repeated code.&lt;/p&gt;
&lt;p&gt;The last item to create in this class is &lt;strong&gt;on_search()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; on_search&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, event&lt;span&gt;&amp;#41;&lt;/span&gt;:
    query = &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'q'&lt;/span&gt;: &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;free_text&lt;/span&gt;.&lt;span&gt;GetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
             &lt;span&gt;'media_type'&lt;/span&gt;: &lt;span&gt;'image'&lt;/span&gt;,
             &lt;span&gt;'center'&lt;/span&gt;: &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;nasa_center&lt;/span&gt;.&lt;span&gt;GetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
             &lt;span&gt;'description'&lt;/span&gt;: &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;description&lt;/span&gt;.&lt;span&gt;GetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
             &lt;span&gt;'description_508'&lt;/span&gt;: &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;description_508&lt;/span&gt;.&lt;span&gt;GetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
             &lt;span&gt;'keywords'&lt;/span&gt;: &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;keywords&lt;/span&gt;.&lt;span&gt;GetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
             &lt;span&gt;'location'&lt;/span&gt;: &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;location&lt;/span&gt;.&lt;span&gt;GetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
             &lt;span&gt;'nasa_id'&lt;/span&gt;: &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;nasa_id&lt;/span&gt;.&lt;span&gt;GetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
             &lt;span&gt;'photographer'&lt;/span&gt;: &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;photographer&lt;/span&gt;.&lt;span&gt;GetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
             &lt;span&gt;'secondary_creator'&lt;/span&gt;: &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;secondary_creator&lt;/span&gt;.&lt;span&gt;GetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;,
             &lt;span&gt;'title'&lt;/span&gt;: &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;title&lt;/span&gt;.&lt;span&gt;GetValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;
    pub.&lt;span&gt;sendMessage&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'update_ui'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    pub.&lt;span&gt;sendMessage&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'search_results'&lt;/span&gt;, query=query&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;When the user presses the &lt;strong&gt;Search&lt;/strong&gt; button, this event handler gets called. It creates the search query based on what the user has entered into each of the fields. Then the handler will send out two messages using &lt;strong&gt;pubsub&lt;/strong&gt;. The first message will update the UI so that the advanced search is hidden and the search results are shown. The second message will actually execute the search against NASA&amp;#8217;s API.&lt;/p&gt;
&lt;p&gt;Here is what the advanced search page looks like:&lt;/p&gt;
&lt;img src=&quot;https://www.blog.pythonlibrary.org/wp-content/uploads/2019/04/adv_search-1-300x208.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;208&quot; class=&quot;size-medium wp-image-8350&quot; /&gt;NASA Image Search with Advanced Search Page
&lt;p&gt;Now let&amp;#8217;s update the download dialog.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The download_dialog.py Script&lt;/h3&gt;
&lt;p&gt;The download dialog has a couple of minimal changes to it. Basically you need to add an import of Python&amp;#8217;s &lt;strong&gt;os&lt;/strong&gt; module and then update the &lt;strong&gt;save()&lt;/strong&gt; function.&lt;/p&gt;
&lt;p&gt;Add the following lines to the beginning of the function:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; save&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, path&lt;span&gt;&amp;#41;&lt;/span&gt;:
    _, ext = &lt;span&gt;os&lt;/span&gt;.&lt;span&gt;path&lt;/span&gt;.&lt;span&gt;splitext&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;path&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; ext.&lt;span&gt;lower&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;= &lt;span&gt;'.jpg'&lt;/span&gt;:
        path = f&lt;span&gt;'{path}.jpg'&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This code was added to account for the case where the user does not specify the extension of the image in the saved file name.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;This article covered a lot of fun new information. You learned one approach for working with an open API that doesn&amp;#8217;t have a Python wrapper already around it. You discovered the importance of reading the API documentation and then added a user interface to that API. Then you learned how to parse JSON and download images from the Internet.&lt;/p&gt;
&lt;p&gt;While it is not covered here, Python has a &lt;strong&gt;json&lt;/strong&gt; module that you could use as well. &lt;/p&gt;
&lt;p&gt;Here are some ideas for enhancing this application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Caching search results&lt;/li&gt;
&lt;li&gt;Downloading thumbnails in the background&lt;/li&gt;
&lt;li&gt;Downloading links in the background&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could use threads to download the thumbnails and the larger images as well as for doing the web requests in general. This would improve the performance of your application. You may have noticed that the application became slightly unresponsive, depending on your Internet connectivity. This is because when it is doing a web request or downloading a file, it blocks the UI&amp;#8217;s main loop. You should give threads a try if you find that sort of thing bothersome.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Download the Code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The source code as a &lt;a href=&quot;https://www.blog.pythonlibrary.org/wp-content/uploads/2019/04/nasa_image_downloader.tar.gz&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;tarball&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Related Reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Creating a &lt;a href=&quot;http://www.blog.pythonlibrary.org/2019/02/12/creating-a-calculator-with-wxpython/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Calculator with wxPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to Distribute a &lt;a href=&quot;http://www.blog.pythonlibrary.org/2019/03/19/distributing-a-wxpython-application/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;wxPython Application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&quot;a2a_button_facebook&quot; href=&quot;https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F04%2F18%2Fcreating-a-gui-application-for-nasas-api-with-wxpython%2F&amp;linkname=Creating%20a%20GUI%20Application%20for%20NASA%E2%80%99s%20API%20with%20wxPython&quot; title=&quot;Facebook&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_twitter&quot; href=&quot;https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F04%2F18%2Fcreating-a-gui-application-for-nasas-api-with-wxpython%2F&amp;linkname=Creating%20a%20GUI%20Application%20for%20NASA%E2%80%99s%20API%20with%20wxPython&quot; title=&quot;Twitter&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_dd addtoany_share_save addtoany_share&quot; href=&quot;https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F04%2F18%2Fcreating-a-gui-application-for-nasas-api-with-wxpython%2F&amp;title=Creating%20a%20GUI%20Application%20for%20NASA%E2%80%99s%20API%20with%20wxPython&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 18 Apr 2019 17:15:51 +0000</pubDate>
</item>
<item>
	<title>PyPy Development: PyPy 7.1.1 Bug Fix Release</title>
	<guid>http://feedproxy.google.com/~r/PyPyStatusBlog/~3/3AyXwu9D5GE/pypy-711-bug-fix-release.html</guid>
	<link>http://feedproxy.google.com/~r/PyPyStatusBlog/~3/3AyXwu9D5GE/pypy-711-bug-fix-release.html</link>
	<description>&lt;div dir=&quot;ltr&quot;&gt;
The PyPy team is proud to release a bug-fix release version 7.1.1 of PyPy, which
includes two different interpreters:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;PyPy2.7, which is an interpreter supporting the syntax and the features of
Python 2.&lt;/li&gt;
&lt;li&gt;PyPy3.6-beta: the second official release of PyPy to support 3.6
features.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
The interpreters are based on much the same codebase, thus the double
release.&lt;br /&gt;

&lt;br /&gt;
This bugfix fixes bugs related to large lists, dictionaries, and sets, some corner cases with unicode, and &lt;a href=&quot;https://www.python.org/dev/peps/pep-3118/&quot;&gt;PEP 3118&lt;/a&gt; memory views of ctype structures. It also fixes a few issues related to the ARM 32-bit backend. For the complete list see the &lt;a href=&quot;http://doc.pypy.org/en/latest/release-v7.1.1.html&quot;&gt;changelog.&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
You can download the v7.1.1 releases here:&lt;br /&gt;

&lt;blockquote&gt;
&lt;div&gt;
&lt;a class=&quot;reference external&quot; href=&quot;http://pypy.org/download.html&quot;&gt;http://pypy.org/download.html&lt;/a&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;br /&gt;
As always, this release is 100% compatible with the previous one and fixed
several issues and bugs raised by the growing community of PyPy users.
We strongly recommend updating.&lt;br /&gt;
&lt;br /&gt;
The PyPy3.6 release is rapidly maturing, but is still considered beta-quality.&lt;br /&gt;
&lt;br /&gt;
The PyPy team &lt;/div&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/PyPyStatusBlog/~4/3AyXwu9D5GE&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Thu, 18 Apr 2019 16:24:25 +0000</pubDate>
</item>
<item>
	<title>Python Diary: Custom Home Automation System source release</title>
	<guid>http://www.pythondiary.com/blog/Apr.18,2019/custom-home-automation-system-source-release.html</guid>
	<link>http://www.pythondiary.com/blog/Apr.18,2019/custom-home-automation-system-source-release.html</link>
	<description>&lt;p&gt;I am happy to announce the release of my generation 1 home automation system source code.  I will be releasing Generation 2, the code which is currently in-use in the next couple of days to a week.  If you would like to be informed of the Generation 2 code drop, please watch the BitBucket repo to be informed.&lt;/p&gt;
&lt;p&gt;First, a little bit of history.  I originally started writing this code back in 2015 to run exclusively on my Raspberry Pi connected to an external speaker.  It was controlled using HTTP URL endpoints, which can be hit using various NFC tags throughout my home.  Eventually I bought a 7&quot; touch-screen and an additional Raspberry Pi.  This is when my automation system began to grow and mature more into what it is today.  The first external display was placed in my bedroom, and ran &lt;a href=&quot;http://www.pythondiary.com/bookmarks/pycars&quot;&gt;PyCARS&lt;/a&gt;, another project I wrote for my home automation system.  As a result, the original Raspberry Pi running the home automation system no longer needed an attached speaker, and instead a UDP broadcast packet was sent on my home network to notify any listening HUD(a PyCars device).&lt;/p&gt;
&lt;p&gt;For a time this configuration worked great, but as the system got more complex, I began to see more and more thread-locking which crashed the entire system from time-to-time.  As a result, the system was rewritten to use Gevent, and the UDP broadcast system was replaced by ZeroMQ to ensure the packets were always received.&lt;/p&gt;
&lt;p&gt;Generation 2, which will be available soon within the repo has many new features which were written during 2018 and partly this year.  This system is the one which is currently in-use, however it will be replaced eventually with a newer idea.&lt;/p&gt;
&lt;p&gt;If you wanted to check out the source code for my custom made home automation system, which is built in Python, you can find it on BitBucket here: &lt;a href=&quot;http://www.pythondiary.com/bookmarks/homeautomation&quot;&gt;Home Automation source code&lt;/a&gt;.  The code is licensed under the GPLv2.&lt;/p&gt;</description>
	<pubDate>Thu, 18 Apr 2019 15:48:26 +0000</pubDate>
</item>
<item>
	<title>Codementor: Generators in Python</title>
	<guid>https://www.codementor.io/arch/generators-in-python-u5g3mah0u</guid>
	<link>https://www.codementor.io/arch/generators-in-python-u5g3mah0u</link>
	<description>Basic generator functionality explained</description>
	<pubDate>Thu, 18 Apr 2019 15:17:21 +0000</pubDate>
</item>
<item>
	<title>Real Python: Immutability in Python</title>
	<guid>https://realpython.com/courses/immutability-python/</guid>
	<link>https://realpython.com/courses/immutability-python/</link>
	<description>&lt;p&gt;In Python, immutable vs mutable data types and objects types can cause some confusion—and weird bugs. With this video course you&amp;rsquo;ll see what the difference between mutable and immutable data types is in Python, and how you can use it to your advantage in your own programs.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll also see how to deal with a language quirk in Python that allows objects referenced by immutable types to me modified. Python&amp;rsquo;s definition of &amp;ldquo;immutable&amp;rdquo; can be a bit misleading.&lt;/p&gt;
&lt;p&gt;Basically, the promise of &amp;ldquo;immutability&amp;rdquo; on tuples is only partly true. The tuple itself cannot be modified, but objects referenced by the tuple can be. This is sometimes called &amp;ldquo;non-transitive immutability.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If the tuple has an immutable field like a string for example, then it cannot be modified. A mutable field like a list however, can be edited, even if it&amp;rsquo;s embedded in the &amp;ldquo;immutable&amp;rdquo; tuple.&lt;/p&gt;
&lt;p&gt;When the Python documentation refers to an object as being &amp;ldquo;immutable&amp;rdquo; they mean the behavior above observed. Other immutable types in Python behave the same way, e.g. namedtuples or frozensets.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve ever encountered the following exception and now you want to know why, this is the video course for you:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TypeError: 'tuple' object does not support item assignment
&lt;/pre&gt;&lt;/div&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 18 Apr 2019 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Stefan Scherfke: Packaging Python inside your organization with GitLab and Conda</title>
	<guid>https://stefan.sofa-rockers.org/2019/04/18/python-packaging-gitlab-conda/</guid>
	<link>https://stefan.sofa-rockers.org/2019/04/18/python-packaging-gitlab-conda/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://packaging.python.org/&quot;&gt;Python Packaging&lt;/a&gt; &lt;a href=&quot;http://andrewsforge.com/article/python-new-package-landscape/&quot;&gt;has recently&lt;/a&gt; &lt;a href=&quot;https://news.ycombinator.com/item?id=18247512&quot;&gt;been&lt;/a&gt;
&lt;a href=&quot;https://github.com/orsinium/notes/blob/master/notes-en/python-packaging.md&quot;&gt;discussed&lt;/a&gt; &lt;a href=&quot;https://hynek.me/articles/python-app-deps-2018/&quot;&gt;a lot&lt;/a&gt;, but the articles usually
only focus on publishing (open source) code to&amp;nbsp;PyPI.&lt;/p&gt;
&lt;p&gt;But what do you do when your organization uses Python for in-house development
and you can’t (or don’t want to) make everything Open Source?  Where do you
store and manage your code?  How do you distribute your&amp;nbsp;packages?&lt;/p&gt;
&lt;p&gt;In this article, I describe how we solve this problem with &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;GitLab&lt;/a&gt;, &lt;a href=&quot;https://conda.io&quot;&gt;Conda&lt;/a&gt; and a few other&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;You can find all code and examples referenced in this article under
&lt;a href=&quot;https://gitlab.com/ownconda&quot;&gt;gitlab.com/ownconda&lt;/a&gt;.  These tools and examples are using the &lt;code&gt;own&lt;/code&gt; prefix
in order to make a clear distinction between our own and third-party code.
I will not necessarily update and fix the code, but it is released under the
&lt;a href=&quot;https://blueoakcouncil.org/license/1.0.0&quot;&gt;Blue Oak license&lt;/a&gt; so you can copy and use it.  Any feedback is welcome,&amp;nbsp;nonetheless.&lt;/p&gt;

&lt;h3&gt;Contents:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#software-selection&quot; id=&quot;id2&quot;&gt;Software selection&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#code-and-issue-management&quot; id=&quot;id3&quot;&gt;Code and issue&amp;nbsp;management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#the-package-manager-pip-or-conda&quot; id=&quot;id4&quot;&gt;The package manager: Pip or&amp;nbsp;Conda?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#supplementary-tools&quot; id=&quot;id5&quot;&gt;Supplementary&amp;nbsp;tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#how-it-should-work&quot; id=&quot;id6&quot;&gt;How it should work&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#runtime-and-build-environment&quot; id=&quot;id7&quot;&gt;Runtime and build&amp;nbsp;environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#rd-party-packages&quot; id=&quot;id8&quot;&gt;3rd party&amp;nbsp;packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#internal-projects&quot; id=&quot;id9&quot;&gt;Internal&amp;nbsp;projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#package-and-documentation-hosting&quot; id=&quot;id10&quot;&gt;Package and documentation&amp;nbsp;hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#python-distribution&quot; id=&quot;id11&quot;&gt;Python&amp;nbsp;distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#deployment&quot; id=&quot;id12&quot;&gt;Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#dependency-management&quot; id=&quot;id13&quot;&gt;Dependency&amp;nbsp;management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#making-it-work&quot; id=&quot;id14&quot;&gt;Making it work&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#set-up-gitlab-and-a-conda-repo-server&quot; id=&quot;id15&quot;&gt;Set up GitLab and a Conda repo&amp;nbsp;server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#bootstrap-python-pip-and-conda&quot; id=&quot;id16&quot;&gt;Bootstrap Python, Pip and&amp;nbsp;Conda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#build-the-docker-images&quot; id=&quot;id17&quot;&gt;Build the docker&amp;nbsp;images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#build-all-packages&quot; id=&quot;id18&quot;&gt;Build all&amp;nbsp;packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#outlook-future-work-and-unsolved-problems&quot; id=&quot;id19&quot;&gt;Outlook / Future work and unsolved&amp;nbsp;problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id2&quot;&gt;Software&amp;nbsp;selection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section I’ll briefly explain the reasons why we are using GitLab and&amp;nbsp;Conda.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id3&quot;&gt;Code and issue&amp;nbsp;management&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Though you could use private repositories from one of the well-known cloud
services, you should probably use a self-hosted service to retain full control
over your code.  In some countries it may even be forbidden to use a &lt;span class=&quot;caps&quot;&gt;US&lt;/span&gt; cloud
service for your organization’s&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&quot;https://www.cyberciti.biz/open-source/github-alternatives-open-source-seflt-hosted/&quot;&gt;plenty of competitors&lt;/a&gt; in this field: &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;GitLab&lt;/a&gt;, &lt;a href=&quot;https://gitea.io/&quot;&gt;Gitea&lt;/a&gt;, &lt;a href=&quot;https://gogs.io/&quot;&gt;Gogs&lt;/a&gt;,
&lt;a href=&quot;https://github.com/gitbucket/gitbucket/&quot;&gt;Gitbucket&lt;/a&gt; or &lt;a href=&quot;https://kallithea-scm.org/&quot;&gt;Kallithea&lt;/a&gt;—just to name a&amp;nbsp;few.&lt;/p&gt;
&lt;p&gt;Our most important requirements&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repository&amp;nbsp;management&lt;/li&gt;
&lt;li&gt;Pull/Merge&amp;nbsp;requests&lt;/li&gt;
&lt;li&gt;Issue&amp;nbsp;management&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;CI&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;CD&lt;/span&gt;&amp;nbsp;pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only tool that (currently) meets these requirements is GitLab.  It has
a lot more features that are very useful for an organization wide use, e.g.,
&lt;span class=&quot;caps&quot;&gt;LDAP&lt;/span&gt; and Kerberos support, issue labels and boards, Mattermost integration or
Git &lt;span class=&quot;caps&quot;&gt;LFS&lt;/span&gt; support.  And—more importantly—it also has a really nice &lt;span class=&quot;caps&quot;&gt;UX&lt;/span&gt; and is
one of the few pieces of software that I actually enjoy&amp;nbsp;using.&lt;/p&gt;
&lt;p&gt;GitLab has a &lt;a href=&quot;https://about.gitlab.com/pricing/#self-managed&quot;&gt;free core&lt;/a&gt; and some paid versions that add &lt;a href=&quot;https://about.gitlab.com/pricing/self-managed/feature-comparison/&quot;&gt;more features&lt;/a&gt; and&amp;nbsp;support.&lt;/p&gt;


&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id4&quot;&gt;The package manager: Pip or&amp;nbsp;Conda?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://pip.pypa.io/&quot;&gt;Pip&lt;/a&gt; is the &lt;a href=&quot;https://packaging.python.org/guides/tool-recommendations/&quot;&gt;official&lt;/a&gt; package installer for Python.  It supports Python
source distributions and (binary) &lt;em&gt;Wheel&lt;/em&gt; packages.  Pip only installs files in
the current environment’s &lt;code class=&quot;file&quot;&gt;site-packages&lt;/code&gt; directory and can optionally
create entry points in its &lt;code class=&quot;file&quot;&gt;bin&lt;/code&gt; directory.  You can use &lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot;&gt;Virtualenv&lt;/a&gt; to
isolate different projects from another, and &lt;a href=&quot;https://devpi.net/docs/devpi/devpi/stable/%2Bd/index.html&quot;&gt;Devpi&lt;/a&gt; to host your own package
index.  Devpi can both, &lt;a href=&quot;https://stefan.sofa-rockers.org/2017/11/09/getting-started-with-devpi/&quot;&gt;mirror/cache PyPI and store your own packages&lt;/a&gt;.  The Python packaging ecosystem is overlooked by the Python
Packaging Authority working group (&lt;a href=&quot;https://www.pypa.io/&quot;&gt;PyPA&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://conda.io&quot;&gt;Conda&lt;/a&gt; stems from the scientific community and is being developed by &lt;a href=&quot;https://www.anaconda.com&quot;&gt;Anaconda&lt;/a&gt;.
In contrast to Pip, Conda is a full-fledged package manager similar to
&lt;strong&gt;apt&lt;/strong&gt; or &lt;strong&gt;dnf&lt;/strong&gt;.  Like virtualenv, Conda can create isolated
virtual environments.  Conda is not directly compatible with Python’s
&lt;code class=&quot;file&quot;&gt;setup.py&lt;/code&gt; or &lt;code class=&quot;file&quot;&gt;pyproject.toml&lt;/code&gt; files.  Instead, you have to create
a Conda recipe for every package and build it with &lt;strong&gt;conda-build&lt;/strong&gt;.
This is a bit more involved because you have to convert every package that you
find on PyPI, but it also lets you patch and extend every package.  With very
little effort you can create a self-extracting Python distribution with
a selection of custom packages (similar to the &lt;a href=&quot;https://conda.io/en/latest/miniconda.html&quot;&gt;Miniconda&lt;/a&gt;&amp;nbsp;distribution).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://conda-forge.org&quot;&gt;Conda-forge&lt;/a&gt; is a (relatively) new project that has a huge library of Conda
recipes and packages.  However, if you want full control over your own packages
you may want to host and build everything on your&amp;nbsp;own.&lt;/p&gt;

&lt;h4&gt;What to&amp;nbsp;use?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Both, Conda and pip, allow you to host your own packages as well as 3rd party
packages inside your&amp;nbsp;organization.&lt;/li&gt;
&lt;li&gt;Both, Conda and pip, provide isolated virtual&amp;nbsp;environments.&lt;/li&gt;
&lt;li&gt;Conda can package anything (Python, C-libraries, Rust apps, …) while Pip is
exclusively for Python&amp;nbsp;packages.&lt;/li&gt;
&lt;li&gt;With Conda, you need to package and build everything on your own.  Even
packages from PyPI need to be re-packaged.  On the other side, this makes it
easier to patch and extend the package’s&amp;nbsp;source.&lt;/li&gt;
&lt;li&gt;Newer Conda versions allow you to build &lt;em&gt;everything&lt;/em&gt; on your own, even &lt;span class=&quot;caps&quot;&gt;GCC&lt;/span&gt;
and libc.  This is, however, not required and you can rely on some low-level
system libraries like the &lt;a href=&quot;https://github.com/pypa/manylinux&quot;&gt;manylinux standard&lt;/a&gt; for Wheels does. (You just
have to decide which ones, but more on that&amp;nbsp;later.)&lt;/li&gt;
&lt;li&gt;Due to its larger scope, Conda is slower and more complex than Pip.  In the
past, even patch releases introduced backwards incompatible changes and bugs
that broke our stack.  However, the devs are very friendly and usually fix
critical bugs quite fast.  And maybe we would have had similar problems, too,
if we used a Pip based&amp;nbsp;stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because we need to package more than just Python, we chose to use Conda.  This
dates back to at least to Conda v2.1 which was released in 2013.  At that time,
projects like conda-forge weren’t even in&amp;nbsp;sight.&lt;/p&gt;



&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id5&quot;&gt;Supplementary&amp;nbsp;tools&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To aid our work with GitLab and Conda, we developed some supplementary tools.
I have released a slightly modified version of them, called &lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools&quot;&gt;ownconda tools&lt;/a&gt;,
alongside with this&amp;nbsp;article.&lt;/p&gt;
&lt;p&gt;The ownconda tools are a &lt;a href=&quot;https://click.palletsprojects.com&quot;&gt;click&lt;/a&gt; based collection of commands that reside under
the entry point &lt;strong&gt;ownconda&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Initially, they were only meant to help with the management of recipes for
external packages, and with running the build/test/upload steps in our GitLab
pipeline.  But they have become a lot more powerful by now and even include
a GitLab Runner that lets you run your projects’ pipelines locally (including
artifacts handling, which the official gitlab-runner cannot do&amp;nbsp;locally).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ownconda --help
&lt;span class=&quot;go&quot;&gt;Usage: ownconda [OPTIONS] COMMAND [ARGS]...&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;  Support tools for local development, CI/CD and Conda packaging.&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Options:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  --help  Show this message and exit.&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Commands:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  build                 Build all recipes in RECIPE_ROOT in the correct...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  check-for-updates     Update check for external packages in RECIPE_ROOT.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  ci                    Run a GitLab CI pipeline locally.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  completion            Print Bash or ZSH completion activation script.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  dep-graph             Create a dependency graph from a number of Conda...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  develop               Install PATHS in develop/editable mode.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  gitlab                Run a task on a number of GitLab projects.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  lint                  Run pylint for PATHS.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  make-docs             Run sphinx-build and upload generated html...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  prune-index           Delete old packages from the local Conda index at...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  pylintrc              Print the built-in pylintrc to stdout.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  pypi-recipe           Create or update recipes for PyPI packages.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  sec-check             Run some security checks for PATHS.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  show-updated-recipes  Show updated recipes in RECIPE_ROOT.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  test                  Run tests in PATHS.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  update-recipes        Update Conda recipes in RECIPE_ROOT.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  upload                Upload Conda packages in PKG_DIR.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  validate-recipes      Check if recipes in RECIPE_ROOT are valid.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I will talk about the various subcommands in more detail in later&amp;nbsp;sections.&lt;/p&gt;



&lt;h2&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id6&quot;&gt;How it should&amp;nbsp;work&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The subject of packaging consists of several components: The platforms on which
your code needs to build and run, the package manager and repository,
management of external and internal packages, a custom Python distribution, and
means to keep an overview over all packages and their dependencies.  I will go
into detail about each aspect in the following&amp;nbsp;sections.&lt;/p&gt;

&lt;a href=&quot;https://stefan.sofa-rockers.org/images/packaging-overview.png&quot;&gt;&lt;img alt=&quot;Aspects involved in the topic of packaging&quot; src=&quot;https://stefan.sofa-rockers.org/images/packaging-overview.png&quot; /&gt;&lt;/a&gt;


&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id7&quot;&gt;Runtime and build&amp;nbsp;environment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Our packages need to run on Fedora desktop systems and on Centos 7.  Packages
built on Centos also run on Fedora, so we only have a single build environment:
Centos&amp;nbsp;7.&lt;/p&gt;
&lt;p&gt;We use different Docker images for our build pipeline and some deployments.
The most important ones are &lt;a href=&quot;https://gitlab.com/ownconda/centos7-ownconda-runtime&quot;&gt;centos7-ownconda-runtime&lt;/a&gt; and
&lt;a href=&quot;https://gitlab.com/ownconda/centos7-ownconda-develop&quot;&gt;centos7-ownconda-develop&lt;/a&gt;.  The former only contains a minimal setup to
install and run Conda packages while the latter includes all build
dependencies, &lt;strong&gt;conda-build&lt;/strong&gt; and the ownconda&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;If your &lt;span class=&quot;caps&quot;&gt;OS&lt;/span&gt; landscape is more heterogeneous, you may need to add more build
environments which makes things a bit more complicated—especially if you need
to support macOS or even&amp;nbsp;Windows.&lt;/p&gt;
&lt;p&gt;To build Docker images in our GitLab pipelines, we use &lt;em&gt;docker-in-docker&lt;/em&gt;.
That means that the GitLab runners start docker containers that can access
&lt;code class=&quot;file&quot;&gt;/var/run/dockers.sock&lt;/code&gt; to run &lt;code&gt;docker build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;GitLab provides a Docker registry that allows any project to host its own
images.  However, if a project is &lt;em&gt;private&lt;/em&gt;, other project’s pipelines can not
access these images.  For this reason, we have decided to serve Docker images
from a separate&amp;nbsp;host.&lt;/p&gt;


&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id8&quot;&gt;3rd party&amp;nbsp;packages&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We re-package all external dependencies as Conda packages and host them in our
own Conda&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;This has several&amp;nbsp;benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can prohibit installing Software from other sources than our internal
Conda&amp;nbsp;repository.&lt;/li&gt;
&lt;li&gt;If users want to depend on new libraries, we can propose alternatives that we
might already have on our index.  This keeps our tree of dependencies a bit&amp;nbsp;smaller.&lt;/li&gt;
&lt;li&gt;We cannot accidentally depend on packages with “bad”&amp;nbsp;licenses.&lt;/li&gt;
&lt;li&gt;We can add patches to fix bugs or extend the functionality of a package
(e.g., we added our internal root certificate to&amp;nbsp;Certifi).&lt;/li&gt;
&lt;li&gt;We can reduce network traffic to external servers and are less dependent on
their&amp;nbsp;availability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Recipe&amp;nbsp;organization&lt;/h4&gt;
&lt;p&gt;We can either put the recipe for every package into its own repository (which
is what &lt;a href=&quot;https://conda-forge.org&quot;&gt;conda-forge&lt;/a&gt; does) or use a single repository for all recipes (which is
what we are&amp;nbsp;doing).&lt;/p&gt;
&lt;p&gt;The multi-repository approach makes it easier to only build packages that have
changed.  It also makes it easier to manage access levels if you have a lot of
contributors that each only manage a few&amp;nbsp;packages.&lt;/p&gt;
&lt;p&gt;The single-repository approach has less overhead if you only have a few
maintainers that take care of all the recipes.  To identify updated packages
that need re-building, we can use &lt;strong&gt;ownconda&lt;/strong&gt;’s &lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/show_updated_recipes.py&quot;&gt;show-updated-recipes&lt;/a&gt;&amp;nbsp;command.&lt;/p&gt;


&lt;h4&gt;Linking against system&amp;nbsp;packages&lt;/h4&gt;
&lt;p&gt;With Conda, we can (and must) decide whether we want to link against system
packages (e.g., installed with &lt;strong&gt;yum&lt;/strong&gt; or use other Conda packages to
satisfy a package’s&amp;nbsp;dependencies.&lt;/p&gt;
&lt;p&gt;One extreme would be to only build Python packages on our own and completely
depend on system packages for all C libraries.  The other extreme would be to
build &lt;em&gt;everything&lt;/em&gt; on our own, even glibc and&amp;nbsp;gcc.&lt;/p&gt;
&lt;p&gt;The former has a lot less overhead but becomes the more fragile the more
heterogeneous your runtime environments become.  The latter is a lot more
complicated and involved but gives you more control and&amp;nbsp;reliability.&lt;/p&gt;
&lt;p&gt;We decided to take the middle ground between these two extremes: We build many
libraries on our own but rely on the system’s &lt;strong&gt;gcc&lt;/strong&gt;, &lt;strong&gt;glibc&lt;/strong&gt;,
and &lt;strong&gt;X11&lt;/strong&gt; libraries.  This is quite similar to what the &lt;a href=&quot;https://github.com/pypa/manylinux&quot;&gt;manylinux
standard&lt;/a&gt; for Python Wheels&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;Recipes must list the system libraries that they link against.  The rules for
valid system libraries are encoded in &lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/6715e48e/src/own_conda_tools/commands/validate_recipes.py#L38&quot;&gt;ownconda validate-recipes&lt;/a&gt; and enforced
by &lt;strong&gt;conda-build&lt;/strong&gt;’s &lt;a href=&quot;https://docs.conda.io/projects/conda-build/en/latest/resources/commands/conda-build.html?highlight=--error-overlinking&quot;&gt;–error-overlinking&lt;/a&gt;&amp;nbsp;option.&lt;/p&gt;


&lt;h4&gt;Recipe&amp;nbsp;management&lt;/h4&gt;
&lt;p&gt;Recipes for Python packages can easily be created with &lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/pypi_recipe.py&quot;&gt;ownconda pypi-recipe&lt;/a&gt;.
This is similar to &lt;a href=&quot;https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html#building-a-simple-package-with-conda-skeleton-pypi&quot;&gt;conda skeleton pypi&lt;/a&gt; but tailored to our needs.  Recipes
for other packages have to be created&amp;nbsp;manually.&lt;/p&gt;
&lt;p&gt;We also implemented an update check for our recipes.  Every recipe contains
a script called &lt;code class=&quot;file&quot;&gt;update_check.py&lt;/code&gt; which uses one of the update checkers
provided by the ownconda&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;These checkers can query PyPI, GitHub release lists and (&lt;span class=&quot;caps&quot;&gt;FTP&lt;/span&gt;) directory
listings, or crawl an entire website.  The command &lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/check_for_updates.py&quot;&gt;ownconda
check-for-updates&lt;/a&gt; runs the update scripts and compares the version numbers
they find against the recipes’ current versions.  It can also print URLs to
the packages’&amp;nbsp;changelogs:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; own check-for-updates --verbose .
&lt;span class=&quot;go&quot;&gt;  [████████████████████████████████████]  100%&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Package: latest version (current version)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;freetype 2.10.0 (2.9.1):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  https://www.freetype.org/index.html#news&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;python-attrs 19.1.0 (18.2.0):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  http://www.attrs.org/en/stable/changelog.html&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;python-certifi 2019.3.9 (2018.11.29):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  https://github.com/certifi/python-certifi/commits/master&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;qt5 5.12.2 (5.12.1):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  https://wiki.qt.io/Qt_5.12.2_Change_Files&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;readline 8.0.0 (7.0.5):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  https://tiswww.case.edu/php/chet/readline/CHANGES&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can then update all recipes with &lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/update_recipes.py&quot;&gt;ownconda update-recipes&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ownconda update-recipes python-attrs ...
&lt;span class=&quot;go&quot;&gt;python-attrs&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;cd /data/ssd/home/stefan/Projects/ownconda/external-recipes &amp;amp;&amp;amp; /home/stefan/ownconda/bin/python -m own_conda_tools pypi-recipe attrs -u&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;diff --git a/python-attrs/meta.yaml b/python-attrs/meta.yaml&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;index 7d167a8..9b3ea20 100644&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--- a/python-attrs/meta.yaml&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+++ b/python-attrs/meta.yaml&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;@@ -1,10 +1,10 @@&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; package:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  name: attrs&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;-  version: 18.2.0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+  version: 19.1.0&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt; source:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;-  url: https://files.pythonhosted.org/packages/0f/9e/26b1d194aab960063b266170e53c39f73ea0d0d3f5ce23313e0ec8ee9bdf/attrs-18.2.0.tar.gz&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;-  sha256: 10cbf6e27dbce8c30807caf056c8eb50917e0eaafe86347671b57254006c3e69&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+  url: https://files.pythonhosted.org/packages/cc/d9/931a24cc5394f19383fbbe3e1147a0291276afa43a0dc3ed0d6cd9fda813/attrs-19.1.0.tar.gz&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+  sha256: f0b870f674851ecbfbbbd364d6b5cbdff9dcedbc7f3f5e18a6891057f21fe399&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt; build:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;-  number: 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+  number: 0&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;The update&amp;nbsp;process&lt;/h4&gt;
&lt;p&gt;Our Conda repository has various channels for packages of different maturity,
e.g. &lt;strong class=&quot;channel&quot;&gt;experimental&lt;/strong&gt;, &lt;strong class=&quot;channel&quot;&gt;testing&lt;/strong&gt;, &lt;strong class=&quot;channel&quot;&gt;staging&lt;/strong&gt;, and
&lt;strong class=&quot;channel&quot;&gt;stable&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Updates are first built locally and uploaded to the &lt;strong class=&quot;channel&quot;&gt;testing&lt;/strong&gt; channel
for some manual&amp;nbsp;testing.&lt;/p&gt;
&lt;p&gt;If everything goes well, the updates are committed into the &lt;code class=&quot;branch&quot;&gt;develop&lt;/code&gt;
branch, pushed to GitLab and uploaded to the &lt;strong class=&quot;channel&quot;&gt;staging&lt;/strong&gt; channel.  We
also send a &lt;a href=&quot;https://gitlab.com/ownconda/external-recipes/blob/master/updates.rst&quot;&gt;changelog&lt;/a&gt; around to notify everyone about important
updates and when they will be uploaded into the &lt;strong class=&quot;channel&quot;&gt;stable&lt;/strong&gt;&amp;nbsp;channel.&lt;/p&gt;
&lt;p&gt;After a few days in testing, the updates are merged into the &lt;code class=&quot;branch&quot;&gt;master&lt;/code&gt;
branch and upload to the &lt;strong class=&quot;channel&quot;&gt;stable&lt;/strong&gt; channel for production&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;This is a relatively save procedure which (usually) catches any problems before
they go into&amp;nbsp;production.&lt;/p&gt;


&lt;h4&gt;Example&amp;nbsp;recipes&lt;/h4&gt;
&lt;p&gt;You can find the recipes for all packages required to run the ownconda tools
&lt;a href=&quot;https://gitlab.com/ownconda/external-recipes&quot;&gt;here&lt;/a&gt;.  As a bonus, I also added the recipes for NumPy
and&amp;nbsp;PyQt5.&lt;/p&gt;



&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id9&quot;&gt;Internal&amp;nbsp;projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Internal packages are structured in a similar way to most projects that you see
on PyPI.  We put the source code into &lt;code class=&quot;file&quot;&gt;src&lt;/code&gt;, the &lt;a href=&quot;https://pytest.org&quot;&gt;pytest&lt;/a&gt; tests into
&lt;code class=&quot;file&quot;&gt;tests&lt;/code&gt; and the &lt;a href=&quot;https://www.sphinx-doc.org&quot;&gt;Sphinx&lt;/a&gt; docs into &lt;code class=&quot;file&quot;&gt;docs&lt;/code&gt;.  We do not use namespace
packages.  They can lead to &lt;a href=&quot;https://specs.openstack.org/openstack/oslo-specs/specs/kilo/drop-namespace-packages.html&quot;&gt;various nasty bugs&lt;/a&gt;.  Instead, we just prefix all
packages with &lt;code&gt;own_&lt;/code&gt; to avoid name clashes with other packages and to easily
tell internal and external packages&amp;nbsp;apart.&lt;/p&gt;

&lt;a href=&quot;https://stefan.sofa-rockers.org/images/packaging-package.png&quot;&gt;&lt;img alt=&quot;A project usually has the folloing files and directories: .gitignore, .gitlab-ci.yml, conda/meta.yaml, setup.py, setup.cfg, MANIFEST.in, docs/, src/, tests/&quot; src=&quot;https://stefan.sofa-rockers.org/images/packaging-package.png&quot; /&gt;&lt;/a&gt;
A project usually contains at least these files and directories.

&lt;p&gt;The biggest difference to “normal” Python projects is the additional Conda
recipe in each project.  It contains all meta data and the requirements.  The
&lt;code class=&quot;file&quot;&gt;setup.py&lt;/code&gt; contains only the minimum amount of information to get the
package installed via &lt;strong&gt;pip&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Conda-build&lt;/strong&gt; runs it to build the Conda&amp;nbsp;package.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/develop.py&quot;&gt;ownconda develop&lt;/a&gt; runs it to install the package in editable&amp;nbsp;mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ownconda develop&lt;/strong&gt; also creates/updates a Conda
environment for the current project and installs all requirements that it
collects from the project’s&amp;nbsp;recipe.&lt;/p&gt;
&lt;p&gt;Projects also contain a &lt;code class=&quot;file&quot;&gt;.gitlab-ci.yml&lt;/code&gt; which defines the &lt;a href=&quot;https://docs.gitlab.com/ce/ci/&quot;&gt;GitLab &lt;span class=&quot;caps&quot;&gt;CI&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;CD&lt;/span&gt;
pipeline&lt;/a&gt;.  Most projects have at least a &lt;em&gt;build&lt;/em&gt;, a &lt;em&gt;test&lt;/em&gt; and an &lt;em&gt;upload&lt;/em&gt;
stage.  The &lt;em&gt;test&lt;/em&gt; stage is split into parallel steps for various test tools
(e.g., &lt;a href=&quot;https://pytest.org&quot;&gt;pytest&lt;/a&gt;, &lt;a href=&quot;https://www.pylint.org/&quot;&gt;pylint&lt;/a&gt; and &lt;a href=&quot;https://bandit.readthedocs.io/en/latest/&quot;&gt;bandit&lt;/a&gt;).  Projects can optionally build
documentation and upload it to our docs server.  The ownconda tools provide
helpers for all of these&amp;nbsp;steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/build.py&quot;&gt;ownconda build&lt;/a&gt; builds the&amp;nbsp;package.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/test.py&quot;&gt;ownconda test&lt;/a&gt; runs&amp;nbsp;pytest.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/lint.py&quot;&gt;ownconda lint&lt;/a&gt; runs&amp;nbsp;pylint.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/sec_check.py&quot;&gt;ownconda sec-check&lt;/a&gt; runs&amp;nbsp;bandit.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/upload.py&quot;&gt;ownconda upload&lt;/a&gt; uploads the package to the package&amp;nbsp;index.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/make_docs.py&quot;&gt;ownconda make-docs&lt;/a&gt; builds and uploads the&amp;nbsp;documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also use our own Git&amp;nbsp;flow:&lt;/p&gt;

&lt;a href=&quot;https://stefan.sofa-rockers.org/images/packaging-git-flow.png&quot;&gt;&lt;img alt=&quot;Visualisation of our Git flow&quot; src=&quot;https://stefan.sofa-rockers.org/images/packaging-git-flow.png&quot; /&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Development happens in a &lt;code class=&quot;branch&quot;&gt;develop&lt;/code&gt; branch.  Builds from this branch
are uploaded into a &lt;strong class=&quot;channel&quot;&gt;staging&lt;/strong&gt; Conda&amp;nbsp;channel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Larger features can optionally branch of a feature branch.  Their builds are
not uploaded into a public Conda&amp;nbsp;channel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stable &lt;code class=&quot;branch&quot;&gt;develop&lt;/code&gt; states get merged into the &lt;strong class=&quot;channel&quot;&gt;master&lt;/strong&gt; branch.
Builds are uploaded into our &lt;strong class=&quot;channel&quot;&gt;stable&lt;/strong&gt; Conda&amp;nbsp;channel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since we continuously deploy packages, we don’t put a lot of effort into
versioning.  The package version consists of a major release which rarely
changes and the number of commits since the last tagged major release.  The
GitLab pipeline &lt;span class=&quot;caps&quot;&gt;ID&lt;/span&gt; is used as a build&amp;nbsp;number:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Version: &lt;code class=&quot;samp&quot;&gt;&lt;em&gt;$GIT_DESCRIBE_TAG&lt;/em&gt;.&lt;em&gt;$GIT_DESCRIBE_NUMBER&lt;/em&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build: &lt;code class=&quot;samp&quot;&gt;py37_&lt;em&gt;$CI_PIPELINE_ID&lt;/em&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The required values are automatically exported by Conda and GitLab as
environment&amp;nbsp;variables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id10&quot;&gt;Package and documentation&amp;nbsp;hosting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hosting a Conda repository is very easy.  In fact, you can just run &lt;code&gt;python -m
http.server&lt;/code&gt; in your local Conda base directory if you previously built any
packages.  You can then use it like this: &lt;code class=&quot;samp&quot;&gt;conda search
--override-channels --channel=http://localhost:8000/conda-bld &lt;em&gt;PKG&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A Conda repository consists of one or more &lt;em&gt;channels&lt;/em&gt;.  Each channel is
a directory that contains a &lt;code class=&quot;file&quot;&gt;noarch&lt;/code&gt; directory and additional platform
directories (like &lt;code class=&quot;file&quot;&gt;linux-64&lt;/code&gt;).  You put your packages into these
directories and run &lt;code class=&quot;samp&quot;&gt;conda index &lt;em&gt;channel&lt;/em&gt;/&lt;em&gt;platform&lt;/em&gt;&lt;/code&gt; to create an index
for each platform (you can omit the &lt;code class=&quot;samp&quot;&gt;&lt;em&gt;platform&lt;/em&gt;&lt;/code&gt; with newer versions of
&lt;strong&gt;conda-build&lt;/strong&gt;).  The &lt;code class=&quot;file&quot;&gt;noarch&lt;/code&gt; directory must always exist, even
if you put all your packages into the &lt;code class=&quot;file&quot;&gt;linux-64&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;The base &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; for our Conda channels is
&lt;code class=&quot;samp&quot;&gt;https://forge.services.own/conda/&lt;em&gt;channel&lt;/em&gt;&lt;/code&gt;.  You can put a static
&lt;code class=&quot;file&quot;&gt;index.html&lt;/code&gt; into each channel’s directory that parses the repo data and
displays it&amp;nbsp;nicely:&lt;/p&gt;

&lt;a href=&quot;https://stefan.sofa-rockers.org/images/packaging-forge.png&quot;&gt;&lt;img alt=&quot;Forge channel view.  A JavaScript reads and renders the contents of the repodata.json.&quot; src=&quot;https://stefan.sofa-rockers.org/images/packaging-forge.png&quot; /&gt;&lt;/a&gt;
A JavaScript reads and renders the contents of a channel’s
&lt;code class=&quot;file&quot;&gt;repodata.json&lt;/code&gt;.

&lt;p&gt;The upload service (for packages created in GitLab pipelines) resides under
&lt;code&gt;https://forge.services.own/upload/&amp;lt;channel&amp;gt;&lt;/code&gt;.  It is a simple web
application that stores the uploaded file in &lt;code class=&quot;file&quot;&gt;channel/linux-64&lt;/code&gt; and runs
&lt;code&gt;conda index&lt;/code&gt;.  For packages uploaded to the &lt;strong class=&quot;channel&quot;&gt;stable&lt;/strong&gt; channel, it
also creates a hard link in a special &lt;strong class=&quot;channel&quot;&gt;archive&lt;/strong&gt;&amp;nbsp;channel.&lt;/p&gt;
&lt;p&gt;Every week, we prune our channels with &lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/prune_index.py&quot;&gt;ownconda prune-index&lt;/a&gt;.  In case that
we accidentally prune too aggressively, we have the option to restore packages
from the&amp;nbsp;archive.&lt;/p&gt;
&lt;p&gt;We also host our own &lt;a href=&quot;https://readthedocs.org/&quot;&gt;Read the Docs&lt;/a&gt; like service.  GitLab pipelines can
upload Sphinx documentation to &lt;code&gt;https://forge.services.own/docs&lt;/code&gt; via
&lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/make_docs.py&quot;&gt;ownconda make-docs&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;admonition note&quot;&gt;
&lt;p class=&quot;admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p&gt;The server name &lt;em&gt;forge&lt;/em&gt; does not refer to &lt;em&gt;conda-forge&lt;/em&gt; but to
&lt;a href=&quot;https://sourceforge.net/&quot;&gt;SourceForge.net&lt;/a&gt;, which was quite popular back in the&amp;nbsp;days.&lt;/p&gt;
&lt;/div&gt;


&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id11&quot;&gt;Python&amp;nbsp;distribution&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With &lt;a href=&quot;https://github.com/conda/constructor&quot;&gt;Constructor&lt;/a&gt;, you can easily create your own self-extractable Python
distribution.  These distributions are similar to &lt;a href=&quot;https://conda.io/en/latest/miniconda.html&quot;&gt;miniconda&lt;/a&gt;, but you can
customize them to your&amp;nbsp;needs.&lt;/p&gt;
&lt;p&gt;A constructor file is a simple &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; file with some meta data (e.g., the
distribution name and version) and the list of packages that should be
included.  You can also specify a post-install&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;The command &lt;code&gt;constructor &amp;lt;distdir&amp;gt;/construct.yaml&lt;/code&gt; will then download all
packages and put them into a self extracting Bash script.  We upload the
installer scripts onto our Conda index,&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;Instead of managing multiple &lt;code class=&quot;file&quot;&gt;construct.yaml&lt;/code&gt; files manually, we create
them &lt;a href=&quot;https://gitlab.com/ownconda/ownconda-dist&quot;&gt;dynamically in a GitLab pipeline&lt;/a&gt; which makes
building multiple similar distributions (e.g., for different Python versions)
a bit&amp;nbsp;easier.&lt;/p&gt;


&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id12&quot;&gt;Deployment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We are currently on the road from &lt;em&gt;copy-stuff-with-fabric-to-vms&lt;/em&gt; to
&lt;em&gt;docker-kubernetes-yay-land&lt;/em&gt;.  I am not going to go too much into detail
here—this topic is not directly related to packaging and worth its own&amp;nbsp;article.&lt;/p&gt;
&lt;p&gt;Most of our deployments are now &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; based.  Projects contain an
&lt;code class=&quot;file&quot;&gt;ansible&lt;/code&gt; directory with the required playbooks and other files.  Shared
roles are managed in a separate &lt;em&gt;ownsible&lt;/em&gt; project.  The ansible deployments
are usually part of the GitLab &lt;span class=&quot;caps&quot;&gt;CI&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;CD&lt;/span&gt; pipeline.  Some are run automatically,
some need to be triggered&amp;nbsp;manually.&lt;/p&gt;
&lt;p&gt;Some newer projects are already using Docker based deployments.  Docker images
are built as part of the pipeline and uploaded into our Docker registry from
which they are then pulled for&amp;nbsp;deployments.&lt;/p&gt;


&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id13&quot;&gt;Dependency&amp;nbsp;management&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is very helpful if you can build a dependency graph of all your&amp;nbsp;packages.&lt;/p&gt;
&lt;p&gt;Not only can it be used to build all packages in the correct order (as we will
shortly see), but visualizing your dependencies may also help you to improve
your architecture, detect circular dependencies or unused&amp;nbsp;packages.&lt;/p&gt;
&lt;p&gt;The command &lt;a href=&quot;https://gitlab.com/ownconda/ownconda-tools/blob/master/src/own_conda_tools/commands/dep_graph.py&quot;&gt;ownconda dep-graph&lt;/a&gt; builds such a dependency graph from the
packages that you pass to it.  It can either output a sorted list of packages
or a &lt;a href=&quot;https://en.wikipedia.org/wiki/DOT_(graph_description_language)&quot;&gt;&lt;span class=&quot;caps&quot;&gt;DOT&lt;/span&gt;&lt;/a&gt; graph.  Since the resulting graph can become quite large, there are
several ways to filter packages.  For example, you can only show a package’s
dependencies or why the package is&amp;nbsp;needed.&lt;/p&gt;
&lt;p&gt;The following figure shows the dependency graph for our &lt;strong&gt;python&lt;/strong&gt; recipe.  It
was created with the command &lt;code class=&quot;samp&quot;&gt;ownconda dep-graph external-recipes/
--implicit --requirements python --out=dot &amp;gt; deps_python.dot&lt;/code&gt;:&lt;/p&gt;

&lt;a href=&quot;https://stefan.sofa-rockers.org/images/packaging-deps-python.svg&quot;&gt;&lt;img alt=&quot;Dependency graph for Python&quot; src=&quot;https://stefan.sofa-rockers.org/images/packaging-deps-python.svg&quot; /&gt;&lt;/a&gt;
Dependency graph for Python

&lt;p&gt;These graphs can become quite unclear relatively fast, though.  This is the
full dependency graph for the ownconda&amp;nbsp;tools:&lt;/p&gt;

&lt;a href=&quot;https://stefan.sofa-rockers.org/images/packaging-deps-ownconda-tools.svg&quot;&gt;&lt;img alt=&quot;Dependency graph for the ownconda tools&quot; src=&quot;https://stefan.sofa-rockers.org/images/packaging-deps-ownconda-tools.svg&quot; /&gt;&lt;/a&gt;
Dependency graph for the ownconda tools

&lt;p&gt;I do not want to know how this would have looked if these were all JavaScript
packages&amp;nbsp;…&lt;/p&gt;



&lt;h2&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id14&quot;&gt;Making it&amp;nbsp;work&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that you know the theory of how everything should work, we can start to
bootstrap our packaging&amp;nbsp;infrastructure.&lt;/p&gt;
&lt;p&gt;Some of the required steps are a bit laborious and you may need the assistance
of your &lt;span class=&quot;caps&quot;&gt;IT&lt;/span&gt; department in order to set up the domains and GitLab.  Other steps
can be automated and should be relatively painless,&amp;nbsp;though:&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id15&quot;&gt;Set up GitLab and a Conda repo&amp;nbsp;server&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/install/&quot;&gt;Install GitLab&lt;/a&gt;.  I’ll assume that it will be available under
&lt;code&gt;https://git.services.own&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setup the forge server.  I’ll assume that it will be available under
&lt;code&gt;https://forge.services.own&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In your www root, create a &lt;code class=&quot;file&quot;&gt;conda&lt;/code&gt; folder which will contain the
channels and their&amp;nbsp;packages.&lt;/li&gt;
&lt;li&gt;Create the upload service that copies files sent to
&lt;code class=&quot;samp&quot;&gt;/upload/&lt;em&gt;channel&lt;/em&gt;&lt;/code&gt; into &lt;code class=&quot;samp&quot;&gt;&lt;em&gt;www-root&lt;/em&gt;/conda/&lt;em&gt;channel&lt;/em&gt;/linux-64&lt;/code&gt;
and calls &lt;code&gt;conda index&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Setup a &lt;a href=&quot;https://docs.docker.com/registry/deploying/&quot;&gt;Docker registry&lt;/a&gt; on the&amp;nbsp;server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id16&quot;&gt;Bootstrap Python, Pip and&amp;nbsp;Conda&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Clone all repositories that you need for the bootstrapping&amp;nbsp;process:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; mkdir -p ~/Projects/ownconda
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Projects/ownconda
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; r in external-recipes ownconda-tools ownconda-dist&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&amp;gt;     git clone git@gitlab.com:ownconda/&lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;.git &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&amp;gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build all packages needed to create your Conda distribution.  The ownconda
tools provide a script that uses a Docker container to build all packages
and upload them into the &lt;strong class=&quot;channel&quot;&gt;stable&lt;/strong&gt;&amp;nbsp;channel:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ownconda-tools/contrib/bootstrap.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;admonition note&quot;&gt;
&lt;p class=&quot;admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p&gt;The script might fail to build some packages.  The most probable causes
are &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; timeouts or unavailable servers.  Just re-run the script and
hope for the best.  If the issue persists, you might need to fix the
corresponding Conda recipe, though (Sometimes, people re-upload a source
archive and thereby change its &lt;span class=&quot;caps&quot;&gt;SHA256&lt;/span&gt;&amp;nbsp;value).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create the initial Conda distributions and upload&amp;nbsp;them:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ownconda-dist
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; python gen_installer.py .. &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.7
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; python gen_installer.py .. &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.7 dev
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; -
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl -F &lt;span class=&quot;s2&quot;&gt;&amp;quot;file=@ownconda-3.7.sh&amp;quot;&lt;/span&gt; https://forge.services.own/upload/stable
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl -F &lt;span class=&quot;s2&quot;&gt;&amp;quot;file=@ownconda-3.7-dev.sh&amp;quot;&lt;/span&gt; https://forge.services.own/upload/stable
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Create symlinks for more convenience:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ssh forge.services.own
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; www-root/conda/stable
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; ln -s linux-64/ownconda-3.7.sh
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; ln -s linux-64/ownconda-3.7.sh ownconda.sh
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; ln -s linux-64/ownconda-3.7-dev.sh
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; ln -s linux-64/ownconda-3.7-dev.sh ownconda-dev.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now download the installers from
&lt;code class=&quot;samp&quot;&gt;https://forge.services.own/conda/stable/ownconda[-dev][-3.7].sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setup your local ownconda environment.  You can use the installer that you
just built (or (re)download it from the forge if you want to test&amp;nbsp;it):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; bash ownconda-3.7.sh
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Downloads
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; wget https://forge.services.own/conda/stable/ownconda-dev.sh
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; bash ownconda-dev.sh
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc   &lt;span class=&quot;c1&quot;&gt;# or open a new terminal&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; conda info
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ownconda --help
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id17&quot;&gt;Build the docker&amp;nbsp;images&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a GitLab pipeline for the &lt;strong&gt;centos7-ownconda-runtime&lt;/strong&gt; project.  This
will generate your runtime Docker&amp;nbsp;image.&lt;/li&gt;
&lt;li&gt;When the runtime image is available, create a GitLab pipeline for the
&lt;strong&gt;centos7-ownconda-develop&lt;/strong&gt; project.  This will generate your development
Docker image used in your projects’&amp;nbsp;pipelines.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id18&quot;&gt;Build all&amp;nbsp;packages&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a GitLab pipeline for the &lt;strong&gt;external-recipes&lt;/strong&gt; project to build and
upload the remaining 3rd party&amp;nbsp;packages.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can now build the packages for your internal projects.  You must create
the pipelines in dependency order so that the requirements for each project
are built first.  The ownconda tools help you with&amp;nbsp;that:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; mkdir gl-projects
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; gl-projects
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ownconda gitlab update
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ownconda dep-graph --no-third-party --out&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;project . &amp;gt; project.txt
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; p in &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat projects.txt&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&amp;gt;     ownconda gitlab -p &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; run-py ../ownconda-tools/contrib/gl_run_pipeline.py &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&amp;gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If a pipeline fails and the script aborts, just remove the successful
projects from the &lt;code class=&quot;file&quot;&gt;projects.txt&lt;/code&gt; and re-run the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Congratulations, you are done!  You have built all internal and external
packages, you have created your own Conda distribution and you have all Docker
images that you need for running and building your&amp;nbsp;packages.&lt;/p&gt;



&lt;h2&gt;&lt;a href=&quot;https://stefan.sofa-rockers.org/feeds/python#id19&quot;&gt;Outlook / Future work and unsolved&amp;nbsp;problems&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Managing your organization’s packaging infrastructure like this is a whole lot
of work but it rewards you with a lot of independence, control and&amp;nbsp;flexibility.&lt;/p&gt;
&lt;p&gt;We have been continuously improving our process during the last years and still
have a lot of ideas on our&amp;nbsp;roadmap.&lt;/p&gt;
&lt;p&gt;While, for example, GitLab has a very good authentication and authorization
system, our Conda repository lacks all of this (apart from &lt;span class=&quot;caps&quot;&gt;IP&lt;/span&gt; restrictions for
uploading and downloading packages).  We do not want users (or automated
scripts) to enter credentials when they install or update packages, but we are
not aware of a (working) password-less alternative.  Combining Conda with
Kerberos might work in theory, but in practice this is not yet possible.
Currently, we are experimenting with &lt;span class=&quot;caps&quot;&gt;HTTPS&lt;/span&gt; client certificates.  This might
work well enough but it also doesn’t seem to be the Holy Grail of Conda&amp;nbsp;Authorization.&lt;/p&gt;
&lt;p&gt;Another big issue is creating more reproducible builds and easier rollback
mechanisms in case an update ships broken code.  Currently, we are pinning the
requirements’ versions during a pipelines &lt;em&gt;test&lt;/em&gt; stage.  We are also working
towards dockerized Blue Green Deployments and are exploring tools for container
orchestration (like &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;).  On the other hand, we are still delivering
&lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; applications to client workstations via Bash scripts … (this works quite
well, though, and provides us with a good amount of control and&amp;nbsp;flexibility).&lt;/p&gt;
&lt;p&gt;We are also still having an eye on Pip.  Conda has the biggest benefits when
deploying packages to VMs and client workstations.  The more we use docker, the
smaller the benefit &lt;em&gt;might&lt;/em&gt; become, and we &lt;em&gt;might&lt;/em&gt; eventually switch back to&amp;nbsp;Pip.&lt;/p&gt;
&lt;p&gt;But for now, Conda serves us very&amp;nbsp;well.&lt;/p&gt;
&lt;div class=&quot;admonition admonition-comments&quot;&gt;
&lt;p class=&quot;admonition-title&quot;&gt;Comments&lt;/p&gt;
&lt;p&gt;You can leave comments and suggestions at &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hackernews&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/Python/&quot;&gt;Reddit&lt;/a&gt; or reach
me via &lt;a href=&quot;https://twitter.com/sscherfke/&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://mastodon.social/@sscherfke&quot;&gt;Mastodon&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
	<pubDate>Thu, 18 Apr 2019 11:37:00 +0000</pubDate>
</item>
<item>
	<title>The Code Bits: Introduction to Generators in Python</title>
	<guid>https://thecodebits.com/introduction-to-generators-in-python/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=introduction-to-generators-in-python</guid>
	<link>https://thecodebits.com/introduction-to-generators-in-python/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=introduction-to-generators-in-python</link>
	<description>&lt;p&gt;In this post, we will learn what &lt;em&gt;generators&lt;/em&gt; are, how to create them, how they work and how to use them in Python.&lt;/p&gt;



&lt;h2&gt;Generator function&lt;/h2&gt;



&lt;p&gt;Generators are functions that allow us to create &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop/#Iterators&quot;&gt;iterators&lt;/a&gt; in Python. They provide a convenient, simple and memory-efficient approach to creating iterators. These are useful when dealing with large amounts of data.&lt;/p&gt;



&lt;p&gt;Before starting with &lt;em&gt;generators&lt;/em&gt;, it would be good to &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop/&quot;&gt;understand how a for-loop works in Python.&lt;/a&gt; It will be also be useful to know what &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop/#Iterables&quot;&gt;iterable&lt;/a&gt;, &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop/#Iterators&quot;&gt;iterator&lt;/a&gt; and &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop/#The_Iterator_Protocol&quot;&gt;the iterator protocol&lt;/a&gt; are.&lt;/p&gt;



&lt;h2&gt;An example: Generate even numbers using a generator function&lt;/h2&gt;



&lt;p&gt;Let us start with a simple example. We will be creating a generator function which generates a specific count of even numbers starting from a given value. We will be using this same example throughout this post.&lt;/p&gt;



&lt;pre&gt;def generate_even_numbers(start, count):
    # Make sure that the first number is even.
    start = start if start % 2 == 0 else start + 1

    while count &amp;gt; 0:
        yield start
        start += 2
        count -= 1
&lt;/pre&gt;



&lt;p&gt;Note that we used a &lt;strong&gt;yield&lt;/strong&gt; statement within the function body to return our data.  If you don&amp;#8217;t understand it right away, no need to worry, we will get to its roots soon enough!&lt;/p&gt;



&lt;p&gt;Let us see how we would use this generator function in a for-loop.&lt;/p&gt;



&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; generator_iterator = generate_even_numbers(0, 3)
&amp;gt;&amp;gt;&amp;gt; for num in generator_iterator:
...     print(num)
...
0
2
4
&lt;/pre&gt;



&lt;p&gt;As you can see, we were able to use the value returned by the generator function in a for-loop, so it must have been an &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop/#Iterables&quot;&gt;iterable﻿&lt;/a&gt;.&lt;/p&gt;



&lt;h2&gt;Generator function returns a generator iterator&lt;/h2&gt;



&lt;p&gt;Let us check the type of the value returned by the generator function.&lt;/p&gt;



&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; generator_iterator = generate_even_numbers(0, 3)
&amp;gt;&amp;gt;&amp;gt; type(generator_iterator)
&amp;lt;class 'generator'&amp;gt;
&lt;/pre&gt;



&lt;p&gt;Okay, so the value returned is of &lt;strong&gt;type &amp;#8216;generator&amp;#8217;.&lt;/strong&gt; This value is usually referred to as the &lt;strong&gt;generator iterator&lt;/strong&gt;, even though the term generator is sometimes used interchangeably to refer to both the generator function as well as the generator iterator.&lt;/p&gt;



&lt;p&gt;Now let us confirm that the &lt;em&gt;generator_iterator&lt;/em&gt; is indeed an &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop/#Iterables&quot;&gt;iterator&lt;/a&gt;. As per &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop/#The_Iterator_Protocol&quot;&gt;the iterator protocol&lt;/a&gt;, an &lt;em&gt;iterator&lt;/em&gt; must: &lt;/p&gt;



&lt;ol&gt;&lt;li&gt;return its elements one by one when &lt;em&gt;next() &lt;/em&gt;method is called on it. When all the elements are exhausted, it must raise &lt;em&gt;StopIteration&lt;/em&gt;.&lt;/li&gt;
&lt;pre&gt;
&gt;&gt;&gt; generator_iterator = generate_even_numbers(0, 3)
&gt;&gt;&gt; next(generator_iterator)
0
&gt;&gt;&gt; next(generator_iterator)
2
&gt;&gt;&gt; next(generator_iterator)
4
&gt;&gt;&gt; next(generator_iterator)
Traceback (most recent call last):
  File &quot;&quot;, line 1, in 
StopIteration
&lt;/pre&gt;
&lt;li&gt;return itself when &lt;em&gt;iter() &lt;/em&gt;method is called on it.&lt;/li&gt;
&lt;pre&gt;
&gt;&gt;&gt; generator_iterator = generate_even_numbers(0, 3)
&gt;&gt;&gt; generator_iterator
&amp;lt;generator object generate_even_numbers at 0x10cb431b0&amp;gt;
&gt;&gt;&gt; iter(generator_iterator)
&amp;lt;generator object generate_even_numbers at 0x10cb431b0&amp;gt;
&lt;/pre&gt;
&lt;/ol&gt;



&lt;p&gt;So now we know that the generator function is a convenient way to create an iterator. But what makes this function different from our normal methods in Python? How does it return an iterator? The answer lies in the &lt;em&gt;yield&lt;/em&gt; statement.&lt;/p&gt;



&lt;h2&gt;How does the generator function work?&lt;/h2&gt;



&lt;p&gt;Let us revisit our generator example, now with some &lt;em&gt;prints&lt;/em&gt; so that we can clearly understand how it works.&lt;/p&gt;



&lt;pre&gt;def generate_even_numbers(start, count):
    print(&quot;In the generator function&quot;)

    # Make sure that the first number is even.
    start = start if start % 2 == 0 else start + 1

    while count &amp;gt; 0:
        print(&quot;[count:{}] Hello! Before I yield....&quot;.format(count))
        yield start
        print(&quot;[count:{}] Hey! I am back!!&quot;.format(count))
        start += 2
        count -= 1
    print(&quot;[count:{}] That's all I have got...&quot;.format(count))
&lt;/pre&gt;



&lt;p&gt;Now let us see its usage.&lt;/p&gt;



&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; generator_iterator = generate_even_numbers(3, 2)
&amp;gt;&amp;gt;&amp;gt; for num in generator_iterator:
...     print(&quot;Processing even number: {}&quot;.format(num))
...
In the generator function
[count:2] Hello! Before I yield....
Processing even number: 4
[count:2] Hey! I am back!!
[count:1] Hello! Before I yield....
Processing even number: 6
[count:1] Hey! I am back!!
[count:0] That's all I have got...
&lt;/pre&gt;



&lt;p&gt;There are a couple of things you should notice:&lt;/p&gt;



&lt;ol&gt;&lt;li&gt;Lazy evaluation&lt;/li&gt;&lt;li&gt;How the yield statement works&lt;/li&gt;&lt;/ol&gt;



&lt;p&gt;Let us discuss these.&lt;/p&gt;



&lt;h3&gt;Lazy evaluation&lt;/h3&gt;



&lt;p&gt;Calling the function &lt;em&gt;generate_even_numbers(3, 2)&lt;/em&gt; just returns a generator iterator. It does not start executing the function. This is called &lt;em&gt;&lt;strong&gt;lazy evaluation&lt;/strong&gt;&lt;/em&gt;. They start executing and yielding values only when it is needed, that is, when &lt;em&gt;next()&lt;/em&gt; is called. As a result, only one element of the iterator is held in memory at a time. This makes them &lt;strong&gt;&lt;em&gt;memory efficient&lt;/em&gt;&lt;/strong&gt; and hence useful when dealing with large amounts of data.&lt;/p&gt;



&lt;h3&gt;How does the yield statement work?&lt;/h3&gt;



&lt;p&gt;By now, you may have gathered that the only special thing about the generator function with respect to normal functions is that they use &lt;em&gt;yield&lt;/em&gt; to return their values. However, the &lt;em&gt;yield&lt;/em&gt; statement is very much different from a normal &lt;em&gt;return&lt;/em&gt; statement.&lt;/p&gt;



&lt;p&gt;The yield statement makes a function a generator.&lt;/p&gt;



&lt;p&gt;When &lt;em&gt;next()&lt;/em&gt; is called on the generator iterator, the generator function executes till a yield statement is encountered. When the yield statement is reached, the execution state of the function is remembered (including the local variables and any try statements) and the function&amp;#8217;s execution is temporarily suspended. The value associated with the &lt;em&gt;yield&lt;/em&gt; statement is returned by the &lt;em&gt;next()&lt;/em&gt; method.&lt;/p&gt;



&lt;p&gt;When &lt;em&gt;next() &lt;/em&gt;is called again, the generator function resumes execution. The saved local execution state is recollected and the statement next to yield is executed first. Then it continues executing till the next yield statement is encountered. Thus goes the process.&lt;/p&gt;



&lt;p&gt;Finally, if there is no more &lt;em&gt;yield&lt;/em&gt; in the generator function when &lt;em&gt;next()&lt;/em&gt; is called, it ends up raising StopIteration. At this point, the for-loop would exit.&lt;/p&gt;



&lt;h2&gt;A simpler example: Generator function to yield some strings&lt;/h2&gt;



&lt;p&gt;Let us make sure that all of that is clear with a simpler example.&lt;/p&gt;



&lt;pre&gt;def generate_hello_world():
    print(&quot;....Started executing the generator function&quot;)
    yield &quot;Hello&quot;
    print(&quot;....Between yields!&quot;)
    yield &quot;World&quot;
    print(&quot;....Done with yields!&quot;)
&lt;/pre&gt;



&lt;p&gt;Let us see how to use the iterator returned by the generator function using &lt;em&gt;next()&lt;/em&gt; method.&lt;/p&gt;



&lt;pre&gt;
&gt;&gt;&gt; &quot;&quot;&quot; We get the generator iterator &quot;&quot;&quot;
&gt;&gt;&gt; generator_iterator = generate_hello_world()

&gt;&gt;&gt; &quot;&quot;&quot; When next() is called, the function executes till the first yield statement &quot;&quot;&quot;
&gt;&gt;&gt; next(generator_iterator)
....Started executing the generator function
'Hello'

&gt;&gt;&gt; &quot;&quot;&quot; When next() is called again, it picks up where it left off and executes till the next yield statement &quot;&quot;&quot;
&gt;&gt;&gt; next(generator_iterator)
....Between yields!
'World'

&gt;&gt;&gt; &quot;&quot;&quot; When there are no more yields, calling next() raises StopIteration &quot;&quot;&quot;
&gt;&gt;&gt; next(generator_iterator)
....Done with yields!
Traceback (most recent call last):
  File &quot;&quot;, line 1, in 
StopIteration
&lt;/pre&gt;



&lt;p&gt;Now let us see how to use the generator function in a for-loop.&lt;/p&gt;



&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; for word in generate_hello_world():
...     print(word)
...
....Started executing the generator function
Hello
....Between yields!
World
....Done with yields!
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;



&lt;p&gt;On a side note, pay attention to how we did not use a separate variable to hold the generator iterator as in our previous examples. We directly called the generator function with the for-loop. This is doable because of &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop&quot;&gt;how a for-loop works in Python&lt;/a&gt;. The expression following &amp;#8220;&lt;em&gt;in&lt;/em&gt;&amp;#8221; is evaluated only once. This expression is expected to result in an &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop/#Iterables&quot;&gt;iterable.&lt;/a&gt; In this case, it will result in the generator iterator. Then the method &lt;em&gt;iter()&lt;/em&gt; is called on the iterable to get the &lt;a href=&quot;https://thecodebits.com/understanding-python-for-loop/#Iterators&quot;&gt;iterator&lt;/a&gt; associated with it. Then &lt;em&gt;next()&lt;/em&gt; is called repeatedly on the iterator until the iterator is exhausted.&lt;/p&gt;



&lt;h2&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;In this post, we learned how to create generator functions in Python, how they work and how to use them.&lt;/p&gt;</description>
	<pubDate>Thu, 18 Apr 2019 07:46:11 +0000</pubDate>
</item>
<item>
	<title>Davide Moro: Testing metrics thoughts and examples: how to turn lights on and off through MQTT with pytest-play</title>
	<guid>http://davidemoro.blogspot.com/2019/04/testing-metrics-thoughts-and-examples.html</guid>
	<link>http://davidemoro.blogspot.com/2019/04/testing-metrics-thoughts-and-examples.html</link>
	<description>In this article I'll share some personal thoughts about&amp;nbsp;&lt;b&gt;test metrics&lt;/b&gt;&amp;nbsp;and talk about some technologies and tools playing around a real example: how to turn lights on and off through MQTT collecting test metrics.&lt;br /&gt;&lt;br /&gt;By the way the considerations contained in this article are valid for any system, technology, test strategy and test tools so you can easily integrate your existing automated tests with&amp;nbsp;&lt;i&gt;statsd&lt;/i&gt;&amp;nbsp;with a couple of lines of code in any language.&lt;br /&gt;&lt;br /&gt;I will use the&amp;nbsp;&lt;a href=&quot;https://github.com/pytest-dev/pytest-play&quot;&gt;pytest-play&lt;/a&gt;&amp;nbsp;tool in this example so that even non programmers should be able to play with automation collecting metrics because this tool is based on YAML (this way no classes, functions, threads, imports, no compilation, etc) and if Docker is already no installation is needed. You'll need only a bit of command line knowledge and traces of &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; expressions like &lt;i&gt;variables[&quot;count&quot;] &amp;gt; 0&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Anyway... yes, you can drive telematics/IoT devices with MQTT using &lt;a href=&quot;https://github.com/pytest-dev/pytest-play&quot;&gt;pytest-play&lt;/a&gt; collecting and visualizing metrics thanks to:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/statsd/statsd&quot;&gt;statsd&lt;/a&gt;, a &quot;Daemon for easy but powerful stats aggregation&quot;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://graphiteapp.org/&quot;&gt;Graphite&lt;/a&gt;, a &lt;i&gt;statsd&lt;/i&gt;&amp;nbsp;compatible &quot;Make it easy to store and graph metrics&quot; solution&lt;/li&gt;&lt;/ul&gt;or any other &lt;i&gt;statsd&lt;/i&gt; capable monitoring engine.&lt;br /&gt;&lt;br /&gt;In our example we will see step by step how to:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;send a command to a device through MQTT (e.g., turn on a fridge light)&lt;/li&gt;&lt;li&gt;make assertions against the expected asynchronous response sent back by the device through MQTT (e.g., report light on/off status. In our case we expect a light on status)&lt;/li&gt;&lt;li&gt;collect key performance externally observable metrics on a JUnit compatible report file and optionally feed a&amp;nbsp;&lt;i&gt;statsd&lt;/i&gt;&amp;nbsp;external metrics/monitoring engine (e.g, track how much time was needed for a round trip command/feedback on the MQTT broker)&lt;/li&gt;&lt;/ul&gt;using MQTT and&amp;nbsp;&lt;a href=&quot;https://github.com/pytest-dev/pytest-play&quot;&gt;pytest-play&lt;/a&gt;, using YAML files.&lt;br /&gt;&lt;h3&gt;Why test metrics?&lt;/h3&gt;&quot;Because we can&quot; (cit.&amp;nbsp;&lt;i&gt;Big Band Theory&lt;/i&gt;,&amp;nbsp;&lt;i&gt;Series 01 Episode 09 - The Cooper-Hofstadter Polarization&lt;/i&gt;):&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;&lt;b&gt;Sheldon:&lt;/b&gt;&amp;nbsp;Someone in Sezchuan province, China is using his computer to turn our lights on and off.&lt;br /&gt;&lt;b&gt;Penny:&lt;/b&gt;&amp;nbsp;Huh, well that’s handy. Um, here's a question... why?!&lt;br /&gt;&lt;b&gt;All together:&lt;/b&gt;&amp;nbsp;Because we can!&lt;/i&gt;&lt;/blockquote&gt;If the &quot;&lt;i&gt;Because we can&lt;/i&gt;&quot; answer doesn't convince your boss, there are several advantages that let you react proactively before something of not expected happens. And to be proactive you need knowledge of you system under test thanks to measurable metrics that let you:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;know how your system behaves (and confirm where bottlenecks are located)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;in standard conditions&lt;/li&gt;&lt;li&gt;under load&lt;/li&gt;&lt;li&gt;under stress&lt;/li&gt;&lt;li&gt;long running&lt;/li&gt;&lt;li&gt;peak response&lt;/li&gt;&lt;li&gt;with a big fat databases&lt;/li&gt;&lt;li&gt;simulating a small percentage of bad requests&lt;/li&gt;&lt;li&gt;or any other sensible scenario that needs to be covered&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;know under which conditions your users will perceive&lt;/li&gt;&lt;ul&gt;&lt;li&gt;no performance deterioration&lt;/li&gt;&lt;li&gt;a performance deterioration&lt;/li&gt;&lt;li&gt;a critical performance deterioration&lt;/li&gt;&lt;li&gt;system stuck&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;understand how much time is available before first/critical/blocking performance deterioration will met considering users/application growth trends&lt;/li&gt;&lt;/ul&gt;so that you can be &lt;b&gt;proactive&lt;/b&gt; and:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;keep your stakeholders informed very valuable information&lt;/li&gt;&lt;li&gt;improve your system performance before something of bad will happen&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-QMGiNrId3F4/XLgbEQSAiZI/AAAAAAAAMEQ/FnlCyVRj2RA4KIWhUfZSynNaCMNpjKzUwCLcBGAs/s1600/release.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;336&quot; src=&quot;https://4.bp.blogspot.com/-QMGiNrId3F4/XLgbEQSAiZI/AAAAAAAAMEQ/FnlCyVRj2RA4KIWhUfZSynNaCMNpjKzUwCLcBGAs/s640/release.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;Ouch! The effects of a bad release in action&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In addition you can:&lt;/div&gt;&lt;ul&gt;&lt;li&gt;anticipate test automation failures due to timeouts, maybe you already experienced a test always passing and one day it will start sporadically to exceed your maximum timeout&lt;/li&gt;&lt;li&gt;choose more carefully timeouts if there are no specific requirements&lt;/li&gt;&lt;li&gt;avoid false alarms like a generic &quot;&lt;i&gt;today the system seems slower&lt;/i&gt;&quot;. If there is a confirmed problem you might say instead: &quot;&lt;i&gt;compared to previous measurements, the system response is 0.7 s slower today. Systematically.&lt;/i&gt;&quot;&lt;/li&gt;&lt;li&gt;find corner cases. You might notice that the average response time is always pretty the same or slightly higher because there is a particular scenario that systematically produces a hard to discover response time peak compared to similar requests and that might create some integration problems if other components are not robust&lt;/li&gt;&lt;li&gt;avoid retesting response times with previous versions comparing to the actual built, because everything has been already tracked&lt;/li&gt;&lt;/ul&gt;What should you measure? Everything of valuable for you:.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;API response times&lt;/li&gt;&lt;li&gt;time needed for an asynchronous observable effect will happen&lt;/li&gt;&lt;li&gt;metrics from a user/business perspective (e.g., it is more important for users API response times, browser first paint or how when she/he can start using a web page?)&lt;/li&gt;&lt;li&gt;metadata (browser, versions, etc). Metadata formats non compatible with &lt;i&gt;statsd&lt;/i&gt; might be tracked on custom JUnit XML reports&lt;/li&gt;&lt;li&gt;pass/skip/error/etc rates&lt;/li&gt;&lt;li&gt;deploys&lt;/li&gt;&lt;li&gt;etc&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;Some information about statsd/Graphite and MQTT&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;statsd/Graphite&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;Very very interesting readings about &lt;i&gt;statsd&lt;/i&gt; and the &lt;/span&gt;&lt;span&gt;measure everything approach&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://codeascraft.com/2011/02/15/measure-anything-measure-everything/&quot;&gt;https://codeascraft.com/2011/02/15/measure-anything-measure-everything/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://codeascraft.com/2010/12/08/track-every-release/&quot;&gt;https://codeascraft.com/2010/12/08/track-every-release/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;If you are not familiar with statsd and Graphite you can install it (&lt;i&gt;root&lt;/i&gt;/&lt;i&gt;root&lt;/i&gt; by default):&lt;/div&gt;&lt;h3&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;docker run -d\&lt;br /&gt;&amp;nbsp;--name graphite\&lt;br /&gt;&amp;nbsp;--restart=always\&lt;br /&gt;&amp;nbsp;-p 80:80\&lt;br /&gt;&amp;nbsp;-p 2003-2004:2003-2004\&lt;br /&gt;&amp;nbsp;-p 2023-2024:2023-2024\&lt;br /&gt;&amp;nbsp;-p 8125:8125/udp\&lt;br /&gt;&amp;nbsp;-p 8126:8126\&lt;br /&gt;&amp;nbsp;graphiteapp/graphite-statsd&lt;/i&gt;&lt;/blockquote&gt;&lt;/h3&gt;and play with it sending fake metrics using &lt;i&gt;nc&lt;/i&gt;:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;echo -n &quot;my.metric:320|ms&quot;&amp;nbsp;| nc -u -w0 127.0.0.1 8125&lt;/i&gt;&lt;/blockquote&gt;you'll find a new metric aggregations available:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;stats.timers.$KEY.mean&lt;br /&gt;stats.timers.$KEY.mean_$PCT&lt;br /&gt;stats.timers.$KEY.upper_$PCT&lt;br /&gt;stats.timers.$KEY.sum_$PCT&lt;br /&gt;...&lt;/i&gt;&lt;/blockquote&gt;where:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;$KEY&lt;/i&gt; is &lt;i&gt;my.metric&lt;/i&gt; in this example (so metric keys are hierarchical for a better organization!)&lt;/li&gt;&lt;li&gt;&lt;i&gt;$PCT&lt;/i&gt; is the percentile (e.g., &lt;i&gt;stats.timers.my.metric.upper_90&lt;/i&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;More info, options, configurations and metric types here:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/statsd/statsd&quot;&gt;https://github.com/statsd/statsd&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://graphiteapp.org/&quot;&gt;https://graphiteapp.org&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;What is MQTT?&lt;/h3&gt;From &lt;a href=&quot;http://mqtt.org/&quot;&gt;http://mqtt.org/&lt;/a&gt;:&lt;br /&gt;&lt;blockquote&gt;&lt;i&gt;MQTT is a machine-to-machine (M2M)/&quot;Internet of Things&quot; connectivity protocol.&lt;br /&gt;It was designed as an extremely lightweight publish/subscribe messaging transport.&lt;br /&gt;It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.&lt;/i&gt;&lt;/blockquote&gt;MQTT is the standard de facto for smarthome/IoT/telematics/embedded devices communications, even on low performance embedded devices, and it&lt;br /&gt;is available on many cloud infrastructures.&lt;br /&gt;&lt;br /&gt;Every actor can publish a message for a certain topic and every actor can subscribe to a set of topics, so you get a message for every message of interest.&lt;br /&gt;&lt;br /&gt;Topics are hierarchical so that you can subscribe to a very specific or wide range of topics coming from devices or sensors (e.g., &lt;i&gt;/house1/room1/temp&lt;/i&gt;, &lt;i&gt;/house1/room1/humidity&lt;/i&gt; or all messages related to &lt;i&gt;/house1/room1/&lt;/i&gt; etc).&lt;br /&gt;&lt;br /&gt;For example in a telematics application every device will listen to any command or configuration sent by a server component through a MQTT broker (e.g., &lt;i&gt;project1/DEVICE_SN/cmd&lt;/i&gt;);&lt;br /&gt;server will be notified for any device response or communication subscribing to a particular topic (e.g., &lt;i&gt;project1/DEVICE_SN/data&lt;/i&gt;).&lt;br /&gt;So:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;you send commands to a particular device publishing messages on &lt;i&gt;foo/bar/DEVICE_SN/cmd&lt;/i&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;you expect responses subscribing to &lt;i&gt;foo/bar/DEVICE_SN/data.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;If you are not confident with MQTT you can install the mosquitto utility and play with the &lt;i&gt;mosquitto_sub&lt;/i&gt; and &lt;i&gt;mosquitto_pub&lt;/i&gt; commands using with the public broker &lt;a href=&quot;http://iot.eclipse.org/&quot;&gt;iot.eclipse.org&lt;/a&gt;. For example you can publish a message for a given topic:&lt;br /&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-SP--NIcXiGQ/XKyYJ_P-YWI/AAAAAAAAMDE/XBwcbZr9nqscqHfo4ashMyOFqeCz-dKSQCLcBGAs/s1600/mosquitto_pub.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;57&quot; src=&quot;https://1.bp.blogspot.com/-SP--NIcXiGQ/XKyYJ_P-YWI/AAAAAAAAMDE/XBwcbZr9nqscqHfo4ashMyOFqeCz-dKSQCLcBGAs/s640/mosquitto_pub.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;$ mosquitto_pub -t foo/bar -h iot.eclipse.org -m &quot;hello pytest-play!&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&amp;nbsp;and see the response assuming that you previously subscribed to &lt;i&gt;foo/bar&lt;/i&gt;&amp;nbsp;(we see all messages sent with &lt;i&gt;mosquitto_pub&lt;/i&gt;&amp;nbsp;of our topics of interest here):&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-c1CX39fNGmk/XKyYJ0jdtgI/AAAAAAAAMDI/OGnho_Z1V9khapdcIPq5VfJAGJrH4sWEACLcBGAs/s1600/mosquitto_sub.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;74&quot; src=&quot;https://1.bp.blogspot.com/-c1CX39fNGmk/XKyYJ0jdtgI/AAAAAAAAMDI/OGnho_Z1V9khapdcIPq5VfJAGJrH4sWEACLcBGAs/s640/mosquitto_sub.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;$ mosquitto_sub -t foo/bar/# -h iot.eclipse.org -v&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;Prerequisites&lt;/h2&gt;&lt;i&gt;pytest-play&lt;/i&gt; is multi platform because it is based on Python (installation might be different for different operative system).&lt;br /&gt;Using &lt;i&gt;Docker&lt;/i&gt; instead no installation is required, you need to install &lt;i&gt;Docker&lt;/i&gt; and you are ready to start playing with &lt;i&gt;pytest-play&lt;/i&gt; without any installation:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Windows, see &lt;a href=&quot;https://docs.docker.com/windows/started&quot;&gt;https://docs.docker.com/windows/started&lt;/a&gt;&lt;/li&gt;&lt;li&gt;OS X, see &lt;a href=&quot;https://docs.docker.com/mac/started/&quot;&gt;https://docs.docker.com/mac/started/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Linux, see &lt;a href=&quot;https://docs.docker.com/linux/started/&quot;&gt;https://docs.docker.com/linux/started/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;As a user you should be confident with a shell and command line options.&lt;/div&gt;&lt;h2&gt;Steps&lt;/h2&gt;And now let's start with our example.&lt;br /&gt;&lt;h3&gt;Create a new folder project&lt;/h3&gt;Create a new folder (e.g., &lt;i&gt;fridge&lt;/i&gt;) and enter inside.&lt;br /&gt;&lt;h3&gt;Create a variables file&lt;/h3&gt;Create a &lt;i&gt;env.yml&lt;/i&gt; file with the following contents:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;pytest-play:&lt;br /&gt;&amp;nbsp; mqtt_host: YOUR_MQTT_HOST&lt;br /&gt;&amp;nbsp; mqtt_port: 20602&lt;br /&gt;&amp;nbsp; mqtt_endpoint: foo/bar&lt;/i&gt;&lt;/blockquote&gt;You can have one or more configuration files defining variables for your convenience. Typically you have one configuration file or each target environment (e.g., &lt;i&gt;dev.yml&lt;/i&gt;, &lt;i&gt;alpha.yml&lt;/i&gt;, etc).&lt;br /&gt;&lt;br /&gt;We will use later this file for passing variables thanks to the &lt;i&gt;--variables env.yml&lt;/i&gt; command line option, so you can switch environment passing different files.&lt;br /&gt;&lt;h3&gt;Create the YML script file&lt;/h3&gt;Create a a &lt;i&gt;YAML&lt;/i&gt; file called &lt;i&gt;&lt;b&gt;test_&lt;/b&gt;light_on&lt;b&gt;.yml&lt;/b&gt;&lt;/i&gt;&amp;nbsp;inside the &lt;i&gt;fridge&lt;/i&gt; folder or any other subfolder if any. Note well: the &lt;i&gt;*.yml&lt;/i&gt; extension and &lt;i&gt;test_&lt;/i&gt; prefix matter otherwise the file won't be considered as executable at this time of writing.&lt;br /&gt;&lt;br /&gt;If you need to simulate a command or simulate a device activity you need just one command inside your YAML file:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;- comment: send light turn ON command&lt;br /&gt;&amp;nbsp; provider: mqtt&lt;br /&gt;&amp;nbsp; type: publish&lt;br /&gt;&amp;nbsp; host: &quot;$mqtt_host&quot;&lt;br /&gt;&amp;nbsp; port: &quot;$mqtt_port&quot;&lt;br /&gt;&amp;nbsp; endpoint: &quot;$mqtt_endpoint/$device_serial_number/cmd&quot;&lt;br /&gt;&amp;nbsp; payload: '{&quot;Payload&quot;:&quot;244,1&quot;}'&lt;/i&gt;&lt;/blockquote&gt;where &lt;i&gt;244&lt;/i&gt; stands for the internal &lt;i&gt;ModBUS&lt;/i&gt; registry reference for the fridge light and &lt;i&gt;1&lt;/i&gt; stands for ON (and &lt;i&gt;0&lt;/i&gt; for OFF).&lt;br /&gt;&lt;br /&gt;But... wait a moment. Until now we are only sending a payload&amp;nbsp;to a MQTT broker resolving the &lt;i&gt;mqtt_host&lt;/i&gt; variable for a given endpoint and nothing more... pretty the same business you can do with &lt;i&gt;mosquitto_pub&lt;/i&gt;, right? You are right! That's why we are about to implement something of more:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;subscribe to our target topic where the expected response will come and store every single received message to a &lt;i&gt;messages&lt;/i&gt; variable (it will contain an array of response payload strings)&lt;/li&gt;&lt;li&gt;add an asynchronous waiter waiting for the expected device response&lt;/li&gt;&lt;li&gt;once detected the expected response arrived, make some assertions&lt;/li&gt;&lt;li&gt;track testing metrics&lt;/li&gt;&lt;li&gt;enable support for parametrized scenarios with decoupled test data&lt;/li&gt;&lt;li&gt;Jenkins/CI capabilities (not covered in this article, see &lt;a href=&quot;http://davidemoro.blogspot.com/2018/03/test-automation-python-pytest-jenkins.html&quot;&gt;http://davidemoro.blogspot.com/2018/03/test-automation-python-pytest-jenkins.html&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;Put inside our file the following contents inside the &lt;i&gt;test_light_on.yml&lt;/i&gt; file and save:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;markers:&lt;br /&gt;&amp;nbsp; - light_on&lt;br /&gt;test_data:&lt;br /&gt;&amp;nbsp; - device_serial_number: 8931087315095410996&lt;br /&gt;&amp;nbsp; - device_serial_number: 8931087315095410997&lt;br /&gt;---&lt;br /&gt;- comment: subscribe to device data and store messages to messages variable once received (non blocking subscribe)&lt;br /&gt;&amp;nbsp; provider: mqtt&lt;br /&gt;&amp;nbsp; type: subscribe&lt;br /&gt;&amp;nbsp; host: &quot;$mqtt_host&quot;&lt;br /&gt;&amp;nbsp; port: &quot;$mqtt_port&quot;&lt;br /&gt;&amp;nbsp; topic: &quot;$mqtt_endpoint/$device_serial_number&quot;&lt;br /&gt;&amp;nbsp; name: &quot;messages&quot;&lt;br /&gt;- comment: send light turn ON command&lt;br /&gt;&amp;nbsp; provider: mqtt&lt;br /&gt;&amp;nbsp; type: publish&lt;br /&gt;&amp;nbsp; host: &quot;$mqtt_host&quot;&lt;br /&gt;&amp;nbsp; port: &quot;$mqtt_port&quot;&lt;br /&gt;&amp;nbsp; endpoint: &quot;$mqtt_endpoint/$device_serial_number/cmd&quot;&lt;br /&gt;&amp;nbsp; payload: '{&quot;Payload&quot;:&quot;244,1&quot;}'&lt;br /&gt;- comment: start tracking response time (stored in response_time variable)&lt;br /&gt;&amp;nbsp; provider: metrics&lt;br /&gt;&amp;nbsp; type: record_elapsed_start&lt;br /&gt;&amp;nbsp; name: response_time&lt;br /&gt;- comment: wait for a device response&lt;br /&gt;&amp;nbsp; provider: python&lt;br /&gt;&amp;nbsp; type: while&lt;br /&gt;&amp;nbsp; timeout: 12&lt;br /&gt;&amp;nbsp; expression: 'len(variables[&quot;messages&quot;]) == 0'&lt;br /&gt;&amp;nbsp; poll: 0.1&lt;br /&gt;&amp;nbsp; sub_commands: []&lt;br /&gt;- command: store elapsed response time in response_time variable&lt;br /&gt;&amp;nbsp; provider: metrics&lt;br /&gt;&amp;nbsp; type: record_elapsed_stop&lt;br /&gt;&amp;nbsp; name: response_time&lt;br /&gt;- comment: assert that status light response was sent by the device&lt;br /&gt;&amp;nbsp; provider: python&lt;br /&gt;&amp;nbsp; type: assert&lt;br /&gt;&amp;nbsp; expression: 'loads(variables[&quot;messages&quot;][0])[&quot;measure_id&quot;] == [488]'&lt;br /&gt;- comment: assert that status light response was sent by the device with status ON&lt;br /&gt;&amp;nbsp; provider: python&lt;br /&gt;&amp;nbsp; type: assert&lt;br /&gt;&amp;nbsp; expression: 'loads(variables[&quot;messages&quot;][0])[&quot;bin_value&quot;] == [1]'&lt;/i&gt;&lt;/blockquote&gt;Let's comment command by command and section by section the above YAML configuration.&lt;br /&gt;&lt;h4&gt;Metadata, markers and decoupled test data&lt;/h4&gt;First of all the &lt;i&gt;---&lt;/i&gt; delimiter splits an optional metadata document from the scenario itself. The metadata section in our example contains:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;markers:&lt;br /&gt;&amp;nbsp; - light_on&lt;/i&gt;&lt;/blockquote&gt;You can mark your scripts with one or more markers so that you can select which scenario will run from the command line using &lt;b&gt;marker expressions&lt;/b&gt; like &lt;i&gt;-m light_off&lt;/i&gt; or&amp;nbsp; something like &lt;i&gt;-m &quot;light_off and not slow&quot;&lt;/i&gt; assuming that you have some script marked with the pretend slow marker.&lt;br /&gt;&lt;h4&gt;Decoupled test data and parametrization&lt;/h4&gt;Assume that you have 2 or more real devices providing different firmware versions always ready to be tested.&lt;br /&gt;&lt;br /&gt;In such case we want define our scenario once and it will be executed more thanks to &lt;b&gt;parametrization&lt;/b&gt;. Our scenario will be executed for each any item defined in the &lt;i&gt;test_data&lt;/i&gt; array in the metadata section. In our example it will be executed twice:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;test_data:&lt;br /&gt;&amp;nbsp; - device_serial_number: 8931087315095410996&lt;br /&gt;&amp;nbsp; - device_serial_number: 8931087315095410997&lt;/i&gt;&lt;/blockquote&gt;If you want you can track different metrics for different serial numbers so that you are able to compare different firmware versions.&lt;br /&gt;&lt;h4&gt;Subscribe to topics where we expect a device response&lt;/h4&gt;As stated in the official &lt;i&gt;play_mqtt&lt;/i&gt; documentation&amp;nbsp;&lt;a href=&quot;https://github.com/davidemoro/play_mqtt&quot;&gt;https://github.com/davidemoro/play_mqtt&lt;/a&gt;&lt;br /&gt;you can subscribe to one or more topics using the mqtt provider and type: subscribe. You have to provide the where the MQTT broker host lives (e.g., &lt;i&gt;iot.eclipse.org&lt;/i&gt;), the port, obviously the topic you want to subscribe (e.g., &lt;i&gt;foo/bar/$device_serial_number/data/light&lt;/i&gt;&amp;nbsp;where &lt;i&gt;$device_serial_number&lt;/i&gt; will be replaced with what you define in environment configuration files or for each &lt;i&gt;test_data&lt;/i&gt; section.&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;- comment: subscribe to device data and store messages to messages variable once received (non blocking subscribe)&lt;br /&gt;&amp;nbsp; provider: mqtt&lt;br /&gt;&amp;nbsp; type: subscribe&lt;br /&gt;&amp;nbsp; host: &quot;$mqtt_host&quot;&lt;br /&gt;&amp;nbsp; port: &quot;$mqtt_port&quot;&lt;br /&gt;&amp;nbsp; topic: &quot;$mqtt_endpoint/$device_serial_number&quot;&lt;br /&gt;&amp;nbsp; name: &quot;messages&quot;&lt;/i&gt;&lt;/blockquote&gt;This is a non blocking call so that while the flow continues, it will collect underground every message published on the topics of our interest storing them to a &lt;i&gt;messages&lt;/i&gt; variable.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;messages&lt;/i&gt; is an array containing all matching messaging coming from MQTT and you can access to the messages value in expressions with &lt;i&gt;variables[&quot;messages&quot;]&lt;/i&gt;.&lt;br /&gt;&lt;h4&gt;Publish a command&lt;/h4&gt;&lt;div&gt;This is self explaining (you can send any payload, even dynamic/parametrized payloads):&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;- comment: send light turn ON command&lt;br /&gt;&amp;nbsp; provider: mqtt&lt;br /&gt;&amp;nbsp; type: publish&lt;br /&gt;&amp;nbsp; host: &quot;$mqtt_host&quot;&lt;br /&gt;&amp;nbsp; port: &quot;$mqtt_port&quot;&lt;br /&gt;&amp;nbsp; endpoint: &quot;$mqtt_endpoint/$device_serial_number/cmd&quot;&lt;br /&gt;&amp;nbsp; payload: '{&quot;Payload&quot;:&quot;244,1&quot;}'&lt;/i&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;where &lt;i&gt;244&lt;/i&gt; is the internal reference and &lt;i&gt;1&lt;/i&gt; stands for ON.&lt;/div&gt;&lt;h4&gt;Track time metrics&lt;/h4&gt;&lt;div&gt;This command let you start tracking time from now until a &lt;i&gt;record_elapsed_stop&lt;/i&gt; will be executed:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;- comment: start tracking response time (stored in response_time variable)&lt;br /&gt;&amp;nbsp; provider: metrics&lt;br /&gt;&amp;nbsp; type: record_elapsed_start&lt;br /&gt;&amp;nbsp; name: response_time&lt;br /&gt;... &amp;lt;one or more commands or asynchronous waiters here&amp;gt;&lt;br /&gt;- command: store elapsed response time in response_time variable&lt;br /&gt;&amp;nbsp; provider: metrics&lt;br /&gt;&amp;nbsp; type: record_elapsed_stop&lt;br /&gt;&amp;nbsp; name: response_time&lt;/i&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;The time metric will be available under a variable name called in our example &lt;i&gt;response_time&lt;/i&gt; (from &lt;i&gt;name: response_time&lt;/i&gt;). For a full set of metrics related commands and options see&amp;nbsp;&lt;a href=&quot;https://github.com/pytest-dev/pytest-play&quot;&gt;https://github.com/pytest-dev/pytest-play&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can record key metrics of any type for several reasons:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;make assertions about some expected timings&lt;/li&gt;&lt;li&gt;report key performance metrics or properties in custom &lt;i&gt;JUnit XML&lt;/i&gt; reports (in conjunction with the command line option &lt;i&gt;--junit-xml results.xml&lt;/i&gt; for example so that you have an historical trend of metrics for each past or present test execution)&lt;/li&gt;&lt;li&gt;report key performance metrics on &lt;i&gt;statsd&lt;/i&gt; capable third party systems (in conjunction with the command line option &lt;i&gt;--stats-d [--stats-prefix play --stats-host http://myserver.com --stats-port 3000]&lt;/i&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h4&gt;While&lt;/h4&gt;Here we are waiting for a message response was collected and stored to the &lt;i&gt;messages&lt;/i&gt; variable (do you remember the already discussed MQTT subscribe command in charge of collecting/storing messages of interest?):&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;- comment: wait for a device response&lt;br /&gt;&amp;nbsp; provider: python&lt;br /&gt;&amp;nbsp; type: while&lt;br /&gt;&amp;nbsp; timeout: 12&lt;br /&gt;&amp;nbsp; expression: 'len(variables[&quot;messages&quot;]) == 0'&lt;br /&gt;&amp;nbsp; poll: 0.1&lt;br /&gt;&amp;nbsp; sub_commands: []&lt;/i&gt;&lt;/blockquote&gt;&lt;div&gt;You can specify a timeout (e.g., &lt;i&gt;timeout: 12&lt;/i&gt;), a poll time (how many wait seconds between a while iteration, in such case &lt;i&gt;poll: 0.1&lt;/i&gt;) and an optional list of while's sub commands (not needed for this example).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;When the expression returns a true-ish value, the while command exits.&lt;/div&gt;&lt;br /&gt;Does your device publish different kind of data on the same topic? Modify the while expression restricting to the messages of your interest, for example:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;- comment: [4] wait for the expected device response&lt;br /&gt;&amp;nbsp; provider: python&lt;br /&gt;&amp;nbsp; type: while&lt;br /&gt;&amp;nbsp; timeout: 12&lt;br /&gt;&amp;nbsp; expression: 'len([item for item in variables[&quot;messages&quot;] if loads(item)[&quot;measure_id&quot;] == [124]]) == 0'&lt;br /&gt;&amp;nbsp; poll: 0.1&lt;br /&gt;&amp;nbsp; sub_commands: []&lt;/i&gt;&lt;/blockquote&gt;In the above example we are iterating over our array obtaining only the entries with a given &lt;i&gt;measure_id&lt;/i&gt; where the loads is a builtin JSON parse (python's &lt;i&gt;json.loads&lt;/i&gt;).&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&amp;lt;testsuite errors=&quot;0&quot; failures=&quot;0&quot; name=&quot;pytest&quot; skipped=&quot;0&quot; tests=&quot;1&quot; time=&quot;10.664&quot;&amp;gt;&amp;lt;testcase classname=&quot;test_on.yml&quot; file=&quot;test_on.yml&quot; name=&quot;test_on.yml[test_data0]&quot; time=&quot;10.477&quot;&amp;gt;&amp;lt;properties&amp;gt;&amp;lt;property name=&quot;response_time&quot; value=&quot;7.850502967834473&quot;/&amp;gt;&amp;lt;/properties&amp;gt;&amp;lt;system-out&amp;gt;...&lt;/i&gt;&lt;/blockquote&gt;&lt;h4&gt;Assertions&lt;/h4&gt;&lt;div&gt;And now it's assertions time:&lt;/div&gt;&lt;div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;- comment: assert that status light response was sent by the device&lt;br /&gt;&amp;nbsp; provider: python&lt;br /&gt;&amp;nbsp; type: assert&lt;br /&gt;&amp;nbsp; expression: 'loads(variables[&quot;messages&quot;][0])[&quot;measure_id&quot;] == [488]'&lt;br /&gt;- comment: assert that status light response was sent by the device with status ON&lt;br /&gt;&amp;nbsp; provider: python&lt;br /&gt;&amp;nbsp; type: assert&lt;br /&gt;&amp;nbsp; expression: 'loads(variables[&quot;messages&quot;][0])[&quot;bin_value&quot;] == [1]'&lt;/i&gt;&lt;/blockquote&gt;Remember that the messages variables is an array of string messages? We are taking the first message (with &lt;i&gt;variables[&quot;messages&quot;][0]&lt;/i&gt; you get the first raw payload), parse the JSON payload so that assertions will be simpler (in our case &lt;i&gt;loads(variables[&quot;messages&quot;][0])&lt;/i&gt; for sake of completeness) obtaining a dictionary and then assert that we have the expected values under certain dictionary keys.&lt;br /&gt;&lt;br /&gt;As you can see pytest-play is not 100% codeless by design because it requires a very basic Python expressions knowledge, for example:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;variables[&quot;something&quot;] == 0&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;variables[&quot;something&quot;] != 5&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;not variables[&quot;something&quot;]&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;variables[&quot;a_boolean&quot;] is True&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;variables[&quot;a_boolean&quot;] is False&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;variables[&quot;something&quot;] == &quot;yet another value&quot;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;variables[&quot;response&quot;][&quot;status&quot;] == &quot;OK&quot; and not variables[&quot;response&quot;][&quot;error_message&quot;]&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;&quot;VALUE&quot; in variables[&quot;another_value&quot;]&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;len([item for item in variables[&quot;mylist&quot;] if item &amp;gt; 0) == 0&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;variables[&quot;a_string&quot;].startswith(&quot;foo&quot;)&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;One line protected Python-based expressions let you express any kind of waiters/assertions without having the extend the framework's commands syntax introducing an exotic YAML-based meta language that will never be able to express all the possible use cases. The basic idea behind Python expressions is that even for non programmers it is easier to learn the basics of Python assertions instead of trying to figure out how to express assertions in an obscure meta language.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;pytest-play&lt;/i&gt; is not related to MQTT only, it let you write actions and assertions against a real browser with Selenium, API/REST, &lt;i&gt;websockets&lt;/i&gt; and more.&lt;br /&gt;&lt;br /&gt;So if you have to automate a task for a device simulator, a device driver, some simple API calls with assertions, asynchronous wait for a condition is met with timeouts or interact with browsers, cross technology actions (e.g., publish a MQTT message and poll a HTTP response until something happens) and decoupled test data parametrization... even if you are not a programmer because you don't have to deal with imports, function or class definitions and it is always available if you have Docker installed.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;And now you can show off with shining metrics!&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;Run your scenario&lt;/h3&gt;And finally, assuming that you are already inside your project folder, let's run our scenario using Docker (remember&amp;nbsp;&lt;i&gt;--network=&quot;host&quot;&lt;/i&gt;&amp;nbsp;if you want to send metrics to a server listening on &lt;i&gt;localhost&lt;/i&gt;):&lt;br /&gt;&lt;div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;docker run --rm -it -v $(pwd):/src --network=&quot;host&quot; davidemoro/pytest-play --variables env.yml --junit-xml results.xml --stats-d --stats-prefix play test_light_on.yml&lt;/i&gt;&lt;/blockquote&gt;The previous command will run our scenario printing the results and if there is a stats server listening on localhost metrics will be collected and you will be able to create live dashboards like the following one:&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-l7zBKUn7Kls/XLRwlc7dC1I/AAAAAAAAMD0/iPqtNaV_xFA4DtZ-lNUlMjdcqBNiBVBlQCLcBGAs/s1600/output_5Ogb0S.gif&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;210&quot; src=&quot;https://2.bp.blogspot.com/-l7zBKUn7Kls/XLRwlc7dC1I/AAAAAAAAMD0/iPqtNaV_xFA4DtZ-lNUlMjdcqBNiBVBlQCLcBGAs/s400/output_5Ogb0S.gif&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;statsd/Graphene response time dashboard&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;and metrics are stored in the results.xml file too:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&amp;lt;testsuite errors=&quot;0&quot; failures=&quot;0&quot; name=&quot;pytest&quot; skipped=&quot;0&quot; tests=&quot;1&quot; time=&quot;10.664&quot;&amp;gt;&amp;lt;testcase classname=&quot;test_on.yml&quot; file=&quot;test_on.yml&quot; name=&quot;test_on.yml[test_data0]&quot; time=&quot;10.477&quot;&amp;gt;&amp;lt;properties&amp;gt;&amp;lt;property name=&quot;response_time&quot; value=&quot;7.850502967834473&quot;/&amp;gt;&amp;lt;/properties&amp;gt;&amp;lt;system-out&amp;gt;...&lt;/i&gt;&lt;/blockquote&gt;&lt;h3&gt;Sum up&lt;/h3&gt;This was a very long article and we talked about a lot of technologies and tools. So if you are not yet familiar with some tools or technologies it's time to read some documentation and play with some hello world examples:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;MQTT stuff, you can play with &lt;i&gt;moquitto_sub&lt;/i&gt;, &lt;i&gt;mosquitto_pub&lt;/i&gt; and the free MQTT broker online &lt;a href=&quot;http://iot.eclipse.org/&quot;&gt;iot.eclipse.org&lt;/a&gt;&amp;nbsp;or with your things if you have a smart home&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;i&gt;statsd&lt;/i&gt;/&lt;i&gt;graphite&lt;/i&gt;, you can install the server with Docker, build your dashboard on &lt;a href=&quot;http://localhost/&quot;&gt;http://localhost&lt;/a&gt; and send fake metrics with the &lt;i&gt;echo&lt;/i&gt; and &lt;i&gt;nc&lt;/i&gt; command line&lt;/li&gt;&lt;li&gt;talking about&amp;nbsp;&lt;i&gt;pytest-play&lt;/i&gt;, pull the docker container and run some examples&amp;nbsp;&lt;a href=&quot;https://github.com/pytest-dev/pytest-play/tree/master/examples&quot;&gt;https://github.com/pytest-dev/pytest-play/tree/master/examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;a &lt;i&gt;pytest&lt;/i&gt; knowledge is useful too for the most useful command line options, see&amp;nbsp;&lt;a href=&quot;https://docs.pytest.org/en/latest&quot;&gt;https://docs.pytest.org/en/latest&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Any feedback is welcome!&lt;/div&gt;&lt;h3&gt;Do you like pytest-play?&lt;/h3&gt;&lt;div&gt;Let's get in touch for any suggestion, contribution or comments. Contributions will be very appreciated too!&lt;/div&gt;&lt;div&gt;&lt;!-- Place this tag where you want the button to render. --&gt;&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/pytest-dev/pytest-play&quot;&gt;Star&lt;/a&gt; &lt;!-- Place this tag in your head or just before your close body tag. --&gt; &lt;/div&gt;</description>
	<pubDate>Thu, 18 Apr 2019 07:39:30 +0000</pubDate>
</item>
<item>
	<title>Catalin George Festila: About psychopy tool.</title>
	<guid>http://python-catalin.blogspot.com/2019/04/about-psychopy-tool.html</guid>
	<link>http://python-catalin.blogspot.com/2019/04/about-psychopy-tool.html</link>
	<description>A good definition for this tool can be found at the Wikipedia website:
2002: PsychoPy was originally written by Peirce as a proof of concept - that a high-level scripting language could generate experimental stimuli in real time (existing solutions, such as Psychtoolbox, had to pre-generate movies or use CLUT animation techniques).
The install of this python module is very simple:
C:\Python373\</description>
	<pubDate>Thu, 18 Apr 2019 06:30:34 +0000</pubDate>
</item>
<item>
	<title>Wingware Blog: Using Anaconda with Wing Python IDE</title>
	<guid>https://wingware.com/blog/anaconda</guid>
	<link>https://wingware.com/blog/anaconda</link>
	<description>&lt;p&gt;In this issue of &lt;a class=&quot;reference&quot; href=&quot;http://wingware.com/hints&quot;&gt;Wing Tips&lt;/a&gt; we take a look at how to use the &lt;a class=&quot;reference&quot; href=&quot;https://www.anaconda.com/distribution/&quot;&gt;Anaconda
Distribution&lt;/a&gt; of Python with &lt;a class=&quot;reference&quot; href=&quot;http://wingware.com/&quot;&gt;Wing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anaconda's key advantage is its easy-to-use package management system. Anaconda comes with
a large collection of third party packages that are not in an installation of Python from
&lt;a class=&quot;reference&quot; href=&quot;https://python.org&quot;&gt;python.org&lt;/a&gt;. Many &lt;a class=&quot;reference&quot; href=&quot;https://docs.anaconda.com/anaconda/packages/pkg-docs/&quot;&gt;additional packages&lt;/a&gt; can be installed quickly and
easily as needed, from the command line with &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;conda&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;install&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Anaconda's marketing focuses on data science and machine learning applications, but its
extensive packages library makes it a good option also for other types of desktop and web
development.&lt;/p&gt;
&lt;p&gt;There is much &lt;a class=&quot;reference&quot; href=&quot;https://www.bernat.tech/pep-517-518/&quot;&gt;ongoing work&lt;/a&gt; in the world of
Python packaging but, at least for now, Anaconda seems to fail less often than other
solutions for resolving dependencies and installing necessary packages automatically.&lt;/p&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h3 class=&quot;title-3&quot;&gt;Configuring the Environment&lt;/h3&gt;
&lt;p&gt;To use the Anaconda with Wing, simply set the &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Executable&lt;/span&gt;&lt;/tt&gt; used in your Wing
project to Anaconda's &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;python&lt;/span&gt;&lt;/tt&gt; or &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;python.exe&lt;/span&gt;&lt;/tt&gt;. How you do this depends on whether you
are creating a new project or have an existing project that you want to modify.&lt;/p&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h4 class=&quot;title-4&quot;&gt;New Projects&lt;/h4&gt;
&lt;p&gt;To create a new Wing project that uses Anaconda, select &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Project&lt;/span&gt;&lt;/tt&gt; from the
&lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Project&lt;/span&gt;&lt;/tt&gt; menu and then under &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Executable&lt;/span&gt;&lt;/tt&gt; select &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Custom&lt;/span&gt;&lt;/tt&gt; and enter the full
path to Anaconda's &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;python&lt;/span&gt;&lt;/tt&gt; or &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;python.exe&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;In many cases, Wing will automatically find Anaconda and include it in the drop down menu
to the right of the entry area that enables when &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Custom&lt;/span&gt;&lt;/tt&gt; is chosen:&lt;/p&gt;
&lt;img alt=&quot;/images/blog/anaconda/new-project.gif&quot; /&gt;&lt;p&gt;&lt;i&gt;Shown Above:  Choose &quot;New Project&quot; from the &quot;Project Menu&quot;, select &quot;Custom&quot; for &quot;Python Executable&quot;, find Anaconda in the drop down menu, and press &quot;OK&quot; to create the new project.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;If Anaconda does not appear in Wing's list of available Python installations, and you
don't know the full path to use, then you can start Anaconda from the command line outside
of Wing and use the value printed by the following, when run interactively:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
import sys
print(sys.executable)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h4 class=&quot;title-4&quot;&gt;Existing Projects&lt;/h4&gt;
&lt;p&gt;To change an existing project to use Anaconda Python, the steps are the same as above
except that the change is made under &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Properties&lt;/span&gt;&lt;/tt&gt; in the &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Project&lt;/span&gt;&lt;/tt&gt; menu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h4 class=&quot;title-4&quot;&gt;Virtualenv&lt;/h4&gt;
&lt;p&gt;If you are using virtualenv with Anaconda, use the full path of the virtualenv's
&lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;python.exe&lt;/span&gt;&lt;/tt&gt; or &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;python&lt;/span&gt;&lt;/tt&gt; instead. When in doubt, you can print &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;sys.executable&lt;/span&gt;&lt;/tt&gt; as
already described to find the correct full path to use in Wing's &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Executable&lt;/span&gt;&lt;/tt&gt;
configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h4 class=&quot;title-4&quot;&gt;☕ Et Voila!&lt;/h4&gt;
&lt;p&gt;In most cases, that is all that you need to do. Wing will start using your Anaconda
installation immediately for source intelligence, for the next debug session, and in the
integrated &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Shell&lt;/span&gt;&lt;/tt&gt; after it is restarted from its &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Options&lt;/span&gt;&lt;/tt&gt; menu.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h3 class=&quot;title-3&quot;&gt;Fixing Import Errors on Windows&lt;/h3&gt;
&lt;p&gt;On Windows, Anaconda may fail to load DLLs when its &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;python.exe&lt;/span&gt;&lt;/tt&gt; is run directly from
the command line or within Wing. This is due to the fact that by default the Anaconda
installer no longer sets the &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;PATH&lt;/span&gt;&lt;/tt&gt; that it needs to run, in order to avoid conflicting
with different Python installations on the same system.&lt;/p&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h4 class=&quot;title-4&quot;&gt;Simple Solution&lt;/h4&gt;
&lt;p&gt;A simple solution to fix this problem is to run &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Scripts\activate&lt;/span&gt;&lt;/tt&gt; (located within your
Anaconda installation) on the command line, and then start Wing from within the activated
environment, for example with &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;c:\Program&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Files&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;(x86)\Wing&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Pro&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;7\bin\wing.exe&lt;/span&gt;&lt;/tt&gt;. This
causes Wing to inherit the necessary &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;PATH&lt;/span&gt;&lt;/tt&gt; that was set up by Anaconda's &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;activate&lt;/span&gt;&lt;/tt&gt;
script.&lt;/p&gt;
&lt;p&gt;This solution works well if you will be using the same Anaconda installation for all
projects that you open in a session. If you change to projects that use a different Python
installation, you will need to quit and restart Wing in the correct environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h4 class=&quot;title-4&quot;&gt;Recommended Solutions&lt;/h4&gt;
&lt;p&gt;Our recommended solutions require a bit more work up front, but once in place they
automatically set the necessary &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;PATH&lt;/span&gt;&lt;/tt&gt; without the potential for polluting other Python
installations with unwanted environment.&lt;/p&gt;
&lt;p&gt;A good one-time fix is to create a small wrapper script called &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;wrap_anaconda.bat&lt;/span&gt;&lt;/tt&gt; and
place the following into it:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
&amp;#64;echo off
set ANACONDA_DIR=%USERPROFILE%\Anaconda3
set PATH=%PATH%;%ANACONDA_DIR%;%ANACONDA_DIR%\DLLS;%ANACONDA_DIR%\Library;%ANACONDA_DIR%\Library\bin;%ANACONDA_DIR%\Scripts;%ANACONDA_DIR%\mingw-w64\bin
%ANACONDA_DIR%\python.exe %*
&lt;/pre&gt;
&lt;p&gt;You may need to change the value of &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ANACONDA_DIR&lt;/span&gt;&lt;/tt&gt; to match where Anaconda is installed
on your system.&lt;/p&gt;
&lt;p&gt;Then set &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Executable&lt;/span&gt;&lt;/tt&gt; in Wing's &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Properties&lt;/span&gt;&lt;/tt&gt; to the full path of this
batch file. This sets up the necessary environment and then runs Anaconda's Python. No
other configuration is necessary, and this script can also be used on the command line or
in other IDEs.&lt;/p&gt;
&lt;p&gt;A similar solution that does not require creating a wrapper script is to set the necessary
&lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;PATH&lt;/span&gt;&lt;/tt&gt; in Wing's &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Properties&lt;/span&gt;&lt;/tt&gt;, from the &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Project&lt;/span&gt;&lt;/tt&gt; menu. Add the following to
&lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Environment&lt;/span&gt;&lt;/tt&gt; under the &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Environment&lt;/span&gt;&lt;/tt&gt; tab:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
ANACONDA_DIR=${USERPROFILE}\Anaconda3
PATH=${PATH};$(ANACONDA_DIR);${ANACONDA_DIR}\DLLS;${ANACONDA_DIR}\Library;
  ${ANACONDA_DIR}\Library\bin;${ANACONDA_DIR}\Scripts;${ANACONDA_DIR}\mingw-w64\bin
&lt;/pre&gt;
&lt;p&gt;Again, you may need to change the value of &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ANACONDA_DIR&lt;/span&gt;&lt;/tt&gt; to match where Anaconda is
installed on your system.&lt;/p&gt;
&lt;p&gt;Both of these solutions work well if there are multiple Python installations on your
system, because it ensures that the correct &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;PATH&lt;/span&gt;&lt;/tt&gt; is always set when the project is
open, allowing other projects to use a different environment.&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;p&gt;That's it for now! In next week's &lt;a class=&quot;reference&quot; href=&quot;http://wingware.com/hints&quot;&gt;Wing Tips&lt;/a&gt; we'll get back to looking at some
of the lesser-known but useful features in Wing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
	<pubDate>Thu, 18 Apr 2019 01:00:00 +0000</pubDate>
</item>
<item>
	<title>Matt Layman: Completing Account Deactivation on Building SaaS with Python and Django</title>
	<guid>https://www.mattlayman.com/blog/2019/completing-account-deactivation/</guid>
	<link>https://www.mattlayman.com/blog/2019/completing-account-deactivation/</link>
	<description>&lt;p&gt;In the latest episode
of Building SaaS with Python and Django,
we completed the account deactivation workflow
of the Django app.&lt;/p&gt;

&lt;p&gt;This included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Canceling the subscription with Stripe.&lt;/li&gt;
&lt;li&gt;Marking the user as inactive.&lt;/li&gt;
&lt;li&gt;Sending the user to a friendly page
to indicate that their account is deactivated.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;The recording is available on YouTube
and the full transcript is below.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Catalin George Festila: Update python modules of 3.73 version.</title>
	<guid>http://python-catalin.blogspot.com/2019/04/update-python-modules-of-373-version.html</guid>
	<link>http://python-catalin.blogspot.com/2019/04/update-python-modules-of-373-version.html</link>
	<description>Today we tested an older tool with the new version of python 3.7.3.
This is a tool that will help you update your python modules.
Here's how to install:
C:\Python373\Scripts&amp;gt;pip install pip-review
Collecting pip-review
...
Requirement already satisfied: pyparsing&amp;gt;=2.0.2 in c:\python373\lib\site-package
s (from packaging-&amp;gt;pip-review) (2.4.0)
Installing collected packages: packaging, pip-review</description>
	<pubDate>Wed, 17 Apr 2019 15:24:37 +0000</pubDate>
</item>
<item>
	<title>Real Python: How to Work With a PDF in Python</title>
	<guid>https://realpython.com/pdf-python/</guid>
	<link>https://realpython.com/pdf-python/</link>
	<description>&lt;p&gt;The Portable Document Format or PDF is a file format that can be used to present and exchange documents reliably across operating systems. While the PDF was originally invented by Adobe, it is now an &lt;a href=&quot;https://www.iso.org/standard/51502.html&quot;&gt;open standard&lt;/a&gt; that is maintained by the International Organization for Standardization (ISO). You can work with a preexisting PDF in Python by using the &lt;strong&gt;&lt;code&gt;PyPDF2&lt;/code&gt;&lt;/strong&gt; package.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PyPDF2&lt;/code&gt; is a &lt;a href=&quot;https://stackoverflow.com/questions/45976946/what-is-pure-python&quot;&gt;pure-Python&lt;/a&gt; package that you can use for many different types of PDF operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By the end of this article, you&amp;rsquo;ll know how to do the following:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract document information from a PDF in Python&lt;/li&gt;
&lt;li&gt;Rotate pages&lt;/li&gt;
&lt;li&gt;Merge PDFs&lt;/li&gt;
&lt;li&gt;Split PDFs&lt;/li&gt;
&lt;li&gt;Add watermarks&lt;/li&gt;
&lt;li&gt;Encrypt a PDF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s get started!&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;&lt;p&gt;&lt;strong&gt;Free Bonus:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/atom.xml&quot; class=&quot;alert-link&quot;&gt;Click here to get access to a chapter from Python Tricks: The Book&lt;/a&gt; that shows you Python's best practices with simple examples you can apply instantly to write more beautiful + Pythonic code.&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&quot;history-of-pypdf-pypdf2-and-pypdf4&quot;&gt;History of &lt;code&gt;pyPdf&lt;/code&gt;, &lt;code&gt;PyPDF2&lt;/code&gt;, and &lt;code&gt;PyPDF4&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The original &lt;a href=&quot;https://pypi.org/project/pyPdf/&quot;&gt;&lt;code&gt;pyPdf&lt;/code&gt;&lt;/a&gt; package was released way back in 2005. The last official release of &lt;code&gt;pyPdf&lt;/code&gt; was in 2010. After a lapse of around a year, a company called &lt;a href=&quot;http://phaseit.net/&quot;&gt;Phasit&lt;/a&gt; sponsored a fork of &lt;code&gt;pyPdf&lt;/code&gt; called &lt;a href=&quot;https://pythonhosted.org/PyPDF2/&quot;&gt;&lt;code&gt;PyPDF2&lt;/code&gt;&lt;/a&gt;. The code was written to be backwards compatible with the original and worked quite well for several years, with its last release being in 2016. &lt;/p&gt;
&lt;p&gt;There was a brief series of releases of a package called &lt;a href=&quot;https://pypi.org/project/PyPDF3/&quot;&gt;&lt;code&gt;PyPDF3&lt;/code&gt;&lt;/a&gt;, and then the project was renamed to &lt;a href=&quot;https://pypi.org/project/PyPDF2/&quot;&gt;&lt;code&gt;PyPDF4&lt;/code&gt;&lt;/a&gt;. All of these projects do pretty much the same thing, but the biggest difference between &lt;code&gt;pyPdf&lt;/code&gt; and PyPDF2+ is that the latter versions added Python 3 support. There is a different Python 3 fork of the original &lt;a href=&quot;http://github.com/mfenniak/pyPdf/tree/py3&quot;&gt;&lt;code&gt;pyPdf&lt;/code&gt; for Python 3&lt;/a&gt;, but that one has not been maintained for many years.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;PyPDF2&lt;/code&gt; was recently abandoned, the new &lt;a href=&quot;https://github.com/claird/PyPDF4&quot;&gt;&lt;code&gt;PyPDF4&lt;/code&gt;&lt;/a&gt; does not have full backwards compatibility with &lt;code&gt;PyPDF2&lt;/code&gt;. Most of the examples in this article will work perfectly fine with &lt;code&gt;PyPDF4&lt;/code&gt;, but there are some that cannot, which is why &lt;code&gt;PyPDF4&lt;/code&gt; is not featured more heavily in this article. Feel free to swap out the imports for &lt;code&gt;PyPDF2&lt;/code&gt; with &lt;code&gt;PyPDF4&lt;/code&gt; and see how it works for you.&lt;/p&gt;
&lt;h2 id=&quot;pdfrw-an-alternative&quot;&gt;&lt;code&gt;pdfrw&lt;/code&gt;: An Alternative&lt;/h2&gt;
&lt;p&gt;Patrick Maupin created a package called &lt;a href=&quot;https://github.com/pmaupin/pdfrw&quot;&gt;&lt;code&gt;pdfrw&lt;/code&gt;&lt;/a&gt; that can do many of the same things that &lt;code&gt;PyPDF2&lt;/code&gt; does. You can use &lt;code&gt;pdfrw&lt;/code&gt; for all of the same sorts of tasks that you will learn how to do in this article for &lt;code&gt;PyPDF2&lt;/code&gt;, with the notable exception of encryption. &lt;/p&gt;
&lt;p&gt;The biggest difference when it comes to &lt;code&gt;pdfrw&lt;/code&gt; is that it integrates with the &lt;a href=&quot;https://www.reportlab.com/&quot;&gt;ReportLab&lt;/a&gt; package so that you can take a preexisting PDF and build a new one with ReportLab using some or all of the preexisting PDF.&lt;/p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Installing &lt;code&gt;PyPDF2&lt;/code&gt; can be done with &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;conda&lt;/code&gt; if you happen to be using Anaconda instead of regular Python.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how you would install &lt;code&gt;PyPDF2&lt;/code&gt; with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; pip install pypdf2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The install is quite quick as &lt;code&gt;PyPDF2&lt;/code&gt; does not have any dependencies. You will likely spend as much time downloading the package as you will installing it.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s move on and learn how to extract some information from a PDF.&lt;/p&gt;
&lt;h2 id=&quot;how-to-extract-document-information-from-a-pdf-in-python&quot;&gt;How to Extract Document Information From a PDF in Python&lt;/h2&gt;
&lt;p&gt;You can use &lt;code&gt;PyPDF2&lt;/code&gt; to extract metadata and some text from a PDF. This can be useful when you&amp;rsquo;re doing certain types of automation on your preexisting PDF files.&lt;/p&gt;
&lt;p&gt;Here are the current types of data that can be extracted:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Author&lt;/li&gt;
&lt;li&gt;Creator&lt;/li&gt;
&lt;li&gt;Producer&lt;/li&gt;
&lt;li&gt;Subject&lt;/li&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Number of pages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need to go find a PDF to use for this example. You can use any PDF you have handy on your machine. To make things easy, I went to &lt;a href=&quot;https://leanpub.com/reportlab&quot;&gt;Leanpub&lt;/a&gt; and grabbed a sample of one of my books for this exercise. The sample you want to download is called &lt;code&gt;reportlab-sample.pdf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s write some code using that PDF and learn how you can get access to these attributes:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# extract_doc_info.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PyPDF2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDocumentInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;number_of_pages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    Information about &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{pdf_path}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;    Author: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{information.author}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    Creator: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{information.creator}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    Producer: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{information.producer}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    Subject: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{information.subject}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    Title: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{information.title}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    Number of pages: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{number_of_pages}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'reportlab-sample.pdf'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extract_information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here you import &lt;code&gt;PdfFileReader&lt;/code&gt; from the &lt;code&gt;PyPDF2&lt;/code&gt; package. The &lt;code&gt;PdfFileReader&lt;/code&gt; is a class with several methods for interacting with PDF files. In this example, you call &lt;code&gt;.getDocumentInfo()&lt;/code&gt;, which will return an instance of &lt;code&gt;DocumentInformation&lt;/code&gt;. This contains most of the information that you&amp;rsquo;re interested in. You also call &lt;code&gt;.getNumPages()&lt;/code&gt; on the reader object, which returns the number of pages in the document.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; That last code block uses Python 3&amp;rsquo;s new f-strings for string formatting. If you&amp;rsquo;d like to learn more, you can check out &lt;a href=&quot;https://realpython.com/python-f-strings/&quot;&gt;Python 3&amp;rsquo;s f-Strings: An Improved String Formatting Syntax (Guide)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;information&lt;/code&gt; variable has several instance attributes that you can use to get the rest of the metadata you want from the document. You print out that information and also return it for potential future use.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;PyPDF2&lt;/code&gt; has &lt;code&gt;.extractText()&lt;/code&gt;, which can be used on its page objects (not shown in this example), it does not work very well. Some PDFs will return text and some will return an empty string. When you want to extract text from a PDF, you should check out the &lt;a href=&quot;https://github.com/euske/pdfminer&quot;&gt;&lt;code&gt;PDFMiner&lt;/code&gt;&lt;/a&gt; project instead. &lt;strong&gt;&lt;code&gt;PDFMiner&lt;/code&gt;&lt;/strong&gt; is much more robust and was specifically designed for extracting text from PDFs.&lt;/p&gt;
&lt;p&gt;Now you&amp;rsquo;re ready to learn about rotating PDF pages.&lt;/p&gt;
&lt;h2 id=&quot;how-to-rotate-pages&quot;&gt;How to Rotate Pages&lt;/h2&gt;
&lt;p&gt;Occasionally, you will receive PDFs that contain pages that are in &lt;a href=&quot;https://techterms.com/definition/pageorientation&quot;&gt;landscape mode&lt;/a&gt; instead of portrait mode. Or perhaps they are even upside down. This can happen when someone scans a document to PDF or email. You could print the document out and read the paper version or you can use the power of Python to rotate the offending pages.&lt;/p&gt;
&lt;p&gt;For this example, you can go and pick out a Real Python &lt;a href=&quot;https://realpython.com/jupyter-notebook-introduction/&quot;&gt;article&lt;/a&gt; and print it to PDF.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s learn how to rotate a few of the pages of that article with &lt;code&gt;PyPDF2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# rotate_pages.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PyPDF2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileWriter&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate_pages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Rotate page 90 degrees to the right&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;page_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotateClockwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Rotate page 90 degrees to the left&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;page_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotateCounterClockwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Add a page in normal orientation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rotate_pages.pdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Jupyter_Notebook_An_Introduction.pdf'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rotate_pages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For this example, you need to import the &lt;code&gt;PdfFileWriter&lt;/code&gt; in addition to &lt;code&gt;PdfFileReader&lt;/code&gt; because you will need to write out a new PDF. &lt;code&gt;rotate_pages()&lt;/code&gt; takes in the path to the PDF that you want to modify. Within that function, you will need to create a writer object that you can name &lt;code&gt;pdf_writer&lt;/code&gt; and a reader object called &lt;code&gt;pdf_reader&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, you can use &lt;code&gt;.GetPage()&lt;/code&gt; to get the desired page. Here you grab page zero, which is the first page. Then you call the page object&amp;rsquo;s &lt;code&gt;.rotateClockwise()&lt;/code&gt; method and pass in 90 degrees.  Then for page two, you call &lt;code&gt;.rotateCounterClockwise()&lt;/code&gt; and pass it 90 degrees as well.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;PyPDF2&lt;/code&gt; package only allows you to rotate a page in increments of 90 degrees. You will receive an &lt;code&gt;AssertionError&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After each call to the rotation methods, you call &lt;code&gt;.addPage()&lt;/code&gt;. This will add the rotated version of the page to the writer object. The last page that you add to the writer object is page 3 without any rotation done to it. &lt;/p&gt;
&lt;p&gt;Finally you write out the new PDF using &lt;code&gt;.write()&lt;/code&gt;. It takes a &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;file-like object&lt;/a&gt; as its parameter. This new PDF will contain three pages. The first two will be rotated in opposite directions of each other and be in landscape while the third page is a normal page. &lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s learn how you can merge multiple PDFs into one.&lt;/p&gt;
&lt;h2 id=&quot;how-to-merge-pdfs&quot;&gt;How to Merge PDFs&lt;/h2&gt;
&lt;p&gt;There are many situations where you will want to take two or more PDFs and merge them together into a single PDF. For example, you might have a standard cover page that needs to go on to many types of reports. You can use Python to help you do that sort of thing.&lt;/p&gt;
&lt;p&gt;For this example, you can open up a PDF and print a page out as a separate PDF. Then do that again, but with a different page. That will give you a couple of inputs to use for example purposes.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go ahead and write some code that you can use to merge PDFs together:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# pdf_merging.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PyPDF2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileWriter&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge_pdfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Add each page to the writer object&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Write out the merged PDF&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'document1.pdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'document2.pdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;merge_pdfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'merged.pdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can use &lt;code&gt;merge_pdfs()&lt;/code&gt; when you have a list of PDFs that you want to merge together. You will also need to know where to save the result, so this function takes a list of input paths and an output path.&lt;/p&gt;
&lt;p&gt;Then you loop over the inputs and create a PDF reader object for each of them. Next you will iterate over all the pages in the PDF file and use &lt;code&gt;.addPage()&lt;/code&gt; to add each of those pages to itself.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re finished iterating over all of the pages of all of the PDFs in your list, you will write out the result at the end. &lt;/p&gt;
&lt;p&gt;One item I would like to point out is that you could enhance this script a bit by adding in a range of pages to be added if you didn&amp;rsquo;t want to merge all the pages of each PDF. If you&amp;rsquo;d like a challenge, you could also create a command line interface for this function using Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; module. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s find out how to do the opposite of merging!&lt;/p&gt;
&lt;h2 id=&quot;how-to-split-pdfs&quot;&gt;How to Split PDFs&lt;/h2&gt;
&lt;p&gt;There are times where you might have a PDF that you need to split up into multiple PDFs. This is especially true of PDFs that contain a lot of scanned-in content, but there are a plethora of good reasons for wanting to split a PDF.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how you can use &lt;code&gt;PyPDF2&lt;/code&gt; to split your PDF into multiple files:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# pdf_splitting.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PyPDF2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileWriter&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_of_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{name_of_split}{page}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.pdf'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Jupyter_Notebook_An_Introduction.pdf'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jupyter_page'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, you once again create a PDF reader object and loop over its pages. For each page in the PDF, you will create a new PDF writer instance and add a single page to it. Then you will write that page out to a uniquely named file. When the script is finished running, you should have each page of the original PDF split into separate PDFs.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s take a moment to learn how you can add a watermark to your PDF.&lt;/p&gt;
&lt;h2 id=&quot;how-to-add-watermarks&quot;&gt;How to Add Watermarks&lt;/h2&gt;
&lt;p&gt;Watermarks are identifying images or patterns on printed and digital documents. Some watermarks can only be seen in special lighting conditions. The reason watermarking is important is that it allows you to protect your intellectual property, such as your images or PDFs. Another term for watermark is overlay.&lt;/p&gt;
&lt;p&gt;You can use Python and &lt;code&gt;PyPDF2&lt;/code&gt; to watermark your documents. You need to have a PDF that only contains your watermark image or text. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s learn how to add a watermark now:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# pdf_watermarker.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PyPDF2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_watermark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;watermark_obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;watermark_page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watermark_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Watermark all the pages&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mergePage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watermark_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_watermark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;input_pdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Jupyter_Notebook_An_Introduction.pdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'watermarked_notebook.pdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'watermark.pdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;create_watermark()&lt;/code&gt; accepts three arguments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;input_pdf&lt;/code&gt;:&lt;/strong&gt; the PDF file path to be watermarked&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;output&lt;/code&gt;:&lt;/strong&gt; the path you want to save the watermarked version of the PDF&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;watermark&lt;/code&gt;:&lt;/strong&gt; a PDF that contains your watermark image or text&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the code, you open up the watermark PDF and grab just the first page from the document as that is where your watermark should reside. Then you create a PDF reader object using the &lt;code&gt;input_pdf&lt;/code&gt; and a generic &lt;code&gt;pdf_writer&lt;/code&gt; object for writing out the watermarked PDF.&lt;/p&gt;
&lt;p&gt;The next step is to iterate over the pages in the &lt;code&gt;input_pdf&lt;/code&gt;. This is where the magic happens. You will need to call  &lt;code&gt;.mergePage()&lt;/code&gt; and pass it the &lt;code&gt;watermark_page&lt;/code&gt;. When you do that, it will overlay the &lt;code&gt;watermark_page&lt;/code&gt; on top of the current page. Then you add that newly merged page to your &lt;code&gt;pdf_writer&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Finally, you write the newly watermarked PDF out to disk, and you&amp;rsquo;re done!&lt;/p&gt;
&lt;p&gt;The last topic you will learn about is how &lt;code&gt;PyPDF2&lt;/code&gt; handles encryption.&lt;/p&gt;
&lt;h2 id=&quot;how-to-encrypt-a-pdf&quot;&gt;How to Encrypt a PDF&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;PyPDF2&lt;/code&gt; currently only supports adding a user password and an owner password to a preexisting PDF. In PDF land, an owner password will basically give you administrator privileges over the PDF and allow you to set permissions on the document. On the other hand, the user password just allows you to open the document.&lt;/p&gt;
&lt;p&gt;As far as I can tell, &lt;code&gt;PyPDF2&lt;/code&gt; doesn&amp;rsquo;t actually allow you to set any permissions on the document even though it does allow you to set the owner password.&lt;/p&gt;
&lt;p&gt;Regardless, this is how you can add a password, which will also inherently encrypt the PDF:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# pdf_encrypt.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PyPDF2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_encryption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PdfFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf_reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner_pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                       &lt;span class=&quot;n&quot;&gt;use_128bit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdf_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_encryption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_pdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'reportlab-sample.pdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;output_pdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'reportlab-encrypted.pdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'twofish'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;add_encryption()&lt;/code&gt; takes in the input and output PDF paths as well as the password that you want to add to the PDF. It then opens a PDF writer and a reader object, as before. Since you will want to encrypt the entire input PDF, you will need to loop over all of its pages and add them to the writer.&lt;/p&gt;
&lt;p&gt;The final step is to call &lt;code&gt;.encrypt()&lt;/code&gt;, which takes the user password, the owner password, and whether or not 128-bit encryption should be added. The default is for 128-bit encryption to be turned on. If you set it to &lt;code&gt;False&lt;/code&gt;, then 40-bit encryption will be applied instead.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; PDF encryption uses either RC4 or AES (Advanced Encryption Standard) to encrypt the PDF according to &lt;a href=&quot;https://www.pdflib.com/pdf-knowledge-base/pdf-password-security/encryption/&quot;&gt;pdflib.com&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Just because you have encrypted your PDF does not mean it is necessarily secure. There are tools to remove passwords from PDFs. If you&amp;rsquo;d like to learn more, Carnegie Mellon University has an interesting &lt;a href=&quot;https://www.cs.cmu.edu/~dst/Adobe/Gallery/PDFsecurity.pdf&quot;&gt;paper on the topic&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;PyPDF2&lt;/code&gt; package is quite useful and is usually pretty fast. You can use &lt;code&gt;PyPDF2&lt;/code&gt; to automate large jobs and leverage its capabilities to help you do your job better!&lt;/p&gt;
&lt;p&gt;In this tutorial, you learned how to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract metadata from a PDF&lt;/li&gt;
&lt;li&gt;Rotate pages&lt;/li&gt;
&lt;li&gt;Merge and split PDFs&lt;/li&gt;
&lt;li&gt;Add watermarks&lt;/li&gt;
&lt;li&gt;Add encryption&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also keep an eye on the newer &lt;code&gt;PyPDF4&lt;/code&gt; package as it will likely replace &lt;code&gt;PyPDF2&lt;/code&gt; soon. You might also want to check out &lt;a href=&quot;https://github.com/pmaupin/pdfrw&quot;&gt;&lt;code&gt;pdfrw&lt;/code&gt;&lt;/a&gt;, which can do many of the same things that &lt;code&gt;PyPDF2&lt;/code&gt; can do.&lt;/p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn more about working with PDFs in Python, you should check out some of the following resources for more information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pythonhosted.org/PyPDF2/&quot;&gt;The &lt;code&gt;PyPDF2&lt;/code&gt; website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/claird/PyPDF4&quot;&gt;The Github page for &lt;code&gt;PyPDF4&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pmaupin/pdfrw&quot;&gt;The Github page for &lt;code&gt;pdfrw&lt;/code&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.reportlab.com/&quot;&gt;The ReportLab website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/euske/pdfminer&quot;&gt;The Github page for &lt;code&gt;PDFMiner&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/socialcopsdev/camelot&quot;&gt;Camelot:  PDF Table Extraction for Humans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 17 Apr 2019 14:00:00 +0000</pubDate>
</item>
<item>
	<title>codingdirectional: Sum the factorial of a list object with python</title>
	<guid>http://codingdirectional.info/2019/04/17/sum-the-factorial-of-a-list-object-with-python/</guid>
	<link>http://codingdirectional.info/2019/04/17/sum-the-factorial-of-a-list-object-with-python/</link>
	<description>&lt;p&gt;Before we leave CodeWars for a while here is another quick solution to one of the 7 Kyu questions. The question goes like this, given a list consists of numbers, find the total of all the factorials of those numbers. For example, &lt;/p&gt;



&lt;pre class=&quot;brush: php; title: ; notranslate&quot;&gt;
sum_factorial([6, 4, 2]) //will return 746
&lt;/pre&gt;



&lt;p&gt;Because of the complexity of the question we will need to create two methods, the first one will accept the list input and then the second one will do the real factorial calculation, then we will sum the factorials up in the first method.&lt;/p&gt;



&lt;pre class=&quot;brush: php; title: ; notranslate&quot;&gt;
def sum_factorial(lst):
    
    total = 0
    arr = list()
    for num in lst:
        total = factorial(num)
        arr.append(total)
        total = 0
    for num in arr:
        total += num
    return total

def factorial(num):
    sum = 0
    if num &amp;gt; 1:
        sum = num * factorial(num-1)
    else:
        return 1

    return sum
&lt;/pre&gt;



&lt;p&gt;That will do the job! In the next coming article, I will start to write about my python journey because I believe you have seen enough coding and want some interesting python programming related story series. And next month we will start a new python project together. Follow me on Twitter or share this post if you want to. If you really like this post don&amp;#8217;t forget to consider to donate 1 dollar to help this site out!&lt;/p&gt;



&lt;a href=&quot;https://twitter.com/ChooWhei?ref_src=twsrc%5Etfw&quot; class=&quot;twitter-follow-button&quot;&gt;Follow @ChooWhei&lt;/a&gt;



&lt;p&gt;See you in the next post!&lt;/p&gt;</description>
	<pubDate>Wed, 17 Apr 2019 13:02:45 +0000</pubDate>
</item>
<item>
	<title>Codementor: Selenium Using Python: All You Need to Know</title>
	<guid>https://www.codementor.io/nehavaidya/selenium-using-python-all-you-need-to-know-u3xpgszfe</guid>
	<link>https://www.codementor.io/nehavaidya/selenium-using-python-all-you-need-to-know-u3xpgszfe</link>
	<description>This article on Selenium Using Python will give you an overview on binding between selenium and python as well as locating elements in selenium using python</description>
	<pubDate>Wed, 17 Apr 2019 07:20:02 +0000</pubDate>
</item>
<item>
	<title>codingdirectional: Reverse a number with Python</title>
	<guid>http://codingdirectional.info/2019/04/17/reverse-a-number-with-python/</guid>
	<link>http://codingdirectional.info/2019/04/17/reverse-a-number-with-python/</link>
	<description>&lt;p&gt;In this snippet, we are going to create a python method to reverse the order of a number. This is one of the questions on Codewars. If you enter -123 into the method you will get -321. If you enter 1000 into the method you will get 1. Below is the entire solution.&lt;/p&gt;



&lt;pre class=&quot;brush: php; title: ; notranslate&quot;&gt;
def reverse_number(n):
    num_list = list(str(n))
    num_list.reverse()

    if &amp;quot;-&amp;quot; in num_list:
        num_list.pop(len(num_list)-1)
        num_list.insert(0, &amp;quot;-&amp;quot;)

    return int(&amp;quot;&amp;quot;.join(num_list))
&lt;/pre&gt;



&lt;p&gt;If you do follow my website you know that I always write simple python code and post them here, but starting from the next article, I will stop posting python code for a while and start to talk about my python journey and the cool software which is related to python. I hope you will appreciate this new style of writing and thus will make learning python for everyone a lot more fun than just staring at the boring and sometimes long python snippet.&lt;/p&gt;



&lt;p&gt;Like, share or follow me on Twitter.&lt;/p&gt;



&lt;a href=&quot;https://twitter.com/ChooWhei?ref_src=twsrc%5Etfw&quot; class=&quot;twitter-follow-button&quot;&gt;Follow @ChooWhei&lt;/a&gt;



&lt;p&gt;If you have any solution for this problem do comment below.&lt;/p&gt;</description>
	<pubDate>Wed, 17 Apr 2019 05:56:37 +0000</pubDate>
</item>
<item>
	<title>Ned Batchelder: Startup.py</title>
	<guid>https://nedbatchelder.com//blog/201904/startuppy.html</guid>
	<link>https://nedbatchelder.com//blog/201904/startuppy.html</link>
	<description>&lt;p&gt;Someone recently asked how to permanently change the prompt in the Python
interactive REPL.  The answer is you can point the PYTHONSTARTUP environment
variable at a Python file, and that file will be executed every time you enter
the interactive prompt.&lt;/p&gt;&lt;p&gt;I use this to import modules I often want to use, define helpers, and
configure my command history.&lt;/p&gt;&lt;p&gt;In my .bashrc I have:&lt;/p&gt;&lt;blockquote class=&quot;code&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;PYTHONSTARTUP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=~/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;
&lt;br /&gt;&lt;/code&gt;&lt;/blockquote&gt;&lt;p&gt;Then &lt;a href=&quot;https://github.com/nedbat/dot/blob/master/.startup.py&quot; rel=&quot;external&quot;&gt;my .startup.py&lt;/a&gt; file is:&lt;/p&gt;&lt;blockquote class=&quot;code&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;#xA0;Ned's&amp;#xA0;startup.py&amp;#xA0;file,&amp;#xA0;loaded&amp;#xA0;into&amp;#xA0;interactive&amp;#xA0;python&amp;#xA0;prompts.&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;#xA0;Has&amp;#xA0;to&amp;#xA0;work&amp;#xA0;on&amp;#xA0;both&amp;#xA0;2.x&amp;#xA0;and&amp;#xA0;3.x&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;(.startup.py)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;(imported&amp;#xA0;collections,&amp;#xA0;datetime,&amp;#xA0;itertools,&amp;#xA0;math,&amp;#xA0;os,&amp;#xA0;pprint,&amp;#xA0;re,&amp;#xA0;sys,&amp;#xA0;time)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;#xA0;A&amp;#xA0;function&amp;#xA0;for&amp;#xA0;pasting&amp;#xA0;code&amp;#xA0;into&amp;#xA0;the&amp;#xA0;repl.&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nf&quot;&gt;paste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;textwrap&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dedent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nb&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;#xA0;Readline&amp;#xA0;and&amp;#xA0;history&amp;#xA0;support&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nf&quot;&gt;hook_up_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;c1&quot;&gt;#&amp;#xA0;Not&amp;#xA0;sure&amp;#xA0;why&amp;#xA0;this&amp;#xA0;module&amp;#xA0;is&amp;#xA0;missing&amp;#xA0;in&amp;#xA0;some&amp;#xA0;places,&amp;#xA0;but&amp;#xA0;deal&amp;#xA0;with&amp;#xA0;it.&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;readline&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;ne&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;No&amp;#xA0;readline,&amp;#xA0;use&amp;#xA0;^H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;atexit&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;rlcompleter&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;history_path&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expanduser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;s2&quot;&gt;&amp;quot;~/.pyhistory{0}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nf&quot;&gt;save_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nn&quot;&gt;readline&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_history_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_history_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;atexit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;#xA0;Don't&amp;#xA0;do&amp;#xA0;history&amp;#xA0;stuff&amp;#xA0;if&amp;#xA0;we&amp;#xA0;are&amp;#xA0;IPython,&amp;#xA0;it&amp;#xA0;has&amp;#xA0;its&amp;#xA0;own&amp;#xA0;thing.&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;n&quot;&gt;is_ipython&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;s1&quot;&gt;'In'&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nb&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;is_ipython&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;hook_up_history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;#xA0;Get&amp;#xA0;rid&amp;#xA0;of&amp;#xA0;globals&amp;#xA0;we&amp;#xA0;don't&amp;#xA0;want.&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;is_ipython&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;hook_up_history&lt;/span&gt;
&lt;br /&gt;&lt;/code&gt;&lt;/blockquote&gt;&lt;p&gt;A few things could us an explanation.  The paste() function lets me paste
code into the REPL that has blank lines in it, or is indented. Basically, I can
copy code from somewhere, and use paste() to paste it into the prompt without
having to fix those things first.  Run paste(), then paste the code, then type
an EOF indicator (Ctrl-D or Ctrl-Z, depending on your OS).  The pasted code
will be run as if it had been entered correctly.&lt;/p&gt;&lt;p&gt;The history stuff gives me history that persists across Python invocations,
and keeps the Python 2 history separate from the Python 3 history.  &amp;#8220;pp&amp;#8221; is
very handy to have as a short alias.&lt;/p&gt;&lt;p&gt;Of course, you can put anything you want in your own .startup.py file.  It&amp;#8217;s
only run for interactive sessions, not when you are running programs, so you
don&amp;#8217;t have to worry that you will corrupt important programs.&lt;/p&gt;</description>
	<pubDate>Wed, 17 Apr 2019 00:48:43 +0000</pubDate>
</item>
<item>
	<title>PyCoder’s Weekly: Issue #364 (April 16, 2019)</title>
	<guid>https://pycoders.com/issues/364</guid>
	<link>https://pycoders.com/issues/364</link>
	<description>&lt;p&gt; &lt;span&gt;#364 – APRIL 16, 2019&lt;/span&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/issues/364&quot;&gt;View in Browser »&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com&quot;&gt;&lt;img alt=&quot;The PyCoder&amp;rsquo;s Weekly Logo&quot; src=&quot;https://cdn.pycoders.com/37bdf31dc645f968ffb90196e5d38ff5&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;hr /&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1454/feed&quot; target=&quot;_blank&quot;&gt;Hands-On Python 3 Concurrency With the &lt;code&gt;asyncio&lt;/code&gt; Module&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Learn how to speed up your Python 3 programs using concurrency and the asyncio module in the standard library. See step-by-step how to leverage concurrency and parallelism in your own programs, all the way to building a complete HTTP downloader example app using &lt;code&gt;asyncio&lt;/code&gt; and &lt;code&gt;aiohttp&lt;/code&gt;.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1454/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;span&gt;video&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1436/feed&quot; target=&quot;_blank&quot;&gt;Python Used to Take Photo of Black Hole&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &amp;ldquo;Scientists have used a new algorithm to take a photo of a black hole. One of the most exciting parts about it to me is that they used a lot of Python libraries to do the magic.&amp;rdquo;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1436/feed&quot; target=&quot;_blank&quot;&gt;MIKE DRISCOLL&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1459/feed&quot; target=&quot;_blank&quot;&gt;Monitor Python Applications With Datadog APM and Distributed Tracing&lt;/a&gt;&lt;/h3&gt; &lt;a href=&quot;https://pycoders.com/link/1459/feed&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.pycoders.com/b164ba7a62cc90558f5f6fafa51662ca&quot; alt=&quot;alt&quot; /&gt;&lt;/a&gt; &lt;p&gt; Datadog&amp;rsquo;s tracing client integrates with asynchronous libraries like &lt;code&gt;asyncio&lt;/code&gt;, &lt;code&gt;gevent&lt;/code&gt;, and &lt;code&gt;Tornado&lt;/code&gt;. Trace requests across service boundaries to identify bottlenecks, and get the necessary context to debug critical errors. &lt;a href=&quot;https://pycoders.com/link/1459/feed&quot; target=&quot;_blank&quot;&gt;Dive into your Python applications today with a free 14-day trial of Datadog →&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1459/feed&quot; target=&quot;_blank&quot;&gt;DATADOG&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1442/feed&quot; target=&quot;_blank&quot;&gt;Django: Keeping Logic Out of Templates (And Views)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Solid advice! Keep your Django templates and views clean by moving application logic into model methods and model managers.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1442/feed&quot; target=&quot;_blank&quot;&gt;BLOT.IM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1424/feed&quot; target=&quot;_blank&quot;&gt;How to Create an Index in Django Without Downtime&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; In this step-by-step Python tutorial, you&amp;rsquo;ll get a solid understanding of the limitations of Django migrations by tackling a well known problem: creating an index in Django without downtime.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1424/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1423/feed&quot; target=&quot;_blank&quot;&gt;Meet Python Content Creators at PyCharm&amp;rsquo;s PyCon Booth&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; I&amp;rsquo;ll be there, the Real Python team will be there, and so will Mike Kennedy from Talk Python, Brian Okken from Test &amp;amp; Code, Matt Harrison, the PyBites team, Chris Medina, and Miguel Grinberg. Be sure to stop by and say hi :) Thanks JetBrains!&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1423/feed&quot; target=&quot;_blank&quot;&gt;JETBRAINS.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1443/feed&quot; target=&quot;_blank&quot;&gt;list.sort() vs sorted(list)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Taking a closer look at Python’s built-in list sorting methods with regards to memory consumption and time efficiency. Nice writeup!&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1443/feed&quot; target=&quot;_blank&quot;&gt;FLORIAN DAHLITZ&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1425/feed&quot; target=&quot;_blank&quot;&gt;PyCon 2019 Close to Sell Out&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Get your ticket before it&amp;rsquo;s too late :)&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1425/feed&quot; target=&quot;_blank&quot;&gt;PYCON.BLOGSPOT.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Discussions&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1445/feed&quot; target=&quot;_blank&quot;&gt;Just Found the Best Python Book…Cover&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; (Potentially not safe for work)&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1445/feed&quot; target=&quot;_blank&quot;&gt;REDDIT&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Python Jobs&lt;/h2&gt; &lt;div&gt; &lt;a href=&quot;https://pycoders.com/link/1455/feed&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.pycoders.com/e12453a7a61f9eaed08d131e3edb8b87&quot; alt=&quot;alt&quot; /&gt;&lt;/a&gt; &lt;span&gt;&lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1455/feed&quot; target=&quot;_blank&quot;&gt;Brought to you by &lt;strong&gt;Indeed Prime&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;&lt;span&gt;sponsor&lt;/span&gt;&lt;/span&gt; &lt;p&gt; &lt;a href=&quot;https://pycoders.com/link/1455/feed&quot; target=&quot;_blank&quot;&gt;Apply today to see what job opportunities are waiting for you!&lt;/a&gt;&lt;br /&gt; &lt;/p&gt; &lt;/div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1441/feed&quot; target=&quot;_blank&quot;&gt;Senior Python Developer (Copenhagen, Denmark)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/1441/feed&quot; target=&quot;_blank&quot;&gt;GameAnalytics Ltd.&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1422/feed&quot; target=&quot;_blank&quot;&gt;Senior Python Engineer (Remote)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/1422/feed&quot; target=&quot;_blank&quot;&gt;ReCharge Payments&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1434/feed&quot; target=&quot;_blank&quot;&gt;Python Engineer in Healthcare (Burlington, MA)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/1434/feed&quot; target=&quot;_blank&quot;&gt;Nuance Communications&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1435/feed&quot; target=&quot;_blank&quot;&gt;Machine Learning and Data Science Developer (Austin, TX)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/1435/feed&quot; target=&quot;_blank&quot;&gt;Protection Engineering Consultants LLC&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.pythonjobshq.com?utm_source=newsletter&amp;utm_campaign=pycoders364&amp;utm_medium=feed&quot; target=&quot;_blank&quot;&gt;More Python Jobs &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Articles &amp;amp; Tutorials&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1438/feed&quot; target=&quot;_blank&quot;&gt;Python String Formatting Tips &amp;amp; Best Practices&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Learn the four main approaches to string formatting in Python, as well as their strengths and weaknesses. You&amp;rsquo;ll also get a simple rule of thumb for how to pick the best general purpose string formatting approach in your own programs.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1438/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;span&gt;video&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1428/feed&quot; target=&quot;_blank&quot;&gt;Python App Settings Management With Dynaconf&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Nice little project for managing settings in your Python apps: &amp;ldquo;The only line of code you need to manage your Python 3 configurations&amp;rdquo;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1428/feed&quot; target=&quot;_blank&quot;&gt;BRUNO ROCHA&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1456/feed&quot; target=&quot;_blank&quot;&gt;Stop Reviewing Code Manually&lt;/a&gt;&lt;/h3&gt; &lt;a href=&quot;https://pycoders.com/link/1456/feed&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.pycoders.com/f59e46f8599ed179e58c0873f4c6bf81&quot; alt=&quot;alt&quot; /&gt;&lt;/a&gt; &lt;p&gt; Take the hassle out of code reviews&amp;mdash;Codacy flags errors so you can fix them quickly. Address security concerns, code duplication, code complexity and drops in coverage, directly from your workflow. &lt;a href=&quot;https://pycoders.com/link/1456/feed&quot; target=&quot;_blank&quot;&gt;Click here to get started →&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1456/feed&quot; target=&quot;_blank&quot;&gt;CODACY&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1453/feed&quot; target=&quot;_blank&quot;&gt;Introduction to the Python Calendar Module&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Short &amp;amp; sweet intro to the &lt;code&gt;calendar&lt;/code&gt; module in the Python standard library.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1453/feed&quot; target=&quot;_blank&quot;&gt;STACKABUSE.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1451/feed&quot; target=&quot;_blank&quot;&gt;Be Your Own Certificate Authority&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; How to create a simple, internal CA for your microservice architecture or integration testing—with Python.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1451/feed&quot; target=&quot;_blank&quot;&gt;MOSHE ZADKA&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1448/feed&quot; target=&quot;_blank&quot;&gt;Linear Regression in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; In this step-by-step tutorial, you&amp;rsquo;ll get started with linear regression in Python. Linear regression is one of the fundamental statistical and machine learning techniques, and Python is a popular choice for machine learning.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1448/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1426/feed&quot; target=&quot;_blank&quot;&gt;LSTMs for Human Activity Recognition&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; An example of using TensorFlow for Human Activity Recognition (HAR) on a smartphone data set in order to classify types of movement, e.g. &amp;ldquo;walking&amp;rdquo;, &amp;ldquo;sitting&amp;rdquo;, &amp;ldquo;standing&amp;rdquo; etc.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1426/feed&quot; target=&quot;_blank&quot;&gt;GUILLAUME CHEVALIER&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1458/feed&quot; target=&quot;_blank&quot;&gt;Raspberry Pi for Computer Vision and Deep Learning&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; You can teach your Raspberry Pi to &amp;ldquo;see&amp;rdquo; using Computer Vision, Deep Learning, and OpenCV. &lt;a href=&quot;https://pycoders.com/link/1458/feed&quot; target=&quot;_blank&quot;&gt;Let Adrian Rosebrock show you how →&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1458/feed&quot; target=&quot;_blank&quot;&gt;PYIMAGESEARCH&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1447/feed&quot; target=&quot;_blank&quot;&gt;How to Write a Python Web Framework (Part 4)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; In this part of Jahongir&amp;rsquo;s blog post series you&amp;rsquo;ll see how to expand your web framework with custom exception handlers, support for static files, and middleware processing.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1447/feed&quot; target=&quot;_blank&quot;&gt;JAHONGIR RAHMONOV&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1449/feed&quot; target=&quot;_blank&quot;&gt;Using Python to Analyze Game of Thrones&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Want to learn Python? What better way to learn than by having a Game of Thrones project to complete as motivation.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1449/feed&quot; target=&quot;_blank&quot;&gt;ROCKY KEV&lt;/a&gt; • Shared by Ricky White&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Projects &amp;amp; Code&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1440/feed&quot; target=&quot;_blank&quot;&gt;eht-imaging: The Code Behind the Black Hole Image&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Imaging, analysis, and simulation software for radio interferometry used for generating the famous black hole image. Python FTW!&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1440/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/ACHAEL&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1450/feed&quot; target=&quot;_blank&quot;&gt;aiodnsresolver: Pure Python Asyncio DNS Resolver&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1450/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/MICHALC&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1439/feed&quot; target=&quot;_blank&quot;&gt;sunfish: Sunfish: A Python Chess Engine in 111 Lines of Code&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1439/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/THOMASAHLE&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1420/feed&quot; target=&quot;_blank&quot;&gt;Djaneiro: Django Snippets for VS Code&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1420/feed&quot; target=&quot;_blank&quot;&gt;SCOTT BARKMAN&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1433/feed&quot; target=&quot;_blank&quot;&gt;pyts: Series Transformation and Classification&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1433/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/JOHANNFAOUZI&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1446/feed&quot; target=&quot;_blank&quot;&gt;python-broqer: Processing Continuous Data Streams in a Reactive Style&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1446/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/SEMIVERSUS&lt;/a&gt; • Shared by Günther Jena&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1427/feed&quot; target=&quot;_blank&quot;&gt;fastapi: Python Web Framework for Building APIs&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1427/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/TIANGOLO&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1429/feed&quot; target=&quot;_blank&quot;&gt;python-ext-wasm: Run WebAssembly Binaries in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1429/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/WASMERIO&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Events&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1432/feed&quot; target=&quot;_blank&quot;&gt;PyColorado 2019 CFP&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; September 6 to September 8 in Denver, CO&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1432/feed&quot; target=&quot;_blank&quot;&gt;PAPERCALL.IO&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1431/feed&quot; target=&quot;_blank&quot;&gt;San Francisco PyData Meetup Group&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; April 23&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1431/feed&quot; target=&quot;_blank&quot;&gt;MEETUP.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1444/feed&quot; target=&quot;_blank&quot;&gt;PyLadies Dublin&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; April 18, 2019&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1444/feed&quot; target=&quot;_blank&quot;&gt;PYLADIES.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1421/feed&quot; target=&quot;_blank&quot;&gt;Karlsruhe Python User Group (KaPy)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; April 19, 2019&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1421/feed&quot; target=&quot;_blank&quot;&gt;BL0RG.NET&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1430/feed&quot; target=&quot;_blank&quot;&gt;BangPypers&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; April 20, 2019&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1430/feed&quot; target=&quot;_blank&quot;&gt;MEETUP.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/1437/feed&quot; target=&quot;_blank&quot;&gt;SciPy Japan 2019&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; April 23 to April 25, 2019&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/1437/feed&quot; target=&quot;_blank&quot;&gt;SCIPY.ORG&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;hr /&gt; &lt;p&gt;Happy Pythoning!&lt;br /&gt;This was PyCoder&amp;rsquo;s Weekly Issue #364.&lt;br /&gt;&lt;a href=&quot;https://pycoders.com/issues/364&quot;&gt;View in Browser »&lt;/a&gt;&lt;/p&gt; &lt;img src=&quot;https://pycoders.com/issues/364/open/feed&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;alt&quot; /&gt; 
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Subscribe to 🐍 PyCoder&amp;rsquo;s Weekly 💌 – Get the best Python news, articles, and tutorials delivered to your inbox once a week &lt;a href=&quot;https://pycoders.com/?utm_source=pycoders&amp;utm_medium=feed&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 16 Apr 2019 19:30:00 +0000</pubDate>
</item>
<item>
	<title>Sumana Harihareswara - Cogito, Ergo Sumana: PyCon NA, !!Con, and WisCon</title>
	<guid>https://www.harihareswara.net/sumana/2019/04/16/0</guid>
	<link>https://www.harihareswara.net/sumana/2019/04/16/0</link>
	<description>I'm back in New York City, and preparing to travel a bit; May is my big conference month this year.

&lt;p&gt;I'll start the month at &lt;a href=&quot;http://us.pycon.org/&quot;&gt;PyCon North America&lt;/a&gt; in Cleveland, Ohio, practically the whole conference, 1-9 May. I'm co-organizing &lt;a href=&quot;https://us.pycon.org/2019/hatchery/artofpython/&quot;&gt;The Art of Python&lt;/a&gt;, an arts festival -- several short plays, plus a fanvid and live music -- the night of Friday, May 3rd. And during the sprints, 6-9 May, I'll be &lt;a href=&quot;https://wiki.python.org/psf/PackagingSprints&quot;&gt;concentrating on the world of Python packaging and distribution&lt;/a&gt;, e.g., &lt;a href=&quot;http://pypi.org/&quot;&gt;PyPI&lt;/a&gt;.

&lt;p&gt;I'll go home to New York City, then go to &lt;a href=&quot;http://bangbangcon.com/&quot;&gt;!!Con&lt;/a&gt; 11-12 May, where I am not organizing or speaking or suchlike.

&lt;p&gt;And then I'll be at &lt;a href=&quot;http://wiscon.net/&quot;&gt;WisCon&lt;/a&gt; in Madison, Wisconsin, for the whole convention, 24-27 May plus a little extra on either side. I will once again be the comedy auctioneer for the &lt;a href=&quot;http://tiptree.org/&quot;&gt;auction on Saturday night&lt;/a&gt; that benefits &lt;a href=&quot;http://tiptree.org/&quot;&gt;the Tiptree Award&lt;/a&gt; -- if you have something to donate to the auction, please &lt;a href=&quot;https://tiptree.org/support-us/contrib&quot;&gt;let us know by 15 May&lt;/a&gt;. I may not make it to &lt;a href=&quot;https://twitter.com/thefloomp/status/1115432115926126592&quot;&gt;the Floomp&lt;/a&gt; or &lt;a href=&quot;https://wiscon-vidparty.dreamwidth.org/&quot;&gt;the vid party&lt;/a&gt;. I will probably be on a few panels; several panels are &lt;a href=&quot;https://wiscon.dreamwidth.org/144089.html&quot;&gt;still seeking volunteer panellists (sign up by 19 April)&lt;/a&gt;. I do plan to be at the Gathering and the Dessert Salon (heads-up, &lt;a href=&quot;http://wiscon.net/2019/04/11/dessert-salon-changes-for-wiscon-43/&quot;&gt;changes to Dessert Salon entry flow&lt;/a&gt;).

&lt;p&gt;If you're going to be at any of these events, perhaps we can share a beverage! If you want to make sure that we do that, let's actually set up at least a tentative appointment soon, so I can put it in my calendar.

&lt;p&gt;I will be more responsive to &lt;a href=&quot;https://changeset.nyc/#contact&quot;&gt;emails and text messages&lt;/a&gt; than to social media while at these conferences, and in particular, I may see mentions and direct messages &lt;a href=&quot;http://mastodon.social/@brainwane/&quot;&gt;on Mastodon&lt;/a&gt; but I probably won't see mentions or direct messages &lt;a href=&quot;http://twitter.com/brainwane&quot;&gt;on Twitter&lt;/a&gt;. Also, I am pretty forgiving about being called mispronunciations of my name, but &lt;a href=&quot;http://www.panix.com/~sumanah/pix/my-name.webm&quot;&gt;here's a recording&lt;/a&gt; in case you want help -- I also respond to &quot;Vikki&quot; which is the fake name I use with strangers at restaurants. And I will probably not hug you unless we know each other well.

&lt;p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 16 Apr 2019 18:36:55 +0000</pubDate>
</item>
<item>
	<title>Trey Hunner: Is it a class or a function? It's a callable!</title>
	<guid>http://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/</guid>
	<link>http://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/</link>
	<description>&lt;p&gt;If you search course curriculum I&amp;rsquo;ve written, you&amp;rsquo;ll often find phrases like &amp;ldquo;&lt;code&gt;zip&lt;/code&gt; function&amp;rdquo;, &amp;ldquo;&lt;code&gt;enumerate&lt;/code&gt; function&amp;rdquo;, and &amp;ldquo;&lt;code&gt;list&lt;/code&gt; function&amp;rdquo;.
Those terms are all technically misnomers.&lt;/p&gt;

&lt;p&gt;When I use terms like &amp;ldquo;the &lt;code&gt;bool&lt;/code&gt; function&amp;rdquo; and &amp;ldquo;the &lt;code&gt;str&lt;/code&gt; function&amp;rdquo; I&amp;rsquo;m incorrectly implying that &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; are functions.
But these &lt;strong&gt;aren&amp;rsquo;t functions: they&amp;rsquo;re classes&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to explain why this confusion between classes and functions happens in Python and then explain &lt;strong&gt;why this distinction often doesn&amp;rsquo;t matter&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Class or function?&lt;/h2&gt;

&lt;p&gt;When I&amp;rsquo;m training a new group of Python developers, there&amp;rsquo;s group activity we often do: the class or function game.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;the class or function game&lt;/strong&gt;, we take something that we &amp;ldquo;call&amp;rdquo; (using parenthesis: &lt;code&gt;()&lt;/code&gt;) and we guess whether it&amp;rsquo;s a class or a function.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can call &lt;code&gt;zip&lt;/code&gt; with a couple iterables and we get another iterable back, so is &lt;code&gt;zip&lt;/code&gt; a class or a function?&lt;/li&gt;
&lt;li&gt;When we call &lt;code&gt;len&lt;/code&gt;, are we calling a class or a function?&lt;/li&gt;
&lt;li&gt;What about &lt;code&gt;int&lt;/code&gt;: when we write &lt;code&gt;int('4')&lt;/code&gt; are we calling a class or a function?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Python&amp;rsquo;s &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;len&lt;/code&gt;, and &lt;code&gt;int&lt;/code&gt; are all often guessed to be functions, but &lt;strong&gt;only one of these is really a function&lt;/strong&gt;:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'zip'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;built-in function len&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'int'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;While &lt;code&gt;len&lt;/code&gt; is a function, &lt;code&gt;zip&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; are classes.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reversed&lt;/code&gt;, &lt;code&gt;enumerate&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;, and &lt;code&gt;filter&lt;/code&gt; &amp;ldquo;functions&amp;rdquo; also aren&amp;rsquo;t really functions:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reversed&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'reversed'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'enumerate'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'range'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'filter'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;After playing the class or function game, we always discuss &lt;strong&gt;callables&lt;/strong&gt;, and then we discuss the fact that &lt;strong&gt;we often don&amp;rsquo;t care whether something is a class or a function&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;What&amp;rsquo;s a callable?&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;callable&lt;/strong&gt; is anything you can &lt;em&gt;call&lt;/em&gt;, using parenthesis, and possibly passing arguments.&lt;/p&gt;

&lt;p&gt;All three of these lines involve callables:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnotherThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;We don&amp;rsquo;t know what &lt;code&gt;something&lt;/code&gt;, &lt;code&gt;AnotherThing&lt;/code&gt;, and &lt;code&gt;something_else&lt;/code&gt; do: but we &lt;em&gt;know&lt;/em&gt; they&amp;rsquo;re callables.&lt;/p&gt;

&lt;p&gt;We have a number of callables in Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions are callables&lt;/li&gt;
&lt;li&gt;Classes are callables&lt;/li&gt;
&lt;li&gt;Methods (which are functions that hang off of classes) are callables&lt;/li&gt;
&lt;li&gt;Instances of classes can even be turned into callables&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Callables are a pretty important concept in Python.&lt;/p&gt;

&lt;h2&gt;Classes are callables&lt;/h2&gt;

&lt;p&gt;Functions are the most obvious callable in Python.
Functions can be &amp;ldquo;called&amp;rdquo; in every programming language.
A &lt;em&gt;class&lt;/em&gt; being callable is a bit more unique though.&lt;/p&gt;

&lt;p&gt;In JavaScript we can make an &amp;ldquo;instance&amp;rdquo; of the &lt;code&gt;Date&lt;/code&gt; class like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T08&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;00.000&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Z&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;In JavaScript the class instantiation syntax (the way we create an &amp;ldquo;instance&amp;rdquo; of a class) involves the &lt;code&gt;new&lt;/code&gt; keyword.
In Python we don&amp;rsquo;t have a &lt;code&gt;new&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;In Python we can make an &amp;ldquo;instance&amp;rdquo; of the &lt;code&gt;datetime&lt;/code&gt; class (from &lt;code&gt;datetime&lt;/code&gt;) like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;datetime.datetime(2020, 1, 1, 0, 0)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;In Python, the syntax for &lt;strong&gt;instantiating a new class instance&lt;/strong&gt; is the same as the syntax for &lt;strong&gt;calling a function&lt;/strong&gt;.
There&amp;rsquo;s no &lt;code&gt;new&lt;/code&gt; needed: we just call the class.&lt;/p&gt;

&lt;p&gt;When we &lt;strong&gt;call a function&lt;/strong&gt;, we get its return value.
When we &lt;strong&gt;call a class&lt;/strong&gt;, we get an &amp;ldquo;instance&amp;rdquo; of that class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We use the same syntax for constructing objects from classes and for calling functions&lt;/strong&gt;: this fact is the main reason the word &amp;ldquo;callable&amp;rdquo; is such an important part of our Python vocabulary.&lt;/p&gt;

&lt;h2&gt;Disguising classes as functions&lt;/h2&gt;

&lt;p&gt;There are many classes-which-look-like-functions among the Python built-ins and in the Python standard library.&lt;/p&gt;

&lt;p&gt;I sometimes explain &lt;strong&gt;decorators&lt;/strong&gt; (an intermediate-level Python concept) as &amp;ldquo;functions which accept functions and return functions&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;But that&amp;rsquo;s not an entirely accurate explanation.
There are also &lt;strong&gt;class decorators&lt;/strong&gt;: functions which accept classes and return classes.
And there are also &lt;strong&gt;decorators which are implemented using classes&lt;/strong&gt;: classes which accept functions and return objects.&lt;/p&gt;

&lt;p&gt;A better explanation of the term decorators might be &amp;ldquo;callables which accept callables and return callables&amp;rdquo; (still not entirely accurate, but good enough for our purposes).&lt;/p&gt;

&lt;p&gt;Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/functions.html#property&quot;&gt;property&lt;/a&gt; decorator seems like a function:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;diameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diameter&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;But it&amp;rsquo;s a class:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;property&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'property'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;classmethod&lt;/code&gt; and &lt;code&gt;staticmethod&lt;/code&gt; decorators are &lt;em&gt;also&lt;/em&gt; classes:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;classmethod&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'classmethod'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;staticmethod&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'staticmethod'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;What about context managers, like &lt;a href=&quot;https://docs.python.org/3.5/library/contextlib.html#contextlib.suppress&quot;&gt;suppress&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout&quot;&gt;redirect_stdout&lt;/a&gt; from the &lt;code&gt;contextlib&lt;/code&gt; module?
These both use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Snake_case&quot;&gt;snake_case&lt;/a&gt; naming convention, so they seem like functions:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;contextlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suppress&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suppress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect_stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;'hello!\n'&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;But they&amp;rsquo;re actually &lt;strong&gt;implemented using classes&lt;/strong&gt;, despite the &lt;code&gt;snake_case&lt;/code&gt; naming convention:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suppress&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'contextlib.suppress'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redirect_stdout&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'contextlib.redirect_stdout'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Decorators and context managers are just two places in Python where you&amp;rsquo;ll often see callables which look like functions but aren&amp;rsquo;t.
Whether a &lt;strong&gt;callable&lt;/strong&gt; is a class or a function is often &lt;strong&gt;just an implementation detail&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not really a mistake to refer to &lt;code&gt;property&lt;/code&gt; or &lt;code&gt;redirect_stdout&lt;/code&gt; as a function because &lt;strong&gt;they may as well be functions&lt;/strong&gt;.
We can &lt;strong&gt;call&lt;/strong&gt; them, and that&amp;rsquo;s what we care about.&lt;/p&gt;

&lt;h2&gt;Callable objects&lt;/h2&gt;

&lt;p&gt;Python&amp;rsquo;s &amp;ldquo;call&amp;rdquo; syntax, those &lt;code&gt;(...)&lt;/code&gt; parenthesis, can &lt;strong&gt;create an class instance&lt;/strong&gt; or &lt;strong&gt;call a function&lt;/strong&gt;.
But this &amp;ldquo;call&amp;rdquo; syntax can &lt;strong&gt;also be used to call an object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Technically, everything in Python &amp;ldquo;is an object&amp;rdquo;:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;But we often use the term &amp;ldquo;object&amp;rdquo; to imply that we&amp;rsquo;re working with an instance of a class (by &lt;em&gt;instance of a class&lt;/em&gt; I mean &amp;ldquo;the thing you get back when you call a class&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a &lt;a href=&quot;https://docs.python.org/3.5/library/functools.html#functools.partial&quot;&gt;partial&lt;/a&gt; function which lives in the &lt;code&gt;functools&lt;/code&gt; module, which can &amp;ldquo;partially evaluate&amp;rdquo; a function by storing arguments to be used when calling the function later.
This is often used to make Python look a bit more like a functional programming language:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;just_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isdigit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;just_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'50'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;['4', '50']&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;I said above that Python has &amp;ldquo;a &lt;code&gt;partial&lt;/code&gt; function&amp;rdquo;, which is both true and false.&lt;/p&gt;

&lt;p&gt;While the phrase &amp;ldquo;a &lt;code&gt;partial&lt;/code&gt; function&amp;rdquo; makes sense, the &lt;code&gt;partial&lt;/code&gt; callable &lt;strong&gt;isn&amp;rsquo;t implemented using a function&lt;/strong&gt;.&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class '__main__.partial'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;The Python core developers &lt;em&gt;could&lt;/em&gt; have implemented &lt;code&gt;partial&lt;/code&gt; as a function, like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Return &amp;quot;partially evaluated&amp;quot; version of given function/arguments.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;more_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;more_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;all_kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;more_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;more_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;But instead they chose to use a class, doing something more like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Return &amp;quot;partially evaluated&amp;quot; version of given function/arguments.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;more_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;more_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;all_kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;more_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;more_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;That &lt;code&gt;__call__&lt;/code&gt; method allows us to &lt;em&gt;call&lt;/em&gt; &lt;code&gt;partial&lt;/code&gt; objects.
So the &lt;code&gt;partial&lt;/code&gt; class makes a &lt;strong&gt;callable object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Adding a &lt;code&gt;__call__&lt;/code&gt; method to any class will &lt;strong&gt;make instances of that class callable&lt;/strong&gt;.
In fact, checking for a &lt;code&gt;__call__&lt;/code&gt; method is one way to ask the question &amp;ldquo;is this object callable?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;All functions, classes, and callable objects have a &lt;code&gt;__call__&lt;/code&gt; method:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__call__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__call__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__call__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Though a better way to check for callability than looking for a &lt;code&gt;__call__&lt;/code&gt; is to use the built-in &lt;code&gt;callable&lt;/code&gt; function:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;In Python, classes, functions, and instances of classes can all be used as &amp;ldquo;callables&amp;rdquo;.&lt;/p&gt;

&lt;h2&gt;The distinction between functions and classes often doesn&amp;rsquo;t matter&lt;/h2&gt;

&lt;p&gt;The Python documentation has a page called &lt;a href=&quot;https://docs.python.org/3/library/functions.html#built-in-funcs&quot;&gt;Built-in Functions&lt;/a&gt;.
But this Built-in Functions page &lt;strong&gt;isn&amp;rsquo;t actually for built-in functions&lt;/strong&gt;: it&amp;rsquo;s for built-in callables.&lt;/p&gt;

&lt;p&gt;Of the 69 &amp;ldquo;built-in functions&amp;rdquo; listed in the Python Built-In Functions page, &lt;strong&gt;only 42 are actually implemented as functions&lt;/strong&gt;: 26 are classes and 1 (&lt;code&gt;help&lt;/code&gt;) is an instance of a callable class.&lt;/p&gt;

&lt;p&gt;Of the 26 classes among those built-in &amp;ldquo;functions&amp;rdquo;, four &lt;em&gt;were&lt;/em&gt; actually functions in Python 2 (the now-lazy &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;, and &lt;code&gt;zip&lt;/code&gt;) but have since become classes.&lt;/p&gt;

&lt;p&gt;The Python built-ins and the standard library are both full of maybe-functions-maybe-classes.&lt;/p&gt;

&lt;h3&gt;operator.itemgetter&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;operator&lt;/code&gt; module has lots of callables:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemgetter&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_a_and_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemgetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_a_and_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;(1, 2)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;(1, 2)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Some of these callables (like &lt;a href=&quot;https://docs.python.org/3.5/library/operator.html#operator.itemgetter&quot;&gt;itemgetter&lt;/a&gt; are &lt;em&gt;callable classes&lt;/em&gt;) while others (like &lt;code&gt;getitem&lt;/code&gt;) are functions:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemgetter&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'operator.itemgetter'&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_a_and_b&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;operator.itemgetter('a', 'b')&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getitem&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;built-in function getitem&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;itemgetter&lt;/code&gt; class &lt;em&gt;could&lt;/em&gt; have been implemented as &amp;ldquo;a function that returns a function&amp;rdquo;.
Instead it&amp;rsquo;s a class which implements a &lt;code&gt;__call__&lt;/code&gt; method, so its class instances are callable.&lt;/p&gt;

&lt;h3&gt;Iterators&lt;/h3&gt;

&lt;p&gt;Generator functions are functions which return iterators when called (&lt;a href=&quot;https://youtu.be/V2PkkMS2Ack?t=858&quot;&gt;generators are iterators&lt;/a&gt;):&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Generator that counts upward forever.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;And &lt;a href=&quot;https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/&quot;&gt;iterator classes&lt;/a&gt; are classes which return iterators when called:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Iterator that counts upward forever.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Iterators can be defined using functions or using classes: whichever you choose is an implementation detail.&lt;/p&gt;

&lt;h3&gt;The sorted &amp;ldquo;key function&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;The built-in &lt;a href=&quot;https://docs.python.org/3.5/library/functions.html#sorted&quot;&gt;sorted&lt;/a&gt; function has an optional &lt;code&gt;key&lt;/code&gt; argument, which is called to get &amp;ldquo;comparison keys&amp;rdquo; for sorting (&lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; have a similar &lt;code&gt;key&lt;/code&gt; argument).&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;key&lt;/code&gt; argument can be a function:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;digit_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'_'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'400'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'2_020'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'800_000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digit_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;['400', '2_020', '800_000']&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;But it can also be a class:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'400'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'2_020'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'800_000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;['400', '2_020', '800_000']&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;The Python documentation says &amp;ldquo;key specifies a function of one argument&amp;hellip;&amp;rdquo;.
That&amp;rsquo;s not &lt;em&gt;technically&lt;/em&gt; correct because key can be any callable, not just a function.
But &lt;strong&gt;we often use the words &amp;ldquo;function&amp;rdquo; and &amp;ldquo;callable&amp;rdquo; interchangeably&lt;/strong&gt; in Python, and that&amp;rsquo;s okay.&lt;/p&gt;

&lt;h3&gt;The defaultdict &amp;ldquo;factory function&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.defaultdict&quot;&gt;defaultdict&lt;/a&gt; class in the &lt;code&gt;collections&lt;/code&gt; module accepts a &amp;ldquo;factory&amp;rdquo; callable, which is used to generate default values for missing dictionary items.&lt;/p&gt;

&lt;p&gt;Usually we use a class as a &lt;code&gt;defaultdict&lt;/code&gt; factory:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'snakes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;things&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'newer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Python 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'newer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;['Python 3']&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;But &lt;code&gt;defaultdict&lt;/code&gt; can also accept a function (or any other callable):&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'yellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'purple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;favorite_colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;favorite_colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Kevin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;'yellow'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;favorite_colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Stacy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;'green'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probabilities&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'having fun'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;0.6714530824158086&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'seeing a snake'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;go&quot;&gt;0.07703364911089605&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Pretty much anywhere a &amp;ldquo;callable&amp;rdquo; is accepted in Python, a function, a class, or some other callable object will work just fine.&lt;/p&gt;

&lt;h2&gt;Think in terms of &amp;ldquo;callables&amp;rdquo; not &amp;ldquo;classes&amp;rdquo; or &amp;ldquo;functions&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;https://www.pythonmorsels.com/&quot;&gt;Python Morsels&lt;/a&gt; exercises I send out every week, I often ask learners to make a &amp;ldquo;callable&amp;rdquo;.
Often I&amp;rsquo;ll say something like &amp;ldquo;this week I&amp;rsquo;d like you to make a callable which returns an iterator&amp;hellip;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I say &amp;ldquo;callable&amp;rdquo; because I want &lt;a href=&quot;https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/&quot;&gt;an iterator&lt;/a&gt; back, but I really don&amp;rsquo;t care whether the callable created is a &lt;strong&gt;generator function&lt;/strong&gt;, an &lt;strong&gt;iterator class&lt;/strong&gt;, or a &lt;strong&gt;function that returns a generator expression&lt;/strong&gt;.
All of these things are &lt;em&gt;callables&lt;/em&gt; which return the right type that I&amp;rsquo;m testing for (an iterator).
It&amp;rsquo;s up to you, the implementor of this callable, to determine how you&amp;rsquo;d like to define it.&lt;/p&gt;

&lt;p&gt;We practice &lt;strong&gt;duck typing&lt;/strong&gt; in Python: &lt;strong&gt;if it looks like a duck and quacks like a duck, it&amp;rsquo;s a duck&lt;/strong&gt;.
Because of duck typing we tend to use general terms to describe specific things: lists are sequences, iterators are generators, dictionaries are mappings, and functions are callables.&lt;/p&gt;

&lt;p&gt;If something looks like a callable and quacks (or rather, calls) like a callable, it&amp;rsquo;s a callable.
Likewise, if something looks like a function and quacks (calls) like a function, we can call it a function&amp;hellip; &lt;strong&gt;even if it&amp;rsquo;s actually implemented using a class or a callable object&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Callables accept arguments and return something useful to the caller.
When we &lt;em&gt;call&lt;/em&gt; classes we get instances of that class back.
When we &lt;em&gt;call&lt;/em&gt; functions we get the return value of that function back.
The distinction between a class and a function is &lt;strong&gt;rarely important from the perspective of the caller&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When talking about passing functions or class objects around, try to think in terms of &lt;em&gt;callable&lt;/em&gt;.
&lt;strong&gt;What happens when you call something&lt;/strong&gt; is often more important than &lt;strong&gt;what that thing actually is&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;More importantly though, if someone mislabels a function as a class or a class as a function, &lt;strong&gt;don&amp;rsquo;t correct them unless the distinction is actually relevant&lt;/strong&gt;.
A function is a callable and a class is a callable: the distinction between these two can often be disregarded.&lt;/p&gt;

&lt;h2&gt;Want some practice with callables?&lt;/h2&gt;

&lt;p&gt;You don&amp;rsquo;t learn by putting more information into your head.
You learn through recall, that is trying to retrieve information for your head.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to get some practice with the &lt;code&gt;__call__&lt;/code&gt; method, if you&amp;rsquo;d like to make your own iterable/iterator-returning callables, or if you just want to practice working with &amp;ldquo;callables&amp;rdquo;, I have a Python Morsels exercise for you.&lt;/p&gt;

&lt;p&gt;Python Morsels is a weekly Python skill-building service.
I send one exercise every week and the first 5 are free.&lt;/p&gt;

&lt;p&gt;If you sign up for Python Morsels using the below form, I&amp;rsquo;ll send you one callable-related exercise of your choosing (choose using the selection below).&lt;/p&gt;

&lt;h4&gt;Which Python exercise would you like right now?&lt;/h4&gt;

&lt;p&gt;&lt;form method=&quot;post&quot; action=&quot;https://www.pythonmorsels.com/signup/&quot;&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;exercise_track&quot; value=&quot;callables1&quot; /&gt; Novice exercise with a bonus involving callables&lt;/label&gt;
    &lt;br /&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;exercise_track&quot; value=&quot;callables2&quot; /&gt; Making a callable which returns an iterable&lt;/label&gt;
    &lt;br /&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;exercise_track&quot; value=&quot;callables3&quot; /&gt; Making an iterator-returning callable&lt;/label&gt;
    &lt;br /&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;exercise_track&quot; value=&quot;callables4&quot; /&gt;Advanced exercise with bonuses showing the downside of &lt;code&gt;__call__&lt;/code&gt;&lt;/label&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;form_id&quot; value=&quot;callables&quot; /&gt;
    &lt;input type=&quot;email&quot; name=&quot;email&quot; class=&quot;subscribe-email form-big&quot; /&gt;
    &lt;button type=&quot;submit&quot; class=&quot;subscribe-btn form-big&quot;&gt;Get my Python Morsels exercise&lt;/button&gt;
    &lt;br /&gt;
    &lt;small&gt;
    You can &lt;a href=&quot;https://www.pythonmorsels.com/privacy/&quot;&gt;find the Privacy Policy for Python Morsels here&lt;/a&gt;.
    &lt;/small&gt;
&lt;/form&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 16 Apr 2019 17:20:00 +0000</pubDate>
</item>
<item>
	<title>NumFOCUS: NumFOCUS Hires Executive Operations Administrator</title>
	<guid>https://numfocus.org/blog/numfocus-hires-executive-operations-administrator</guid>
	<link>https://numfocus.org/blog/numfocus-hires-executive-operations-administrator</link>
	<description>&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://numfocus.org/blog/numfocus-hires-executive-operations-administrator&quot;&gt;NumFOCUS Hires Executive Operations Administrator&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://numfocus.org&quot;&gt;NumFOCUS&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 16 Apr 2019 15:24:27 +0000</pubDate>
</item>
<item>
	<title>Real Python: Hands-on Python 3 Concurrency With the asyncio Module</title>
	<guid>https://realpython.com/courses/python-3-concurrency-asyncio-module/</guid>
	<link>https://realpython.com/courses/python-3-concurrency-asyncio-module/</link>
	<description>&lt;p&gt;Learn how to speed up your Python 3 programs using concurrency and the new &lt;code&gt;asyncio&lt;/code&gt; module in the standard library. &lt;/p&gt;
&lt;p&gt;First, you&amp;rsquo;ll explore the key terms of parallel programming. Next, you&amp;rsquo;ll see step-by-step how to leverage concurrency and parallelism in your own programs, all the way to building a complete HTTP downloader example app using &lt;code&gt;asyncio&lt;/code&gt; and &lt;code&gt;aiohttp&lt;/code&gt;.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 16 Apr 2019 14:00:00 +0000</pubDate>
</item>

</channel>
</rss>
