# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
#export HISTCONTROL=ignoredups

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" -a -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color)
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    ;;
*)
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    ;;
esac

# Comment in the above and uncomment this below for a color prompt
#PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

#if [ -f ~/.bash_aliases ]; then
#    . ~/.bash_aliases
#fi

# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    #alias dir='ls --color=auto --format=vertical'
    #alias vdir='ls --color=auto --format=long'
fi

export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
export ZEPHYR_GCC_VARIANT=
export ZEPHYR_SDK_INSTALL_DIR=/opt/zephyr-sdk
export ZEPHYR_BASE=~/ose/ose-dev-code-base/modules/rtos/ose_zephyr

export PATH=/opt/cmake-3.9.6-Linux-x86_64/bin:/usr/local/bin/python3:/opt/zephyr-sdk/sysroots/x86_64-pokysdk-linux/usr/bin/arm-zephyr-eabi:$PATH:~/bin:~/bin/android_bin
export PATH=$PATH:~/android/android-sdk-linux_x86/platform-tools:~/android/android-sdk-linux_x86/tools:/opt/google/chrome
export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib32
#LD_LIBRARY_PATH
#export PATH=$PATH:~/composer_xe_2015.0.090/bin/ia32/
#export INCLUDE=$INCLUDE:/opt/intel/external_req/include/clang
#source /opt/intel/bin/compilervars.sh ia32
#PATH=$PATH:/opt/intel/composerxe-2011/bin:/opt/intel/composerxe-2011.0.062/bin/ia32
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/lib/ia32
#export INCLUDE=$INCLUDE:/opt/ips2013/external_req/include/clang
#source ~/intel/bin/compilervars.sh ia32
#export INCLUDE=
#export INCLUDE=$INCLUDE:/home/lyan7/intel/composer_xe_2015.0.090/compiler/include/
#export INCLUDE=$INCLUDE:~/external_req/include/clang

export JAVA_HOME=~/jdk_1_7/
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:$CLASSPATH:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
export PATH=$PATH:/usr/local/go/bin
export GOPATH=~/study/go/workspace
export GOPATH=$GOPATH:~/study/go/workspace/calc

export DISPLAY=:0.0
export APPDATA=/tmp
#export http_proxy=http://proxy.fm.intel.com:912
#export https_proxy=http://proxy.fm.intel.com:912
export no_proxy=localhost,.intel.com,10.0.0.0/8
#export GIT_PROXY_COMMAND=git_proxy.sh

#export http_proxy=http://proxy01.cd.intel.com:911
#export https_proxy=http://proxy01.cd.intel.com:911

export http_proxy=http://child-prc.intel.com:913
export https_proxy=http://child-prc.intel.com:913

#alias repo_init_ics='repo init -u git://android.intel.com/manifest -b platform/android/main -m android-main'
#alias repo_init_gb='repo init -u git://android.intel.com/manifest -b platform/android/r2-stable -m android-r2'
# some more ls aliases
alias ll='ls -lh'
alias df='df -h'
alias du='du -h'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias .b='. ~/.bashrc'
alias a='adb'
alias g='git'
alias m='make'
alias cddata='cd /home/data/leo'
alias an='source and.sh'
alias adbroot='adb wait-for-device && adb root'
alias adbpullmac='adb pull nvm_fs_partition/wlan/nvmData' #edit: 1. :%!xxd -g 1  2. :%!xxd -r, Change 002e~0033 to random number
alias adbwait='adb wait-for-device'

alias ar_arm='~/gccarm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/bin/ar'
alias as_arm='~/gccarm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/bin/as'
alias ld_arm='~/gccarm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/bin/ld'
alias am_arm='~/gccarm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/bin/nm'
alias objcopy_arm='~/gccarm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/bin/objcopy'
alias objdump_arm='~/gccarm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/bin/objdump'
alias ranlib_arm='~/gccarm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/bin/ranlib'
alias readelf_arm='~/gccarm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/bin/readelf'
alias strip_arm='~/gccarm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/bin/strip'
alias ose_make_config='./config.sh -A arm -P ehl_ose_fw -T toolchain_arm_gcc.cmake'
alias cdace='cd ~/ace/cavs_fw/FW'

mkcd() { mkdir -p "$1"; cd "$1"; }
cls() { cd "$1"; ls; }
mkscript() { 
    cmd=
    case "$1" in
        *.sh) cmd="#!/bin/bash" ;;
        *.py) cmd="#!/usr/bin/python" ;;
        *) cmd="unkown"
    esac
    if [ $cmd == "unkown" ]; then
        echo "Not support .$(echo $1 | cut -d. -f2) file"
    else
        touch "$1"
        echo $cmd > "$1"
        chmod +x "$1"
        vim "$1"
    fi
}
ggrep() {
    git grep --break --heading $@
}

installAll() {
    [ $# != 1 ] && {
        echo "usage: installAll path"
        return
    }
    PWD=$(pwd)
    cd $1 || return
    for i in $(ls *.apk); do
        echo "Installing $i..."
        adb wait-for-device && adb install $i;
    done
    cd $PWD
}
and() {
    DIR=$(pwd)
    while true
    do
        if [ -d ".repo" ]; then
            source build/envsetup.sh
            break
        else
            if [ $(pwd) = $HOME ] || [ $(pwd) = "/" ]; then
                echo "Not in an Android repo tree."
                break
            fi
            cd ..
        fi
    done
    cd $DIR
}
cscope-android() {
    DIR=$(pwd)
    find $DIR/libcore $DIR/frameworks $DIR/hardware $DIR/packages $DIR/vendor \
    -type l -prune -o \
    -name "*.[chxsS]" -print -o \
    -name "*.cpp" -print -o \
    -name "*.java" -print > $DIR/cscope.files

    cscope -bq
    #cscope -Rbq
}
cscope-common() {
    DIR=$(pwd)

    find $DIR -type l -prune -o \
    -name "*.[chxsS]" -print -o \
    -name "*.cpp" -print -o \
    -name "*.cc" -print -o \
    -name "*.asm" -print -o \
    -name "*.dts" -print -o \
    -name "*.dtsi" -print -o \
    -name "*.java" -print > $DIR/cscope.files

    cscope -bq
    #cscope -Rbq
}
cscope-zephyr() {
    DIR=$(pwd)

    find $DIR -type l -prune -o \
    -path "$DIR/arch/arc" -prune -o \
    -path "$DIR/arch/nios2" -prune -o \
    -path "$DIR/arch/riscv32" -prune -o \
    -path "$DIR/arch/xtensa" -prune -o \
    -path "$DIR/boards/arc" -prune -o \
    -path "$DIR/boards/nios2" -prune -o \
    -path "$DIR/boards/riscv32" -prune -o \
    -path "$DIR/boards/xtensa" -prune -o \
    -path "$DIR/include/arch/arc" -prune -o \
    -path "$DIR/include/arch/nios2" -prune -o \
    -path "$DIR/include/arch/riscv32" -prune -o \
    -path "$DIR/include/arch/xtensa" -prune -o \
    -name "*.[chxsS]" -print -o \
    -name "*.cpp" -print -o \
    -name "*.asm" -print -o \
    -name "*.dts" -print -o \
    -name "*.dtsi" -print -o \
    -name "*.java" -print > $DIR/cscope.files

    cscope -bq
    #cscope -Rbq
}

cscope-linux-kernel-study() {
    KERNEL=$(pwd)
    rm -rf cscope*

    find $KERNEL \
    -path "$KERNEL/arch/*" ! -path "$KERNEL/arch/*86*" ! -path "$KERNEL/arch/arm" -prune -o \
    -path "$KERNEL/include/asm*" ! -path "$KERNEL/include/asm-*86*" ! -path "$KERNEL/include/asm-arm" -prune -o \
    -path "$KERNEL/Documentation" -prune -o \
    -path "$KERNEL/tools" -prune -o \
    -path "$KERNEL/scripts" -prune -o \
    -path "$KERNEL/leo" -prune -o \
    -path "$KERNEL/drivers" -prune -o \
    -path "$KERNEL/sound" -prune -o \
    -type l -prune -o \
    -name ".*" -prune -o \
    -name "*.[chxsS]" -print > $KERNEL/cscope.files

    find $KERNEL/drivers/base $KERNEL/drivers/hid/intel-ish-hid $KERNEL/drivers/pci \
    -type l -prune -o \
    -name ".*" -prune -o \
    -name "*.[chxsS]" -print >> $KERNEL/cscope.files

    cscope -b
    #cscope -Rbq
}
build_module() {
    KERNELDIR=/home/lyan7/r41-stable/hardware/intel/linux-2.6
    make -C $KERNELDIR M=$(pwd) modules
}
codeviz() {
    #make CC=/usr/local/gccgraph/bin/gcc
    #genfull

    gengraph -f ${1} -d 3 output-font=Arial --output-layout LR --plain
    dot -GPAPERSIZE=letter -Gsize=8,10.5 -Gcenter=1 -Gmargin=.25 -Tps -o ${1}.ps < ${1}.plain
    ps2pdf ${1}.ps
    rm ${1}.{ps,plain}


    #Combining pdf pages into one file
    #Ghostscript can combine separate PDF pages into a single file:
    #gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=gpxe-call-graphs.pdf gpxe-api-call-graphs/*.pdf
}
function exit_on_failure() {
    echo "$@"
    if [ $0 -e "adb" ]; then
        echo "adb wait-for-device"
        adb wait-for-device
    fi
    $@
    if [ $? -ne 0 ]; then
        echo "$@ failed"
    fi
}
get_code() {
    repo init -u git://android.intel.com/manifest -b platform/android/main -m android-main
    repo sync -c -j 5
    source build/envsetup.sh
    lunch redhookbay-eng
    make flashfiles -j 24
}
idb() {
    mysql -D $1 -u root -pleoautoscan < $2
}
start_synergy() {
    [ $# -eq 0 ] && {
        _name=$(basename $0)
        echo "Usage: $_name 10.239.205.38:80"
        return
    }
    ps aux | grep /usr/bin/synergyc | tr -s ' ' | while read line 
    do 
        pid=$(echo $line | cut -d' ' -f2)
        cmd=$(echo $line | cut -d' ' -f11)
        if [ $cmd != "/usr/bin/synergyc" ];then
            continue
        fi
        kill $pid
    done
    /usr/bin/synergyc $1
}

ishsetconfig() {
    ! [ -f "config.xml" ] && {
        echo "no config.xml"
        return
    }
    adb wait-for-devices && adb root && adb wait-for-devices && adb push config.xml /sdcard/
    adb shell 'cd /sdcard/ && TraceConfigTool setconfig config.xml && TraceConfigTool getconfig'
}

ishgetconfig() {
    adb wait-for-devices && adb root && adb wait-for-devices
    adb shell 'TraceConfigTool getconfig' 
}

ishversion() {
    adb wait-for-devices && adb root && adb wait-for-devices
    adb shell 'SMHITool_android -version'
}

ishgetlog() {
    adb wait-for-devices && adb root && adb wait-for-devices
    adb shell 'cd /sdcard/; ISSTraceCollector HECI TraceCatalog.xml TraceComponents.xml log.txt && exit'
    adb pull /sdcard/log.txt
}

function adbshell() {
    if [ $# -eq 0 ]; then
        echo "usage: adbshell command"
        return
    fi
    while true; do
        adb wait-for-device && adb root
        sleep 3
        adb wait-for-device
        adb shell $@
    done
}
function adblogcat() {
    while true; do
        adb wait-for-device && adb root
        sleep 3
        adb wait-for-device
        adb logcat $@
    done
}
mydiff() {
    GB=gb-r2
    ICS=ics
    is_ics=0
    buddy_file=

    PWD=$(pwd)
    file_dir=$(dirname $1)
    cd $file_dir
    file_path=$(pwd)/$(basename $1)
    if [ ! -f $file_path ]; then
        echo "$file_path not exists"
        exit
    fi
    cd $PWD

    if $(echo $file_path | grep -q $GB); then
        buddy_file=$(echo $file_path | sed -e 's/gb-r2/ics/')
    elif $(echo $file_path | grep -q $ICS); then
        buddy_file=$(echo $file_path | sed -e 's/ics/gb-r2/')
    else
        echo "Not in GB or ICS"
        exit
    fi

    if [ ! -f $buddy_file ]; then
        echo "$buddy_file not exists"
        exit
    fi

    if [ "$(diff $file_path $buddy_file)" = "" ]; then
        echo "No difference between these two files"
    else
        vimdiff $file_path $buddy_file
        #diff $file_path $buddy_file > mydiff_tmp.diff
    fi
}

screencap() {
    adb shell "cd /data/; screencap -p a.png"
}

zephyr_env() {
    cd ~/ose/ose-dev-code-base/modules/rtos/ose_zephyr/
    source zephyr-env.sh
    cd -
}

vit() {
    if [ -e "$1" ]; then
            vim $1 
            exit
    fi

    files=()
    files_name=`find . -name "$1" | sed -e "/.*.o$/d"`

    i=0
    for file in $files_name
    do
            files[$i]=$file
            echo "$i) $file"
            #let "i = $i + 1"
            i=`expr $i + 1`
    done

    if [ $i -eq 1 ]; then
            vim ${files[0]}
    elif [ $i -eq 0 ]; then
            echo "Can't find file: $1!"
	    return
    else
            echo -n "which one: "
            read a
            vim ${files[$a]} 
    fi
}
check_patch() {
    PWD=$(pwd)
    LNX_DIR="/home/leo/linux_torvalds/linux"
    ! [ -d $LNX_DIR ] && {
        echo "Linux source code folder $LNX_DIR is not exist"
        return
    }
    ! [ $# -eq 1 ] && {
        echo "Usage: check_patch patch_file"
        return
    }
    cd $LNX_DIR
    scripts/checkpatch.pl $1
    cd $PWD
}
# rm exec but not script files */
ls_exec_files() {
    find . -perm /a+x -type f -not -name "*.*" | xargs ls -l
}
rm_exec_files() {
    find . -perm /a+x -type f -not -name "*.*" | xargs rm
}


alias sshhz='ssh hzheng3@shbuild666.sh.intel.com' # pwd: 12345678
alias ssh5='ssh lyan7@shbuild555.sh.intel.com'
alias sshzl='ssh lzha106@shbuild666.sh.intel.com'
#alias sshoc6='ssh lyan7@bjsxbeo013.bj.intel.com'
alias sshoc6='ssh lyan7@shsxopticm019.sh.intel.com'
alias sshoc6_jialei='ssh jialeifx@shsxopticm016' # pwd: password=1
alias sshfs555='sshfs shbuild lyan7@shbuild555.sh.intel.com:/home/lyan7'
alias repoinit_main='repo init -u git://android.intel.com/manifest -b platform/android/main -m android-main'
alias synergyc_leo='synergyc lyan7-mobl.ccr.corp.intel.com:80'
alias beeinit_sofia='bee init -u ssh://opticm6/manifest -b sofia_3g-nonIMC/development'
alias runcts_testHoloThemes='run cts -c android.theme.cts.ThemeHostTest -m testHoloThemes'
#alias dns_flush='sudo /etc/init.d/dns-clean restart'
#lookup dns cache: nslookup hostnamae
alias dns_flush='sudo /etc/init.d/networking force-reload'
alias sdcard_flush='adb shell am broadcast -a android.intent.action.MEDIA_MOUNTED -d file:///mnt/sdcard/'

chenyan_server=10.239.154.68
alias smbmount_SOFIA_tester="sudo smbmount //$chenyan_server/SoFIA_tester ~/smbmount -o username=tester,password=abcd1234"
alias smbmount_SOFIA_image="sudo smbmount //$chenyan_server/SoFIA_image ~/smbmount -o username=usershare,password=abcd1234"
# Can upload files to this folder(sudo cp -r ~/xxxx smbmount/2015/):
alias smbmount_SOFIA_testresult="sudo smbmount //$chenyan_server/SoFIA_testresult_upload ~/smbmount -o username=tester,password=abcd1234"
alias smbmount_chenyan="sudo smbmount //$chenyan_server -o username=lyan7"
alias cdgo='cd /home/leo/study/go/workspace'

alias zbuild='zephyr_env && rm -rf * && cmake -DBOARD=intel_ose ../../ && m'
alias cdishlinuxdriver='cd ~/linux_torvalds/linux/drivers/hid/intel-ish-hid/ipc'
alias gpush='git push origin HEAD:refs/for/master'
alias cdzephyr='cd ~/ose/ose-dev-code-base/modules/rtos/ose_zephyr'

#alias cdlua='cd /home/data/leo/lua'
kernelgraph() { lsmod | perl -e 'print "digraph \"lsmod\" {";<>;while(<>){@_=split/\s+/; print "\"$_[0]\" -> \"$_\"\n" for split/,/,$_[3]}print "}"' | dot -Tpng | display -;}

#. ~/.git-completion.bash

#alias la='ls -A'
#alias l='ls -CF'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ]; then
#    . /etc/bash_completion
#fi
#PATH=$PATH:/opt/intel/composerxe-2011/bin:/opt/intel/composerxe-2011.0.062/bin/ia32
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/lib/ia32

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

#cd ~/old_ose/ose-dev-code-base/modules/bsp/bsp_isesi_source/
#cd ~/snow_os

#cd ~/ose/ose-dev-code-base/modules/rtos/ose_zephyr
#cd ~/ose/ose-dev-code-base/modules/bsp/bsp_isesi_source/
#cd ~/ose/ose-dev-code-base/modules/bootloader/bringup
#cd ~/ace/cavs_fw/FW
cd ~/study/6linux-2.6.24/
